// Generated from CSharpParser.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var CSharpParserListener = require('./CSharpParserListener').CSharpParserListener;
var grammarFileName = "CSharpParser.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00c2\u15cc\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004",
    "\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t",
    "\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004",
    "\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004\u00f9\t",
    "\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t\u00fc\u0004",
    "\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004\u0100\t",
    "\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t\u0103\u0004",
    "\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004\u0107\t",
    "\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t\u010a\u0004",
    "\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004\u010e\t",
    "\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t\u0111\u0004",
    "\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004\u0115\t",
    "\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t\u0118\u0004",
    "\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004\u011c\t",
    "\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t\u011f\u0004",
    "\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004\u0123\t",
    "\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t\u0126\u0004",
    "\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004\u012a\t",
    "\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t\u012d\u0004",
    "\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004\u0131\t",
    "\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t\u0134\u0004",
    "\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004\u0138\t",
    "\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t\u013b\u0004",
    "\u013c\t\u013c\u0004\u013d\t\u013d\u0004\u013e\t\u013e\u0004\u013f\t",
    "\u013f\u0004\u0140\t\u0140\u0004\u0141\t\u0141\u0004\u0142\t\u0142\u0004",
    "\u0143\t\u0143\u0004\u0144\t\u0144\u0004\u0145\t\u0145\u0004\u0146\t",
    "\u0146\u0004\u0147\t\u0147\u0004\u0148\t\u0148\u0004\u0149\t\u0149\u0004",
    "\u014a\t\u014a\u0004\u014b\t\u014b\u0004\u014c\t\u014c\u0004\u014d\t",
    "\u014d\u0004\u014e\t\u014e\u0004\u014f\t\u014f\u0004\u0150\t\u0150\u0004",
    "\u0151\t\u0151\u0004\u0152\t\u0152\u0004\u0153\t\u0153\u0004\u0154\t",
    "\u0154\u0004\u0155\t\u0155\u0004\u0156\t\u0156\u0004\u0157\t\u0157\u0004",
    "\u0158\t\u0158\u0004\u0159\t\u0159\u0004\u015a\t\u015a\u0004\u015b\t",
    "\u015b\u0004\u015c\t\u015c\u0004\u015d\t\u015d\u0004\u015e\t\u015e\u0004",
    "\u015f\t\u015f\u0004\u0160\t\u0160\u0004\u0161\t\u0161\u0004\u0162\t",
    "\u0162\u0004\u0163\t\u0163\u0004\u0164\t\u0164\u0004\u0165\t\u0165\u0004",
    "\u0166\t\u0166\u0004\u0167\t\u0167\u0004\u0168\t\u0168\u0004\u0169\t",
    "\u0169\u0004\u016a\t\u016a\u0004\u016b\t\u016b\u0004\u016c\t\u016c\u0004",
    "\u016d\t\u016d\u0004\u016e\t\u016e\u0004\u016f\t\u016f\u0004\u0170\t",
    "\u0170\u0004\u0171\t\u0171\u0004\u0172\t\u0172\u0004\u0173\t\u0173\u0004",
    "\u0174\t\u0174\u0004\u0175\t\u0175\u0004\u0176\t\u0176\u0004\u0177\t",
    "\u0177\u0004\u0178\t\u0178\u0004\u0179\t\u0179\u0004\u017a\t\u017a\u0004",
    "\u017b\t\u017b\u0004\u017c\t\u017c\u0004\u017d\t\u017d\u0004\u017e\t",
    "\u017e\u0004\u017f\t\u017f\u0004\u0180\t\u0180\u0004\u0181\t\u0181\u0004",
    "\u0182\t\u0182\u0004\u0183\t\u0183\u0004\u0184\t\u0184\u0004\u0185\t",
    "\u0185\u0004\u0186\t\u0186\u0004\u0187\t\u0187\u0004\u0188\t\u0188\u0004",
    "\u0189\t\u0189\u0004\u018a\t\u018a\u0004\u018b\t\u018b\u0004\u018c\t",
    "\u018c\u0004\u018d\t\u018d\u0004\u018e\t\u018e\u0004\u018f\t\u018f\u0004",
    "\u0190\t\u0190\u0004\u0191\t\u0191\u0004\u0192\t\u0192\u0004\u0193\t",
    "\u0193\u0004\u0194\t\u0194\u0004\u0195\t\u0195\u0003\u0002\u0005\u0002",
    "\u032c\n\u0002\u0003\u0002\u0005\u0002\u032f\n\u0002\u0003\u0002\u0005",
    "\u0002\u0332\n\u0002\u0003\u0002\u0007\u0002\u0335\n\u0002\f\u0002\u000e",
    "\u0002\u0338\u000b\u0002\u0003\u0002\u0005\u0002\u033b\n\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0005\u0003\u0341\n\u0003",
    "\u0003\u0003\u0005\u0003\u0344\n\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0005\u0003\u0349\n\u0003\u0007\u0003\u034b\n\u0003\f\u0003\u000e",
    "\u0003\u034e\u000b\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0007\u0004\u0354\n\u0004\f\u0004\u000e\u0004\u0357\u000b\u0004\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u035d\n\u0005",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u0361\n\u0006\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0005\u0007\u0366\n\u0007\u0003\b\u0003\b\u0003\t",
    "\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u0370\n\n\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0376\n\u000b\f\u000b",
    "\u000e\u000b\u0379\u000b\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003",
    "\f\u0003\f\u0007\f\u0380\n\f\f\f\u000e\f\u0383\u000b\f\u0003\r\u0003",
    "\r\u0003\r\u0005\r\u0388\n\r\u0003\r\u0005\r\u038b\n\r\u0003\r\u0003",
    "\r\u0005\r\u038f\n\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u0395\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u039a",
    "\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u03ab\n",
    "\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u03b3\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u03b8\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0007",
    "\u0014\u03bd\n\u0014\f\u0014\u000e\u0014\u03c0\u000b\u0014\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0007\u0015\u03c5\n\u0015\f\u0015\u000e\u0015",
    "\u03c8\u000b\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u03cd",
    "\n\u0016\f\u0016\u000e\u0016\u03d0\u000b\u0016\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0007\u0017\u03d5\n\u0017\f\u0017\u000e\u0017\u03d8\u000b",
    "\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u03dd\n\u0018",
    "\f\u0018\u000e\u0018\u03e0\u000b\u0018\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0007\u0019\u03e5\n\u0019\f\u0019\u000e\u0019\u03e8\u000b\u0019",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0007\u001a\u03f1\n\u001a\f\u001a\u000e\u001a\u03f4\u000b",
    "\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u03f9\n\u001b",
    "\u0003\u001b\u0007\u001b\u03fc\n\u001b\f\u001b\u000e\u001b\u03ff\u000b",
    "\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u0404\n\u001c",
    "\f\u001c\u000e\u001c\u0407\u000b\u001c\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0007\u001d\u040c\n\u001d\f\u001d\u000e\u001d\u040f\u000b\u001d",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u0429\n\u001e\u0003\u001f\u0003\u001f\u0007\u001f\u042d",
    "\n\u001f\f\u001f\u000e\u001f\u0430\u000b\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0438\n",
    "\u001f\u0003\u001f\u0007\u001f\u043b\n\u001f\f\u001f\u000e\u001f\u043e",
    "\u000b\u001f\u0007\u001f\u0440\n\u001f\f\u001f\u000e\u001f\u0443\u000b",
    "\u001f\u0003 \u0003 \u0003 \u0005 \u0448\n \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u0456",
    "\n \u0003 \u0003 \u0003 \u0003 \u0005 \u045c\n \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0007 \u0466\n \f \u000e \u0469",
    "\u000b \u0003 \u0005 \u046c\n \u0003 \u0006 \u046f\n \r \u000e \u0470",
    "\u0003 \u0003 \u0005 \u0475\n \u0003 \u0003 \u0003 \u0003 \u0005 \u047b",
    "\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u0482\n \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u0495\n \u0003 \u0003 \u0003",
    " \u0005 \u049a\n \u0003 \u0005 \u049d\n \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0007 \u04aa\n \f",
    " \u000e \u04ad\u000b \u0003 \u0003 \u0003 \u0005 \u04b2\n \u0003!\u0005",
    "!\u04b5\n!\u0003!\u0003!\u0003!\u0005!\u04ba\n!\u0003\"\u0005\"\u04bd",
    "\n\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u04c3\n\"\f\"\u000e\"\u04c6",
    "\u000b\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0005#\u04cd\n#\u0003",
    "#\u0003#\u0003$\u0003$\u0003%\u0003%\u0003%\u0007%\u04d6\n%\f%\u000e",
    "%\u04d9\u000b%\u0003&\u0003&\u0005&\u04dd\n&\u0003\'\u0003\'\u0003\'",
    "\u0005\'\u04e2\n\'\u0005\'\u04e4\n\'\u0003\'\u0003\'\u0003(\u0003(\u0003",
    "(\u0007(\u04eb\n(\f(\u000e(\u04ee\u000b(\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0005)\u04f5\n)\u0003)\u0003)\u0003)\u0003*\u0003*\u0005*\u04fc",
    "\n*\u0003+\u0003+\u0003+\u0003+\u0007+\u0502\n+\f+\u000e+\u0505\u000b",
    "+\u0003+\u0005+\u0508\n+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0005,\u0511\n,\u0003-\u0003-\u0003-\u0005-\u0516\n-\u0005-\u0518",
    "\n-\u0003-\u0003-\u0003.\u0003.\u0003.\u0007.\u051f\n.\f.\u000e.\u0522",
    "\u000b.\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u0529\n/\u00030\u0003",
    "0\u00050\u052d\n0\u00030\u00030\u00030\u00050\u0532\n0\u00050\u0534",
    "\n0\u00030\u00030\u00030\u00050\u0539\n0\u00070\u053b\n0\f0\u000e0\u053e",
    "\u000b0\u00031\u00031\u00071\u0542\n1\f1\u000e1\u0545\u000b1\u00031",
    "\u00031\u00032\u00032\u00032\u00072\u054c\n2\f2\u000e2\u054f\u000b2",
    "\u00032\u00052\u0552\n2\u00033\u00053\u0555\n3\u00033\u00033\u00033",
    "\u00033\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00054\u0566\n4\u00035\u00035\u00035\u00075\u056b\n",
    "5\f5\u000e5\u056e\u000b5\u00036\u00056\u0571\n6\u00036\u00036\u0003",
    "6\u00037\u00037\u00037\u00077\u0579\n7\f7\u000e7\u057c\u000b7\u0003",
    "8\u00038\u00058\u0580\n8\u00039\u00039\u00039\u0003:\u0003:\u0005:\u0587",
    "\n:\u0003:\u0003:\u0003:\u0003:\u0003;\u0007;\u058e\n;\f;\u000e;\u0591",
    "\u000b;\u0003;\u0003;\u0005;\u0595\n;\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0005<\u059c\n<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003",
    ">\u0003?\u0003?\u0005?\u05a8\n?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0005?\u05b3\n?\u0003@\u0003@\u0003@\u0003@\u0007",
    "@\u05b9\n@\f@\u000e@\u05bc\u000b@\u0003A\u0003A\u0005A\u05c0\nA\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u05c9\nB\u0003C\u0003",
    "C\u0003C\u0003C\u0003D\u0003D\u0003D\u0005D\u05d2\nD\u0003D\u0003D\u0003",
    "D\u0005D\u05d7\nD\u0003E\u0003E\u0003E\u0003E\u0003F\u0003F\u0005F\u05df",
    "\nF\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0005G\u05ec\nG\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0007",
    "G\u05f4\nG\fG\u000eG\u05f7\u000bG\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0005G\u060c\nG\u0003G\u0003G\u0005G\u0610",
    "\nG\u0003G\u0003G\u0005G\u0614\nG\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0005G\u062a\nG\u0003G\u0003G\u0003",
    "G\u0005G\u062f\nG\u0003G\u0003G\u0003G\u0005G\u0634\nG\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0005G\u063b\nG\u0003G\u0005G\u063e\nG\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0005",
    "G\u0654\nG\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0005G\u0660\nG\u0003H\u0003H\u0005H\u0664\nH\u0003H\u0003",
    "H\u0003I\u0003I\u0003I\u0003I\u0007I\u066c\nI\fI\u000eI\u066f\u000b",
    "I\u0003J\u0003J\u0005J\u0673\nJ\u0003K\u0003K\u0003K\u0005K\u0678\n",
    "K\u0003L\u0003L\u0003L\u0005L\u067d\nL\u0003M\u0003M\u0003M\u0003M\u0003",
    "N\u0003N\u0005N\u0685\nN\u0003O\u0006O\u0688\nO\rO\u000eO\u0689\u0003",
    "O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0005P\u0694\nP\u0003",
    "Q\u0006Q\u0697\nQ\rQ\u000eQ\u0698\u0003R\u0003R\u0003R\u0003R\u0007",
    "R\u069f\nR\fR\u000eR\u06a2\u000bR\u0005R\u06a4\nR\u0003S\u0003S\u0003",
    "S\u0007S\u06a9\nS\fS\u000eS\u06ac\u000bS\u0003T\u0003T\u0007T\u06b0",
    "\nT\fT\u000eT\u06b3\u000bT\u0003T\u0005T\u06b6\nT\u0003T\u0005T\u06b9",
    "\nT\u0003U\u0003U\u0003U\u0003U\u0005U\u06bf\nU\u0003U\u0003U\u0005",
    "U\u06c3\nU\u0003U\u0003U\u0003V\u0003V\u0005V\u06c9\nV\u0003V\u0003",
    "V\u0003W\u0003W\u0003W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003Y\u0003",
    "Y\u0005Y\u06d7\nY\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u06dd\nZ\u0003",
    "[\u0003[\u0003[\u0007[\u06e2\n[\f[\u000e[\u06e5\u000b[\u0003\\\u0003",
    "\\\u0005\\\u06e9\n\\\u0003\\\u0005\\\u06ec\n\\\u0003\\\u0005\\\u06ef",
    "\n\\\u0003\\\u0003\\\u0003]\u0006]\u06f4\n]\r]\u000e]\u06f5\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003_\u0006_\u06fe\n_\r_\u000e_\u06ff\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0005`\u0711\n`\u0003a\u0006a\u0714\n",
    "a\ra\u000ea\u0715\u0003b\u0003b\u0005b\u071a\nb\u0003c\u0005c\u071d",
    "\nc\u0003c\u0005c\u0720\nc\u0003c\u0003c\u0003c\u0003c\u0003c\u0005",
    "c\u0727\nc\u0003d\u0003d\u0003d\u0003d\u0005d\u072d\nd\u0003e\u0003",
    "e\u0003e\u0003e\u0007e\u0733\ne\fe\u000ee\u0736\u000be\u0003e\u0003",
    "e\u0003f\u0005f\u073b\nf\u0003f\u0003f\u0003g\u0003g\u0003g\u0003g\u0007",
    "g\u0743\ng\fg\u000eg\u0746\u000bg\u0003h\u0003h\u0003h\u0007h\u074b",
    "\nh\fh\u000eh\u074e\u000bh\u0003i\u0006i\u0751\ni\ri\u000ei\u0752\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003k\u0003k\u0003k\u0003k\u0005k\u075e",
    "\nk\u0003k\u0003k\u0005k\u0762\nk\u0005k\u0764\nk\u0003l\u0003l\u0003",
    "l\u0005l\u0769\nl\u0003m\u0003m\u0003m\u0007m\u076e\nm\fm\u000em\u0771",
    "\u000bm\u0003n\u0003n\u0003n\u0003n\u0003o\u0003o\u0005o\u0779\no\u0003",
    "o\u0003o\u0003p\u0006p\u077e\np\rp\u000ep\u077f\u0003q\u0005q\u0783",
    "\nq\u0003q\u0005q\u0786\nq\u0003q\u0003q\u0005q\u078a\nq\u0003r\u0006",
    "r\u078d\nr\rr\u000er\u078e\u0003s\u0003s\u0003t\u0003t\u0003t\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0003t\u0005t\u079c\nt\u0003t\u0003t\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0003t\u0005t\u07a6\nt\u0003u\u0003u\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0005u\u07b2\nu\u0003",
    "v\u0003v\u0003v\u0007v\u07b7\nv\fv\u000ev\u07ba\u000bv\u0003w\u0003",
    "w\u0003w\u0003w\u0003x\u0003x\u0003x\u0007x\u07c3\nx\fx\u000ex\u07c6",
    "\u000bx\u0003y\u0003y\u0003y\u0005y\u07cb\ny\u0003z\u0003z\u0005z\u07cf",
    "\nz\u0003{\u0003{\u0005{\u07d3\n{\u0003|\u0003|\u0003}\u0003}\u0005",
    "}\u07d9\n}\u0003~\u0003~\u0003~\u0003~\u0005~\u07df\n~\u0005~\u07e1",
    "\n~\u0003\u007f\u0003\u007f\u0003\u007f\u0007\u007f\u07e6\n\u007f\f",
    "\u007f\u000e\u007f\u07e9\u000b\u007f\u0003\u0080\u0005\u0080\u07ec\n",
    "\u0080\u0003\u0080\u0005\u0080\u07ef\n\u0080\u0003\u0080\u0003\u0080",
    "\u0005\u0080\u07f3\n\u0080\u0003\u0081\u0003\u0081\u0003\u0082\u0005",
    "\u0082\u07f8\n\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0003\u0083\u0005\u0083\u07ff\n\u0083\u0003\u0083\u0005\u0083\u0802",
    "\n\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u0807\n\u0083",
    "\u0003\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u080c\n\u0083\u0005",
    "\u0083\u080e\n\u0083\u0003\u0084\u0005\u0084\u0811\n\u0084\u0003\u0084",
    "\u0005\u0084\u0814\n\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003",
    "\u0085\u0005\u0085\u081a\n\u0085\u0003\u0085\u0005\u0085\u081d\n\u0085",
    "\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0086\u0003\u0086\u0003\u0086",
    "\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0005\u0086\u0829\n",
    "\u0086\u0003\u0087\u0003\u0087\u0005\u0087\u082d\n\u0087\u0003\u0088",
    "\u0005\u0088\u0830\n\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003",
    "\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0005\u0088\u083a",
    "\n\u0088\u0003\u0089\u0005\u0089\u083d\n\u0089\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0003\u008a\u0005\u008a\u0843\n\u008a\u0003\u008a\u0003",
    "\u008a\u0003\u008a\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0005",
    "\u008b\u085e\n\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008d\u0003\u008d\u0003\u008d",
    "\u0003\u008d\u0005\u008d\u086b\n\u008d\u0003\u008d\u0003\u008d\u0003",
    "\u008e\u0003\u008e\u0005\u008e\u0871\n\u008e\u0003\u008f\u0003\u008f",
    "\u0003\u008f\u0003\u0090\u0003\u0090\u0007\u0090\u0878\n\u0090\f\u0090",
    "\u000e\u0090\u087b\u000b\u0090\u0003\u0090\u0003\u0090\u0003\u0091\u0005",
    "\u0091\u0880\n\u0091\u0003\u0091\u0005\u0091\u0883\n\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0006\u0091\u0889\n\u0091\r\u0091",
    "\u000e\u0091\u088a\u0003\u0091\u0003\u0091\u0005\u0091\u088f\n\u0091",
    "\u0003\u0092\u0003\u0092\u0007\u0092\u0893\n\u0092\f\u0092\u000e\u0092",
    "\u0896\u000b\u0092\u0003\u0092\u0006\u0092\u0899\n\u0092\r\u0092\u000e",
    "\u0092\u089a\u0003\u0093\u0003\u0093\u0007\u0093\u089f\n\u0093\f\u0093",
    "\u000e\u0093\u08a2\u000b\u0093\u0003\u0093\u0003\u0093\u0003\u0094\u0003",
    "\u0094\u0003\u0094\u0003\u0094\u0007\u0094\u08aa\n\u0094\f\u0094\u000e",
    "\u0094\u08ad\u000b\u0094\u0003\u0094\u0005\u0094\u08b0\n\u0094\u0005",
    "\u0094\u08b2\n\u0094\u0003\u0094\u0003\u0094\u0003\u0095\u0003\u0095",
    "\u0003\u0095\u0003\u0095\u0007\u0095\u08ba\n\u0095\f\u0095\u000e\u0095",
    "\u08bd\u000b\u0095\u0003\u0095\u0003\u0095\u0003\u0096\u0005\u0096\u08c2",
    "\n\u0096\u0003\u0096\u0005\u0096\u08c5\n\u0096\u0003\u0096\u0003\u0096",
    "\u0003\u0097\u0003\u0097\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0099",
    "\u0003\u0099\u0007\u0099\u08d0\n\u0099\f\u0099\u000e\u0099\u08d3\u000b",
    "\u0099\u0003\u0099\u0003\u0099\u0003\u009a\u0005\u009a\u08d8\n\u009a",
    "\u0003\u009a\u0005\u009a\u08db\n\u009a\u0003\u009a\u0005\u009a\u08de",
    "\n\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u08e3\n\u009a",
    "\u0003\u009a\u0003\u009a\u0005\u009a\u08e7\n\u009a\u0003\u009a\u0003",
    "\u009a\u0005\u009a\u08eb\n\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0005\u009a\u08fc\n\u009a\u0003\u009a\u0005\u009a\u08ff\n\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u0904\n\u009a\u0003\u009a",
    "\u0003\u009a\u0005\u009a\u0908\n\u009a\u0003\u009a\u0003\u009a\u0005",
    "\u009a\u090c\n\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u0915\n\u009a\u0003",
    "\u009b\u0005\u009b\u0918\n\u009b\u0003\u009b\u0003\u009b\u0003\u009b",
    "\u0005\u009b\u091d\n\u009b\u0003\u009b\u0003\u009b\u0005\u009b\u0921",
    "\n\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0005\u009b\u0926\n\u009b",
    "\u0003\u009b\u0003\u009b\u0005\u009b\u092a\n\u009b\u0005\u009b\u092c",
    "\n\u009b\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009d\u0003\u009d",
    "\u0003\u009d\u0003\u009d\u0007\u009d\u0935\n\u009d\f\u009d\u000e\u009d",
    "\u0938\u000b\u009d\u0003\u009d\u0005\u009d\u093b\n\u009d\u0005\u009d",
    "\u093d\n\u009d\u0003\u009d\u0003\u009d\u0003\u009e\u0005\u009e\u0942",
    "\n\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u0947\n\u009e",
    "\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0005\u009f",
    "\u094e\n\u009f\u0003\u009f\u0003\u009f\u0003\u00a0\u0003\u00a0\u0005",
    "\u00a0\u0954\n\u00a0\u0003\u00a1\u0006\u00a1\u0957\n\u00a1\r\u00a1\u000e",
    "\u00a1\u0958\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2",
    "\u095f\n\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u0963\n\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a3\u0003\u00a3\u0005\u00a3\u0969\n\u00a3",
    "\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0007\u00a4\u096e\n\u00a4\f\u00a4",
    "\u000e\u00a4\u0971\u000b\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003",
    "\u00a5\u0003\u00a5\u0007\u00a5\u0978\n\u00a5\f\u00a5\u000e\u00a5\u097b",
    "\u000b\u00a5\u0005\u00a5\u097d\n\u00a5\u0003\u00a5\u0005\u00a5\u0980",
    "\n\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0005\u00a6\u0985\n\u00a6",
    "\u0003\u00a6\u0003\u00a6\u0003\u00a7\u0003\u00a7\u0005\u00a7\u098b\n",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0007\u00a7\u098f\n\u00a7\f\u00a7\u000e",
    "\u00a7\u0992\u000b\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7",
    "\u0005\u00a7\u0998\n\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0007",
    "\u00a8\u099d\n\u00a8\f\u00a8\u000e\u00a8\u09a0\u000b\u00a8\u0003\u00a9",
    "\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0005\u00aa\u09a7\n",
    "\u00aa\u0003\u00aa\u0003\u00aa\u0005\u00aa\u09ab\n\u00aa\u0003\u00ab",
    "\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac",
    "\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ad\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae",
    "\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00b0\u0003\u00b0",
    "\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0",
    "\u09cb\n\u00b0\u0003\u00b1\u0003\u00b1\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0005\u00b2\u09d3\n\u00b2\u0003\u00b3\u0003\u00b3",
    "\u0007\u00b3\u09d7\n\u00b3\f\u00b3\u000e\u00b3\u09da\u000b\u00b3\u0003",
    "\u00b3\u0003\u00b3\u0003\u00b4\u0003\u00b4\u0007\u00b4\u09e0\n\u00b4",
    "\f\u00b4\u000e\u00b4\u09e3\u000b\u00b4\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0005\u00b5\u09eb\n\u00b5",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u09f1\n",
    "\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0007\u00b7\u09f6\n\u00b7",
    "\f\u00b7\u000e\u00b7\u09f9\u000b\u00b7\u0003\u00b7\u0003\u00b7\u0006",
    "\u00b7\u09fd\n\u00b7\r\u00b7\u000e\u00b7\u09fe\u0005\u00b7\u0a01\n\u00b7",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9",
    "\u0a08\n\u00b9\u0003\u00b9\u0005\u00b9\u0a0b\n\u00b9\u0003\u00b9\u0005",
    "\u00b9\u0a0e\n\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u0a12\n\u00b9",
    "\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u0a17\n\u00ba\u0003",
    "\u00ba\u0005\u00ba\u0a1a\n\u00ba\u0003\u00ba\u0005\u00ba\u0a1d\n\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0005\u00ba\u0a21\n\u00ba\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0005\u00bb\u0a26\n\u00bb\u0003\u00bb\u0005\u00bb",
    "\u0a29\n\u00bb\u0003\u00bb\u0005\u00bb\u0a2c\n\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0005\u00bb\u0a30\n\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bc",
    "\u0005\u00bc\u0a35\n\u00bc\u0003\u00bc\u0003\u00bc\u0005\u00bc\u0a39",
    "\n\u00bc\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd",
    "\u0a3f\n\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u0a43\n\u00bd\u0003",
    "\u00bd\u0003\u00bd\u0005\u00bd\u0a47\n\u00bd\u0003\u00bd\u0003\u00bd",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0005\u00be\u0a55\n",
    "\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00c0\u0003\u00c0\u0003",
    "\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0005",
    "\u00c0\u0a62\n\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0",
    "\u0005\u00c0\u0a68\n\u00c0\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0005\u00c2\u0a7b\n\u00c2\u0003\u00c3\u0003\u00c3",
    "\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c4\u0003\u00c4",
    "\u0003\u00c4\u0005\u00c4\u0a86\n\u00c4\u0003\u00c4\u0003\u00c4\u0005",
    "\u00c4\u0a8a\n\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c5\u0003\u00c5",
    "\u0005\u00c5\u0a90\n\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0a94",
    "\n\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0a98\n\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0a9f\n",
    "\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0005",
    "\u00c6\u0aa6\n\u00c6\u0003\u00c6\u0005\u00c6\u0aa9\n\u00c6\u0003\u00c6",
    "\u0003\u00c6\u0007\u00c6\u0aad\n\u00c6\f\u00c6\u000e\u00c6\u0ab0\u000b",
    "\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003",
    "\u00c7\u0005\u00c7\u0ab8\n\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0ac0\n\u00c7\u0003",
    "\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0005\u00c8\u0ac6\n\u00c8",
    "\u0003\u00c9\u0003\u00c9\u0005\u00c9\u0aca\n\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0003\u00ca\u0003\u00ca\u0005\u00ca\u0ad0\n\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0005\u00ca\u0ad4\n\u00ca\u0003\u00cb\u0003\u00cb\u0003",
    "\u00cc\u0005\u00cc\u0ad9\n\u00cc\u0003\u00cc\u0005\u00cc\u0adc\n\u00cc",
    "\u0003\u00cc\u0005\u00cc\u0adf\n\u00cc\u0003\u00cc\u0007\u00cc\u0ae2",
    "\n\u00cc\f\u00cc\u000e\u00cc\u0ae5\u000b\u00cc\u0003\u00cc\u0005\u00cc",
    "\u0ae8\n\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cd\u0003\u00cd\u0005",
    "\u00cd\u0aee\n\u00cd\u0003\u00cd\u0005\u00cd\u0af1\n\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0003\u00cd\u0005\u00cd\u0af6\n\u00cd\u0007\u00cd\u0af8",
    "\n\u00cd\f\u00cd\u000e\u00cd\u0afb\u000b\u00cd\u0003\u00cd\u0003\u00cd",
    "\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0007\u00ce\u0b03\n",
    "\u00ce\f\u00ce\u000e\u00ce\u0b06\u000b\u00ce\u0003\u00ce\u0003\u00ce",
    "\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf",
    "\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u0b13\n\u00cf\u0003",
    "\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0\u0b1a",
    "\n\u00d0\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0005\u00d1\u0b24\n\u00d1\u0003",
    "\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003",
    "\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003",
    "\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0005",
    "\u00d2\u0b38\n\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3",
    "\u0005\u00d3\u0b3e\n\u00d3\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003",
    "\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0005",
    "\u00d4\u0b49\n\u00d4\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5",
    "\u0007\u00d5\u0b4f\n\u00d5\f\u00d5\u000e\u00d5\u0b52\u000b\u00d5\u0003",
    "\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0007",
    "\u00d6\u0b5a\n\u00d6\f\u00d6\u000e\u00d6\u0b5d\u000b\u00d6\u0003\u00d6",
    "\u0003\u00d6\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7\u0b64\n",
    "\u00d7\u0003\u00d7\u0005\u00d7\u0b67\n\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0005\u00d7\u0b6b\n\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0005",
    "\u00d8\u0b76\n\u00d8\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9",
    "\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0005\u00d9",
    "\u0b81\n\u00d9\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003",
    "\u00da\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003",
    "\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003",
    "\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003",
    "\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0005",
    "\u00db\u0b9f\n\u00db\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc",
    "\u0003\u00dc\u0003\u00dc\u0005\u00dc\u0ba7\n\u00dc\u0003\u00dc\u0003",
    "\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0005\u00dd\u0bae\n\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0003\u00de\u0003\u00de\u0003\u00de\u0007\u00de",
    "\u0bb5\n\u00de\f\u00de\u000e\u00de\u0bb8\u000b\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00df\u0003\u00df\u0003\u00df\u0007\u00df\u0bbf\n\u00df",
    "\f\u00df\u000e\u00df\u0bc2\u000b\u00df\u0003\u00df\u0003\u00df\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0007\u00e0\u0bc9\n\u00e0\f\u00e0\u000e",
    "\u00e0\u0bcc\u000b\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e1\u0003\u00e1",
    "\u0003\u00e1\u0007\u00e1\u0bd3\n\u00e1\f\u00e1\u000e\u00e1\u0bd6\u000b",
    "\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0007",
    "\u00e2\u0bdd\n\u00e2\f\u00e2\u000e\u00e2\u0be0\u000b\u00e2\u0003\u00e2",
    "\u0003\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0007\u00e3\u0be7\n",
    "\u00e3\f\u00e3\u000e\u00e3\u0bea\u000b\u00e3\u0003\u00e3\u0003\u00e3",
    "\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4",
    "\u0003\u00e4\u0007\u00e4\u0bf5\n\u00e4\f\u00e4\u000e\u00e4\u0bf8\u000b",
    "\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0005",
    "\u00e5\u0bff\n\u00e5\u0003\u00e5\u0007\u00e5\u0c02\n\u00e5\f\u00e5\u000e",
    "\u00e5\u0c05\u000b\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e6\u0003\u00e6",
    "\u0003\u00e6\u0007\u00e6\u0c0c\n\u00e6\f\u00e6\u000e\u00e6\u0c0f\u000b",
    "\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0007",
    "\u00e7\u0c16\n\u00e7\f\u00e7\u000e\u00e7\u0c19\u000b\u00e7\u0003\u00e7",
    "\u0003\u00e7\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0005\u00e8\u0c4a\n",
    "\u00e8\u0003\u00e9\u0003\u00e9\u0007\u00e9\u0c4e\n\u00e9\f\u00e9\u000e",
    "\u00e9\u0c51\u000b\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9",
    "\u0003\u00e9\u0003\u00e9\u0005\u00e9\u0c59\n\u00e9\u0003\u00e9\u0007",
    "\u00e9\u0c5c\n\u00e9\f\u00e9\u000e\u00e9\u0c5f\u000b\u00e9\u0007\u00e9",
    "\u0c61\n\u00e9\f\u00e9\u000e\u00e9\u0c64\u000b\u00e9\u0003\u00e9\u0003",
    "\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0005",
    "\u00ea\u0c6d\n\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea",
    "\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea",
    "\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea",
    "\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0005\u00ea",
    "\u0c84\n\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0005",
    "\u00ea\u0c8a\n\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea",
    "\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea",
    "\u0007\u00ea\u0c96\n\u00ea\f\u00ea\u000e\u00ea\u0c99\u000b\u00ea\u0003",
    "\u00ea\u0005\u00ea\u0c9c\n\u00ea\u0003\u00ea\u0006\u00ea\u0c9f\n\u00ea",
    "\r\u00ea\u000e\u00ea\u0ca0\u0003\u00ea\u0003\u00ea\u0005\u00ea\u0ca5",
    "\n\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0005\u00ea",
    "\u0cab\n\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003",
    "\u00ea\u0003\u00ea\u0003\u00ea\u0005\u00ea\u0cb4\n\u00ea\u0003\u00ea",
    "\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea",
    "\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea",
    "\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea",
    "\u0003\u00ea\u0003\u00ea\u0005\u00ea\u0ccb\n\u00ea\u0003\u00ea\u0003",
    "\u00ea\u0003\u00ea\u0005\u00ea\u0cd0\n\u00ea\u0003\u00ea\u0005\u00ea",
    "\u0cd3\n\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003",
    "\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003",
    "\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0007\u00ea\u0ce3\n\u00ea",
    "\f\u00ea\u000e\u00ea\u0ce6\u000b\u00ea\u0003\u00ea\u0003\u00ea\u0003",
    "\u00ea\u0003\u00ea\u0005\u00ea\u0cec\n\u00ea\u0003\u00eb\u0005\u00eb",
    "\u0cef\n\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0005\u00eb\u0cf4",
    "\n\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00ec\u0005\u00ec\u0cf9\n\u00ec",
    "\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0007\u00ec\u0cff\n",
    "\u00ec\f\u00ec\u000e\u00ec\u0d02\u000b\u00ec\u0003\u00ec\u0003\u00ec",
    "\u0003\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0005\u00ed\u0d0a\n",
    "\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ee\u0003\u00ee\u0003",
    "\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003",
    "\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003",
    "\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003",
    "\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003",
    "\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0005\u00ee\u0d2d\n\u00ee",
    "\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0007\u00ef\u0d32\n\u00ef\f\u00ef",
    "\u000e\u00ef\u0d35\u000b\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00f0\u0003",
    "\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0005\u00f0\u0d3f",
    "\n\u00f0\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0005\u00f1\u0d44\n\u00f1",
    "\u0005\u00f1\u0d46\n\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003",
    "\u00f2\u0003\u00f2\u0003\u00f2\u0007\u00f2\u0d4e\n\u00f2\f\u00f2\u000e",
    "\u00f2\u0d51\u000b\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f3\u0003\u00f3",
    "\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0005\u00f3\u0d5a\n\u00f3\u0003",
    "\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f4\u0003\u00f4\u0003",
    "\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0005\u00f4\u0d66\n\u00f4",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0007\u00f5\u0d6c\n",
    "\u00f5\f\u00f5\u000e\u00f5\u0d6f\u000b\u00f5\u0003\u00f5\u0005\u00f5",
    "\u0d72\n\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f6\u0003",
    "\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003",
    "\u00f6\u0005\u00f6\u0d7f\n\u00f6\u0003\u00f7\u0003\u00f7\u0003\u00f7",
    "\u0005\u00f7\u0d84\n\u00f7\u0005\u00f7\u0d86\n\u00f7\u0003\u00f7\u0003",
    "\u00f7\u0003\u00f7\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0007\u00f8\u0d8e",
    "\n\u00f8\f\u00f8\u000e\u00f8\u0d91\u000b\u00f8\u0003\u00f8\u0003\u00f8",
    "\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9",
    "\u0003\u00f9\u0003\u00f9\u0005\u00f9\u0d9d\n\u00f9\u0003\u00fa\u0003",
    "\u00fa\u0005\u00fa\u0da1\n\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa",
    "\u0005\u00fa\u0da6\n\u00fa\u0005\u00fa\u0da8\n\u00fa\u0003\u00fa\u0003",
    "\u00fa\u0003\u00fa\u0005\u00fa\u0dad\n\u00fa\u0007\u00fa\u0daf\n\u00fa",
    "\f\u00fa\u000e\u00fa\u0db2\u000b\u00fa\u0003\u00fa\u0003\u00fa\u0003",
    "\u00fb\u0003\u00fb\u0007\u00fb\u0db8\n\u00fb\f\u00fb\u000e\u00fb\u0dbb",
    "\u000b\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fc\u0003\u00fc",
    "\u0003\u00fc\u0007\u00fc\u0dc3\n\u00fc\f\u00fc\u000e\u00fc\u0dc6\u000b",
    "\u00fc\u0003\u00fc\u0005\u00fc\u0dc9\n\u00fc\u0003\u00fc\u0003\u00fc",
    "\u0003\u00fd\u0005\u00fd\u0dce\n\u00fd\u0003\u00fd\u0003\u00fd\u0003",
    "\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003",
    "\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003",
    "\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003",
    "\u00fe\u0005\u00fe\u0de5\n\u00fe\u0003\u00ff\u0003\u00ff\u0003\u00ff",
    "\u0007\u00ff\u0dea\n\u00ff\f\u00ff\u000e\u00ff\u0ded\u000b\u00ff\u0003",
    "\u00ff\u0003\u00ff\u0003\u0100\u0005\u0100\u0df2\n\u0100\u0003\u0100",
    "\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0101\u0003\u0101\u0003\u0101",
    "\u0007\u0101\u0dfb\n\u0101\f\u0101\u000e\u0101\u0dfe\u000b\u0101\u0003",
    "\u0101\u0003\u0101\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003",
    "\u0102\u0003\u0102\u0005\u0102\u0e08\n\u0102\u0003\u0103\u0003\u0103",
    "\u0003\u0103\u0003\u0103\u0003\u0104\u0003\u0104\u0005\u0104\u0e10\n",
    "\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003",
    "\u0105\u0007\u0105\u0e18\n\u0105\f\u0105\u000e\u0105\u0e1b\u000b\u0105",
    "\u0003\u0105\u0003\u0105\u0005\u0105\u0e1f\n\u0105\u0003\u0105\u0003",
    "\u0105\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003",
    "\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003",
    "\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0005\u0106\u0e32\n\u0106",
    "\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107",
    "\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0109\u0003\u0109",
    "\u0005\u0109\u0e40\n\u0109\u0003\u0109\u0003\u0109\u0003\u0109\u0003",
    "\u0109\u0003\u0109\u0003\u0109\u0003\u0109\u0003\u0109\u0003\u0109\u0005",
    "\u0109\u0e4b\n\u0109\u0003\u0109\u0003\u0109\u0003\u010a\u0003\u010a",
    "\u0003\u010a\u0003\u010a\u0007\u010a\u0e53\n\u010a\f\u010a\u000e\u010a",
    "\u0e56\u000b\u010a\u0003\u010a\u0003\u010a\u0003\u010b\u0003\u010b\u0005",
    "\u010b\u0e5c\n\u010b\u0003\u010b\u0003\u010b\u0003\u010c\u0003\u010c",
    "\u0003\u010c\u0003\u010c\u0003\u010c\u0003\u010c\u0003\u010c\u0003\u010c",
    "\u0003\u010c\u0003\u010c\u0005\u010c\u0e6a\n\u010c\u0003\u010d\u0003",
    "\u010d\u0003\u010d\u0003\u010d\u0003\u010d\u0003\u010e\u0003\u010e\u0003",
    "\u010e\u0003\u010e\u0003\u010e\u0005\u010e\u0e76\n\u010e\u0003\u010e",
    "\u0003\u010e\u0003\u010e\u0003\u010e\u0003\u010e\u0003\u010e\u0005\u010e",
    "\u0e7e\n\u010e\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003",
    "\u010f\u0003\u0110\u0003\u0110\u0003\u0110\u0003\u0110\u0003\u0110\u0003",
    "\u0110\u0005\u0110\u0e8b\n\u0110\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u0e9a\n",
    "\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003",
    "\u0111\u0003\u0111\u0003\u0111\u0007\u0111\u0ea4\n\u0111\f\u0111\u000e",
    "\u0111\u0ea7\u000b\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0005\u0111\u0ebf\n\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u0ec3",
    "\n\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u0ec7\n\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0005\u0111\u0ee2\n\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003",
    "\u0111\u0005\u0111\u0ee8\n\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0005\u0111\u0eee\n\u0111\u0003\u0111\u0003\u0111\u0003",
    "\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u0ef6\n\u0111",
    "\u0003\u0111\u0005\u0111\u0ef9\n\u0111\u0003\u0111\u0003\u0111\u0003",
    "\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003",
    "\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003",
    "\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003",
    "\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003",
    "\u0111\u0003\u0111\u0005\u0111\u0f17\n\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0005\u0111\u0f27\n\u0111\u0003\u0112\u0003\u0112\u0005\u0112\u0f2b",
    "\n\u0112\u0003\u0112\u0003\u0112\u0003\u0112\u0003\u0113\u0003\u0113",
    "\u0003\u0113\u0003\u0113\u0007\u0113\u0f34\n\u0113\f\u0113\u000e\u0113",
    "\u0f37\u000b\u0113\u0003\u0113\u0003\u0113\u0003\u0114\u0003\u0114\u0003",
    "\u0114\u0003\u0114\u0003\u0114\u0005\u0114\u0f40\n\u0114\u0003\u0115",
    "\u0003\u0115\u0003\u0115\u0005\u0115\u0f45\n\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003",
    "\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0005\u0116\u0f52\n\u0116",
    "\u0003\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0003\u0118",
    "\u0003\u0118\u0003\u0118\u0003\u0118\u0003\u0118\u0003\u0118\u0005\u0118",
    "\u0f5f\n\u0118\u0003\u0119\u0006\u0119\u0f62\n\u0119\r\u0119\u000e\u0119",
    "\u0f63\u0003\u0119\u0003\u0119\u0003\u0119\u0003\u011a\u0003\u011a\u0003",
    "\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0005",
    "\u011a\u0f71\n\u011a\u0003\u011b\u0006\u011b\u0f74\n\u011b\r\u011b\u000e",
    "\u011b\u0f75\u0003\u011b\u0003\u011b\u0003\u011c\u0003\u011c\u0003\u011c",
    "\u0003\u011c\u0003\u011c\u0003\u011c\u0007\u011c\u0f80\n\u011c\f\u011c",
    "\u000e\u011c\u0f83\u000b\u011c\u0003\u011c\u0003\u011c\u0005\u011c\u0f87",
    "\n\u011c\u0003\u011d\u0003\u011d\u0003\u011d\u0007\u011d\u0f8c\n\u011d",
    "\f\u011d\u000e\u011d\u0f8f\u000b\u011d\u0003\u011d\u0003\u011d\u0003",
    "\u011e\u0003\u011e\u0007\u011e\u0f95\n\u011e\f\u011e\u000e\u011e\u0f98",
    "\u000b\u011e\u0003\u011e\u0005\u011e\u0f9b\n\u011e\u0003\u011e\u0003",
    "\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0005\u011e\u0fa2\n\u011e",
    "\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0005\u011f\u0fa8\n",
    "\u011f\u0003\u011f\u0003\u011f\u0005\u011f\u0fac\n\u011f\u0003\u011f",
    "\u0003\u011f\u0003\u011f\u0003\u0120\u0003\u0120\u0005\u0120\u0fb3\n",
    "\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0121\u0003\u0121\u0003",
    "\u0121\u0003\u0121\u0003\u0121\u0003\u0121\u0003\u0122\u0003\u0122\u0003",
    "\u0122\u0003\u0122\u0003\u0123\u0003\u0123\u0003\u0123\u0003\u0123\u0003",
    "\u0123\u0003\u0123\u0005\u0123\u0fc8\n\u0123\u0003\u0124\u0003\u0124",
    "\u0003\u0124\u0003\u0124\u0005\u0124\u0fce\n\u0124\u0003\u0124\u0003",
    "\u0124\u0003\u0125\u0003\u0125\u0003\u0125\u0007\u0125\u0fd5\n\u0125",
    "\f\u0125\u000e\u0125\u0fd8\u000b\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0126\u0003\u0126\u0005\u0126\u0fde\n\u0126\u0003\u0126\u0005\u0126",
    "\u0fe1\n\u0126\u0003\u0126\u0005\u0126\u0fe4\n\u0126\u0003\u0126\u0003",
    "\u0126\u0003\u0126\u0003\u0127\u0006\u0127\u0fea\n\u0127\r\u0127\u000e",
    "\u0127\u0feb\u0003\u0127\u0003\u0127\u0003\u0128\u0003\u0128\u0003\u0128",
    "\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0129\u0006\u0129\u0ff7\n",
    "\u0129\r\u0129\u000e\u0129\u0ff8\u0003\u0129\u0003\u0129\u0003\u012a",
    "\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a",
    "\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a",
    "\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0005\u012a",
    "\u100f\n\u012a\u0003\u012b\u0006\u012b\u1012\n\u012b\r\u012b\u000e\u012b",
    "\u1013\u0003\u012b\u0003\u012b\u0003\u012c\u0003\u012c\u0003\u012c\u0003",
    "\u012c\u0003\u012c\u0003\u012c\u0005\u012c\u101e\n\u012c\u0003\u012d",
    "\u0005\u012d\u1021\n\u012d\u0003\u012d\u0005\u012d\u1024\n\u012d\u0003",
    "\u012d\u0003\u012d\u0003\u012d\u0003\u012d\u0003\u012d\u0005\u012d\u102b",
    "\n\u012d\u0003\u012d\u0003\u012d\u0003\u012e\u0003\u012e\u0003\u012e",
    "\u0003\u012e\u0005\u012e\u1033\n\u012e\u0003\u012e\u0003\u012e\u0003",
    "\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0007\u012f\u103b\n\u012f",
    "\f\u012f\u000e\u012f\u103e\u000b\u012f\u0003\u012f\u0003\u012f\u0003",
    "\u012f\u0003\u0130\u0005\u0130\u1044\n\u0130\u0003\u0130\u0003\u0130",
    "\u0003\u0130\u0003\u0131\u0003\u0131\u0003\u0131\u0003\u0131\u0007\u0131",
    "\u104d\n\u0131\f\u0131\u000e\u0131\u1050\u000b\u0131\u0003\u0131\u0003",
    "\u0131\u0003\u0132\u0003\u0132\u0003\u0132\u0007\u0132\u1057\n\u0132",
    "\f\u0132\u000e\u0132\u105a\u000b\u0132\u0003\u0132\u0003\u0132\u0003",
    "\u0133\u0006\u0133\u105f\n\u0133\r\u0133\u000e\u0133\u1060\u0003\u0133",
    "\u0003\u0133\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134",
    "\u0003\u0134\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135",
    "\u0003\u0135\u0005\u0135\u1071\n\u0135\u0003\u0135\u0003\u0135\u0005",
    "\u0135\u1075\n\u0135\u0003\u0135\u0003\u0135\u0005\u0135\u1079\n\u0135",
    "\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136",
    "\u0003\u0136\u0005\u0136\u1082\n\u0136\u0003\u0137\u0003\u0137\u0003",
    "\u0137\u0007\u0137\u1087\n\u0137\f\u0137\u000e\u0137\u108a\u000b\u0137",
    "\u0003\u0137\u0003\u0137\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138",
    "\u0003\u0138\u0003\u0139\u0003\u0139\u0005\u0139\u1095\n\u0139\u0003",
    "\u0139\u0003\u0139\u0003\u0139\u0003\u013a\u0006\u013a\u109b\n\u013a",
    "\r\u013a\u000e\u013a\u109c\u0003\u013a\u0003\u013a\u0003\u013b\u0005",
    "\u013b\u10a2\n\u013b\u0003\u013b\u0005\u013b\u10a5\n\u013b\u0003\u013b",
    "\u0003\u013b\u0005\u013b\u10a9\n\u013b\u0003\u013b\u0003\u013b\u0003",
    "\u013c\u0006\u013c\u10ae\n\u013c\r\u013c\u000e\u013c\u10af\u0003\u013c",
    "\u0003\u013c\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d",
    "\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d",
    "\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d",
    "\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d",
    "\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d",
    "\u0003\u013d\u0003\u013d\u0003\u013d\u0005\u013d\u10d4\n\u013d\u0003",
    "\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003",
    "\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003",
    "\u013e\u0003\u013e\u0003\u013e\u0005\u013e\u10e5\n\u013e\u0003\u013e",
    "\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e",
    "\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e",
    "\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e",
    "\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0005\u013e",
    "\u10ff\n\u013e\u0003\u013f\u0003\u013f\u0003\u013f\u0003\u013f\u0003",
    "\u013f\u0003\u013f\u0003\u013f\u0003\u013f\u0003\u013f\u0003\u013f\u0005",
    "\u013f\u110b\n\u013f\u0003\u013f\u0003\u013f\u0003\u0140\u0003\u0140",
    "\u0003\u0140\u0007\u0140\u1112\n\u0140\f\u0140\u000e\u0140\u1115\u000b",
    "\u0140\u0003\u0140\u0003\u0140\u0003\u0141\u0003\u0141\u0003\u0141\u0003",
    "\u0141\u0003\u0141\u0003\u0142\u0003\u0142\u0003\u0142\u0007\u0142\u1121",
    "\n\u0142\f\u0142\u000e\u0142\u1124\u000b\u0142\u0003\u0142\u0003\u0142",
    "\u0003\u0143\u0003\u0143\u0003\u0143\u0005\u0143\u112b\n\u0143\u0003",
    "\u0143\u0003\u0143\u0003\u0144\u0003\u0144\u0003\u0144\u0003\u0144\u0003",
    "\u0144\u0003\u0144\u0005\u0144\u1135\n\u0144\u0003\u0145\u0003\u0145",
    "\u0003\u0145\u0003\u0145\u0003\u0145\u0005\u0145\u113c\n\u0145\u0003",
    "\u0146\u0003\u0146\u0003\u0146\u0003\u0147\u0003\u0147\u0003\u0147\u0003",
    "\u0147\u0003\u0147\u0005\u0147\u1146\n\u0147\u0003\u0148\u0003\u0148",
    "\u0003\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0005\u0148\u114e\n",
    "\u0148\u0003\u0148\u0003\u0148\u0005\u0148\u1152\n\u0148\u0003\u0149",
    "\u0003\u0149\u0003\u0149\u0007\u0149\u1157\n\u0149\f\u0149\u000e\u0149",
    "\u115a\u000b\u0149\u0003\u0149\u0003\u0149\u0003\u014a\u0005\u014a\u115f",
    "\n\u014a\u0003\u014a\u0005\u014a\u1162\n\u014a\u0003\u014a\u0003\u014a",
    "\u0003\u014a\u0003\u014a\u0003\u014a\u0005\u014a\u1169\n\u014a\u0003",
    "\u014b\u0003\u014b\u0003\u014b\u0003\u014b\u0003\u014b\u0003\u014b\u0005",
    "\u014b\u1171\n\u014b\u0003\u014c\u0005\u014c\u1174\n\u014c\u0003\u014c",
    "\u0003\u014c\u0003\u014c\u0003\u014c\u0003\u014c\u0003\u014d\u0005\u014d",
    "\u117c\n\u014d\u0003\u014d\u0005\u014d\u117f\n\u014d\u0003\u014d\u0003",
    "\u014d\u0003\u014d\u0005\u014d\u1184\n\u014d\u0003\u014d\u0003\u014d",
    "\u0003\u014d\u0005\u014d\u1189\n\u014d\u0005\u014d\u118b\n\u014d\u0003",
    "\u014d\u0003\u014d\u0003\u014e\u0005\u014e\u1190\n\u014e\u0003\u014e",
    "\u0005\u014e\u1193\n\u014e\u0003\u014e\u0003\u014e\u0003\u014e\u0003",
    "\u014e\u0003\u014f\u0005\u014f\u119a\n\u014f\u0003\u014f\u0005\u014f",
    "\u119d\n\u014f\u0003\u014f\u0003\u014f\u0003\u014f\u0003\u014f\u0003",
    "\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0003",
    "\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0003\u0150\u0005",
    "\u0150\u11af\n\u0150\u0003\u0151\u0003\u0151\u0003\u0151\u0003\u0151",
    "\u0003\u0151\u0005\u0151\u11b6\n\u0151\u0003\u0152\u0005\u0152\u11b9",
    "\n\u0152\u0003\u0152\u0003\u0152\u0003\u0152\u0003\u0152\u0003\u0152",
    "\u0003\u0152\u0003\u0152\u0003\u0152\u0005\u0152\u11c3\n\u0152\u0003",
    "\u0152\u0003\u0152\u0003\u0153\u0005\u0153\u11c8\n\u0153\u0003\u0153",
    "\u0003\u0153\u0003\u0153\u0003\u0153\u0003\u0154\u0005\u0154\u11cf\n",
    "\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0154\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0005\u0155\u1202\n\u0155\u0003\u0156\u0003\u0156",
    "\u0003\u0156\u0003\u0156\u0003\u0156\u0003\u0156\u0003\u0156\u0003\u0156",
    "\u0003\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0005\u0157\u1210\n",
    "\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0003\u0158\u0003\u0158\u0003",
    "\u0158\u0003\u0158\u0003\u0158\u0005\u0158\u121a\n\u0158\u0003\u0159",
    "\u0003\u0159\u0003\u0159\u0003\u0159\u0003\u015a\u0003\u015a\u0007\u015a",
    "\u1222\n\u015a\f\u015a\u000e\u015a\u1225\u000b\u015a\u0003\u015a\u0003",
    "\u015a\u0003\u015a\u0003\u015b\u0005\u015b\u122b\n\u015b\u0003\u015b",
    "\u0005\u015b\u122e\n\u015b\u0003\u015b\u0003\u015b\u0003\u015b\u0003",
    "\u015b\u0006\u015b\u1234\n\u015b\r\u015b\u000e\u015b\u1235\u0003\u015b",
    "\u0003\u015b\u0005\u015b\u123a\n\u015b\u0003\u015b\u0003\u015b\u0003",
    "\u015c\u0003\u015c\u0007\u015c\u1240\n\u015c\f\u015c\u000e\u015c\u1243",
    "\u000b\u015c\u0003\u015c\u0006\u015c\u1246\n\u015c\r\u015c\u000e\u015c",
    "\u1247\u0003\u015c\u0003\u015c\u0003\u015d\u0003\u015d\u0007\u015d\u124e",
    "\n\u015d\f\u015d\u000e\u015d\u1251\u000b\u015d\u0003\u015d\u0003\u015d",
    "\u0003\u015d\u0003\u015e\u0003\u015e\u0003\u015e\u0003\u015e\u0007\u015e",
    "\u125a\n\u015e\f\u015e\u000e\u015e\u125d\u000b\u015e\u0003\u015e\u0005",
    "\u015e\u1260\n\u015e\u0005\u015e\u1262\n\u015e\u0003\u015e\u0003\u015e",
    "\u0003\u015e\u0003\u015f\u0003\u015f\u0003\u015f\u0003\u015f\u0007\u015f",
    "\u126b\n\u015f\f\u015f\u000e\u015f\u126e\u000b\u015f\u0003\u015f\u0003",
    "\u015f\u0003\u015f\u0003\u0160\u0005\u0160\u1274\n\u0160\u0003\u0160",
    "\u0005\u0160\u1277\n\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0003",
    "\u0161\u0003\u0161\u0003\u0161\u0003\u0161\u0005\u0161\u1280\n\u0161",
    "\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0163\u0003\u0163",
    "\u0007\u0163\u1288\n\u0163\f\u0163\u000e\u0163\u128b\u000b\u0163\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0164\u0005\u0164\u1291\n\u0164",
    "\u0003\u0164\u0005\u0164\u1294\n\u0164\u0003\u0164\u0005\u0164\u1297",
    "\n\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0005\u0164\u129c\n\u0164",
    "\u0003\u0164\u0003\u0164\u0005\u0164\u12a0\n\u0164\u0003\u0164\u0003",
    "\u0164\u0005\u0164\u12a4\n\u0164\u0003\u0164\u0003\u0164\u0003\u0164",
    "\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164",
    "\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164",
    "\u0005\u0164\u12b5\n\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0005",
    "\u0164\u12ba\n\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0005\u0164",
    "\u12bf\n\u0164\u0003\u0164\u0003\u0164\u0005\u0164\u12c3\n\u0164\u0003",
    "\u0164\u0003\u0164\u0005\u0164\u12c7\n\u0164\u0003\u0164\u0003\u0164",
    "\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164",
    "\u0005\u0164\u12d1\n\u0164\u0003\u0164\u0003\u0164\u0003\u0165\u0005",
    "\u0165\u12d6\n\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0005\u0165",
    "\u12db\n\u0165\u0003\u0165\u0003\u0165\u0005\u0165\u12df\n\u0165\u0003",
    "\u0165\u0003\u0165\u0003\u0165\u0005\u0165\u12e4\n\u0165\u0003\u0165",
    "\u0003\u0165\u0005\u0165\u12e8\n\u0165\u0005\u0165\u12ea\n\u0165\u0003",
    "\u0165\u0003\u0165\u0003\u0166\u0003\u0166\u0003\u0166\u0003\u0166\u0003",
    "\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0007\u0167\u12f6\n\u0167",
    "\f\u0167\u000e\u0167\u12f9\u000b\u0167\u0003\u0167\u0005\u0167\u12fc",
    "\n\u0167\u0005\u0167\u12fe\n\u0167\u0003\u0167\u0003\u0167\u0003\u0167",
    "\u0003\u0168\u0005\u0168\u1304\n\u0168\u0003\u0168\u0003\u0168\u0003",
    "\u0168\u0005\u0168\u1309\n\u0168\u0003\u0168\u0003\u0168\u0003\u0169",
    "\u0003\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0005\u0169\u1312\n",
    "\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0003\u016a\u0003\u016a\u0003",
    "\u016a\u0003\u016a\u0003\u016a\u0003\u016a\u0005\u016a\u131d\n\u016a",
    "\u0003\u016b\u0006\u016b\u1320\n\u016b\r\u016b\u000e\u016b\u1321\u0003",
    "\u016b\u0003\u016b\u0003\u016c\u0003\u016c\u0003\u016c\u0003\u016c\u0005",
    "\u016c\u132a\n\u016c\u0003\u016c\u0003\u016c\u0005\u016c\u132e\n\u016c",
    "\u0003\u016c\u0003\u016c\u0003\u016c\u0003\u016d\u0003\u016d\u0003\u016d",
    "\u0003\u016d\u0003\u016d\u0003\u016d\u0005\u016d\u1339\n\u016d\u0003",
    "\u016e\u0003\u016e\u0003\u016e\u0007\u016e\u133e\n\u016e\f\u016e\u000e",
    "\u016e\u1341\u000b\u016e\u0003\u016e\u0003\u016e\u0003\u016f\u0003\u016f",
    "\u0003\u016f\u0003\u016f\u0003\u016f\u0007\u016f\u134a\n\u016f\f\u016f",
    "\u000e\u016f\u134d\u000b\u016f\u0005\u016f\u134f\n\u016f\u0003\u016f",
    "\u0005\u016f\u1352\n\u016f\u0003\u016f\u0003\u016f\u0003\u0170\u0003",
    "\u0170\u0003\u0170\u0005\u0170\u1359\n\u0170\u0003\u0170\u0003\u0170",
    "\u0003\u0170\u0003\u0171\u0003\u0171\u0005\u0171\u1360\n\u0171\u0003",
    "\u0171\u0003\u0171\u0007\u0171\u1364\n\u0171\f\u0171\u000e\u0171\u1367",
    "\u000b\u0171\u0003\u0171\u0003\u0171\u0003\u0171\u0003\u0171\u0003\u0171",
    "\u0003\u0171\u0005\u0171\u136f\n\u0171\u0003\u0172\u0003\u0172\u0003",
    "\u0172\u0007\u0172\u1374\n\u0172\f\u0172\u000e\u0172\u1377\u000b\u0172",
    "\u0003\u0172\u0003\u0172\u0003\u0173\u0003\u0173\u0003\u0173\u0003\u0173",
    "\u0003\u0173\u0003\u0174\u0005\u0174\u1381\n\u0174\u0003\u0174\u0003",
    "\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0005\u0174\u1389",
    "\n\u0174\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175",
    "\u0003\u0175\u0003\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0003\u0176",
    "\u0003\u0176\u0003\u0176\u0003\u0177\u0003\u0177\u0003\u0177\u0003\u0177",
    "\u0003\u0177\u0003\u0178\u0003\u0178\u0003\u0178\u0003\u0178\u0003\u0178",
    "\u0003\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0003\u017a",
    "\u0003\u017a\u0003\u017a\u0003\u017a\u0003\u017a\u0003\u017a\u0003\u017a",
    "\u0003\u017a\u0003\u017a\u0003\u017a\u0003\u017a\u0003\u017a\u0003\u017a",
    "\u0003\u017a\u0003\u017a\u0003\u017a\u0005\u017a\u13b7\n\u017a\u0003",
    "\u017b\u0003\u017b\u0003\u017b\u0003\u017b\u0005\u017b\u13bd\n\u017b",
    "\u0003\u017c\u0003\u017c\u0003\u017c\u0003\u017c\u0003\u017c\u0003\u017c",
    "\u0003\u017c\u0003\u017c\u0003\u017c\u0003\u017c\u0005\u017c\u13c9\n",
    "\u017c\u0003\u017d\u0003\u017d\u0007\u017d\u13cd\n\u017d\f\u017d\u000e",
    "\u017d\u13d0\u000b\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017e",
    "\u0003\u017e\u0007\u017e\u13d7\n\u017e\f\u017e\u000e\u017e\u13da\u000b",
    "\u017e\u0003\u017e\u0003\u017e\u0003\u017e\u0003\u017f\u0003\u017f\u0003",
    "\u017f\u0003\u017f\u0003\u017f\u0003\u017f\u0003\u017f\u0003\u017f\u0003",
    "\u017f\u0005\u017f\u13e8\n\u017f\u0003\u0180\u0003\u0180\u0003\u0180",
    "\u0003\u0180\u0003\u0180\u0003\u0180\u0003\u0180\u0003\u0180\u0003\u0180",
    "\u0005\u0180\u13f3\n\u0180\u0003\u0181\u0003\u0181\u0003\u0181\u0007",
    "\u0181\u13f8\n\u0181\f\u0181\u000e\u0181\u13fb\u000b\u0181\u0003\u0181",
    "\u0003\u0181\u0006\u0181\u13ff\n\u0181\r\u0181\u000e\u0181\u1400\u0005",
    "\u0181\u1403\n\u0181\u0003\u0181\u0003\u0181\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0003\u0182\u0003\u0182\u0005\u0182\u14a1\n\u0182\u0003\u0183\u0003",
    "\u0183\u0003\u0183\u0005\u0183\u14a6\n\u0183\u0003\u0183\u0005\u0183",
    "\u14a9\n\u0183\u0003\u0183\u0005\u0183\u14ac\n\u0183\u0003\u0183\u0003",
    "\u0183\u0005\u0183\u14b0\n\u0183\u0003\u0183\u0003\u0183\u0003\u0184",
    "\u0003\u0184\u0003\u0184\u0005\u0184\u14b7\n\u0184\u0003\u0184\u0005",
    "\u0184\u14ba\n\u0184\u0003\u0184\u0005\u0184\u14bd\n\u0184\u0003\u0184",
    "\u0003\u0184\u0005\u0184\u14c1\n\u0184\u0003\u0184\u0003\u0184\u0003",
    "\u0185\u0003\u0185\u0003\u0185\u0005\u0185\u14c8\n\u0185\u0003\u0185",
    "\u0005\u0185\u14cb\n\u0185\u0003\u0185\u0005\u0185\u14ce\n\u0185\u0003",
    "\u0185\u0003\u0185\u0005\u0185\u14d2\n\u0185\u0003\u0185\u0003\u0185",
    "\u0003\u0186\u0003\u0186\u0003\u0186\u0005\u0186\u14d9\n\u0186\u0003",
    "\u0186\u0003\u0186\u0005\u0186\u14dd\n\u0186\u0003\u0186\u0003\u0186",
    "\u0003\u0187\u0003\u0187\u0003\u0187\u0003\u0187\u0005\u0187\u14e5\n",
    "\u0187\u0003\u0187\u0003\u0187\u0005\u0187\u14e9\n\u0187\u0003\u0187",
    "\u0003\u0187\u0005\u0187\u14ed\n\u0187\u0003\u0187\u0003\u0187\u0003",
    "\u0187\u0003\u0188\u0003\u0188\u0003\u0188\u0003\u0188\u0003\u0188\u0003",
    "\u0188\u0003\u0188\u0003\u0188\u0003\u0188\u0003\u0188\u0005\u0188\u14fc",
    "\n\u0188\u0003\u0188\u0003\u0188\u0003\u0189\u0003\u0189\u0003\u0189",
    "\u0003\u0189\u0003\u018a\u0003\u018a\u0003\u018a\u0003\u018a\u0003\u018a",
    "\u0003\u018a\u0003\u018a\u0003\u018a\u0005\u018a\u150c\n\u018a\u0003",
    "\u018a\u0003\u018a\u0003\u018a\u0003\u018a\u0005\u018a\u1512\n\u018a",
    "\u0003\u018a\u0003\u018a\u0003\u018b\u0003\u018b\u0003\u018b\u0003\u018b",
    "\u0003\u018b\u0003\u018b\u0003\u018c\u0003\u018c\u0003\u018c\u0003\u018c",
    "\u0003\u018c\u0003\u018c\u0003\u018c\u0003\u018c\u0003\u018c\u0003\u018c",
    "\u0003\u018c\u0003\u018c\u0005\u018c\u1528\n\u018c\u0003\u018c\u0003",
    "\u018c\u0003\u018d\u0003\u018d\u0003\u018d\u0003\u018d\u0003\u018d\u0003",
    "\u018d\u0003\u018d\u0003\u018e\u0003\u018e\u0003\u018e\u0005\u018e\u1536",
    "\n\u018e\u0003\u018e\u0003\u018e\u0005\u018e\u153a\n\u018e\u0003\u018e",
    "\u0003\u018e\u0003\u018e\u0003\u018f\u0003\u018f\u0005\u018f\u1541\n",
    "\u018f\u0003\u018f\u0003\u018f\u0005\u018f\u1545\n\u018f\u0003\u018f",
    "\u0003\u018f\u0005\u018f\u1549\n\u018f\u0003\u018f\u0003\u018f\u0003",
    "\u018f\u0003\u018f\u0003\u018f\u0005\u018f\u1550\n\u018f\u0003\u018f",
    "\u0003\u018f\u0003\u0190\u0003\u0190\u0003\u0190\u0003\u0190\u0003\u0190",
    "\u0005\u0190\u1559\n\u0190\u0003\u0190\u0005\u0190\u155c\n\u0190\u0003",
    "\u0190\u0003\u0190\u0007\u0190\u1560\n\u0190\f\u0190\u000e\u0190\u1563",
    "\u000b\u0190\u0003\u0190\u0003\u0190\u0003\u0191\u0003\u0191\u0003\u0191",
    "\u0003\u0191\u0003\u0191\u0003\u0191\u0005\u0191\u156d\n\u0191\u0003",
    "\u0191\u0003\u0191\u0003\u0191\u0003\u0191\u0003\u0191\u0003\u0191\u0005",
    "\u0191\u1575\n\u0191\u0003\u0191\u0003\u0191\u0003\u0192\u0003\u0192",
    "\u0003\u0192\u0003\u0192\u0005\u0192\u157d\n\u0192\u0003\u0192\u0003",
    "\u0192\u0003\u0193\u0003\u0193\u0005\u0193\u1583\n\u0193\u0003\u0193",
    "\u0003\u0193\u0003\u0193\u0003\u0194\u0003\u0194\u0005\u0194\u158a\n",
    "\u0194\u0003\u0194\u0003\u0194\u0005\u0194\u158e\n\u0194\u0003\u0194",
    "\u0003\u0194\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195",
    "\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195",
    "\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195",
    "\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195",
    "\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195",
    "\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195",
    "\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195",
    "\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195",
    "\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195",
    "\u0003\u0195\u0003\u0195\u0003\u0195\u0005\u0195\u15ca\n\u0195\u0003",
    "\u0195\u0002\u0002\u0196\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd",
    "fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090",
    "\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8",
    "\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0",
    "\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8",
    "\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0",
    "\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108",
    "\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120",
    "\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138",
    "\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150",
    "\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168",
    "\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180",
    "\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198",
    "\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0",
    "\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8",
    "\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0",
    "\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8",
    "\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210",
    "\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228",
    "\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240",
    "\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258",
    "\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270",
    "\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288",
    "\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0",
    "\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8",
    "\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0",
    "\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8",
    "\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300",
    "\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318",
    "\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u0002\u0014\n\u0002",
    "\u0016\u0016\u0019\u001988@@TTXXdehh\u0004\u0002##..\u0004\u0002IIQ",
    "Q\u0003\u0002\u009b\u009c\u0004\u0002\u0091\u0092\u009d\u009e\u0003",
    "\u0002\u0086\u0087\u0003\u0002\u0088\u008a\u0010\u0002\u0013\u0013\u0016",
    "\u0016\u0019\u0019\u001e\u001e##..88@@EETTXX\\\\dehh\u0004\u0002\u000f",
    "\u000f!!\u000e\u0002\n\n\u0010\u0010**::CCJJLPUU[[ggkkmm\u0005\u0002",
    "IIQQ__\u0004\u0002))66\u0004\u0002\u0012\u0012__\u0004\u0002\u0088\u0088",
    "\u0093\u0093\u0004\u000277II\u0004\u0002++aa\u0015\u0002\n\n\u000e\u000e",
    "\u0012\u0014\u0016 \"#%&(0335:<<?@BEGGIKMQSUXikmpp\u0015\u0002\u000b",
    "\r\u000f\u0011\u0015\u0015!!$$\'\'1244;;=>AAFFHHLLRRVWjjnoqr\u0002\u181c",
    "\u0002\u032b\u0003\u0002\u0002\u0002\u0004\u0343\u0003\u0002\u0002\u0002",
    "\u0006\u034f\u0003\u0002\u0002\u0002\b\u035c\u0003\u0002\u0002\u0002",
    "\n\u0360\u0003\u0002\u0002\u0002\f\u0365\u0003\u0002\u0002\u0002\u000e",
    "\u0367\u0003\u0002\u0002\u0002\u0010\u0369\u0003\u0002\u0002\u0002\u0012",
    "\u036f\u0003\u0002\u0002\u0002\u0014\u0371\u0003\u0002\u0002\u0002\u0016",
    "\u037c\u0003\u0002\u0002\u0002\u0018\u0387\u0003\u0002\u0002\u0002\u001a",
    "\u0394\u0003\u0002\u0002\u0002\u001c\u0399\u0003\u0002\u0002\u0002\u001e",
    "\u039b\u0003\u0002\u0002\u0002 \u03aa\u0003\u0002\u0002\u0002\"\u03ac",
    "\u0003\u0002\u0002\u0002$\u03b4\u0003\u0002\u0002\u0002&\u03b9\u0003",
    "\u0002\u0002\u0002(\u03c1\u0003\u0002\u0002\u0002*\u03c9\u0003\u0002",
    "\u0002\u0002,\u03d1\u0003\u0002\u0002\u0002.\u03d9\u0003\u0002\u0002",
    "\u00020\u03e1\u0003\u0002\u0002\u00022\u03e9\u0003\u0002\u0002\u0002",
    "4\u03f5\u0003\u0002\u0002\u00026\u0400\u0003\u0002\u0002\u00028\u0408",
    "\u0003\u0002\u0002\u0002:\u0428\u0003\u0002\u0002\u0002<\u042a\u0003",
    "\u0002\u0002\u0002>\u04b1\u0003\u0002\u0002\u0002@\u04b4\u0003\u0002",
    "\u0002\u0002B\u04bc\u0003\u0002\u0002\u0002D\u04cc\u0003\u0002\u0002",
    "\u0002F\u04d0\u0003\u0002\u0002\u0002H\u04d2\u0003\u0002\u0002\u0002",
    "J\u04dc\u0003\u0002\u0002\u0002L\u04de\u0003\u0002\u0002\u0002N\u04e7",
    "\u0003\u0002\u0002\u0002P\u04f4\u0003\u0002\u0002\u0002R\u04fb\u0003",
    "\u0002\u0002\u0002T\u04fd\u0003\u0002\u0002\u0002V\u0510\u0003\u0002",
    "\u0002\u0002X\u0512\u0003\u0002\u0002\u0002Z\u051b\u0003\u0002\u0002",
    "\u0002\\\u0528\u0003\u0002\u0002\u0002^\u052a\u0003\u0002\u0002\u0002",
    "`\u053f\u0003\u0002\u0002\u0002b\u0548\u0003\u0002\u0002\u0002d\u0554",
    "\u0003\u0002\u0002\u0002f\u0565\u0003\u0002\u0002\u0002h\u0567\u0003",
    "\u0002\u0002\u0002j\u0570\u0003\u0002\u0002\u0002l\u0575\u0003\u0002",
    "\u0002\u0002n\u057f\u0003\u0002\u0002\u0002p\u0581\u0003\u0002\u0002",
    "\u0002r\u0584\u0003\u0002\u0002\u0002t\u058f\u0003\u0002\u0002\u0002",
    "v\u059b\u0003\u0002\u0002\u0002x\u059d\u0003\u0002\u0002\u0002z\u05a2",
    "\u0003\u0002\u0002\u0002|\u05a5\u0003\u0002\u0002\u0002~\u05b4\u0003",
    "\u0002\u0002\u0002\u0080\u05bd\u0003\u0002\u0002\u0002\u0082\u05c8\u0003",
    "\u0002\u0002\u0002\u0084\u05ca\u0003\u0002\u0002\u0002\u0086\u05d6\u0003",
    "\u0002\u0002\u0002\u0088\u05d8\u0003\u0002\u0002\u0002\u008a\u05de\u0003",
    "\u0002\u0002\u0002\u008c\u065f\u0003\u0002\u0002\u0002\u008e\u0661\u0003",
    "\u0002\u0002\u0002\u0090\u0667\u0003\u0002\u0002\u0002\u0092\u0672\u0003",
    "\u0002\u0002\u0002\u0094\u0674\u0003\u0002\u0002\u0002\u0096\u067c\u0003",
    "\u0002\u0002\u0002\u0098\u067e\u0003\u0002\u0002\u0002\u009a\u0684\u0003",
    "\u0002\u0002\u0002\u009c\u0687\u0003\u0002\u0002\u0002\u009e\u0693\u0003",
    "\u0002\u0002\u0002\u00a0\u0696\u0003\u0002\u0002\u0002\u00a2\u06a3\u0003",
    "\u0002\u0002\u0002\u00a4\u06a5\u0003\u0002\u0002\u0002\u00a6\u06b8\u0003",
    "\u0002\u0002\u0002\u00a8\u06ba\u0003\u0002\u0002\u0002\u00aa\u06c6\u0003",
    "\u0002\u0002\u0002\u00ac\u06cc\u0003\u0002\u0002\u0002\u00ae\u06d1\u0003",
    "\u0002\u0002\u0002\u00b0\u06d6\u0003\u0002\u0002\u0002\u00b2\u06d8\u0003",
    "\u0002\u0002\u0002\u00b4\u06de\u0003\u0002\u0002\u0002\u00b6\u06e6\u0003",
    "\u0002\u0002\u0002\u00b8\u06f3\u0003\u0002\u0002\u0002\u00ba\u06f7\u0003",
    "\u0002\u0002\u0002\u00bc\u06fd\u0003\u0002\u0002\u0002\u00be\u0710\u0003",
    "\u0002\u0002\u0002\u00c0\u0713\u0003\u0002\u0002\u0002\u00c2\u0719\u0003",
    "\u0002\u0002\u0002\u00c4\u071c\u0003\u0002\u0002\u0002\u00c6\u0728\u0003",
    "\u0002\u0002\u0002\u00c8\u072e\u0003\u0002\u0002\u0002\u00ca\u073a\u0003",
    "\u0002\u0002\u0002\u00cc\u073e\u0003\u0002\u0002\u0002\u00ce\u0747\u0003",
    "\u0002\u0002\u0002\u00d0\u0750\u0003\u0002\u0002\u0002\u00d2\u0754\u0003",
    "\u0002\u0002\u0002\u00d4\u0763\u0003\u0002\u0002\u0002\u00d6\u0768\u0003",
    "\u0002\u0002\u0002\u00d8\u076a\u0003\u0002\u0002\u0002\u00da\u0772\u0003",
    "\u0002\u0002\u0002\u00dc\u0776\u0003\u0002\u0002\u0002\u00de\u077d\u0003",
    "\u0002\u0002\u0002\u00e0\u0782\u0003\u0002\u0002\u0002\u00e2\u078c\u0003",
    "\u0002\u0002\u0002\u00e4\u0790\u0003\u0002\u0002\u0002\u00e6\u07a5\u0003",
    "\u0002\u0002\u0002\u00e8\u07a7\u0003\u0002\u0002\u0002\u00ea\u07b3\u0003",
    "\u0002\u0002\u0002\u00ec\u07bb\u0003\u0002\u0002\u0002\u00ee\u07bf\u0003",
    "\u0002\u0002\u0002\u00f0\u07c7\u0003\u0002\u0002\u0002\u00f2\u07ce\u0003",
    "\u0002\u0002\u0002\u00f4\u07d2\u0003\u0002\u0002\u0002\u00f6\u07d4\u0003",
    "\u0002\u0002\u0002\u00f8\u07d8\u0003\u0002\u0002\u0002\u00fa\u07e0\u0003",
    "\u0002\u0002\u0002\u00fc\u07e2\u0003\u0002\u0002\u0002\u00fe\u07f2\u0003",
    "\u0002\u0002\u0002\u0100\u07f4\u0003\u0002\u0002\u0002\u0102\u07f7\u0003",
    "\u0002\u0002\u0002\u0104\u07fe\u0003\u0002\u0002\u0002\u0106\u0810\u0003",
    "\u0002\u0002\u0002\u0108\u0819\u0003\u0002\u0002\u0002\u010a\u0828\u0003",
    "\u0002\u0002\u0002\u010c\u082c\u0003\u0002\u0002\u0002\u010e\u082f\u0003",
    "\u0002\u0002\u0002\u0110\u083c\u0003\u0002\u0002\u0002\u0112\u0842\u0003",
    "\u0002\u0002\u0002\u0114\u085d\u0003\u0002\u0002\u0002\u0116\u085f\u0003",
    "\u0002\u0002\u0002\u0118\u0866\u0003\u0002\u0002\u0002\u011a\u0870\u0003",
    "\u0002\u0002\u0002\u011c\u0872\u0003\u0002\u0002\u0002\u011e\u0875\u0003",
    "\u0002\u0002\u0002\u0120\u087f\u0003\u0002\u0002\u0002\u0122\u0890\u0003",
    "\u0002\u0002\u0002\u0124\u089c\u0003\u0002\u0002\u0002\u0126\u08a5\u0003",
    "\u0002\u0002\u0002\u0128\u08b5\u0003\u0002\u0002\u0002\u012a\u08c1\u0003",
    "\u0002\u0002\u0002\u012c\u08c8\u0003\u0002\u0002\u0002\u012e\u08ca\u0003",
    "\u0002\u0002\u0002\u0130\u08cd\u0003\u0002\u0002\u0002\u0132\u08d7\u0003",
    "\u0002\u0002\u0002\u0134\u0917\u0003\u0002\u0002\u0002\u0136\u092d\u0003",
    "\u0002\u0002\u0002\u0138\u0930\u0003\u0002\u0002\u0002\u013a\u0941\u0003",
    "\u0002\u0002\u0002\u013c\u0948\u0003\u0002\u0002\u0002\u013e\u0953\u0003",
    "\u0002\u0002\u0002\u0140\u0956\u0003\u0002\u0002\u0002\u0142\u095a\u0003",
    "\u0002\u0002\u0002\u0144\u0968\u0003\u0002\u0002\u0002\u0146\u096a\u0003",
    "\u0002\u0002\u0002\u0148\u0972\u0003\u0002\u0002\u0002\u014a\u0984\u0003",
    "\u0002\u0002\u0002\u014c\u0997\u0003\u0002\u0002\u0002\u014e\u0999\u0003",
    "\u0002\u0002\u0002\u0150\u09a1\u0003\u0002\u0002\u0002\u0152\u09aa\u0003",
    "\u0002\u0002\u0002\u0154\u09ac\u0003\u0002\u0002\u0002\u0156\u09b1\u0003",
    "\u0002\u0002\u0002\u0158\u09b7\u0003\u0002\u0002\u0002\u015a\u09bb\u0003",
    "\u0002\u0002\u0002\u015c\u09bf\u0003\u0002\u0002\u0002\u015e\u09ca\u0003",
    "\u0002\u0002\u0002\u0160\u09cc\u0003\u0002\u0002\u0002\u0162\u09d2\u0003",
    "\u0002\u0002\u0002\u0164\u09d4\u0003\u0002\u0002\u0002\u0166\u09dd\u0003",
    "\u0002\u0002\u0002\u0168\u09ea\u0003\u0002\u0002\u0002\u016a\u09f0\u0003",
    "\u0002\u0002\u0002\u016c\u09f2\u0003\u0002\u0002\u0002\u016e\u0a02\u0003",
    "\u0002\u0002\u0002\u0170\u0a04\u0003\u0002\u0002\u0002\u0172\u0a13\u0003",
    "\u0002\u0002\u0002\u0174\u0a22\u0003\u0002\u0002\u0002\u0176\u0a31\u0003",
    "\u0002\u0002\u0002\u0178\u0a3a\u0003\u0002\u0002\u0002\u017a\u0a4a\u0003",
    "\u0002\u0002\u0002\u017c\u0a56\u0003\u0002\u0002\u0002\u017e\u0a59\u0003",
    "\u0002\u0002\u0002\u0180\u0a69\u0003\u0002\u0002\u0002\u0182\u0a6e\u0003",
    "\u0002\u0002\u0002\u0184\u0a7c\u0003\u0002\u0002\u0002\u0186\u0a82\u0003",
    "\u0002\u0002\u0002\u0188\u0a8d\u0003\u0002\u0002\u0002\u018a\u0aa5\u0003",
    "\u0002\u0002\u0002\u018c\u0ab1\u0003\u0002\u0002\u0002\u018e\u0ac1\u0003",
    "\u0002\u0002\u0002\u0190\u0ac7\u0003\u0002\u0002\u0002\u0192\u0acd\u0003",
    "\u0002\u0002\u0002\u0194\u0ad5\u0003\u0002\u0002\u0002\u0196\u0ad8\u0003",
    "\u0002\u0002\u0002\u0198\u0af0\u0003\u0002\u0002\u0002\u019a\u0afe\u0003",
    "\u0002\u0002\u0002\u019c\u0b12\u0003\u0002\u0002\u0002\u019e\u0b19\u0003",
    "\u0002\u0002\u0002\u01a0\u0b23\u0003\u0002\u0002\u0002\u01a2\u0b37\u0003",
    "\u0002\u0002\u0002\u01a4\u0b3d\u0003\u0002\u0002\u0002\u01a6\u0b48\u0003",
    "\u0002\u0002\u0002\u01a8\u0b4a\u0003\u0002\u0002\u0002\u01aa\u0b56\u0003",
    "\u0002\u0002\u0002\u01ac\u0b63\u0003\u0002\u0002\u0002\u01ae\u0b75\u0003",
    "\u0002\u0002\u0002\u01b0\u0b80\u0003\u0002\u0002\u0002\u01b2\u0b82\u0003",
    "\u0002\u0002\u0002\u01b4\u0b9e\u0003\u0002\u0002\u0002\u01b6\u0ba0\u0003",
    "\u0002\u0002\u0002\u01b8\u0baa\u0003\u0002\u0002\u0002\u01ba\u0bb1\u0003",
    "\u0002\u0002\u0002\u01bc\u0bbb\u0003\u0002\u0002\u0002\u01be\u0bc5\u0003",
    "\u0002\u0002\u0002\u01c0\u0bcf\u0003\u0002\u0002\u0002\u01c2\u0bd9\u0003",
    "\u0002\u0002\u0002\u01c4\u0be3\u0003\u0002\u0002\u0002\u01c6\u0bed\u0003",
    "\u0002\u0002\u0002\u01c8\u0bfb\u0003\u0002\u0002\u0002\u01ca\u0c08\u0003",
    "\u0002\u0002\u0002\u01cc\u0c12\u0003\u0002\u0002\u0002\u01ce\u0c49\u0003",
    "\u0002\u0002\u0002\u01d0\u0c4b\u0003\u0002\u0002\u0002\u01d2\u0ceb\u0003",
    "\u0002\u0002\u0002\u01d4\u0cee\u0003\u0002\u0002\u0002\u01d6\u0cf8\u0003",
    "\u0002\u0002\u0002\u01d8\u0d09\u0003\u0002\u0002\u0002\u01da\u0d2c\u0003",
    "\u0002\u0002\u0002\u01dc\u0d2e\u0003\u0002\u0002\u0002\u01de\u0d3e\u0003",
    "\u0002\u0002\u0002\u01e0\u0d40\u0003\u0002\u0002\u0002\u01e2\u0d4a\u0003",
    "\u0002\u0002\u0002\u01e4\u0d59\u0003\u0002\u0002\u0002\u01e6\u0d65\u0003",
    "\u0002\u0002\u0002\u01e8\u0d67\u0003\u0002\u0002\u0002\u01ea\u0d7e\u0003",
    "\u0002\u0002\u0002\u01ec\u0d80\u0003\u0002\u0002\u0002\u01ee\u0d8a\u0003",
    "\u0002\u0002\u0002\u01f0\u0d9c\u0003\u0002\u0002\u0002\u01f2\u0d9e\u0003",
    "\u0002\u0002\u0002\u01f4\u0db5\u0003\u0002\u0002\u0002\u01f6\u0dbf\u0003",
    "\u0002\u0002\u0002\u01f8\u0dcd\u0003\u0002\u0002\u0002\u01fa\u0de4\u0003",
    "\u0002\u0002\u0002\u01fc\u0de6\u0003\u0002\u0002\u0002\u01fe\u0df1\u0003",
    "\u0002\u0002\u0002\u0200\u0df7\u0003\u0002\u0002\u0002\u0202\u0e07\u0003",
    "\u0002\u0002\u0002\u0204\u0e09\u0003\u0002\u0002\u0002\u0206\u0e0d\u0003",
    "\u0002\u0002\u0002\u0208\u0e19\u0003\u0002\u0002\u0002\u020a\u0e31\u0003",
    "\u0002\u0002\u0002\u020c\u0e33\u0003\u0002\u0002\u0002\u020e\u0e39\u0003",
    "\u0002\u0002\u0002\u0210\u0e3d\u0003\u0002\u0002\u0002\u0212\u0e4e\u0003",
    "\u0002\u0002\u0002\u0214\u0e59\u0003\u0002\u0002\u0002\u0216\u0e69\u0003",
    "\u0002\u0002\u0002\u0218\u0e6b\u0003\u0002\u0002\u0002\u021a\u0e7d\u0003",
    "\u0002\u0002\u0002\u021c\u0e7f\u0003\u0002\u0002\u0002\u021e\u0e8a\u0003",
    "\u0002\u0002\u0002\u0220\u0f26\u0003\u0002\u0002\u0002\u0222\u0f28\u0003",
    "\u0002\u0002\u0002\u0224\u0f2f\u0003\u0002\u0002\u0002\u0226\u0f3f\u0003",
    "\u0002\u0002\u0002\u0228\u0f41\u0003\u0002\u0002\u0002\u022a\u0f51\u0003",
    "\u0002\u0002\u0002\u022c\u0f53\u0003\u0002\u0002\u0002\u022e\u0f5e\u0003",
    "\u0002\u0002\u0002\u0230\u0f61\u0003\u0002\u0002\u0002\u0232\u0f70\u0003",
    "\u0002\u0002\u0002\u0234\u0f73\u0003\u0002\u0002\u0002\u0236\u0f86\u0003",
    "\u0002\u0002\u0002\u0238\u0f88\u0003\u0002\u0002\u0002\u023a\u0fa1\u0003",
    "\u0002\u0002\u0002\u023c\u0fa3\u0003\u0002\u0002\u0002\u023e\u0fb0\u0003",
    "\u0002\u0002\u0002\u0240\u0fb7\u0003\u0002\u0002\u0002\u0242\u0fbd\u0003",
    "\u0002\u0002\u0002\u0244\u0fc7\u0003\u0002\u0002\u0002\u0246\u0fc9\u0003",
    "\u0002\u0002\u0002\u0248\u0fd1\u0003\u0002\u0002\u0002\u024a\u0fdb\u0003",
    "\u0002\u0002\u0002\u024c\u0fe9\u0003\u0002\u0002\u0002\u024e\u0fef\u0003",
    "\u0002\u0002\u0002\u0250\u0ff6\u0003\u0002\u0002\u0002\u0252\u100e\u0003",
    "\u0002\u0002\u0002\u0254\u1011\u0003\u0002\u0002\u0002\u0256\u101d\u0003",
    "\u0002\u0002\u0002\u0258\u1020\u0003\u0002\u0002\u0002\u025a\u102e\u0003",
    "\u0002\u0002\u0002\u025c\u1036\u0003\u0002\u0002\u0002\u025e\u1043\u0003",
    "\u0002\u0002\u0002\u0260\u1048\u0003\u0002\u0002\u0002\u0262\u1053\u0003",
    "\u0002\u0002\u0002\u0264\u105e\u0003\u0002\u0002\u0002\u0266\u1064\u0003",
    "\u0002\u0002\u0002\u0268\u1078\u0003\u0002\u0002\u0002\u026a\u1081\u0003",
    "\u0002\u0002\u0002\u026c\u1083\u0003\u0002\u0002\u0002\u026e\u108d\u0003",
    "\u0002\u0002\u0002\u0270\u1092\u0003\u0002\u0002\u0002\u0272\u109a\u0003",
    "\u0002\u0002\u0002\u0274\u10a1\u0003\u0002\u0002\u0002\u0276\u10ad\u0003",
    "\u0002\u0002\u0002\u0278\u10d3\u0003\u0002\u0002\u0002\u027a\u10fe\u0003",
    "\u0002\u0002\u0002\u027c\u1100\u0003\u0002\u0002\u0002\u027e\u110e\u0003",
    "\u0002\u0002\u0002\u0280\u1118\u0003\u0002\u0002\u0002\u0282\u111d\u0003",
    "\u0002\u0002\u0002\u0284\u1127\u0003\u0002\u0002\u0002\u0286\u1134\u0003",
    "\u0002\u0002\u0002\u0288\u113b\u0003\u0002\u0002\u0002\u028a\u113d\u0003",
    "\u0002\u0002\u0002\u028c\u1145\u0003\u0002\u0002\u0002\u028e\u1151\u0003",
    "\u0002\u0002\u0002\u0290\u1153\u0003\u0002\u0002\u0002\u0292\u1168\u0003",
    "\u0002\u0002\u0002\u0294\u1170\u0003\u0002\u0002\u0002\u0296\u1173\u0003",
    "\u0002\u0002\u0002\u0298\u117b\u0003\u0002\u0002\u0002\u029a\u118f\u0003",
    "\u0002\u0002\u0002\u029c\u1199\u0003\u0002\u0002\u0002\u029e\u11ae\u0003",
    "\u0002\u0002\u0002\u02a0\u11b5\u0003\u0002\u0002\u0002\u02a2\u11b8\u0003",
    "\u0002\u0002\u0002\u02a4\u11c7\u0003\u0002\u0002\u0002\u02a6\u11ce\u0003",
    "\u0002\u0002\u0002\u02a8\u1201\u0003\u0002\u0002\u0002\u02aa\u1203\u0003",
    "\u0002\u0002\u0002\u02ac\u120b\u0003\u0002\u0002\u0002\u02ae\u1219\u0003",
    "\u0002\u0002\u0002\u02b0\u121b\u0003\u0002\u0002\u0002\u02b2\u121f\u0003",
    "\u0002\u0002\u0002\u02b4\u122a\u0003\u0002\u0002\u0002\u02b6\u123d\u0003",
    "\u0002\u0002\u0002\u02b8\u124b\u0003\u0002\u0002\u0002\u02ba\u1255\u0003",
    "\u0002\u0002\u0002\u02bc\u1266\u0003\u0002\u0002\u0002\u02be\u1273\u0003",
    "\u0002\u0002\u0002\u02c0\u127f\u0003\u0002\u0002\u0002\u02c2\u1281\u0003",
    "\u0002\u0002\u0002\u02c4\u1285\u0003\u0002\u0002\u0002\u02c6\u1290\u0003",
    "\u0002\u0002\u0002\u02c8\u12d5\u0003\u0002\u0002\u0002\u02ca\u12ed\u0003",
    "\u0002\u0002\u0002\u02cc\u12f1\u0003\u0002\u0002\u0002\u02ce\u1303\u0003",
    "\u0002\u0002\u0002\u02d0\u130c\u0003\u0002\u0002\u0002\u02d2\u131c\u0003",
    "\u0002\u0002\u0002\u02d4\u131f\u0003\u0002\u0002\u0002\u02d6\u1325\u0003",
    "\u0002\u0002\u0002\u02d8\u1338\u0003\u0002\u0002\u0002\u02da\u133a\u0003",
    "\u0002\u0002\u0002\u02dc\u1344\u0003\u0002\u0002\u0002\u02de\u1358\u0003",
    "\u0002\u0002\u0002\u02e0\u136e\u0003\u0002\u0002\u0002\u02e2\u1370\u0003",
    "\u0002\u0002\u0002\u02e4\u137a\u0003\u0002\u0002\u0002\u02e6\u1388\u0003",
    "\u0002\u0002\u0002\u02e8\u138a\u0003\u0002\u0002\u0002\u02ea\u1390\u0003",
    "\u0002\u0002\u0002\u02ec\u1397\u0003\u0002\u0002\u0002\u02ee\u139c\u0003",
    "\u0002\u0002\u0002\u02f0\u13a1\u0003\u0002\u0002\u0002\u02f2\u13b6\u0003",
    "\u0002\u0002\u0002\u02f4\u13bc\u0003\u0002\u0002\u0002\u02f6\u13c8\u0003",
    "\u0002\u0002\u0002\u02f8\u13ca\u0003\u0002\u0002\u0002\u02fa\u13d4\u0003",
    "\u0002\u0002\u0002\u02fc\u13e7\u0003\u0002\u0002\u0002\u02fe\u13f2\u0003",
    "\u0002\u0002\u0002\u0300\u13f4\u0003\u0002\u0002\u0002\u0302\u14a0\u0003",
    "\u0002\u0002\u0002\u0304\u14a2\u0003\u0002\u0002\u0002\u0306\u14b3\u0003",
    "\u0002\u0002\u0002\u0308\u14c4\u0003\u0002\u0002\u0002\u030a\u14d5\u0003",
    "\u0002\u0002\u0002\u030c\u14e0\u0003\u0002\u0002\u0002\u030e\u14f1\u0003",
    "\u0002\u0002\u0002\u0310\u14ff\u0003\u0002\u0002\u0002\u0312\u1503\u0003",
    "\u0002\u0002\u0002\u0314\u1515\u0003\u0002\u0002\u0002\u0316\u151b\u0003",
    "\u0002\u0002\u0002\u0318\u152b\u0003\u0002\u0002\u0002\u031a\u1532\u0003",
    "\u0002\u0002\u0002\u031c\u153e\u0003\u0002\u0002\u0002\u031e\u1558\u0003",
    "\u0002\u0002\u0002\u0320\u1566\u0003\u0002\u0002\u0002\u0322\u1578\u0003",
    "\u0002\u0002\u0002\u0324\u1580\u0003\u0002\u0002\u0002\u0326\u1587\u0003",
    "\u0002\u0002\u0002\u0328\u15c9\u0003\u0002\u0002\u0002\u032a\u032c\u0007",
    "\u0003\u0002\u0002\u032b\u032a\u0003\u0002\u0002\u0002\u032b\u032c\u0003",
    "\u0002\u0002\u0002\u032c\u032e\u0003\u0002\u0002\u0002\u032d\u032f\u0005",
    "\u00b8]\u0002\u032e\u032d\u0003\u0002\u0002\u0002\u032e\u032f\u0003",
    "\u0002\u0002\u0002\u032f\u0331\u0003\u0002\u0002\u0002\u0330\u0332\u0005",
    "\u00bc_\u0002\u0331\u0330\u0003\u0002\u0002\u0002\u0331\u0332\u0003",
    "\u0002\u0002\u0002\u0332\u0336\u0003\u0002\u0002\u0002\u0333\u0335\u0005",
    "\u013c\u009f\u0002\u0334\u0333\u0003\u0002\u0002\u0002\u0335\u0338\u0003",
    "\u0002\u0002\u0002\u0336\u0334\u0003\u0002\u0002\u0002\u0336\u0337\u0003",
    "\u0002\u0002\u0002\u0337\u033a\u0003\u0002\u0002\u0002\u0338\u0336\u0003",
    "\u0002\u0002\u0002\u0339\u033b\u0005\u00c0a\u0002\u033a\u0339\u0003",
    "\u0002\u0002\u0002\u033a\u033b\u0003\u0002\u0002\u0002\u033b\u033c\u0003",
    "\u0002\u0002\u0002\u033c\u033d\u0007\u0002\u0002\u0003\u033d\u0003\u0003",
    "\u0002\u0002\u0002\u033e\u0340\u0005\u0194\u00cb\u0002\u033f\u0341\u0005",
    "\u0014\u000b\u0002\u0340\u033f\u0003\u0002\u0002\u0002\u0340\u0341\u0003",
    "\u0002\u0002\u0002\u0341\u0344\u0003\u0002\u0002\u0002\u0342\u0344\u0005",
    "\u00c6d\u0002\u0343\u033e\u0003\u0002\u0002\u0002\u0343\u0342\u0003",
    "\u0002\u0002\u0002\u0344\u034c\u0003\u0002\u0002\u0002\u0345\u0346\u0007",
    "\u0082\u0002\u0002\u0346\u0348\u0005\u0194\u00cb\u0002\u0347\u0349\u0005",
    "\u0014\u000b\u0002\u0348\u0347\u0003\u0002\u0002\u0002\u0348\u0349\u0003",
    "\u0002\u0002\u0002\u0349\u034b\u0003\u0002\u0002\u0002\u034a\u0345\u0003",
    "\u0002\u0002\u0002\u034b\u034e\u0003\u0002\u0002\u0002\u034c\u034a\u0003",
    "\u0002\u0002\u0002\u034c\u034d\u0003\u0002\u0002\u0002\u034d\u0005\u0003",
    "\u0002\u0002\u0002\u034e\u034c\u0003\u0002\u0002\u0002\u034f\u0355\u0005",
    "\b\u0005\u0002\u0350\u0354\u0007\u0093\u0002\u0002\u0351\u0354\u0005",
    "\u0124\u0093\u0002\u0352\u0354\u0007\u0088\u0002\u0002\u0353\u0350\u0003",
    "\u0002\u0002\u0002\u0353\u0351\u0003\u0002\u0002\u0002\u0353\u0352\u0003",
    "\u0002\u0002\u0002\u0354\u0357\u0003\u0002\u0002\u0002\u0355\u0353\u0003",
    "\u0002\u0002\u0002\u0355\u0356\u0003\u0002\u0002\u0002\u0356\u0007\u0003",
    "\u0002\u0002\u0002\u0357\u0355\u0003\u0002\u0002\u0002\u0358\u035d\u0005",
    "\n\u0006\u0002\u0359\u035d\u0005\u0012\n\u0002\u035a\u035b\u0007l\u0002",
    "\u0002\u035b\u035d\u0007\u0088\u0002\u0002\u035c\u0358\u0003\u0002\u0002",
    "\u0002\u035c\u0359\u0003\u0002\u0002\u0002\u035c\u035a\u0003\u0002\u0002",
    "\u0002\u035d\t\u0003\u0002\u0002\u0002\u035e\u0361\u0005\f\u0007\u0002",
    "\u035f\u0361\u0007\u0013\u0002\u0002\u0360\u035e\u0003\u0002\u0002\u0002",
    "\u0360\u035f\u0003\u0002\u0002\u0002\u0361\u000b\u0003\u0002\u0002\u0002",
    "\u0362\u0366\u0005\u000e\b\u0002\u0363\u0366\u0005\u0010\t\u0002\u0364",
    "\u0366\u0007\u001e\u0002\u0002\u0365\u0362\u0003\u0002\u0002\u0002\u0365",
    "\u0363\u0003\u0002\u0002\u0002\u0365\u0364\u0003\u0002\u0002\u0002\u0366",
    "\r\u0003\u0002\u0002\u0002\u0367\u0368\t\u0002\u0002\u0002\u0368\u000f",
    "\u0003\u0002\u0002\u0002\u0369\u036a\t\u0003\u0002\u0002\u036a\u0011",
    "\u0003\u0002\u0002\u0002\u036b\u0370\u0005\u0004\u0003\u0002\u036c\u0370",
    "\u0007E\u0002\u0002\u036d\u0370\u0007$\u0002\u0002\u036e\u0370\u0007",
    "\\\u0002\u0002\u036f\u036b\u0003\u0002\u0002\u0002\u036f\u036c\u0003",
    "\u0002\u0002\u0002\u036f\u036d\u0003\u0002\u0002\u0002\u036f\u036e\u0003",
    "\u0002\u0002\u0002\u0370\u0013\u0003\u0002\u0002\u0002\u0371\u0372\u0007",
    "\u0091\u0002\u0002\u0372\u0377\u0005\u0006\u0004\u0002\u0373\u0374\u0007",
    "\u0083\u0002\u0002\u0374\u0376\u0005\u0006\u0004\u0002\u0375\u0373\u0003",
    "\u0002\u0002\u0002\u0376\u0379\u0003\u0002\u0002\u0002\u0377\u0375\u0003",
    "\u0002\u0002\u0002\u0377\u0378\u0003\u0002\u0002\u0002\u0378\u037a\u0003",
    "\u0002\u0002\u0002\u0379\u0377\u0003\u0002\u0002\u0002\u037a\u037b\u0007",
    "\u0092\u0002\u0002\u037b\u0015\u0003\u0002\u0002\u0002\u037c\u0381\u0005",
    "\u0018\r\u0002\u037d\u037e\u0007\u0083\u0002\u0002\u037e\u0380\u0005",
    "\u0018\r\u0002\u037f\u037d\u0003\u0002\u0002\u0002\u0380\u0383\u0003",
    "\u0002\u0002\u0002\u0381\u037f\u0003\u0002\u0002\u0002\u0381\u0382\u0003",
    "\u0002\u0002\u0002\u0382\u0017\u0003\u0002\u0002\u0002\u0383\u0381\u0003",
    "\u0002\u0002\u0002\u0384\u0385\u0005\u0194\u00cb\u0002\u0385\u0386\u0007",
    "\u0084\u0002\u0002\u0386\u0388\u0003\u0002\u0002\u0002\u0387\u0384\u0003",
    "\u0002\u0002\u0002\u0387\u0388\u0003\u0002\u0002\u0002\u0388\u038a\u0003",
    "\u0002\u0002\u0002\u0389\u038b\t\u0004\u0002\u0002\u038a\u0389\u0003",
    "\u0002\u0002\u0002\u038a\u038b\u0003\u0002\u0002\u0002\u038b\u038e\u0003",
    "\u0002\u0002\u0002\u038c\u038f\u0007j\u0002\u0002\u038d\u038f\u0005",
    "\u0006\u0004\u0002\u038e\u038c\u0003\u0002\u0002\u0002\u038e\u038d\u0003",
    "\u0002\u0002\u0002\u038e\u038f\u0003\u0002\u0002\u0002\u038f\u0390\u0003",
    "\u0002\u0002\u0002\u0390\u0391\u0005\u001a\u000e\u0002\u0391\u0019\u0003",
    "\u0002\u0002\u0002\u0392\u0395\u0005\u001e\u0010\u0002\u0393\u0395\u0005",
    "\u001c\u000f\u0002\u0394\u0392\u0003\u0002\u0002\u0002\u0394\u0393\u0003",
    "\u0002\u0002\u0002\u0395\u001b\u0003\u0002\u0002\u0002\u0396\u039a\u0005",
    "d3\u0002\u0397\u039a\u0005p9\u0002\u0398\u039a\u0005\"\u0012\u0002\u0399",
    "\u0396\u0003\u0002\u0002\u0002\u0399\u0397\u0003\u0002\u0002\u0002\u0399",
    "\u0398\u0003\u0002\u0002\u0002\u039a\u001d\u0003\u0002\u0002\u0002\u039b",
    "\u039c\u0005:\u001e\u0002\u039c\u039d\u0005 \u0011\u0002\u039d\u039e",
    "\u0005\u001a\u000e\u0002\u039e\u001f\u0003\u0002\u0002\u0002\u039f\u03ab",
    "\u0007\u0090\u0002\u0002\u03a0\u03ab\u0007\u009f\u0002\u0002\u03a1\u03ab",
    "\u0007\u00a0\u0002\u0002\u03a2\u03ab\u0007\u00a1\u0002\u0002\u03a3\u03ab",
    "\u0007\u00a2\u0002\u0002\u03a4\u03ab\u0007\u00a3\u0002\u0002\u03a5\u03ab",
    "\u0007\u00a4\u0002\u0002\u03a6\u03ab\u0007\u00a5\u0002\u0002\u03a7\u03ab",
    "\u0007\u00a6\u0002\u0002\u03a8\u03ab\u0007\u00a8\u0002\u0002\u03a9\u03ab",
    "\u0005\u015c\u00af\u0002\u03aa\u039f\u0003\u0002\u0002\u0002\u03aa\u03a0",
    "\u0003\u0002\u0002\u0002\u03aa\u03a1\u0003\u0002\u0002\u0002\u03aa\u03a2",
    "\u0003\u0002\u0002\u0002\u03aa\u03a3\u0003\u0002\u0002\u0002\u03aa\u03a4",
    "\u0003\u0002\u0002\u0002\u03aa\u03a5\u0003\u0002\u0002\u0002\u03aa\u03a6",
    "\u0003\u0002\u0002\u0002\u03aa\u03a7\u0003\u0002\u0002\u0002\u03aa\u03a8",
    "\u0003\u0002\u0002\u0002\u03aa\u03a9\u0003\u0002\u0002\u0002\u03ab!",
    "\u0003\u0002\u0002\u0002\u03ac\u03b2\u0005$\u0013\u0002\u03ad\u03ae",
    "\u0007\u0093\u0002\u0002\u03ae\u03af\u0005\u001a\u000e\u0002\u03af\u03b0",
    "\u0007\u0084\u0002\u0002\u03b0\u03b1\u0005\u001a\u000e\u0002\u03b1\u03b3",
    "\u0003\u0002\u0002\u0002\u03b2\u03ad\u0003\u0002\u0002\u0002\u03b2\u03b3",
    "\u0003\u0002\u0002\u0002\u03b3#\u0003\u0002\u0002\u0002\u03b4\u03b7",
    "\u0005&\u0014\u0002\u03b5\u03b6\u0007\u0095\u0002\u0002\u03b6\u03b8",
    "\u0005$\u0013\u0002\u03b7\u03b5\u0003\u0002\u0002\u0002\u03b7\u03b8",
    "\u0003\u0002\u0002\u0002\u03b8%\u0003\u0002\u0002\u0002\u03b9\u03be",
    "\u0005(\u0015\u0002\u03ba\u03bb\u0007\u0099\u0002\u0002\u03bb\u03bd",
    "\u0005(\u0015\u0002\u03bc\u03ba\u0003\u0002\u0002\u0002\u03bd\u03c0",
    "\u0003\u0002\u0002\u0002\u03be\u03bc\u0003\u0002\u0002\u0002\u03be\u03bf",
    "\u0003\u0002\u0002\u0002\u03bf\'\u0003\u0002\u0002\u0002\u03c0\u03be",
    "\u0003\u0002\u0002\u0002\u03c1\u03c6\u0005*\u0016\u0002\u03c2\u03c3",
    "\u0007\u0098\u0002\u0002\u03c3\u03c5\u0005*\u0016\u0002\u03c4\u03c2",
    "\u0003\u0002\u0002\u0002\u03c5\u03c8\u0003\u0002\u0002\u0002\u03c6\u03c4",
    "\u0003\u0002\u0002\u0002\u03c6\u03c7\u0003\u0002\u0002\u0002\u03c7)",
    "\u0003\u0002\u0002\u0002\u03c8\u03c6\u0003\u0002\u0002\u0002\u03c9\u03ce",
    "\u0005,\u0017\u0002\u03ca\u03cb\u0007\u008c\u0002\u0002\u03cb\u03cd",
    "\u0005,\u0017\u0002\u03cc\u03ca\u0003\u0002\u0002\u0002\u03cd\u03d0",
    "\u0003\u0002\u0002\u0002\u03ce\u03cc\u0003\u0002\u0002\u0002\u03ce\u03cf",
    "\u0003\u0002\u0002\u0002\u03cf+\u0003\u0002\u0002\u0002\u03d0\u03ce",
    "\u0003\u0002\u0002\u0002\u03d1\u03d6\u0005.\u0018\u0002\u03d2\u03d3",
    "\u0007\u008d\u0002\u0002\u03d3\u03d5\u0005.\u0018\u0002\u03d4\u03d2",
    "\u0003\u0002\u0002\u0002\u03d5\u03d8\u0003\u0002\u0002\u0002\u03d6\u03d4",
    "\u0003\u0002\u0002\u0002\u03d6\u03d7\u0003\u0002\u0002\u0002\u03d7-",
    "\u0003\u0002\u0002\u0002\u03d8\u03d6\u0003\u0002\u0002\u0002\u03d9\u03de",
    "\u00050\u0019\u0002\u03da\u03db\u0007\u008b\u0002\u0002\u03db\u03dd",
    "\u00050\u0019\u0002\u03dc\u03da\u0003\u0002\u0002\u0002\u03dd\u03e0",
    "\u0003\u0002\u0002\u0002\u03de\u03dc\u0003\u0002\u0002\u0002\u03de\u03df",
    "\u0003\u0002\u0002\u0002\u03df/\u0003\u0002\u0002\u0002\u03e0\u03de",
    "\u0003\u0002\u0002\u0002\u03e1\u03e6\u00052\u001a\u0002\u03e2\u03e3",
    "\t\u0005\u0002\u0002\u03e3\u03e5\u00052\u001a\u0002\u03e4\u03e2\u0003",
    "\u0002\u0002\u0002\u03e5\u03e8\u0003\u0002\u0002\u0002\u03e6\u03e4\u0003",
    "\u0002\u0002\u0002\u03e6\u03e7\u0003\u0002\u0002\u0002\u03e71\u0003",
    "\u0002\u0002\u0002\u03e8\u03e6\u0003\u0002\u0002\u0002\u03e9\u03f2\u0005",
    "4\u001b\u0002\u03ea\u03eb\t\u0006\u0002\u0002\u03eb\u03f1\u00054\u001b",
    "\u0002\u03ec\u03ed\u0007<\u0002\u0002\u03ed\u03f1\u0005b2\u0002\u03ee",
    "\u03ef\u0007\u000e\u0002\u0002\u03ef\u03f1\u0005\u0006\u0004\u0002\u03f0",
    "\u03ea\u0003\u0002\u0002\u0002\u03f0\u03ec\u0003\u0002\u0002\u0002\u03f0",
    "\u03ee\u0003\u0002\u0002\u0002\u03f1\u03f4\u0003\u0002\u0002\u0002\u03f2",
    "\u03f0\u0003\u0002\u0002\u0002\u03f2\u03f3\u0003\u0002\u0002\u0002\u03f3",
    "3\u0003\u0002\u0002\u0002\u03f4\u03f2\u0003\u0002\u0002\u0002\u03f5",
    "\u03fd\u00056\u001c\u0002\u03f6\u03f9\u0007\u00a7\u0002\u0002\u03f7",
    "\u03f9\u0005\u015a\u00ae\u0002\u03f8\u03f6\u0003\u0002\u0002\u0002\u03f8",
    "\u03f7\u0003\u0002\u0002\u0002\u03f9\u03fa\u0003\u0002\u0002\u0002\u03fa",
    "\u03fc\u00056\u001c\u0002\u03fb\u03f8\u0003\u0002\u0002\u0002\u03fc",
    "\u03ff\u0003\u0002\u0002\u0002\u03fd\u03fb\u0003\u0002\u0002\u0002\u03fd",
    "\u03fe\u0003\u0002\u0002\u0002\u03fe5\u0003\u0002\u0002\u0002\u03ff",
    "\u03fd\u0003\u0002\u0002\u0002\u0400\u0405\u00058\u001d\u0002\u0401",
    "\u0402\t\u0007\u0002\u0002\u0402\u0404\u00058\u001d\u0002\u0403\u0401",
    "\u0003\u0002\u0002\u0002\u0404\u0407\u0003\u0002\u0002\u0002\u0405\u0403",
    "\u0003\u0002\u0002\u0002\u0405\u0406\u0003\u0002\u0002\u0002\u04067",
    "\u0003\u0002\u0002\u0002\u0407\u0405\u0003\u0002\u0002\u0002\u0408\u040d",
    "\u0005:\u001e\u0002\u0409\u040a\t\b\u0002\u0002\u040a\u040c\u0005:\u001e",
    "\u0002\u040b\u0409\u0003\u0002\u0002\u0002\u040c\u040f\u0003\u0002\u0002",
    "\u0002\u040d\u040b\u0003\u0002\u0002\u0002\u040d\u040e\u0003\u0002\u0002",
    "\u0002\u040e9\u0003\u0002\u0002\u0002\u040f\u040d\u0003\u0002\u0002",
    "\u0002\u0410\u0429\u0005<\u001f\u0002\u0411\u0412\u0007\u0086\u0002",
    "\u0002\u0412\u0429\u0005:\u001e\u0002\u0413\u0414\u0007\u0087\u0002",
    "\u0002\u0414\u0429\u0005:\u001e\u0002\u0415\u0416\u0007\u008e\u0002",
    "\u0002\u0416\u0429\u0005:\u001e\u0002\u0417\u0418\u0007\u008f\u0002",
    "\u0002\u0418\u0429\u0005:\u001e\u0002\u0419\u041a\u0007\u0096\u0002",
    "\u0002\u041a\u0429\u0005:\u001e\u0002\u041b\u041c\u0007\u0097\u0002",
    "\u0002\u041c\u0429\u0005:\u001e\u0002\u041d\u041e\u0007\u0080\u0002",
    "\u0002\u041e\u041f\u0005\u0006\u0004\u0002\u041f\u0420\u0007\u0081\u0002",
    "\u0002\u0420\u0421\u0005:\u001e\u0002\u0421\u0429\u0003\u0002\u0002",
    "\u0002\u0422\u0423\u0007\u0011\u0002\u0002\u0423\u0429\u0005:\u001e",
    "\u0002\u0424\u0425\u0007\u008b\u0002\u0002\u0425\u0429\u0005:\u001e",
    "\u0002\u0426\u0427\u0007\u0088\u0002\u0002\u0427\u0429\u0005:\u001e",
    "\u0002\u0428\u0410\u0003\u0002\u0002\u0002\u0428\u0411\u0003\u0002\u0002",
    "\u0002\u0428\u0413\u0003\u0002\u0002\u0002\u0428\u0415\u0003\u0002\u0002",
    "\u0002\u0428\u0417\u0003\u0002\u0002\u0002\u0428\u0419\u0003\u0002\u0002",
    "\u0002\u0428\u041b\u0003\u0002\u0002\u0002\u0428\u041d\u0003\u0002\u0002",
    "\u0002\u0428\u0422\u0003\u0002\u0002\u0002\u0428\u0424\u0003\u0002\u0002",
    "\u0002\u0428\u0426\u0003\u0002\u0002\u0002\u0429;\u0003\u0002\u0002",
    "\u0002\u042a\u042e\u0005> \u0002\u042b\u042d\u0005B\"\u0002\u042c\u042b",
    "\u0003\u0002\u0002\u0002\u042d\u0430\u0003\u0002\u0002\u0002\u042e\u042c",
    "\u0003\u0002\u0002\u0002\u042e\u042f\u0003\u0002\u0002\u0002\u042f\u0441",
    "\u0003\u0002\u0002\u0002\u0430\u042e\u0003\u0002\u0002\u0002\u0431\u0438",
    "\u0005@!\u0002\u0432\u0438\u0005\u0190\u00c9\u0002\u0433\u0438\u0007",
    "\u0096\u0002\u0002\u0434\u0438\u0007\u0097\u0002\u0002\u0435\u0436\u0007",
    "\u009a\u0002\u0002\u0436\u0438\u0005\u0194\u00cb\u0002\u0437\u0431\u0003",
    "\u0002\u0002\u0002\u0437\u0432\u0003\u0002\u0002\u0002\u0437\u0433\u0003",
    "\u0002\u0002\u0002\u0437\u0434\u0003\u0002\u0002\u0002\u0437\u0435\u0003",
    "\u0002\u0002\u0002\u0438\u043c\u0003\u0002\u0002\u0002\u0439\u043b\u0005",
    "B\"\u0002\u043a\u0439\u0003\u0002\u0002\u0002\u043b\u043e\u0003\u0002",
    "\u0002\u0002\u043c\u043a\u0003\u0002\u0002\u0002\u043c\u043d\u0003\u0002",
    "\u0002\u0002\u043d\u0440\u0003\u0002\u0002\u0002\u043e\u043c\u0003\u0002",
    "\u0002\u0002\u043f\u0437\u0003\u0002\u0002\u0002\u0440\u0443\u0003\u0002",
    "\u0002\u0002\u0441\u043f\u0003\u0002\u0002\u0002\u0441\u0442\u0003\u0002",
    "\u0002\u0002\u0442=\u0003\u0002\u0002\u0002\u0443\u0441\u0003\u0002",
    "\u0002\u0002\u0444\u04b2\u0005\u015e\u00b0\u0002\u0445\u0447\u0005\u0194",
    "\u00cb\u0002\u0446\u0448\u0005\u0014\u000b\u0002\u0447\u0446\u0003\u0002",
    "\u0002\u0002\u0447\u0448\u0003\u0002\u0002\u0002\u0448\u04b2\u0003\u0002",
    "\u0002\u0002\u0449\u044a\u0007\u0080\u0002\u0002\u044a\u044b\u0005\u001a",
    "\u000e\u0002\u044b\u044c\u0007\u0081\u0002\u0002\u044c\u04b2\u0003\u0002",
    "\u0002\u0002\u044d\u04b2\u0005F$\u0002\u044e\u04b2\u0005\u00c6d\u0002",
    "\u044f\u04b2\u0007s\u0002\u0002\u0450\u04b2\u0007_\u0002\u0002\u0451",
    "\u045b\u0007\u0012\u0002\u0002\u0452\u0453\u0007\u0082\u0002\u0002\u0453",
    "\u0455\u0005\u0194\u00cb\u0002\u0454\u0456\u0005\u0014\u000b\u0002\u0455",
    "\u0454\u0003\u0002\u0002\u0002\u0455\u0456\u0003\u0002\u0002\u0002\u0456",
    "\u045c\u0003\u0002\u0002\u0002\u0457\u0458\u0007~\u0002\u0002\u0458",
    "\u0459\u0005H%\u0002\u0459\u045a\u0007\u007f\u0002\u0002\u045a\u045c",
    "\u0003\u0002\u0002\u0002\u045b\u0452\u0003\u0002\u0002\u0002\u045b\u0457",
    "\u0003\u0002\u0002\u0002\u045c\u04b2\u0003\u0002\u0002\u0002\u045d\u047a",
    "\u0007C\u0002\u0002\u045e\u0474\u0005\u0006\u0004\u0002\u045f\u0475",
    "\u0005\u0192\u00ca\u0002\u0460\u0475\u0005J&\u0002\u0461\u0462\u0007",
    "~\u0002\u0002\u0462\u0463\u0005H%\u0002\u0463\u0467\u0007\u007f\u0002",
    "\u0002\u0464\u0466\u0005\u0124\u0093\u0002\u0465\u0464\u0003\u0002\u0002",
    "\u0002\u0466\u0469\u0003\u0002\u0002\u0002\u0467\u0465\u0003\u0002\u0002",
    "\u0002\u0467\u0468\u0003\u0002\u0002\u0002\u0468\u046b\u0003\u0002\u0002",
    "\u0002\u0469\u0467\u0003\u0002\u0002\u0002\u046a\u046c\u0005\u0126\u0094",
    "\u0002\u046b\u046a\u0003\u0002\u0002\u0002\u046b\u046c\u0003\u0002\u0002",
    "\u0002\u046c\u0475\u0003\u0002\u0002\u0002\u046d\u046f\u0005\u0124\u0093",
    "\u0002\u046e\u046d\u0003\u0002\u0002\u0002\u046f\u0470\u0003\u0002\u0002",
    "\u0002\u0470\u046e\u0003\u0002\u0002\u0002\u0470\u0471\u0003\u0002\u0002",
    "\u0002\u0471\u0472\u0003\u0002\u0002\u0002\u0472\u0473\u0005\u0126\u0094",
    "\u0002\u0473\u0475\u0003\u0002\u0002\u0002\u0474\u045f\u0003\u0002\u0002",
    "\u0002\u0474\u0460\u0003\u0002\u0002\u0002\u0474\u0461\u0003\u0002\u0002",
    "\u0002\u0474\u046e\u0003\u0002\u0002\u0002\u0475\u047b\u0003\u0002\u0002",
    "\u0002\u0476\u047b\u0005X-\u0002\u0477\u0478\u0005\u0124\u0093\u0002",
    "\u0478\u0479\u0005\u0126\u0094\u0002\u0479\u047b\u0003\u0002\u0002\u0002",
    "\u047a\u045e\u0003\u0002\u0002\u0002\u047a\u0476\u0003\u0002\u0002\u0002",
    "\u047a\u0477\u0003\u0002\u0002\u0002\u047b\u04b2\u0003\u0002\u0002\u0002",
    "\u047c\u047d\u0007c\u0002\u0002\u047d\u0481\u0007\u0080\u0002\u0002",
    "\u047e\u0482\u0005^0\u0002\u047f\u0482\u0005\u0006\u0004\u0002\u0480",
    "\u0482\u0007l\u0002\u0002\u0481\u047e\u0003\u0002\u0002\u0002\u0481",
    "\u047f\u0003\u0002\u0002\u0002\u0481\u0480\u0003\u0002\u0002\u0002\u0482",
    "\u0483\u0003\u0002\u0002\u0002\u0483\u04b2\u0007\u0081\u0002\u0002\u0484",
    "\u0485\u0007\u001a\u0002\u0002\u0485\u0486\u0007\u0080\u0002\u0002\u0486",
    "\u0487\u0005\u001a\u000e\u0002\u0487\u0488\u0007\u0081\u0002\u0002\u0488",
    "\u04b2\u0003\u0002\u0002\u0002\u0489\u048a\u0007f\u0002\u0002\u048a",
    "\u048b\u0007\u0080\u0002\u0002\u048b\u048c\u0005\u001a\u000e\u0002\u048c",
    "\u048d\u0007\u0081\u0002\u0002\u048d\u04b2\u0003\u0002\u0002\u0002\u048e",
    "\u048f\u0007\u001f\u0002\u0002\u048f\u0490\u0007\u0080\u0002\u0002\u0490",
    "\u0491\u0005\u0006\u0004\u0002\u0491\u0492\u0007\u0081\u0002\u0002\u0492",
    "\u04b2\u0003\u0002\u0002\u0002\u0493\u0495\u0007\u0010\u0002\u0002\u0494",
    "\u0493\u0003\u0002\u0002\u0002\u0494\u0495\u0003\u0002\u0002\u0002\u0495",
    "\u0496\u0003\u0002\u0002\u0002\u0496\u049c\u0007 \u0002\u0002\u0497",
    "\u0499\u0007\u0080\u0002\u0002\u0498\u049a\u0005h5\u0002\u0499\u0498",
    "\u0003\u0002\u0002\u0002\u0499\u049a\u0003\u0002\u0002\u0002\u049a\u049b",
    "\u0003\u0002\u0002\u0002\u049b\u049d\u0007\u0081\u0002\u0002\u049c\u0497",
    "\u0003\u0002\u0002\u0002\u049c\u049d\u0003\u0002\u0002\u0002\u049d\u049e",
    "\u0003\u0002\u0002\u0002\u049e\u04b2\u0005\u008eH\u0002\u049f\u04a0",
    "\u0007Y\u0002\u0002\u04a0\u04a1\u0007\u0080\u0002\u0002\u04a1\u04a2",
    "\u0005\u0006\u0004\u0002\u04a2\u04a3\u0007\u0081\u0002\u0002\u04a3\u04b2",
    "\u0003\u0002\u0002\u0002\u04a4\u04a5\u0007A\u0002\u0002\u04a5\u04ab",
    "\u0007\u0080\u0002\u0002\u04a6\u04a7\u0005\u0194\u00cb\u0002\u04a7\u04a8",
    "\u0007\u0082\u0002\u0002\u04a8\u04aa\u0003\u0002\u0002\u0002\u04a9\u04a6",
    "\u0003\u0002\u0002\u0002\u04aa\u04ad\u0003\u0002\u0002\u0002\u04ab\u04a9",
    "\u0003\u0002\u0002\u0002\u04ab\u04ac\u0003\u0002\u0002\u0002\u04ac\u04ae",
    "\u0003\u0002\u0002\u0002\u04ad\u04ab\u0003\u0002\u0002\u0002\u04ae\u04af",
    "\u0005\u0194\u00cb\u0002\u04af\u04b0\u0007\u0081\u0002\u0002\u04b0\u04b2",
    "\u0003\u0002\u0002\u0002\u04b1\u0444\u0003\u0002\u0002\u0002\u04b1\u0445",
    "\u0003\u0002\u0002\u0002\u04b1\u0449\u0003\u0002\u0002\u0002\u04b1\u044d",
    "\u0003\u0002\u0002\u0002\u04b1\u044e\u0003\u0002\u0002\u0002\u04b1\u044f",
    "\u0003\u0002\u0002\u0002\u04b1\u0450\u0003\u0002\u0002\u0002\u04b1\u0451",
    "\u0003\u0002\u0002\u0002\u04b1\u045d\u0003\u0002\u0002\u0002\u04b1\u047c",
    "\u0003\u0002\u0002\u0002\u04b1\u0484\u0003\u0002\u0002\u0002\u04b1\u0489",
    "\u0003\u0002\u0002\u0002\u04b1\u048e\u0003\u0002\u0002\u0002\u04b1\u0494",
    "\u0003\u0002\u0002\u0002\u04b1\u049f\u0003\u0002\u0002\u0002\u04b1\u04a4",
    "\u0003\u0002\u0002\u0002\u04b2?\u0003\u0002\u0002\u0002\u04b3\u04b5",
    "\u0007\u0093\u0002\u0002\u04b4\u04b3\u0003\u0002\u0002\u0002\u04b4\u04b5",
    "\u0003\u0002\u0002\u0002\u04b5\u04b6\u0003\u0002\u0002\u0002\u04b6\u04b7",
    "\u0007\u0082\u0002\u0002\u04b7\u04b9\u0005\u0194\u00cb\u0002\u04b8\u04ba",
    "\u0005\u0014\u000b\u0002\u04b9\u04b8\u0003\u0002\u0002\u0002\u04b9\u04ba",
    "\u0003\u0002\u0002\u0002\u04baA\u0003\u0002\u0002\u0002\u04bb\u04bd",
    "\u0007\u0093\u0002\u0002\u04bc\u04bb\u0003\u0002\u0002\u0002\u04bc\u04bd",
    "\u0003\u0002\u0002\u0002\u04bd\u04be\u0003\u0002\u0002\u0002\u04be\u04bf",
    "\u0007~\u0002\u0002\u04bf\u04c4\u0005D#\u0002\u04c0\u04c1\u0007\u0083",
    "\u0002\u0002\u04c1\u04c3\u0005D#\u0002\u04c2\u04c0\u0003\u0002\u0002",
    "\u0002\u04c3\u04c6\u0003\u0002\u0002\u0002\u04c4\u04c2\u0003\u0002\u0002",
    "\u0002\u04c4\u04c5\u0003\u0002\u0002\u0002\u04c5\u04c7\u0003\u0002\u0002",
    "\u0002\u04c6\u04c4\u0003\u0002\u0002\u0002\u04c7\u04c8\u0007\u007f\u0002",
    "\u0002\u04c8C\u0003\u0002\u0002\u0002\u04c9\u04ca\u0005\u0194\u00cb",
    "\u0002\u04ca\u04cb\u0007\u0084\u0002\u0002\u04cb\u04cd\u0003\u0002\u0002",
    "\u0002\u04cc\u04c9\u0003\u0002\u0002\u0002\u04cc\u04cd\u0003\u0002\u0002",
    "\u0002\u04cd\u04ce\u0003\u0002\u0002\u0002\u04ce\u04cf\u0005\u001a\u000e",
    "\u0002\u04cfE\u0003\u0002\u0002\u0002\u04d0\u04d1\t\t\u0002\u0002\u04d1",
    "G\u0003\u0002\u0002\u0002\u04d2\u04d7\u0005\u001a\u000e\u0002\u04d3",
    "\u04d4\u0007\u0083\u0002\u0002\u04d4\u04d6\u0005\u001a\u000e\u0002\u04d5",
    "\u04d3\u0003\u0002\u0002\u0002\u04d6\u04d9\u0003\u0002\u0002\u0002\u04d7",
    "\u04d5\u0003\u0002\u0002\u0002\u04d7\u04d8\u0003\u0002\u0002\u0002\u04d8",
    "I\u0003\u0002\u0002\u0002\u04d9\u04d7\u0003\u0002\u0002\u0002\u04da",
    "\u04dd\u0005L\'\u0002\u04db\u04dd\u0005T+\u0002\u04dc\u04da\u0003\u0002",
    "\u0002\u0002\u04dc\u04db\u0003\u0002\u0002\u0002\u04ddK\u0003\u0002",
    "\u0002\u0002\u04de\u04e3\u0007|\u0002\u0002\u04df\u04e1\u0005N(\u0002",
    "\u04e0\u04e2\u0007\u0083\u0002\u0002\u04e1\u04e0\u0003\u0002\u0002\u0002",
    "\u04e1\u04e2\u0003\u0002\u0002\u0002\u04e2\u04e4\u0003\u0002\u0002\u0002",
    "\u04e3\u04df\u0003\u0002\u0002\u0002\u04e3\u04e4\u0003\u0002\u0002\u0002",
    "\u04e4\u04e5\u0003\u0002\u0002\u0002\u04e5\u04e6\u0007}\u0002\u0002",
    "\u04e6M\u0003\u0002\u0002\u0002\u04e7\u04ec\u0005P)\u0002\u04e8\u04e9",
    "\u0007\u0083\u0002\u0002\u04e9\u04eb\u0005P)\u0002\u04ea\u04e8\u0003",
    "\u0002\u0002\u0002\u04eb\u04ee\u0003\u0002\u0002\u0002\u04ec\u04ea\u0003",
    "\u0002\u0002\u0002\u04ec\u04ed\u0003\u0002\u0002\u0002\u04edO\u0003",
    "\u0002\u0002\u0002\u04ee\u04ec\u0003\u0002\u0002\u0002\u04ef\u04f5\u0005",
    "\u0194\u00cb\u0002\u04f0\u04f1\u0007~\u0002\u0002\u04f1\u04f2\u0005",
    "\u001a\u000e\u0002\u04f2\u04f3\u0007\u007f\u0002\u0002\u04f3\u04f5\u0003",
    "\u0002\u0002\u0002\u04f4\u04ef\u0003\u0002\u0002\u0002\u04f4\u04f0\u0003",
    "\u0002\u0002\u0002\u04f5\u04f6\u0003\u0002\u0002\u0002\u04f6\u04f7\u0007",
    "\u0090\u0002\u0002\u04f7\u04f8\u0005R*\u0002\u04f8Q\u0003\u0002\u0002",
    "\u0002\u04f9\u04fc\u0005\u001a\u000e\u0002\u04fa\u04fc\u0005J&\u0002",
    "\u04fb\u04f9\u0003\u0002\u0002\u0002\u04fb\u04fa\u0003\u0002\u0002\u0002",
    "\u04fcS\u0003\u0002\u0002\u0002\u04fd\u04fe\u0007|\u0002\u0002\u04fe",
    "\u0503\u0005V,\u0002\u04ff\u0500\u0007\u0083\u0002\u0002\u0500\u0502",
    "\u0005V,\u0002\u0501\u04ff\u0003\u0002\u0002\u0002\u0502\u0505\u0003",
    "\u0002\u0002\u0002\u0503\u0501\u0003\u0002\u0002\u0002\u0503\u0504\u0003",
    "\u0002\u0002\u0002\u0504\u0507\u0003\u0002\u0002\u0002\u0505\u0503\u0003",
    "\u0002\u0002\u0002\u0506\u0508\u0007\u0083\u0002\u0002\u0507\u0506\u0003",
    "\u0002\u0002\u0002\u0507\u0508\u0003\u0002\u0002\u0002\u0508\u0509\u0003",
    "\u0002\u0002\u0002\u0509\u050a\u0007}\u0002\u0002\u050aU\u0003\u0002",
    "\u0002\u0002\u050b\u0511\u0005\u001c\u000f\u0002\u050c\u050d\u0007|",
    "\u0002\u0002\u050d\u050e\u0005H%\u0002\u050e\u050f\u0007}\u0002\u0002",
    "\u050f\u0511\u0003\u0002\u0002\u0002\u0510\u050b\u0003\u0002\u0002\u0002",
    "\u0510\u050c\u0003\u0002\u0002\u0002\u0511W\u0003\u0002\u0002\u0002",
    "\u0512\u0517\u0007|\u0002\u0002\u0513\u0515\u0005Z.\u0002\u0514\u0516",
    "\u0007\u0083\u0002\u0002\u0515\u0514\u0003\u0002\u0002\u0002\u0515\u0516",
    "\u0003\u0002\u0002\u0002\u0516\u0518\u0003\u0002\u0002\u0002\u0517\u0513",
    "\u0003\u0002\u0002\u0002\u0517\u0518\u0003\u0002\u0002\u0002\u0518\u0519",
    "\u0003\u0002\u0002\u0002\u0519\u051a\u0007}\u0002\u0002\u051aY\u0003",
    "\u0002\u0002\u0002\u051b\u0520\u0005\\/\u0002\u051c\u051d\u0007\u0083",
    "\u0002\u0002\u051d\u051f\u0005\\/\u0002\u051e\u051c\u0003\u0002\u0002",
    "\u0002\u051f\u0522\u0003\u0002\u0002\u0002\u0520\u051e\u0003\u0002\u0002",
    "\u0002\u0520\u0521\u0003\u0002\u0002\u0002\u0521[\u0003\u0002\u0002",
    "\u0002\u0522\u0520\u0003\u0002\u0002\u0002\u0523\u0529\u0005<\u001f",
    "\u0002\u0524\u0525\u0005\u0194\u00cb\u0002\u0525\u0526\u0007\u0090\u0002",
    "\u0002\u0526\u0527\u0005\u001a\u000e\u0002\u0527\u0529\u0003\u0002\u0002",
    "\u0002\u0528\u0523\u0003\u0002\u0002\u0002\u0528\u0524\u0003\u0002\u0002",
    "\u0002\u0529]\u0003\u0002\u0002\u0002\u052a\u0533\u0005\u0194\u00cb",
    "\u0002\u052b\u052d\u0005`1\u0002\u052c\u052b\u0003\u0002\u0002\u0002",
    "\u052c\u052d\u0003\u0002\u0002\u0002\u052d\u0534\u0003\u0002\u0002\u0002",
    "\u052e\u052f\u0007\u0094\u0002\u0002\u052f\u0531\u0005\u0194\u00cb\u0002",
    "\u0530\u0532\u0005`1\u0002\u0531\u0530\u0003\u0002\u0002\u0002\u0531",
    "\u0532\u0003\u0002\u0002\u0002\u0532\u0534\u0003\u0002\u0002\u0002\u0533",
    "\u052c\u0003\u0002\u0002\u0002\u0533\u052e\u0003\u0002\u0002\u0002\u0534",
    "\u053c\u0003\u0002\u0002\u0002\u0535\u0536\u0007\u0082\u0002\u0002\u0536",
    "\u0538\u0005\u0194\u00cb\u0002\u0537\u0539\u0005`1\u0002\u0538\u0537",
    "\u0003\u0002\u0002\u0002\u0538\u0539\u0003\u0002\u0002\u0002\u0539\u053b",
    "\u0003\u0002\u0002\u0002\u053a\u0535\u0003\u0002\u0002\u0002\u053b\u053e",
    "\u0003\u0002\u0002\u0002\u053c\u053a\u0003\u0002\u0002\u0002\u053c\u053d",
    "\u0003\u0002\u0002\u0002\u053d_\u0003\u0002\u0002\u0002\u053e\u053c",
    "\u0003\u0002\u0002\u0002\u053f\u0543\u0007\u0091\u0002\u0002\u0540\u0542",
    "\u0007\u0083\u0002\u0002\u0541\u0540\u0003\u0002\u0002\u0002\u0542\u0545",
    "\u0003\u0002\u0002\u0002\u0543\u0541\u0003\u0002\u0002\u0002\u0543\u0544",
    "\u0003\u0002\u0002\u0002\u0544\u0546\u0003\u0002\u0002\u0002\u0545\u0543",
    "\u0003\u0002\u0002\u0002\u0546\u0547\u0007\u0092\u0002\u0002\u0547a",
    "\u0003\u0002\u0002\u0002\u0548\u054d\u0005\b\u0005\u0002\u0549\u054c",
    "\u0005\u0124\u0093\u0002\u054a\u054c\u0007\u0088\u0002\u0002\u054b\u0549",
    "\u0003\u0002\u0002\u0002\u054b\u054a\u0003\u0002\u0002\u0002\u054c\u054f",
    "\u0003\u0002\u0002\u0002\u054d\u054b\u0003\u0002\u0002\u0002\u054d\u054e",
    "\u0003\u0002\u0002\u0002\u054e\u0551\u0003\u0002\u0002\u0002\u054f\u054d",
    "\u0003\u0002\u0002\u0002\u0550\u0552\u0007\u0093\u0002\u0002\u0551\u0550",
    "\u0003\u0002\u0002\u0002\u0551\u0552\u0003\u0002\u0002\u0002\u0552c",
    "\u0003\u0002\u0002\u0002\u0553\u0555\u0007\u0010\u0002\u0002\u0554\u0553",
    "\u0003\u0002\u0002\u0002\u0554\u0555\u0003\u0002\u0002\u0002\u0555\u0556",
    "\u0003\u0002\u0002\u0002\u0556\u0557\u0005f4\u0002\u0557\u0558\u0005",
    "\u0158\u00ad\u0002\u0558\u0559\u0005n8\u0002\u0559e\u0003\u0002\u0002",
    "\u0002\u055a\u055b\u0007\u0080\u0002\u0002\u055b\u0566\u0007\u0081\u0002",
    "\u0002\u055c\u055d\u0007\u0080\u0002\u0002\u055d\u055e\u0005h5\u0002",
    "\u055e\u055f\u0007\u0081\u0002\u0002\u055f\u0566\u0003\u0002\u0002\u0002",
    "\u0560\u0561\u0007\u0080\u0002\u0002\u0561\u0562\u0005l7\u0002\u0562",
    "\u0563\u0007\u0081\u0002\u0002\u0563\u0566\u0003\u0002\u0002\u0002\u0564",
    "\u0566\u0005\u0194\u00cb\u0002\u0565\u055a\u0003\u0002\u0002\u0002\u0565",
    "\u055c\u0003\u0002\u0002\u0002\u0565\u0560\u0003\u0002\u0002\u0002\u0565",
    "\u0564\u0003\u0002\u0002\u0002\u0566g\u0003\u0002\u0002\u0002\u0567",
    "\u056c\u0005j6\u0002\u0568\u0569\u0007\u0083\u0002\u0002\u0569\u056b",
    "\u0005j6\u0002\u056a\u0568\u0003\u0002\u0002\u0002\u056b\u056e\u0003",
    "\u0002\u0002\u0002\u056c\u056a\u0003\u0002\u0002\u0002\u056c\u056d\u0003",
    "\u0002\u0002\u0002\u056di\u0003\u0002\u0002\u0002\u056e\u056c\u0003",
    "\u0002\u0002\u0002\u056f\u0571\t\u0004\u0002\u0002\u0570\u056f\u0003",
    "\u0002\u0002\u0002\u0570\u0571\u0003\u0002\u0002\u0002\u0571\u0572\u0003",
    "\u0002\u0002\u0002\u0572\u0573\u0005\u0006\u0004\u0002\u0573\u0574\u0005",
    "\u0194\u00cb\u0002\u0574k\u0003\u0002\u0002\u0002\u0575\u057a\u0005",
    "\u0194\u00cb\u0002\u0576\u0577\u0007\u0083\u0002\u0002\u0577\u0579\u0005",
    "\u0194\u00cb\u0002\u0578\u0576\u0003\u0002\u0002\u0002\u0579\u057c\u0003",
    "\u0002\u0002\u0002\u057a\u0578\u0003\u0002\u0002\u0002\u057a\u057b\u0003",
    "\u0002\u0002\u0002\u057bm\u0003\u0002\u0002\u0002\u057c\u057a\u0003",
    "\u0002\u0002\u0002\u057d\u0580\u0005\u001a\u000e\u0002\u057e\u0580\u0005",
    "\u008eH\u0002\u057f\u057d\u0003\u0002\u0002\u0002\u057f\u057e\u0003",
    "\u0002\u0002\u0002\u0580o\u0003\u0002\u0002\u0002\u0581\u0582\u0005",
    "r:\u0002\u0582\u0583\u0005t;\u0002\u0583q\u0003\u0002\u0002\u0002\u0584",
    "\u0586\u00071\u0002\u0002\u0585\u0587\u0005\u0006\u0004\u0002\u0586",
    "\u0585\u0003\u0002\u0002\u0002\u0586\u0587\u0003\u0002\u0002\u0002\u0587",
    "\u0588\u0003\u0002\u0002\u0002\u0588\u0589\u0005\u0194\u00cb\u0002\u0589",
    "\u058a\u00077\u0002\u0002\u058a\u058b\u0005\u001a\u000e\u0002\u058b",
    "s\u0003\u0002\u0002\u0002\u058c\u058e\u0005v<\u0002\u058d\u058c\u0003",
    "\u0002\u0002\u0002\u058e\u0591\u0003\u0002\u0002\u0002\u058f\u058d\u0003",
    "\u0002\u0002\u0002\u058f\u0590\u0003\u0002\u0002\u0002\u0590\u0592\u0003",
    "\u0002\u0002\u0002\u0591\u058f\u0003\u0002\u0002\u0002\u0592\u0594\u0005",
    "\u0082B\u0002\u0593\u0595\u0005\u0084C\u0002\u0594\u0593\u0003\u0002",
    "\u0002\u0002\u0594\u0595\u0003\u0002\u0002\u0002\u0595u\u0003\u0002",
    "\u0002\u0002\u0596\u059c\u0005r:\u0002\u0597\u059c\u0005x=\u0002\u0598",
    "\u059c\u0005z>\u0002\u0599\u059c\u0005|?\u0002\u059a\u059c\u0005~@\u0002",
    "\u059b\u0596\u0003\u0002\u0002\u0002\u059b\u0597\u0003\u0002\u0002\u0002",
    "\u059b\u0598\u0003\u0002\u0002\u0002\u059b\u0599\u0003\u0002\u0002\u0002",
    "\u059b\u059a\u0003\u0002\u0002\u0002\u059cw\u0003\u0002\u0002\u0002",
    "\u059d\u059e\u0007>\u0002\u0002\u059e\u059f\u0005\u0194\u00cb\u0002",
    "\u059f\u05a0\u0007\u0090\u0002\u0002\u05a0\u05a1\u0005\u001a\u000e\u0002",
    "\u05a1y\u0003\u0002\u0002\u0002\u05a2\u05a3\u0007o\u0002\u0002\u05a3",
    "\u05a4\u0005\u001a\u000e\u0002\u05a4{\u0003\u0002\u0002\u0002\u05a5",
    "\u05a7\u0007=\u0002\u0002\u05a6\u05a8\u0005\u0006\u0004\u0002\u05a7",
    "\u05a6\u0003\u0002\u0002\u0002\u05a7\u05a8\u0003\u0002\u0002\u0002\u05a8",
    "\u05a9\u0003\u0002\u0002\u0002\u05a9\u05aa\u0005\u0194\u00cb\u0002\u05aa",
    "\u05ab\u00077\u0002\u0002\u05ab\u05ac\u0005\u001a\u000e\u0002\u05ac",
    "\u05ad\u0007F\u0002\u0002\u05ad\u05ae\u0005\u001a\u000e\u0002\u05ae",
    "\u05af\u0007\'\u0002\u0002\u05af\u05b2\u0005\u001a\u000e\u0002\u05b0",
    "\u05b1\u0007;\u0002\u0002\u05b1\u05b3\u0005\u0194\u00cb\u0002\u05b2",
    "\u05b0\u0003\u0002\u0002\u0002\u05b2\u05b3\u0003\u0002\u0002\u0002\u05b3",
    "}\u0003\u0002\u0002\u0002\u05b4\u05b5\u0007H\u0002\u0002\u05b5\u05ba",
    "\u0005\u0080A\u0002\u05b6\u05b7\u0007\u0083\u0002\u0002\u05b7\u05b9",
    "\u0005\u0080A\u0002\u05b8\u05b6\u0003\u0002\u0002\u0002\u05b9\u05bc",
    "\u0003\u0002\u0002\u0002\u05ba\u05b8\u0003\u0002\u0002\u0002\u05ba\u05bb",
    "\u0003\u0002\u0002\u0002\u05bb\u007f\u0003\u0002\u0002\u0002\u05bc\u05ba",
    "\u0003\u0002\u0002\u0002\u05bd\u05bf\u0005\u001a\u000e\u0002\u05be\u05c0",
    "\t\n\u0002\u0002\u05bf\u05be\u0003\u0002\u0002\u0002\u05bf\u05c0\u0003",
    "\u0002\u0002\u0002\u05c0\u0081\u0003\u0002\u0002\u0002\u05c1\u05c2\u0007",
    "V\u0002\u0002\u05c2\u05c9\u0005\u001a\u000e\u0002\u05c3\u05c4\u0007",
    "4\u0002\u0002\u05c4\u05c5\u0005\u001a\u000e\u0002\u05c5\u05c6\u0007",
    "\u0015\u0002\u0002\u05c6\u05c7\u0005\u001a\u000e\u0002\u05c7\u05c9\u0003",
    "\u0002\u0002\u0002\u05c8\u05c1\u0003\u0002\u0002\u0002\u05c8\u05c3\u0003",
    "\u0002\u0002\u0002\u05c9\u0083\u0003\u0002\u0002\u0002\u05ca\u05cb\u0007",
    ";\u0002\u0002\u05cb\u05cc\u0005\u0194\u00cb\u0002\u05cc\u05cd\u0005",
    "t;\u0002\u05cd\u0085\u0003\u0002\u0002\u0002\u05ce\u05d7\u0005\u0088",
    "E\u0002\u05cf\u05d2\u0005\u0090I\u0002\u05d0\u05d2\u0005\u0098M\u0002",
    "\u05d1\u05cf\u0003\u0002\u0002\u0002\u05d1\u05d0\u0003\u0002\u0002\u0002",
    "\u05d2\u05d3\u0003\u0002\u0002\u0002\u05d3\u05d4\u0007\u0085\u0002\u0002",
    "\u05d4\u05d7\u0003\u0002\u0002\u0002\u05d5\u05d7\u0005\u008aF\u0002",
    "\u05d6\u05ce\u0003\u0002\u0002\u0002\u05d6\u05d1\u0003\u0002\u0002\u0002",
    "\u05d6\u05d5\u0003\u0002\u0002\u0002\u05d7\u0087\u0003\u0002\u0002\u0002",
    "\u05d8\u05d9\u0005\u0194\u00cb\u0002\u05d9\u05da\u0007\u0084\u0002\u0002",
    "\u05da\u05db\u0005\u0086D\u0002\u05db\u0089\u0003\u0002\u0002\u0002",
    "\u05dc\u05df\u0005\u008eH\u0002\u05dd\u05df\u0005\u008cG\u0002\u05de",
    "\u05dc\u0003\u0002\u0002\u0002\u05de\u05dd\u0003\u0002\u0002\u0002\u05df",
    "\u008b\u0003\u0002\u0002\u0002\u05e0\u0660\u0007\u0085\u0002\u0002\u05e1",
    "\u05e2\u0005\u001a\u000e\u0002\u05e2\u05e3\u0007\u0085\u0002\u0002\u05e3",
    "\u0660\u0003\u0002\u0002\u0002\u05e4\u05e5\u00075\u0002\u0002\u05e5",
    "\u05e6\u0007\u0080\u0002\u0002\u05e6\u05e7\u0005\u001a\u000e\u0002\u05e7",
    "\u05e8\u0007\u0081\u0002\u0002\u05e8\u05eb\u0005\u009aN\u0002\u05e9",
    "\u05ea\u0007%\u0002\u0002\u05ea\u05ec\u0005\u009aN\u0002\u05eb\u05e9",
    "\u0003\u0002\u0002\u0002\u05eb\u05ec\u0003\u0002\u0002\u0002\u05ec\u0660",
    "\u0003\u0002\u0002\u0002\u05ed\u05ee\u0007^\u0002\u0002\u05ee\u05ef",
    "\u0007\u0080\u0002\u0002\u05ef\u05f0\u0005\u001a\u000e\u0002\u05f0\u05f1",
    "\u0007\u0081\u0002\u0002\u05f1\u05f5\u0007|\u0002\u0002\u05f2\u05f4",
    "\u0005\u009cO\u0002\u05f3\u05f2\u0003\u0002\u0002\u0002\u05f4\u05f7",
    "\u0003\u0002\u0002\u0002\u05f5\u05f3\u0003\u0002\u0002\u0002\u05f5\u05f6",
    "\u0003\u0002\u0002\u0002\u05f6\u05f8\u0003\u0002\u0002\u0002\u05f7\u05f5",
    "\u0003\u0002\u0002\u0002\u05f8\u05f9\u0007}\u0002\u0002\u05f9\u0660",
    "\u0003\u0002\u0002\u0002\u05fa\u05fb\u0007p\u0002\u0002\u05fb\u05fc",
    "\u0007\u0080\u0002\u0002\u05fc\u05fd\u0005\u001a\u000e\u0002\u05fd\u05fe",
    "\u0007\u0081\u0002\u0002\u05fe\u05ff\u0005\u008aF\u0002\u05ff\u0660",
    "\u0003\u0002\u0002\u0002\u0600\u0601\u0007\"\u0002\u0002\u0601\u0602",
    "\u0005\u008aF\u0002\u0602\u0603\u0007p\u0002\u0002\u0603\u0604\u0007",
    "\u0080\u0002\u0002\u0604\u0605\u0005\u001a\u000e\u0002\u0605\u0606\u0007",
    "\u0081\u0002\u0002\u0606\u0607\u0007\u0085\u0002\u0002\u0607\u0660\u0003",
    "\u0002\u0002\u0002\u0608\u0609\u0007/\u0002\u0002\u0609\u060b\u0007",
    "\u0080\u0002\u0002\u060a\u060c\u0005\u00a2R\u0002\u060b\u060a\u0003",
    "\u0002\u0002\u0002\u060b\u060c\u0003\u0002\u0002\u0002\u060c\u060d\u0003",
    "\u0002\u0002\u0002\u060d\u060f\u0007\u0085\u0002\u0002\u060e\u0610\u0005",
    "\u001a\u000e\u0002\u060f\u060e\u0003\u0002\u0002\u0002\u060f\u0610\u0003",
    "\u0002\u0002\u0002\u0610\u0611\u0003\u0002\u0002\u0002\u0611\u0613\u0007",
    "\u0085\u0002\u0002\u0612\u0614\u0005\u00a4S\u0002\u0613\u0612\u0003",
    "\u0002\u0002\u0002\u0613\u0614\u0003\u0002\u0002\u0002\u0614\u0615\u0003",
    "\u0002\u0002\u0002\u0615\u0616\u0007\u0081\u0002\u0002\u0616\u0660\u0005",
    "\u008aF\u0002\u0617\u0618\u00070\u0002\u0002\u0618\u0619\u0007\u0080",
    "\u0002\u0002\u0619\u061a\u0005\u0092J\u0002\u061a\u061b\u0005\u0194",
    "\u00cb\u0002\u061b\u061c\u00077\u0002\u0002\u061c\u061d\u0005\u001a",
    "\u000e\u0002\u061d\u061e\u0007\u0081\u0002\u0002\u061e\u061f\u0005\u008a",
    "F\u0002\u061f\u0660\u0003\u0002\u0002\u0002\u0620\u0621\u0007\u0014",
    "\u0002\u0002\u0621\u0660\u0007\u0085\u0002\u0002\u0622\u0623\u0007\u001d",
    "\u0002\u0002\u0623\u0660\u0007\u0085\u0002\u0002\u0624\u0629\u00073",
    "\u0002\u0002\u0625\u062a\u0005\u0194\u00cb\u0002\u0626\u0627\u0007\u0017",
    "\u0002\u0002\u0627\u062a\u0005\u001a\u000e\u0002\u0628\u062a\u0007\u001f",
    "\u0002\u0002\u0629\u0625\u0003\u0002\u0002\u0002\u0629\u0626\u0003\u0002",
    "\u0002\u0002\u0629\u0628\u0003\u0002\u0002\u0002\u062a\u062b\u0003\u0002",
    "\u0002\u0002\u062b\u0660\u0007\u0085\u0002\u0002\u062c\u062e\u0007S",
    "\u0002\u0002\u062d\u062f\u0005\u001a\u000e\u0002\u062e\u062d\u0003\u0002",
    "\u0002\u0002\u062e\u062f\u0003\u0002\u0002\u0002\u062f\u0630\u0003\u0002",
    "\u0002\u0002\u0630\u0660\u0007\u0085\u0002\u0002\u0631\u0633\u0007`",
    "\u0002\u0002\u0632\u0634\u0005\u001a\u000e\u0002\u0633\u0632\u0003\u0002",
    "\u0002\u0002\u0633\u0634\u0003\u0002\u0002\u0002\u0634\u0635\u0003\u0002",
    "\u0002\u0002\u0635\u0660\u0007\u0085\u0002\u0002\u0636\u0637\u0007b",
    "\u0002\u0002\u0637\u063d\u0005\u008eH\u0002\u0638\u063a\u0005\u00a6",
    "T\u0002\u0639\u063b\u0005\u00aeX\u0002\u063a\u0639\u0003\u0002\u0002",
    "\u0002\u063a\u063b\u0003\u0002\u0002\u0002\u063b\u063e\u0003\u0002\u0002",
    "\u0002\u063c\u063e\u0005\u00aeX\u0002\u063d\u0638\u0003\u0002\u0002",
    "\u0002\u063d\u063c\u0003\u0002\u0002\u0002\u063e\u0660\u0003\u0002\u0002",
    "\u0002\u063f\u0640\u0007\u001a\u0002\u0002\u0640\u0660\u0005\u008eH",
    "\u0002\u0641\u0642\u0007f\u0002\u0002\u0642\u0660\u0005\u008eH\u0002",
    "\u0643\u0644\u0007?\u0002\u0002\u0644\u0645\u0007\u0080\u0002\u0002",
    "\u0645\u0646\u0005\u001a\u000e\u0002\u0646\u0647\u0007\u0081\u0002\u0002",
    "\u0647\u0648\u0005\u008aF\u0002\u0648\u0660\u0003\u0002\u0002\u0002",
    "\u0649\u064a\u0007i\u0002\u0002\u064a\u064b\u0007\u0080\u0002\u0002",
    "\u064b\u064c\u0005\u00b0Y\u0002\u064c\u064d\u0007\u0081\u0002\u0002",
    "\u064d\u064e\u0005\u008aF\u0002\u064e\u0660\u0003\u0002\u0002\u0002",
    "\u064f\u0653\u0007q\u0002\u0002\u0650\u0651\u0007S\u0002\u0002\u0651",
    "\u0654\u0005\u001a\u000e\u0002\u0652\u0654\u0007\u0014\u0002\u0002\u0653",
    "\u0650\u0003\u0002\u0002\u0002\u0653\u0652\u0003\u0002\u0002\u0002\u0654",
    "\u0655\u0003\u0002\u0002\u0002\u0655\u0660\u0007\u0085\u0002\u0002\u0656",
    "\u0657\u0007g\u0002\u0002\u0657\u0660\u0005\u008eH\u0002\u0658\u0659",
    "\u0007-\u0002\u0002\u0659\u065a\u0007\u0080\u0002\u0002\u065a\u065b",
    "\u0005\u014c\u00a7\u0002\u065b\u065c\u0005\u014e\u00a8\u0002\u065c\u065d",
    "\u0007\u0081\u0002\u0002\u065d\u065e\u0005\u008aF\u0002\u065e\u0660",
    "\u0003\u0002\u0002\u0002\u065f\u05e0\u0003\u0002\u0002\u0002\u065f\u05e1",
    "\u0003\u0002\u0002\u0002\u065f\u05e4\u0003\u0002\u0002\u0002\u065f\u05ed",
    "\u0003\u0002\u0002\u0002\u065f\u05fa\u0003\u0002\u0002\u0002\u065f\u0600",
    "\u0003\u0002\u0002\u0002\u065f\u0608\u0003\u0002\u0002\u0002\u065f\u0617",
    "\u0003\u0002\u0002\u0002\u065f\u0620\u0003\u0002\u0002\u0002\u065f\u0622",
    "\u0003\u0002\u0002\u0002\u065f\u0624\u0003\u0002\u0002\u0002\u065f\u062c",
    "\u0003\u0002\u0002\u0002\u065f\u0631\u0003\u0002\u0002\u0002\u065f\u0636",
    "\u0003\u0002\u0002\u0002\u065f\u063f\u0003\u0002\u0002\u0002\u065f\u0641",
    "\u0003\u0002\u0002\u0002\u065f\u0643\u0003\u0002\u0002\u0002\u065f\u0649",
    "\u0003\u0002\u0002\u0002\u065f\u064f\u0003\u0002\u0002\u0002\u065f\u0656",
    "\u0003\u0002\u0002\u0002\u065f\u0658\u0003\u0002\u0002\u0002\u0660\u008d",
    "\u0003\u0002\u0002\u0002\u0661\u0663\u0007|\u0002\u0002\u0662\u0664",
    "\u0005\u00a0Q\u0002\u0663\u0662\u0003\u0002\u0002\u0002\u0663\u0664",
    "\u0003\u0002\u0002\u0002\u0664\u0665\u0003\u0002\u0002\u0002\u0665\u0666",
    "\u0007}\u0002\u0002\u0666\u008f\u0003\u0002\u0002\u0002\u0667\u0668",
    "\u0005\u0092J\u0002\u0668\u066d\u0005\u0094K\u0002\u0669\u066a\u0007",
    "\u0083\u0002\u0002\u066a\u066c\u0005\u0094K\u0002\u066b\u0669\u0003",
    "\u0002\u0002\u0002\u066c\u066f\u0003\u0002\u0002\u0002\u066d\u066b\u0003",
    "\u0002\u0002\u0002\u066d\u066e\u0003\u0002\u0002\u0002\u066e\u0091\u0003",
    "\u0002\u0002\u0002\u066f\u066d\u0003\u0002\u0002\u0002\u0670\u0673\u0007",
    "j\u0002\u0002\u0671\u0673\u0005\u0006\u0004\u0002\u0672\u0670\u0003",
    "\u0002\u0002\u0002\u0672\u0671\u0003\u0002\u0002\u0002\u0673\u0093\u0003",
    "\u0002\u0002\u0002\u0674\u0677\u0005\u0194\u00cb\u0002\u0675\u0676\u0007",
    "\u0090\u0002\u0002\u0676\u0678\u0005\u0096L\u0002\u0677\u0675\u0003",
    "\u0002\u0002\u0002\u0677\u0678\u0003\u0002\u0002\u0002\u0678\u0095\u0003",
    "\u0002\u0002\u0002\u0679\u067d\u0005\u001a\u000e\u0002\u067a\u067d\u0005",
    "\u0126\u0094\u0002\u067b\u067d\u0005\u0156\u00ac\u0002\u067c\u0679\u0003",
    "\u0002\u0002\u0002\u067c\u067a\u0003\u0002\u0002\u0002\u067c\u067b\u0003",
    "\u0002\u0002\u0002\u067d\u0097\u0003\u0002\u0002\u0002\u067e\u067f\u0007",
    "\u001c\u0002\u0002\u067f\u0680\u0005\u0006\u0004\u0002\u0680\u0681\u0005",
    "\u00eav\u0002\u0681\u0099\u0003\u0002\u0002\u0002\u0682\u0685\u0005",
    "\u008eH\u0002\u0683\u0685\u0005\u008cG\u0002\u0684\u0682\u0003\u0002",
    "\u0002\u0002\u0684\u0683\u0003\u0002\u0002\u0002\u0685\u009b\u0003\u0002",
    "\u0002\u0002\u0686\u0688\u0005\u009eP\u0002\u0687\u0686\u0003\u0002",
    "\u0002\u0002\u0688\u0689\u0003\u0002\u0002\u0002\u0689\u0687\u0003\u0002",
    "\u0002\u0002\u0689\u068a\u0003\u0002\u0002\u0002\u068a\u068b\u0003\u0002",
    "\u0002\u0002\u068b\u068c\u0005\u00a0Q\u0002\u068c\u009d\u0003\u0002",
    "\u0002\u0002\u068d\u068e\u0007\u0017\u0002\u0002\u068e\u068f\u0005\u001a",
    "\u000e\u0002\u068f\u0690\u0007\u0084\u0002\u0002\u0690\u0694\u0003\u0002",
    "\u0002\u0002\u0691\u0692\u0007\u001f\u0002\u0002\u0692\u0694\u0007\u0084",
    "\u0002\u0002\u0693\u068d\u0003\u0002\u0002\u0002\u0693\u0691\u0003\u0002",
    "\u0002\u0002\u0694\u009f\u0003\u0002\u0002\u0002\u0695\u0697\u0005\u0086",
    "D\u0002\u0696\u0695\u0003\u0002\u0002\u0002\u0697\u0698\u0003\u0002",
    "\u0002\u0002\u0698\u0696\u0003\u0002\u0002\u0002\u0698\u0699\u0003\u0002",
    "\u0002\u0002\u0699\u00a1\u0003\u0002\u0002\u0002\u069a\u06a4\u0005\u0090",
    "I\u0002\u069b\u06a0\u0005\u001a\u000e\u0002\u069c\u069d\u0007\u0083",
    "\u0002\u0002\u069d\u069f\u0005\u001a\u000e\u0002\u069e\u069c\u0003\u0002",
    "\u0002\u0002\u069f\u06a2\u0003\u0002\u0002\u0002\u06a0\u069e\u0003\u0002",
    "\u0002\u0002\u06a0\u06a1\u0003\u0002\u0002\u0002\u06a1\u06a4\u0003\u0002",
    "\u0002\u0002\u06a2\u06a0\u0003\u0002\u0002\u0002\u06a3\u069a\u0003\u0002",
    "\u0002\u0002\u06a3\u069b\u0003\u0002\u0002\u0002\u06a4\u00a3\u0003\u0002",
    "\u0002\u0002\u06a5\u06aa\u0005\u001a\u000e\u0002\u06a6\u06a7\u0007\u0083",
    "\u0002\u0002\u06a7\u06a9\u0005\u001a\u000e\u0002\u06a8\u06a6\u0003\u0002",
    "\u0002\u0002\u06a9\u06ac\u0003\u0002\u0002\u0002\u06aa\u06a8\u0003\u0002",
    "\u0002\u0002\u06aa\u06ab\u0003\u0002\u0002\u0002\u06ab\u00a5\u0003\u0002",
    "\u0002\u0002\u06ac\u06aa\u0003\u0002\u0002\u0002\u06ad\u06b1\u0005\u00a8",
    "U\u0002\u06ae\u06b0\u0005\u00a8U\u0002\u06af\u06ae\u0003\u0002\u0002",
    "\u0002\u06b0\u06b3\u0003\u0002\u0002\u0002\u06b1\u06af\u0003\u0002\u0002",
    "\u0002\u06b1\u06b2\u0003\u0002\u0002\u0002\u06b2\u06b5\u0003\u0002\u0002",
    "\u0002\u06b3\u06b1\u0003\u0002\u0002\u0002\u06b4\u06b6\u0005\u00aaV",
    "\u0002\u06b5\u06b4\u0003\u0002\u0002\u0002\u06b5\u06b6\u0003\u0002\u0002",
    "\u0002\u06b6\u06b9\u0003\u0002\u0002\u0002\u06b7\u06b9\u0005\u00aaV",
    "\u0002\u06b8\u06ad\u0003\u0002\u0002\u0002\u06b8\u06b7\u0003\u0002\u0002",
    "\u0002\u06b9\u00a7\u0003\u0002\u0002\u0002\u06ba\u06bb\u0007\u0018\u0002",
    "\u0002\u06bb\u06bc\u0007\u0080\u0002\u0002\u06bc\u06be\u0005\u0012\n",
    "\u0002\u06bd\u06bf\u0005\u0194\u00cb\u0002\u06be\u06bd\u0003\u0002\u0002",
    "\u0002\u06be\u06bf\u0003\u0002\u0002\u0002\u06bf\u06c0\u0003\u0002\u0002",
    "\u0002\u06c0\u06c2\u0007\u0081\u0002\u0002\u06c1\u06c3\u0005\u00acW",
    "\u0002\u06c2\u06c1\u0003\u0002\u0002\u0002\u06c2\u06c3\u0003\u0002\u0002",
    "\u0002\u06c3\u06c4\u0003\u0002\u0002\u0002\u06c4\u06c5\u0005\u008eH",
    "\u0002\u06c5\u00a9\u0003\u0002\u0002\u0002\u06c6\u06c8\u0007\u0018\u0002",
    "\u0002\u06c7\u06c9\u0005\u00acW\u0002\u06c8\u06c7\u0003\u0002\u0002",
    "\u0002\u06c8\u06c9\u0003\u0002\u0002\u0002\u06c9\u06ca\u0003\u0002\u0002",
    "\u0002\u06ca\u06cb\u0005\u008eH\u0002\u06cb\u00ab\u0003\u0002\u0002",
    "\u0002\u06cc\u06cd\u0007n\u0002\u0002\u06cd\u06ce\u0007\u0080\u0002",
    "\u0002\u06ce\u06cf\u0005\u001a\u000e\u0002\u06cf\u06d0\u0007\u0081\u0002",
    "\u0002\u06d0\u00ad\u0003\u0002\u0002\u0002\u06d1\u06d2\u0007,\u0002",
    "\u0002\u06d2\u06d3\u0005\u008eH\u0002\u06d3\u00af\u0003\u0002\u0002",
    "\u0002\u06d4\u06d7\u0005\u0090I\u0002\u06d5\u06d7\u0005\u001a\u000e",
    "\u0002\u06d6\u06d4\u0003\u0002\u0002\u0002\u06d6\u06d5\u0003\u0002\u0002",
    "\u0002\u06d7\u00b1\u0003\u0002\u0002\u0002\u06d8\u06d9\u0007B\u0002",
    "\u0002\u06d9\u06da\u0005\u00b4[\u0002\u06da\u06dc\u0005\u00b6\\\u0002",
    "\u06db\u06dd\u0007\u0085\u0002\u0002\u06dc\u06db\u0003\u0002\u0002\u0002",
    "\u06dc\u06dd\u0003\u0002\u0002\u0002\u06dd\u00b3\u0003\u0002\u0002\u0002",
    "\u06de\u06e3\u0005\u0194\u00cb\u0002\u06df\u06e0\u0007\u0082\u0002\u0002",
    "\u06e0\u06e2\u0005\u0194\u00cb\u0002\u06e1\u06df\u0003\u0002\u0002\u0002",
    "\u06e2\u06e5\u0003\u0002\u0002\u0002\u06e3\u06e1\u0003\u0002\u0002\u0002",
    "\u06e3\u06e4\u0003\u0002\u0002\u0002\u06e4\u00b5\u0003\u0002\u0002\u0002",
    "\u06e5\u06e3\u0003\u0002\u0002\u0002\u06e6\u06e8\u0007|\u0002\u0002",
    "\u06e7\u06e9\u0005\u00b8]\u0002\u06e8\u06e7\u0003\u0002\u0002\u0002",
    "\u06e8\u06e9\u0003\u0002\u0002\u0002\u06e9\u06eb\u0003\u0002\u0002\u0002",
    "\u06ea\u06ec\u0005\u00bc_\u0002\u06eb\u06ea\u0003\u0002\u0002\u0002",
    "\u06eb\u06ec\u0003\u0002\u0002\u0002\u06ec\u06ee\u0003\u0002\u0002\u0002",
    "\u06ed\u06ef\u0005\u00c0a\u0002\u06ee\u06ed\u0003\u0002\u0002\u0002",
    "\u06ee\u06ef\u0003\u0002\u0002\u0002\u06ef\u06f0\u0003\u0002\u0002\u0002",
    "\u06f0\u06f1\u0007}\u0002\u0002\u06f1\u00b7\u0003\u0002\u0002\u0002",
    "\u06f2\u06f4\u0005\u00ba^\u0002\u06f3\u06f2\u0003\u0002\u0002\u0002",
    "\u06f4\u06f5\u0003\u0002\u0002\u0002\u06f5\u06f3\u0003\u0002\u0002\u0002",
    "\u06f5\u06f6\u0003\u0002\u0002\u0002\u06f6\u00b9\u0003\u0002\u0002\u0002",
    "\u06f7\u06f8\u0007*\u0002\u0002\u06f8\u06f9\u0007\f\u0002\u0002\u06f9",
    "\u06fa\u0005\u0194\u00cb\u0002\u06fa\u06fb\u0007\u0085\u0002\u0002\u06fb",
    "\u00bb\u0003\u0002\u0002\u0002\u06fc\u06fe\u0005\u00be`\u0002\u06fd",
    "\u06fc\u0003\u0002\u0002\u0002\u06fe\u06ff\u0003\u0002\u0002\u0002\u06ff",
    "\u06fd\u0003\u0002\u0002\u0002\u06ff\u0700\u0003\u0002\u0002\u0002\u0700",
    "\u00bd\u0003\u0002\u0002\u0002\u0701\u0702\u0007i\u0002\u0002\u0702",
    "\u0703\u0005\u0194\u00cb\u0002\u0703\u0704\u0007\u0090\u0002\u0002\u0704",
    "\u0705\u0005\u0004\u0003\u0002\u0705\u0706\u0007\u0085\u0002\u0002\u0706",
    "\u0711\u0003\u0002\u0002\u0002\u0707\u0708\u0007i\u0002\u0002\u0708",
    "\u0709\u0005\u0004\u0003\u0002\u0709\u070a\u0007\u0085\u0002\u0002\u070a",
    "\u0711\u0003\u0002\u0002\u0002\u070b\u070c\u0007i\u0002\u0002\u070c",
    "\u070d\u0007[\u0002\u0002\u070d\u070e\u0005\u0004\u0003\u0002\u070e",
    "\u070f\u0007\u0085\u0002\u0002\u070f\u0711\u0003\u0002\u0002\u0002\u0710",
    "\u0701\u0003\u0002\u0002\u0002\u0710\u0707\u0003\u0002\u0002\u0002\u0710",
    "\u070b\u0003\u0002\u0002\u0002\u0711\u00bf\u0003\u0002\u0002\u0002\u0712",
    "\u0714\u0005\u00c2b\u0002\u0713\u0712\u0003\u0002\u0002\u0002\u0714",
    "\u0715\u0003\u0002\u0002\u0002\u0715\u0713\u0003\u0002\u0002\u0002\u0715",
    "\u0716\u0003\u0002\u0002\u0002\u0716\u00c1\u0003\u0002\u0002\u0002\u0717",
    "\u071a\u0005\u00b2Z\u0002\u0718\u071a\u0005\u00c4c\u0002\u0719\u0717",
    "\u0003\u0002\u0002\u0002\u0719\u0718\u0003\u0002\u0002\u0002\u071a\u00c3",
    "\u0003\u0002\u0002\u0002\u071b\u071d\u0005\u0140\u00a1\u0002\u071c\u071b",
    "\u0003\u0002\u0002\u0002\u071c\u071d\u0003\u0002\u0002\u0002\u071d\u071f",
    "\u0003\u0002\u0002\u0002\u071e\u0720\u0005\u00e2r\u0002\u071f\u071e",
    "\u0003\u0002\u0002\u0002\u071f\u0720\u0003\u0002\u0002\u0002\u0720\u0726",
    "\u0003\u0002\u0002\u0002\u0721\u0727\u0005\u0170\u00b9\u0002\u0722\u0727",
    "\u0005\u0172\u00ba\u0002\u0723\u0727\u0005\u0174\u00bb\u0002\u0724\u0727",
    "\u0005\u0176\u00bc\u0002\u0725\u0727\u0005\u0178\u00bd\u0002\u0726\u0721",
    "\u0003\u0002\u0002\u0002\u0726\u0722\u0003\u0002\u0002\u0002\u0726\u0723",
    "\u0003\u0002\u0002\u0002\u0726\u0724\u0003\u0002\u0002\u0002\u0726\u0725",
    "\u0003\u0002\u0002\u0002\u0727\u00c5\u0003\u0002\u0002\u0002\u0728\u0729",
    "\u0005\u0194\u00cb\u0002\u0729\u072a\u0007\u0094\u0002\u0002\u072a\u072c",
    "\u0005\u0194\u00cb\u0002\u072b\u072d\u0005\u0014\u000b\u0002\u072c\u072b",
    "\u0003\u0002\u0002\u0002\u072c\u072d\u0003\u0002\u0002\u0002\u072d\u00c7",
    "\u0003\u0002\u0002\u0002\u072e\u072f\u0007\u0091\u0002\u0002\u072f\u0734",
    "\u0005\u00caf\u0002\u0730\u0731\u0007\u0083\u0002\u0002\u0731\u0733",
    "\u0005\u00caf\u0002\u0732\u0730\u0003\u0002\u0002\u0002\u0733\u0736",
    "\u0003\u0002\u0002\u0002\u0734\u0732\u0003\u0002\u0002\u0002\u0734\u0735",
    "\u0003\u0002\u0002\u0002\u0735\u0737\u0003\u0002\u0002\u0002\u0736\u0734",
    "\u0003\u0002\u0002\u0002\u0737\u0738\u0007\u0092\u0002\u0002\u0738\u00c9",
    "\u0003\u0002\u0002\u0002\u0739\u073b\u0005\u0140\u00a1\u0002\u073a\u0739",
    "\u0003\u0002\u0002\u0002\u073a\u073b\u0003\u0002\u0002\u0002\u073b\u073c",
    "\u0003\u0002\u0002\u0002\u073c\u073d\u0005\u0194\u00cb\u0002\u073d\u00cb",
    "\u0003\u0002\u0002\u0002\u073e\u073f\u0007\u0084\u0002\u0002\u073f\u0744",
    "\u0005\u0012\n\u0002\u0740\u0741\u0007\u0083\u0002\u0002\u0741\u0743",
    "\u0005\u0004\u0003\u0002\u0742\u0740\u0003\u0002\u0002\u0002\u0743\u0746",
    "\u0003\u0002\u0002\u0002\u0744\u0742\u0003\u0002\u0002\u0002\u0744\u0745",
    "\u0003\u0002\u0002\u0002\u0745\u00cd\u0003\u0002\u0002\u0002\u0746\u0744",
    "\u0003\u0002\u0002\u0002\u0747\u074c\u0005\u0004\u0003\u0002\u0748\u0749",
    "\u0007\u0083\u0002\u0002\u0749\u074b\u0005\u0004\u0003\u0002\u074a\u0748",
    "\u0003\u0002\u0002\u0002\u074b\u074e\u0003\u0002\u0002\u0002\u074c\u074a",
    "\u0003\u0002\u0002\u0002\u074c\u074d\u0003\u0002\u0002\u0002\u074d\u00cf",
    "\u0003\u0002\u0002\u0002\u074e\u074c\u0003\u0002\u0002\u0002\u074f\u0751",
    "\u0005\u00d2j\u0002\u0750\u074f\u0003\u0002\u0002\u0002\u0751\u0752",
    "\u0003\u0002\u0002\u0002\u0752\u0750\u0003\u0002\u0002\u0002\u0752\u0753",
    "\u0003\u0002\u0002\u0002\u0753\u00d1\u0003\u0002\u0002\u0002\u0754\u0755",
    "\u0007o\u0002\u0002\u0755\u0756\u0005\u0194\u00cb\u0002\u0756\u0757",
    "\u0007\u0084\u0002\u0002\u0757\u0758\u0005\u00d4k\u0002\u0758\u00d3",
    "\u0003\u0002\u0002\u0002\u0759\u0764\u0005\u00dan\u0002\u075a\u075d",
    "\u0005\u00d6l\u0002\u075b\u075c\u0007\u0083\u0002\u0002\u075c\u075e",
    "\u0005\u00d8m\u0002\u075d\u075b\u0003\u0002\u0002\u0002\u075d\u075e",
    "\u0003\u0002\u0002\u0002\u075e\u0761\u0003\u0002\u0002\u0002\u075f\u0760",
    "\u0007\u0083\u0002\u0002\u0760\u0762\u0005\u00dan\u0002\u0761\u075f",
    "\u0003\u0002\u0002\u0002\u0761\u0762\u0003\u0002\u0002\u0002\u0762\u0764",
    "\u0003\u0002\u0002\u0002\u0763\u0759\u0003\u0002\u0002\u0002\u0763\u075a",
    "\u0003\u0002\u0002\u0002\u0764\u00d5\u0003\u0002\u0002\u0002\u0765\u0769",
    "\u0005\u0012\n\u0002\u0766\u0769\u0007\u001b\u0002\u0002\u0767\u0769",
    "\u0007]\u0002\u0002\u0768\u0765\u0003\u0002\u0002\u0002\u0768\u0766",
    "\u0003\u0002\u0002\u0002\u0768\u0767\u0003\u0002\u0002\u0002\u0769\u00d7",
    "\u0003\u0002\u0002\u0002\u076a\u076f\u0005\u0004\u0003\u0002\u076b\u076c",
    "\u0007\u0083\u0002\u0002\u076c\u076e\u0005\u0004\u0003\u0002\u076d\u076b",
    "\u0003\u0002\u0002\u0002\u076e\u0771\u0003\u0002\u0002\u0002\u076f\u076d",
    "\u0003\u0002\u0002\u0002\u076f\u0770\u0003\u0002\u0002\u0002\u0770\u00d9",
    "\u0003\u0002\u0002\u0002\u0771\u076f\u0003\u0002\u0002\u0002\u0772\u0773",
    "\u0007C\u0002\u0002\u0773\u0774\u0007\u0080\u0002\u0002\u0774\u0775",
    "\u0007\u0081\u0002\u0002\u0775\u00db\u0003\u0002\u0002\u0002\u0776\u0778",
    "\u0007|\u0002\u0002\u0777\u0779\u0005\u00dep\u0002\u0778\u0777\u0003",
    "\u0002\u0002\u0002\u0778\u0779\u0003\u0002\u0002\u0002\u0779\u077a\u0003",
    "\u0002\u0002\u0002\u077a\u077b\u0007}\u0002\u0002\u077b\u00dd\u0003",
    "\u0002\u0002\u0002\u077c\u077e\u0005\u00e0q\u0002\u077d\u077c\u0003",
    "\u0002\u0002\u0002\u077e\u077f\u0003\u0002\u0002\u0002\u077f\u077d\u0003",
    "\u0002\u0002\u0002\u077f\u0780\u0003\u0002\u0002\u0002\u0780\u00df\u0003",
    "\u0002\u0002\u0002\u0781\u0783\u0005\u0140\u00a1\u0002\u0782\u0781\u0003",
    "\u0002\u0002\u0002\u0782\u0783\u0003\u0002\u0002\u0002\u0783\u0785\u0003",
    "\u0002\u0002\u0002\u0784\u0786\u0005\u00e2r\u0002\u0785\u0784\u0003",
    "\u0002\u0002\u0002\u0785\u0786\u0003\u0002\u0002\u0002\u0786\u0789\u0003",
    "\u0002\u0002\u0002\u0787\u078a\u0005\u00e6t\u0002\u0788\u078a\u0005",
    "\u0184\u00c3\u0002\u0789\u0787\u0003\u0002\u0002\u0002\u0789\u0788\u0003",
    "\u0002\u0002\u0002\u078a\u00e1\u0003\u0002\u0002\u0002\u078b\u078d\u0005",
    "\u00e4s\u0002\u078c\u078b\u0003\u0002\u0002\u0002\u078d\u078e\u0003",
    "\u0002\u0002\u0002\u078e\u078c\u0003\u0002\u0002\u0002\u078e\u078f\u0003",
    "\u0002\u0002\u0002\u078f\u00e3\u0003\u0002\u0002\u0002\u0790\u0791\t",
    "\u000b\u0002\u0002\u0791\u00e5\u0003\u0002\u0002\u0002\u0792\u07a6\u0005",
    "\u0180\u00c1\u0002\u0793\u07a6\u0005\u00e8u\u0002\u0794\u07a6\u0005",
    "\u017a\u00be\u0002\u0795\u079b\u0005\u0116\u008c\u0002\u0796\u079c\u0005",
    "\u011a\u008e\u0002\u0797\u0798\u0005\u0158\u00ad\u0002\u0798\u0799\u0005",
    "\u001a\u000e\u0002\u0799\u079a\u0007\u0085\u0002\u0002\u079a\u079c\u0003",
    "\u0002\u0002\u0002\u079b\u0796\u0003\u0002\u0002\u0002\u079b\u0797\u0003",
    "\u0002\u0002\u0002\u079c\u07a6\u0003\u0002\u0002\u0002\u079d\u07a6\u0005",
    "\u0186\u00c4\u0002\u079e\u079f\u0007l\u0002\u0002\u079f\u07a6\u0005",
    "\u0188\u00c5\u0002\u07a0\u07a6\u0005\u0170\u00b9\u0002\u07a1\u07a6\u0005",
    "\u0172\u00ba\u0002\u07a2\u07a6\u0005\u0174\u00bb\u0002\u07a3\u07a6\u0005",
    "\u0176\u00bc\u0002\u07a4\u07a6\u0005\u0178\u00bd\u0002\u07a5\u0792\u0003",
    "\u0002\u0002\u0002\u07a5\u0793\u0003\u0002\u0002\u0002\u07a5\u0794\u0003",
    "\u0002\u0002\u0002\u07a5\u0795\u0003\u0002\u0002\u0002\u07a5\u079d\u0003",
    "\u0002\u0002\u0002\u07a5\u079e\u0003\u0002\u0002\u0002\u07a5\u07a0\u0003",
    "\u0002\u0002\u0002\u07a5\u07a1\u0003\u0002\u0002\u0002\u07a5\u07a2\u0003",
    "\u0002\u0002\u0002\u07a5\u07a3\u0003\u0002\u0002\u0002\u07a5\u07a4\u0003",
    "\u0002\u0002\u0002\u07a6\u00e7\u0003\u0002\u0002\u0002\u07a7\u07b1\u0005",
    "\u0006\u0004\u0002\u07a8\u07a9\u0005\u0004\u0003\u0002\u07a9\u07aa\u0007",
    "\u0082\u0002\u0002\u07aa\u07ab\u0005\u0182\u00c2\u0002\u07ab\u07b2\u0003",
    "\u0002\u0002\u0002\u07ac\u07b2\u0005\u0188\u00c5\u0002\u07ad\u07b2\u0005",
    "\u017e\u00c0\u0002\u07ae\u07b2\u0005\u0182\u00c2\u0002\u07af\u07b2\u0005",
    "\u018c\u00c7\u0002\u07b0\u07b2\u0005\u017c\u00bf\u0002\u07b1\u07a8\u0003",
    "\u0002\u0002\u0002\u07b1\u07ac\u0003\u0002\u0002\u0002\u07b1\u07ad\u0003",
    "\u0002\u0002\u0002\u07b1\u07ae\u0003\u0002\u0002\u0002\u07b1\u07af\u0003",
    "\u0002\u0002\u0002\u07b1\u07b0\u0003\u0002\u0002\u0002\u07b2\u00e9\u0003",
    "\u0002\u0002\u0002\u07b3\u07b8\u0005\u00ecw\u0002\u07b4\u07b5\u0007",
    "\u0083\u0002\u0002\u07b5\u07b7\u0005\u00ecw\u0002\u07b6\u07b4\u0003",
    "\u0002\u0002\u0002\u07b7\u07ba\u0003\u0002\u0002\u0002\u07b8\u07b6\u0003",
    "\u0002\u0002\u0002\u07b8\u07b9\u0003\u0002\u0002\u0002\u07b9\u00eb\u0003",
    "\u0002\u0002\u0002\u07ba\u07b8\u0003\u0002\u0002\u0002\u07bb\u07bc\u0005",
    "\u0194\u00cb\u0002\u07bc\u07bd\u0007\u0090\u0002\u0002\u07bd\u07be\u0005",
    "\u001a\u000e\u0002\u07be\u00ed\u0003\u0002\u0002\u0002\u07bf\u07c4\u0005",
    "\u00f0y\u0002\u07c0\u07c1\u0007\u0083\u0002\u0002\u07c1\u07c3\u0005",
    "\u00f0y\u0002\u07c2\u07c0\u0003\u0002\u0002\u0002\u07c3\u07c6\u0003",
    "\u0002\u0002\u0002\u07c4\u07c2\u0003\u0002\u0002\u0002\u07c4\u07c5\u0003",
    "\u0002\u0002\u0002\u07c5\u00ef\u0003\u0002\u0002\u0002\u07c6\u07c4\u0003",
    "\u0002\u0002\u0002\u07c7\u07ca\u0005\u0194\u00cb\u0002\u07c8\u07c9\u0007",
    "\u0090\u0002\u0002\u07c9\u07cb\u0005\u00f2z\u0002\u07ca\u07c8\u0003",
    "\u0002\u0002\u0002\u07ca\u07cb\u0003\u0002\u0002\u0002\u07cb\u00f1\u0003",
    "\u0002\u0002\u0002\u07cc\u07cf\u0005\u001a\u000e\u0002\u07cd\u07cf\u0005",
    "\u0126\u0094\u0002\u07ce\u07cc\u0003\u0002\u0002\u0002\u07ce\u07cd\u0003",
    "\u0002\u0002\u0002\u07cf\u00f3\u0003\u0002\u0002\u0002\u07d0\u07d3\u0005",
    "\u0006\u0004\u0002\u07d1\u07d3\u0007l\u0002\u0002\u07d2\u07d0\u0003",
    "\u0002\u0002\u0002\u07d2\u07d1\u0003\u0002\u0002\u0002\u07d3\u00f5\u0003",
    "\u0002\u0002\u0002\u07d4\u07d5\u0005\u0004\u0003\u0002\u07d5\u00f7\u0003",
    "\u0002\u0002\u0002\u07d6\u07d9\u0005\u008eH\u0002\u07d7\u07d9\u0007",
    "\u0085\u0002\u0002\u07d8\u07d6\u0003\u0002\u0002\u0002\u07d8\u07d7\u0003",
    "\u0002\u0002\u0002\u07d9\u00f9\u0003\u0002\u0002\u0002\u07da\u07e1\u0005",
    "\u0102\u0082\u0002\u07db\u07de\u0005\u00fc\u007f\u0002\u07dc\u07dd\u0007",
    "\u0083\u0002\u0002\u07dd\u07df\u0005\u0102\u0082\u0002\u07de\u07dc\u0003",
    "\u0002\u0002\u0002\u07de\u07df\u0003\u0002\u0002\u0002\u07df\u07e1\u0003",
    "\u0002\u0002\u0002\u07e0\u07da\u0003\u0002\u0002\u0002\u07e0\u07db\u0003",
    "\u0002\u0002\u0002\u07e1\u00fb\u0003\u0002\u0002\u0002\u07e2\u07e7\u0005",
    "\u00fe\u0080\u0002\u07e3\u07e4\u0007\u0083\u0002\u0002\u07e4\u07e6\u0005",
    "\u00fe\u0080\u0002\u07e5\u07e3\u0003\u0002\u0002\u0002\u07e6\u07e9\u0003",
    "\u0002\u0002\u0002\u07e7\u07e5\u0003\u0002\u0002\u0002\u07e7\u07e8\u0003",
    "\u0002\u0002\u0002\u07e8\u00fd\u0003\u0002\u0002\u0002\u07e9\u07e7\u0003",
    "\u0002\u0002\u0002\u07ea\u07ec\u0005\u0140\u00a1\u0002\u07eb\u07ea\u0003",
    "\u0002\u0002\u0002\u07eb\u07ec\u0003\u0002\u0002\u0002\u07ec\u07ee\u0003",
    "\u0002\u0002\u0002\u07ed\u07ef\u0005\u0100\u0081\u0002\u07ee\u07ed\u0003",
    "\u0002\u0002\u0002\u07ee\u07ef\u0003\u0002\u0002\u0002\u07ef\u07f0\u0003",
    "\u0002\u0002\u0002\u07f0\u07f3\u0005\u018e\u00c8\u0002\u07f1\u07f3\u0007",
    "\r\u0002\u0002\u07f2\u07eb\u0003\u0002\u0002\u0002\u07f2\u07f1\u0003",
    "\u0002\u0002\u0002\u07f3\u00ff\u0003\u0002\u0002\u0002\u07f4\u07f5\t",
    "\f\u0002\u0002\u07f5\u0101\u0003\u0002\u0002\u0002\u07f6\u07f8\u0005",
    "\u0140\u00a1\u0002\u07f7\u07f6\u0003\u0002\u0002\u0002\u07f7\u07f8\u0003",
    "\u0002\u0002\u0002\u07f8\u07f9\u0003\u0002\u0002\u0002\u07f9\u07fa\u0007",
    "K\u0002\u0002\u07fa\u07fb\u0005\u0122\u0092\u0002\u07fb\u07fc\u0005",
    "\u0194\u00cb\u0002\u07fc\u0103\u0003\u0002\u0002\u0002\u07fd\u07ff\u0005",
    "\u0140\u00a1\u0002\u07fe\u07fd\u0003\u0002\u0002\u0002\u07fe\u07ff\u0003",
    "\u0002\u0002\u0002\u07ff\u0801\u0003\u0002\u0002\u0002\u0800\u0802\u0005",
    "\u010a\u0086\u0002\u0801\u0800\u0003\u0002\u0002\u0002\u0801\u0802\u0003",
    "\u0002\u0002\u0002\u0802\u080d\u0003\u0002\u0002\u0002\u0803\u0804\u0007",
    "2\u0002\u0002\u0804\u0806\u0005\u010c\u0087\u0002\u0805\u0807\u0005",
    "\u0108\u0085\u0002\u0806\u0805\u0003\u0002\u0002\u0002\u0806\u0807\u0003",
    "\u0002\u0002\u0002\u0807\u080e\u0003\u0002\u0002\u0002\u0808\u0809\u0007",
    "W\u0002\u0002\u0809\u080b\u0005\u010c\u0087\u0002\u080a\u080c\u0005",
    "\u0106\u0084\u0002\u080b\u080a\u0003\u0002\u0002\u0002\u080b\u080c\u0003",
    "\u0002\u0002\u0002\u080c\u080e\u0003\u0002\u0002\u0002\u080d\u0803\u0003",
    "\u0002\u0002\u0002\u080d\u0808\u0003\u0002\u0002\u0002\u080e\u0105\u0003",
    "\u0002\u0002\u0002\u080f\u0811\u0005\u0140\u00a1\u0002\u0810\u080f\u0003",
    "\u0002\u0002\u0002\u0810\u0811\u0003\u0002\u0002\u0002\u0811\u0813\u0003",
    "\u0002\u0002\u0002\u0812\u0814\u0005\u010a\u0086\u0002\u0813\u0812\u0003",
    "\u0002\u0002\u0002\u0813\u0814\u0003\u0002\u0002\u0002\u0814\u0815\u0003",
    "\u0002\u0002\u0002\u0815\u0816\u00072\u0002\u0002\u0816\u0817\u0005",
    "\u010c\u0087\u0002\u0817\u0107\u0003\u0002\u0002\u0002\u0818\u081a\u0005",
    "\u0140\u00a1\u0002\u0819\u0818\u0003\u0002\u0002\u0002\u0819\u081a\u0003",
    "\u0002\u0002\u0002\u081a\u081c\u0003\u0002\u0002\u0002\u081b\u081d\u0005",
    "\u010a\u0086\u0002\u081c\u081b\u0003\u0002\u0002\u0002\u081c\u081d\u0003",
    "\u0002\u0002\u0002\u081d\u081e\u0003\u0002\u0002\u0002\u081e\u081f\u0007",
    "W\u0002\u0002\u081f\u0820\u0005\u010c\u0087\u0002\u0820\u0109\u0003",
    "\u0002\u0002\u0002\u0821\u0829\u0007N\u0002\u0002\u0822\u0829\u0007",
    ":\u0002\u0002\u0823\u0829\u0007M\u0002\u0002\u0824\u0825\u0007N\u0002",
    "\u0002\u0825\u0829\u0007:\u0002\u0002\u0826\u0827\u0007:\u0002\u0002",
    "\u0827\u0829\u0007N\u0002\u0002\u0828\u0821\u0003\u0002\u0002\u0002",
    "\u0828\u0822\u0003\u0002\u0002\u0002\u0828\u0823\u0003\u0002\u0002\u0002",
    "\u0828\u0824\u0003\u0002\u0002\u0002\u0828\u0826\u0003\u0002\u0002\u0002",
    "\u0829\u010b\u0003\u0002\u0002\u0002\u082a\u082d\u0005\u008eH\u0002",
    "\u082b\u082d\u0007\u0085\u0002\u0002\u082c\u082a\u0003\u0002\u0002\u0002",
    "\u082c\u082b\u0003\u0002\u0002\u0002\u082d\u010d\u0003\u0002\u0002\u0002",
    "\u082e\u0830\u0005\u0140\u00a1\u0002\u082f\u082e\u0003\u0002\u0002\u0002",
    "\u082f\u0830\u0003\u0002\u0002\u0002\u0830\u0839\u0003\u0002\u0002\u0002",
    "\u0831\u0832\u0007\u000b\u0002\u0002\u0832\u0833\u0005\u008eH\u0002",
    "\u0833\u0834\u0005\u0112\u008a\u0002\u0834\u083a\u0003\u0002\u0002\u0002",
    "\u0835\u0836\u0007R\u0002\u0002\u0836\u0837\u0005\u008eH\u0002\u0837",
    "\u0838\u0005\u0110\u0089\u0002\u0838\u083a\u0003\u0002\u0002\u0002\u0839",
    "\u0831\u0003\u0002\u0002\u0002\u0839\u0835\u0003\u0002\u0002\u0002\u083a",
    "\u010f\u0003\u0002\u0002\u0002\u083b\u083d\u0005\u0140\u00a1\u0002\u083c",
    "\u083b\u0003\u0002\u0002\u0002\u083c\u083d\u0003\u0002\u0002\u0002\u083d",
    "\u083e\u0003\u0002\u0002\u0002\u083e\u083f\u0007\u000b\u0002\u0002\u083f",
    "\u0840\u0005\u008eH\u0002\u0840\u0111\u0003\u0002\u0002\u0002\u0841",
    "\u0843\u0005\u0140\u00a1\u0002\u0842\u0841\u0003\u0002\u0002\u0002\u0842",
    "\u0843\u0003\u0002\u0002\u0002\u0843\u0844\u0003\u0002\u0002\u0002\u0844",
    "\u0845\u0007R\u0002\u0002\u0845\u0846\u0005\u008eH\u0002\u0846\u0113",
    "\u0003\u0002\u0002\u0002\u0847\u085e\u0007\u0086\u0002\u0002\u0848\u085e",
    "\u0007\u0087\u0002\u0002\u0849\u085e\u0007\u008e\u0002\u0002\u084a\u085e",
    "\u0007\u008f\u0002\u0002\u084b\u085e\u0007\u0096\u0002\u0002\u084c\u085e",
    "\u0007\u0097\u0002\u0002\u084d\u085e\u0007a\u0002\u0002\u084e\u085e",
    "\u0007+\u0002\u0002\u084f\u085e\u0007\u0088\u0002\u0002\u0850\u085e",
    "\u0007\u0089\u0002\u0002\u0851\u085e\u0007\u008a\u0002\u0002\u0852\u085e",
    "\u0007\u008b\u0002\u0002\u0853\u085e\u0007\u008c\u0002\u0002\u0854\u085e",
    "\u0007\u008d\u0002\u0002\u0855\u085e\u0007\u00a7\u0002\u0002\u0856\u085e",
    "\u0005\u015a\u00ae\u0002\u0857\u085e\u0007\u009b\u0002\u0002\u0858\u085e",
    "\u0007\u009c\u0002\u0002\u0859\u085e\u0007\u0092\u0002\u0002\u085a\u085e",
    "\u0007\u0091\u0002\u0002\u085b\u085e\u0007\u009e\u0002\u0002\u085c\u085e",
    "\u0007\u009d\u0002\u0002\u085d\u0847\u0003\u0002\u0002\u0002\u085d\u0848",
    "\u0003\u0002\u0002\u0002\u085d\u0849\u0003\u0002\u0002\u0002\u085d\u084a",
    "\u0003\u0002\u0002\u0002\u085d\u084b\u0003\u0002\u0002\u0002\u085d\u084c",
    "\u0003\u0002\u0002\u0002\u085d\u084d\u0003\u0002\u0002\u0002\u085d\u084e",
    "\u0003\u0002\u0002\u0002\u085d\u084f\u0003\u0002\u0002\u0002\u085d\u0850",
    "\u0003\u0002\u0002\u0002\u085d\u0851\u0003\u0002\u0002\u0002\u085d\u0852",
    "\u0003\u0002\u0002\u0002\u085d\u0853\u0003\u0002\u0002\u0002\u085d\u0854",
    "\u0003\u0002\u0002\u0002\u085d\u0855\u0003\u0002\u0002\u0002\u085d\u0856",
    "\u0003\u0002\u0002\u0002\u085d\u0857\u0003\u0002\u0002\u0002\u085d\u0858",
    "\u0003\u0002\u0002\u0002\u085d\u0859\u0003\u0002\u0002\u0002\u085d\u085a",
    "\u0003\u0002\u0002\u0002\u085d\u085b\u0003\u0002\u0002\u0002\u085d\u085c",
    "\u0003\u0002\u0002\u0002\u085e\u0115\u0003\u0002\u0002\u0002\u085f\u0860",
    "\t\r\u0002\u0002\u0860\u0861\u0007G\u0002\u0002\u0861\u0862\u0005\u0006",
    "\u0004\u0002\u0862\u0863\u0007\u0080\u0002\u0002\u0863\u0864\u0005\u018e",
    "\u00c8\u0002\u0864\u0865\u0007\u0081\u0002\u0002\u0865\u0117\u0003\u0002",
    "\u0002\u0002\u0866\u0867\u0007\u0084\u0002\u0002\u0867\u0868\t\u000e",
    "\u0002\u0002\u0868\u086a\u0007\u0080\u0002\u0002\u0869\u086b\u0005\u0016",
    "\f\u0002\u086a\u0869\u0003\u0002\u0002\u0002\u086a\u086b\u0003\u0002",
    "\u0002\u0002\u086b\u086c\u0003\u0002\u0002\u0002\u086c\u086d\u0007\u0081",
    "\u0002\u0002\u086d\u0119\u0003\u0002\u0002\u0002\u086e\u0871\u0005\u008e",
    "H\u0002\u086f\u0871\u0007\u0085\u0002\u0002\u0870\u086e\u0003\u0002",
    "\u0002\u0002\u0870\u086f\u0003\u0002\u0002\u0002\u0871\u011b\u0003\u0002",
    "\u0002\u0002\u0872\u0873\u0007\u0084\u0002\u0002\u0873\u0874\u0005\u00ce",
    "h\u0002\u0874\u011d\u0003\u0002\u0002\u0002\u0875\u0879\u0007|\u0002",
    "\u0002\u0876\u0878\u0005\u0120\u0091\u0002\u0877\u0876\u0003\u0002\u0002",
    "\u0002\u0878\u087b\u0003\u0002\u0002\u0002\u0879\u0877\u0003\u0002\u0002",
    "\u0002\u0879\u087a\u0003\u0002\u0002\u0002\u087a\u087c\u0003\u0002\u0002",
    "\u0002\u087b\u0879\u0003\u0002\u0002\u0002\u087c\u087d\u0007}\u0002",
    "\u0002\u087d\u011f\u0003\u0002\u0002\u0002\u087e\u0880\u0005\u0140\u00a1",
    "\u0002\u087f\u087e\u0003\u0002\u0002\u0002\u087f\u0880\u0003\u0002\u0002",
    "\u0002\u0880\u0882\u0003\u0002\u0002\u0002\u0881\u0883\u0005\u00e2r",
    "\u0002\u0882\u0881\u0003\u0002\u0002\u0002\u0882\u0883\u0003\u0002\u0002",
    "\u0002\u0883\u088e\u0003\u0002\u0002\u0002\u0884\u088f\u0005\u00e6t",
    "\u0002\u0885\u0886\u0007-\u0002\u0002\u0886\u0888\u0005\u0006\u0004",
    "\u0002\u0887\u0889\u0005\u0154\u00ab\u0002\u0888\u0887\u0003\u0002\u0002",
    "\u0002\u0889\u088a\u0003\u0002\u0002\u0002\u088a\u0888\u0003\u0002\u0002",
    "\u0002\u088a\u088b\u0003\u0002\u0002\u0002\u088b\u088c\u0003\u0002\u0002",
    "\u0002\u088c\u088d\u0007\u0085\u0002\u0002\u088d\u088f\u0003\u0002\u0002",
    "\u0002\u088e\u0884\u0003\u0002\u0002\u0002\u088e\u0885\u0003\u0002\u0002",
    "\u0002\u088f\u0121\u0003\u0002\u0002\u0002\u0890\u0898\u0005\b\u0005",
    "\u0002\u0891\u0893\t\u000f\u0002\u0002\u0892\u0891\u0003\u0002\u0002",
    "\u0002\u0893\u0896\u0003\u0002\u0002\u0002\u0894\u0892\u0003\u0002\u0002",
    "\u0002\u0894\u0895\u0003\u0002\u0002\u0002\u0895\u0897\u0003\u0002\u0002",
    "\u0002\u0896\u0894\u0003\u0002\u0002\u0002\u0897\u0899\u0005\u0124\u0093",
    "\u0002\u0898\u0894\u0003\u0002\u0002\u0002\u0899\u089a\u0003\u0002\u0002",
    "\u0002\u089a\u0898\u0003\u0002\u0002\u0002\u089a\u089b\u0003\u0002\u0002",
    "\u0002\u089b\u0123\u0003\u0002\u0002\u0002\u089c\u08a0\u0007~\u0002",
    "\u0002\u089d\u089f\u0007\u0083\u0002\u0002\u089e\u089d\u0003\u0002\u0002",
    "\u0002\u089f\u08a2\u0003\u0002\u0002\u0002\u08a0\u089e\u0003\u0002\u0002",
    "\u0002\u08a0\u08a1\u0003\u0002\u0002\u0002\u08a1\u08a3\u0003\u0002\u0002",
    "\u0002\u08a2\u08a0\u0003\u0002\u0002\u0002\u08a3\u08a4\u0007\u007f\u0002",
    "\u0002\u08a4\u0125\u0003\u0002\u0002\u0002\u08a5\u08b1\u0007|\u0002",
    "\u0002\u08a6\u08ab\u0005\u00f2z\u0002\u08a7\u08a8\u0007\u0083\u0002",
    "\u0002\u08a8\u08aa\u0005\u00f2z\u0002\u08a9\u08a7\u0003\u0002\u0002",
    "\u0002\u08aa\u08ad\u0003\u0002\u0002\u0002\u08ab\u08a9\u0003\u0002\u0002",
    "\u0002\u08ab\u08ac\u0003\u0002\u0002\u0002\u08ac\u08af\u0003\u0002\u0002",
    "\u0002\u08ad\u08ab\u0003\u0002\u0002\u0002\u08ae\u08b0\u0007\u0083\u0002",
    "\u0002\u08af\u08ae\u0003\u0002\u0002\u0002\u08af\u08b0\u0003\u0002\u0002",
    "\u0002\u08b0\u08b2\u0003\u0002\u0002\u0002\u08b1\u08a6\u0003\u0002\u0002",
    "\u0002\u08b1\u08b2\u0003\u0002\u0002\u0002\u08b2\u08b3\u0003\u0002\u0002",
    "\u0002\u08b3\u08b4\u0007}\u0002\u0002\u08b4\u0127\u0003\u0002\u0002",
    "\u0002\u08b5\u08b6\u0007\u0091\u0002\u0002\u08b6\u08bb\u0005\u012a\u0096",
    "\u0002\u08b7\u08b8\u0007\u0083\u0002\u0002\u08b8\u08ba\u0005\u012a\u0096",
    "\u0002\u08b9\u08b7\u0003\u0002\u0002\u0002\u08ba\u08bd\u0003\u0002\u0002",
    "\u0002\u08bb\u08b9\u0003\u0002\u0002\u0002\u08bb\u08bc\u0003\u0002\u0002",
    "\u0002\u08bc\u08be\u0003\u0002\u0002\u0002\u08bd\u08bb\u0003\u0002\u0002",
    "\u0002\u08be\u08bf\u0007\u0092\u0002\u0002\u08bf\u0129\u0003\u0002\u0002",
    "\u0002\u08c0\u08c2\u0005\u0140\u00a1\u0002\u08c1\u08c0\u0003\u0002\u0002",
    "\u0002\u08c1\u08c2\u0003\u0002\u0002\u0002\u08c2\u08c4\u0003\u0002\u0002",
    "\u0002\u08c3\u08c5\u0005\u012c\u0097\u0002\u08c4\u08c3\u0003\u0002\u0002",
    "\u0002\u08c4\u08c5\u0003\u0002\u0002\u0002\u08c5\u08c6\u0003\u0002\u0002",
    "\u0002\u08c6\u08c7\u0005\u0194\u00cb\u0002\u08c7\u012b\u0003\u0002\u0002",
    "\u0002\u08c8\u08c9\t\u0010\u0002\u0002\u08c9\u012d\u0003\u0002\u0002",
    "\u0002\u08ca\u08cb\u0007\u0084\u0002\u0002\u08cb\u08cc\u0005\u00ceh",
    "\u0002\u08cc\u012f\u0003\u0002\u0002\u0002\u08cd\u08d1\u0007|\u0002",
    "\u0002\u08ce\u08d0\u0005\u0132\u009a\u0002\u08cf\u08ce\u0003\u0002\u0002",
    "\u0002\u08d0\u08d3\u0003\u0002\u0002\u0002\u08d1\u08cf\u0003\u0002\u0002",
    "\u0002\u08d1\u08d2\u0003\u0002\u0002\u0002\u08d2\u08d4\u0003\u0002\u0002",
    "\u0002\u08d3\u08d1\u0003\u0002\u0002\u0002\u08d4\u08d5\u0007}\u0002",
    "\u0002\u08d5\u0131\u0003\u0002\u0002\u0002\u08d6\u08d8\u0005\u0140\u00a1",
    "\u0002\u08d7\u08d6\u0003\u0002\u0002\u0002\u08d7\u08d8\u0003\u0002\u0002",
    "\u0002\u08d8\u08da\u0003\u0002\u0002\u0002\u08d9\u08db\u0007C\u0002",
    "\u0002\u08da\u08d9\u0003\u0002\u0002\u0002\u08da\u08db\u0003\u0002\u0002",
    "\u0002\u08db\u0914\u0003\u0002\u0002\u0002\u08dc\u08de\u0007g\u0002",
    "\u0002\u08dd\u08dc\u0003\u0002\u0002\u0002\u08dd\u08de\u0003\u0002\u0002",
    "\u0002\u08de\u08df\u0003\u0002\u0002\u0002\u08df\u08fb\u0005\u0006\u0004",
    "\u0002\u08e0\u08e2\u0005\u0194\u00cb\u0002\u08e1\u08e3\u0005\u00c8e",
    "\u0002\u08e2\u08e1\u0003\u0002\u0002\u0002\u08e2\u08e3\u0003\u0002\u0002",
    "\u0002\u08e3\u08e4\u0003\u0002\u0002\u0002\u08e4\u08e6\u0007\u0080\u0002",
    "\u0002\u08e5\u08e7\u0005\u00fa~\u0002\u08e6\u08e5\u0003\u0002\u0002",
    "\u0002\u08e6\u08e7\u0003\u0002\u0002\u0002\u08e7\u08e8\u0003\u0002\u0002",
    "\u0002\u08e8\u08ea\u0007\u0081\u0002\u0002\u08e9\u08eb\u0005\u00d0i",
    "\u0002\u08ea\u08e9\u0003\u0002\u0002\u0002\u08ea\u08eb\u0003\u0002\u0002",
    "\u0002\u08eb\u08ec\u0003\u0002\u0002\u0002\u08ec\u08ed\u0007\u0085\u0002",
    "\u0002\u08ed\u08fc\u0003\u0002\u0002\u0002\u08ee\u08ef\u0005\u0194\u00cb",
    "\u0002\u08ef\u08f0\u0007|\u0002\u0002\u08f0\u08f1\u0005\u0134\u009b",
    "\u0002\u08f1\u08f2\u0007}\u0002\u0002\u08f2\u08fc\u0003\u0002\u0002",
    "\u0002\u08f3\u08f4\u0007_\u0002\u0002\u08f4\u08f5\u0007~\u0002\u0002",
    "\u08f5\u08f6\u0005\u00fa~\u0002\u08f6\u08f7\u0007\u007f\u0002\u0002",
    "\u08f7\u08f8\u0007|\u0002\u0002\u08f8\u08f9\u0005\u0134\u009b\u0002",
    "\u08f9\u08fa\u0007}\u0002\u0002\u08fa\u08fc\u0003\u0002\u0002\u0002",
    "\u08fb\u08e0\u0003\u0002\u0002\u0002\u08fb\u08ee\u0003\u0002\u0002\u0002",
    "\u08fb\u08f3\u0003\u0002\u0002\u0002\u08fc\u0915\u0003\u0002\u0002\u0002",
    "\u08fd\u08ff\u0007g\u0002\u0002\u08fe\u08fd\u0003\u0002\u0002\u0002",
    "\u08fe\u08ff\u0003\u0002\u0002\u0002\u08ff\u0900\u0003\u0002\u0002\u0002",
    "\u0900\u0901\u0007l\u0002\u0002\u0901\u0903\u0005\u0194\u00cb\u0002",
    "\u0902\u0904\u0005\u00c8e\u0002\u0903\u0902\u0003\u0002\u0002\u0002",
    "\u0903\u0904\u0003\u0002\u0002\u0002\u0904\u0905\u0003\u0002\u0002\u0002",
    "\u0905\u0907\u0007\u0080\u0002\u0002\u0906\u0908\u0005\u00fa~\u0002",
    "\u0907\u0906\u0003\u0002\u0002\u0002\u0907\u0908\u0003\u0002\u0002\u0002",
    "\u0908\u0909\u0003\u0002\u0002\u0002\u0909\u090b\u0007\u0081\u0002\u0002",
    "\u090a\u090c\u0005\u00d0i\u0002\u090b\u090a\u0003\u0002\u0002\u0002",
    "\u090b\u090c\u0003\u0002\u0002\u0002\u090c\u090d\u0003\u0002\u0002\u0002",
    "\u090d\u090e\u0007\u0085\u0002\u0002\u090e\u0915\u0003\u0002\u0002\u0002",
    "\u090f\u0910\u0007(\u0002\u0002\u0910\u0911\u0005\u0006\u0004\u0002",
    "\u0911\u0912\u0005\u0194\u00cb\u0002\u0912\u0913\u0007\u0085\u0002\u0002",
    "\u0913\u0915\u0003\u0002\u0002\u0002\u0914\u08dd\u0003\u0002\u0002\u0002",
    "\u0914\u08fe\u0003\u0002\u0002\u0002\u0914\u090f\u0003\u0002\u0002\u0002",
    "\u0915\u0133\u0003\u0002\u0002\u0002\u0916\u0918\u0005\u0140\u00a1\u0002",
    "\u0917\u0916\u0003\u0002\u0002\u0002\u0917\u0918\u0003\u0002\u0002\u0002",
    "\u0918\u092b\u0003\u0002\u0002\u0002\u0919\u091a\u00072\u0002\u0002",
    "\u091a\u0920\u0007\u0085\u0002\u0002\u091b\u091d\u0005\u0140\u00a1\u0002",
    "\u091c\u091b\u0003\u0002\u0002\u0002\u091c\u091d\u0003\u0002\u0002\u0002",
    "\u091d\u091e\u0003\u0002\u0002\u0002\u091e\u091f\u0007W\u0002\u0002",
    "\u091f\u0921\u0007\u0085\u0002\u0002\u0920\u091c\u0003\u0002\u0002\u0002",
    "\u0920\u0921\u0003\u0002\u0002\u0002\u0921\u092c\u0003\u0002\u0002\u0002",
    "\u0922\u0923\u0007W\u0002\u0002\u0923\u0929\u0007\u0085\u0002\u0002",
    "\u0924\u0926\u0005\u0140\u00a1\u0002\u0925\u0924\u0003\u0002\u0002\u0002",
    "\u0925\u0926\u0003\u0002\u0002\u0002\u0926\u0927\u0003\u0002\u0002\u0002",
    "\u0927\u0928\u00072\u0002\u0002\u0928\u092a\u0007\u0085\u0002\u0002",
    "\u0929\u0925\u0003\u0002\u0002\u0002\u0929\u092a\u0003\u0002\u0002\u0002",
    "\u092a\u092c\u0003\u0002\u0002\u0002\u092b\u0919\u0003\u0002\u0002\u0002",
    "\u092b\u0922\u0003\u0002\u0002\u0002\u092c\u0135\u0003\u0002\u0002\u0002",
    "\u092d\u092e\u0007\u0084\u0002\u0002\u092e\u092f\u0005\u0006\u0004\u0002",
    "\u092f\u0137\u0003\u0002\u0002\u0002\u0930\u093c\u0007|\u0002\u0002",
    "\u0931\u0936\u0005\u013a\u009e\u0002\u0932\u0933\u0007\u0083\u0002\u0002",
    "\u0933\u0935\u0005\u013a\u009e\u0002\u0934\u0932\u0003\u0002\u0002\u0002",
    "\u0935\u0938\u0003\u0002\u0002\u0002\u0936\u0934\u0003\u0002\u0002\u0002",
    "\u0936\u0937\u0003\u0002\u0002\u0002\u0937\u093a\u0003\u0002\u0002\u0002",
    "\u0938\u0936\u0003\u0002\u0002\u0002\u0939\u093b\u0007\u0083\u0002\u0002",
    "\u093a\u0939\u0003\u0002\u0002\u0002\u093a\u093b\u0003\u0002\u0002\u0002",
    "\u093b\u093d\u0003\u0002\u0002\u0002\u093c\u0931\u0003\u0002\u0002\u0002",
    "\u093c\u093d\u0003\u0002\u0002\u0002\u093d\u093e\u0003\u0002\u0002\u0002",
    "\u093e\u093f\u0007}\u0002\u0002\u093f\u0139\u0003\u0002\u0002\u0002",
    "\u0940\u0942\u0005\u0140\u00a1\u0002\u0941\u0940\u0003\u0002\u0002\u0002",
    "\u0941\u0942\u0003\u0002\u0002\u0002\u0942\u0943\u0003\u0002\u0002\u0002",
    "\u0943\u0946\u0005\u0194\u00cb\u0002\u0944\u0945\u0007\u0090\u0002\u0002",
    "\u0945\u0947\u0005\u001a\u000e\u0002\u0946\u0944\u0003\u0002\u0002\u0002",
    "\u0946\u0947\u0003\u0002\u0002\u0002\u0947\u013b\u0003\u0002\u0002\u0002",
    "\u0948\u0949\u0007~\u0002\u0002\u0949\u094a\u0005\u013e\u00a0\u0002",
    "\u094a\u094b\u0007\u0084\u0002\u0002\u094b\u094d\u0005\u0146\u00a4\u0002",
    "\u094c\u094e\u0007\u0083\u0002\u0002\u094d\u094c\u0003\u0002\u0002\u0002",
    "\u094d\u094e\u0003\u0002\u0002\u0002\u094e\u094f\u0003\u0002\u0002\u0002",
    "\u094f\u0950\u0007\u007f\u0002\u0002\u0950\u013d\u0003\u0002\u0002\u0002",
    "\u0951\u0954\u0005\u016e\u00b8\u0002\u0952\u0954\u0005\u0194\u00cb\u0002",
    "\u0953\u0951\u0003\u0002\u0002\u0002\u0953\u0952\u0003\u0002\u0002\u0002",
    "\u0954\u013f\u0003\u0002\u0002\u0002\u0955\u0957\u0005\u0142\u00a2\u0002",
    "\u0956\u0955\u0003\u0002\u0002\u0002\u0957\u0958\u0003\u0002\u0002\u0002",
    "\u0958\u0956\u0003\u0002\u0002\u0002\u0958\u0959\u0003\u0002\u0002\u0002",
    "\u0959\u0141\u0003\u0002\u0002\u0002\u095a\u095e\u0007~\u0002\u0002",
    "\u095b\u095c\u0005\u0144\u00a3\u0002\u095c\u095d\u0007\u0084\u0002\u0002",
    "\u095d\u095f\u0003\u0002\u0002\u0002\u095e\u095b\u0003\u0002\u0002\u0002",
    "\u095e\u095f\u0003\u0002\u0002\u0002\u095f\u0960\u0003\u0002\u0002\u0002",
    "\u0960\u0962\u0005\u0146\u00a4\u0002\u0961\u0963\u0007\u0083\u0002\u0002",
    "\u0962\u0961\u0003\u0002\u0002\u0002\u0962\u0963\u0003\u0002\u0002\u0002",
    "\u0963\u0964\u0003\u0002\u0002\u0002\u0964\u0965\u0007\u007f\u0002\u0002",
    "\u0965\u0143\u0003\u0002\u0002\u0002\u0966\u0969\u0005\u016e\u00b8\u0002",
    "\u0967\u0969\u0005\u0194\u00cb\u0002\u0968\u0966\u0003\u0002\u0002\u0002",
    "\u0968\u0967\u0003\u0002\u0002\u0002\u0969\u0145\u0003\u0002\u0002\u0002",
    "\u096a\u096f\u0005\u0148\u00a5\u0002\u096b\u096c\u0007\u0083\u0002\u0002",
    "\u096c\u096e\u0005\u0148\u00a5\u0002\u096d\u096b\u0003\u0002\u0002\u0002",
    "\u096e\u0971\u0003\u0002\u0002\u0002\u096f\u096d\u0003\u0002\u0002\u0002",
    "\u096f\u0970\u0003\u0002\u0002\u0002\u0970\u0147\u0003\u0002\u0002\u0002",
    "\u0971\u096f\u0003\u0002\u0002\u0002\u0972\u097f\u0005\u0004\u0003\u0002",
    "\u0973\u097c\u0007\u0080\u0002\u0002\u0974\u0979\u0005\u014a\u00a6\u0002",
    "\u0975\u0976\u0007\u0083\u0002\u0002\u0976\u0978\u0005\u014a\u00a6\u0002",
    "\u0977\u0975\u0003\u0002\u0002\u0002\u0978\u097b\u0003\u0002\u0002\u0002",
    "\u0979\u0977\u0003\u0002\u0002\u0002\u0979\u097a\u0003\u0002\u0002\u0002",
    "\u097a\u097d\u0003\u0002\u0002\u0002\u097b\u0979\u0003\u0002\u0002\u0002",
    "\u097c\u0974\u0003\u0002\u0002\u0002\u097c\u097d\u0003\u0002\u0002\u0002",
    "\u097d\u097e\u0003\u0002\u0002\u0002\u097e\u0980\u0007\u0081\u0002\u0002",
    "\u097f\u0973\u0003\u0002\u0002\u0002\u097f\u0980\u0003\u0002\u0002\u0002",
    "\u0980\u0149\u0003\u0002\u0002\u0002\u0981\u0982\u0005\u0194\u00cb\u0002",
    "\u0982\u0983\u0007\u0084\u0002\u0002\u0983\u0985\u0003\u0002\u0002\u0002",
    "\u0984\u0981\u0003\u0002\u0002\u0002\u0984\u0985\u0003\u0002\u0002\u0002",
    "\u0985\u0986\u0003\u0002\u0002\u0002\u0986\u0987\u0005\u001a\u000e\u0002",
    "\u0987\u014b\u0003\u0002\u0002\u0002\u0988\u098b\u0005\n\u0006\u0002",
    "\u0989\u098b\u0005\u0012\n\u0002\u098a\u0988\u0003\u0002\u0002\u0002",
    "\u098a\u0989\u0003\u0002\u0002\u0002\u098b\u0990\u0003\u0002\u0002\u0002",
    "\u098c\u098f\u0005\u0124\u0093\u0002\u098d\u098f\u0007\u0093\u0002\u0002",
    "\u098e\u098c\u0003\u0002\u0002\u0002\u098e\u098d\u0003\u0002\u0002\u0002",
    "\u098f\u0992\u0003\u0002\u0002\u0002\u0990\u098e\u0003\u0002\u0002\u0002",
    "\u0990\u0991\u0003\u0002\u0002\u0002\u0991\u0993\u0003\u0002\u0002\u0002",
    "\u0992\u0990\u0003\u0002\u0002\u0002\u0993\u0994\u0007\u0088\u0002\u0002",
    "\u0994\u0998\u0003\u0002\u0002\u0002\u0995\u0996\u0007l\u0002\u0002",
    "\u0996\u0998\u0007\u0088\u0002\u0002\u0997\u098a\u0003\u0002\u0002\u0002",
    "\u0997\u0995\u0003\u0002\u0002\u0002\u0998\u014d\u0003\u0002\u0002\u0002",
    "\u0999\u099e\u0005\u0150\u00a9\u0002\u099a\u099b\u0007\u0083\u0002\u0002",
    "\u099b\u099d\u0005\u0150\u00a9\u0002\u099c\u099a\u0003\u0002\u0002\u0002",
    "\u099d\u09a0\u0003\u0002\u0002\u0002\u099e\u099c\u0003\u0002\u0002\u0002",
    "\u099e\u099f\u0003\u0002\u0002\u0002\u099f\u014f\u0003\u0002\u0002\u0002",
    "\u09a0\u099e\u0003\u0002\u0002\u0002\u09a1\u09a2\u0005\u0194\u00cb\u0002",
    "\u09a2\u09a3\u0007\u0090\u0002\u0002\u09a3\u09a4\u0005\u0152\u00aa\u0002",
    "\u09a4\u0151\u0003\u0002\u0002\u0002\u09a5\u09a7\u0007\u008b\u0002\u0002",
    "\u09a6\u09a5\u0003\u0002\u0002\u0002\u09a6\u09a7\u0003\u0002\u0002\u0002",
    "\u09a7\u09a8\u0003\u0002\u0002\u0002\u09a8\u09ab\u0005\u001a\u000e\u0002",
    "\u09a9\u09ab\u0005\u0156\u00ac\u0002\u09aa\u09a6\u0003\u0002\u0002\u0002",
    "\u09aa\u09a9\u0003\u0002\u0002\u0002\u09ab\u0153\u0003\u0002\u0002\u0002",
    "\u09ac\u09ad\u0005\u0194\u00cb\u0002\u09ad\u09ae\u0007~\u0002\u0002",
    "\u09ae\u09af\u0005\u001a\u000e\u0002\u09af\u09b0\u0007\u007f\u0002\u0002",
    "\u09b0\u0155\u0003\u0002\u0002\u0002\u09b1\u09b2\u0007Z\u0002\u0002",
    "\u09b2\u09b3\u0005\u0006\u0004\u0002\u09b3\u09b4\u0007~\u0002\u0002",
    "\u09b4\u09b5\u0005\u001a\u000e\u0002\u09b5\u09b6\u0007\u007f\u0002\u0002",
    "\u09b6\u0157\u0003\u0002\u0002\u0002\u09b7\u09b8\u0007\u0090\u0002\u0002",
    "\u09b8\u09b9\u0007\u0092\u0002\u0002\u09b9\u09ba\u0006\u00ad\u0002\u0003",
    "\u09ba\u0159\u0003\u0002\u0002\u0002\u09bb\u09bc\u0007\u0092\u0002\u0002",
    "\u09bc\u09bd\u0007\u0092\u0002\u0002\u09bd\u09be\u0006\u00ae\u0003\u0003",
    "\u09be\u015b\u0003\u0002\u0002\u0002\u09bf\u09c0\u0007\u0092\u0002\u0002",
    "\u09c0\u09c1\u0007\u009e\u0002\u0002\u09c1\u09c2\u0006\u00af\u0004\u0003",
    "\u09c2\u015d\u0003\u0002\u0002\u0002\u09c3\u09cb\u0005\u0160\u00b1\u0002",
    "\u09c4\u09cb\u0005\u0162\u00b2\u0002\u09c5\u09cb\u0007t\u0002\u0002",
    "\u09c6\u09cb\u0007u\u0002\u0002\u09c7\u09cb\u0007v\u0002\u0002\u09c8",
    "\u09cb\u0007w\u0002\u0002\u09c9\u09cb\u0007D\u0002\u0002\u09ca\u09c3",
    "\u0003\u0002\u0002\u0002\u09ca\u09c4\u0003\u0002\u0002\u0002\u09ca\u09c5",
    "\u0003\u0002\u0002\u0002\u09ca\u09c6\u0003\u0002\u0002\u0002\u09ca\u09c7",
    "\u0003\u0002\u0002\u0002\u09ca\u09c8\u0003\u0002\u0002\u0002\u09ca\u09c9",
    "\u0003\u0002\u0002\u0002\u09cb\u015f\u0003\u0002\u0002\u0002\u09cc\u09cd",
    "\t\u0011\u0002\u0002\u09cd\u0161\u0003\u0002\u0002\u0002\u09ce\u09d3",
    "\u0005\u0164\u00b3\u0002\u09cf\u09d3\u0005\u0166\u00b4\u0002\u09d0\u09d3",
    "\u0007x\u0002\u0002\u09d1\u09d3\u0007y\u0002\u0002\u09d2\u09ce\u0003",
    "\u0002\u0002\u0002\u09d2\u09cf\u0003\u0002\u0002\u0002\u09d2\u09d0\u0003",
    "\u0002\u0002\u0002\u09d2\u09d1\u0003\u0002\u0002\u0002\u09d3\u0163\u0003",
    "\u0002\u0002\u0002\u09d4\u09d8\u0007z\u0002\u0002\u09d5\u09d7\u0005",
    "\u0168\u00b5\u0002\u09d6\u09d5\u0003\u0002\u0002\u0002\u09d7\u09da\u0003",
    "\u0002\u0002\u0002\u09d8\u09d6\u0003\u0002\u0002\u0002\u09d8\u09d9\u0003",
    "\u0002\u0002\u0002\u09d9\u09db\u0003\u0002\u0002\u0002\u09da\u09d8\u0003",
    "\u0002\u0002\u0002\u09db\u09dc\u0007\u00ad\u0002\u0002\u09dc\u0165\u0003",
    "\u0002\u0002\u0002\u09dd\u09e1\u0007{\u0002\u0002\u09de\u09e0\u0005",
    "\u016a\u00b6\u0002\u09df\u09de\u0003\u0002\u0002\u0002\u09e0\u09e3\u0003",
    "\u0002\u0002\u0002\u09e1\u09df\u0003\u0002\u0002\u0002\u09e1\u09e2\u0003",
    "\u0002\u0002\u0002\u09e2\u09e4\u0003\u0002\u0002\u0002\u09e3\u09e1\u0003",
    "\u0002\u0002\u0002\u09e4\u09e5\u0007\u00ad\u0002\u0002\u09e5\u0167\u0003",
    "\u0002\u0002\u0002\u09e6\u09eb\u0005\u016c\u00b7\u0002\u09e7\u09eb\u0007",
    "\u00a9\u0002\u0002\u09e8\u09eb\u0007\u00ab\u0002\u0002\u09e9\u09eb\u0007",
    "\u00ae\u0002\u0002\u09ea\u09e6\u0003\u0002\u0002\u0002\u09ea\u09e7\u0003",
    "\u0002\u0002\u0002\u09ea\u09e8\u0003\u0002\u0002\u0002\u09ea\u09e9\u0003",
    "\u0002\u0002\u0002\u09eb\u0169\u0003\u0002\u0002\u0002\u09ec\u09f1\u0005",
    "\u016c\u00b7\u0002\u09ed\u09f1\u0007\u00a9\u0002\u0002\u09ee\u09f1\u0007",
    "\u00ac\u0002\u0002\u09ef\u09f1\u0007\u00af\u0002\u0002\u09f0\u09ec\u0003",
    "\u0002\u0002\u0002\u09f0\u09ed\u0003\u0002\u0002\u0002\u09f0\u09ee\u0003",
    "\u0002\u0002\u0002\u09f0\u09ef\u0003\u0002\u0002\u0002\u09f1\u016b\u0003",
    "\u0002\u0002\u0002\u09f2\u09f7\u0005\u001a\u000e\u0002\u09f3\u09f4\u0007",
    "\u0083\u0002\u0002\u09f4\u09f6\u0005\u001a\u000e\u0002\u09f5\u09f3\u0003",
    "\u0002\u0002\u0002\u09f6\u09f9\u0003\u0002\u0002\u0002\u09f7\u09f5\u0003",
    "\u0002\u0002\u0002\u09f7\u09f8\u0003\u0002\u0002\u0002\u09f8\u0a00\u0003",
    "\u0002\u0002\u0002\u09f9\u09f7\u0003\u0002\u0002\u0002\u09fa\u09fc\u0007",
    "\u0084\u0002\u0002\u09fb\u09fd\u0007\u00b1\u0002\u0002\u09fc\u09fb\u0003",
    "\u0002\u0002\u0002\u09fd\u09fe\u0003\u0002\u0002\u0002\u09fe\u09fc\u0003",
    "\u0002\u0002\u0002\u09fe\u09ff\u0003\u0002\u0002\u0002\u09ff\u0a01\u0003",
    "\u0002\u0002\u0002\u0a00\u09fa\u0003\u0002\u0002\u0002\u0a00\u0a01\u0003",
    "\u0002\u0002\u0002\u0a01\u016d\u0003\u0002\u0002\u0002\u0a02\u0a03\t",
    "\u0012\u0002\u0002\u0a03\u016f\u0003\u0002\u0002\u0002\u0a04\u0a05\u0007",
    "\u001b\u0002\u0002\u0a05\u0a07\u0005\u0194\u00cb\u0002\u0a06\u0a08\u0005",
    "\u00c8e\u0002\u0a07\u0a06\u0003\u0002\u0002\u0002\u0a07\u0a08\u0003",
    "\u0002\u0002\u0002\u0a08\u0a0a\u0003\u0002\u0002\u0002\u0a09\u0a0b\u0005",
    "\u00ccg\u0002\u0a0a\u0a09\u0003\u0002\u0002\u0002\u0a0a\u0a0b\u0003",
    "\u0002\u0002\u0002\u0a0b\u0a0d\u0003\u0002\u0002\u0002\u0a0c\u0a0e\u0005",
    "\u00d0i\u0002\u0a0d\u0a0c\u0003\u0002\u0002\u0002\u0a0d\u0a0e\u0003",
    "\u0002\u0002\u0002\u0a0e\u0a0f\u0003\u0002\u0002\u0002\u0a0f\u0a11\u0005",
    "\u00dco\u0002\u0a10\u0a12\u0007\u0085\u0002\u0002\u0a11\u0a10\u0003",
    "\u0002\u0002\u0002\u0a11\u0a12\u0003\u0002\u0002\u0002\u0a12\u0171\u0003",
    "\u0002\u0002\u0002\u0a13\u0a14\u0007]\u0002\u0002\u0a14\u0a16\u0005",
    "\u0194\u00cb\u0002\u0a15\u0a17\u0005\u00c8e\u0002\u0a16\u0a15\u0003",
    "\u0002\u0002\u0002\u0a16\u0a17\u0003\u0002\u0002\u0002\u0a17\u0a19\u0003",
    "\u0002\u0002\u0002\u0a18\u0a1a\u0005\u011c\u008f\u0002\u0a19\u0a18\u0003",
    "\u0002\u0002\u0002\u0a19\u0a1a\u0003\u0002\u0002\u0002\u0a1a\u0a1c\u0003",
    "\u0002\u0002\u0002\u0a1b\u0a1d\u0005\u00d0i\u0002\u0a1c\u0a1b\u0003",
    "\u0002\u0002\u0002\u0a1c\u0a1d\u0003\u0002\u0002\u0002\u0a1d\u0a1e\u0003",
    "\u0002\u0002\u0002\u0a1e\u0a20\u0005\u011e\u0090\u0002\u0a1f\u0a21\u0007",
    "\u0085\u0002\u0002\u0a20\u0a1f\u0003\u0002\u0002\u0002\u0a20\u0a21\u0003",
    "\u0002\u0002\u0002\u0a21\u0173\u0003\u0002\u0002\u0002\u0a22\u0a23\u0007",
    "9\u0002\u0002\u0a23\u0a25\u0005\u0194\u00cb\u0002\u0a24\u0a26\u0005",
    "\u0128\u0095\u0002\u0a25\u0a24\u0003\u0002\u0002\u0002\u0a25\u0a26\u0003",
    "\u0002\u0002\u0002\u0a26\u0a28\u0003\u0002\u0002\u0002\u0a27\u0a29\u0005",
    "\u012e\u0098\u0002\u0a28\u0a27\u0003\u0002\u0002\u0002\u0a28\u0a29\u0003",
    "\u0002\u0002\u0002\u0a29\u0a2b\u0003\u0002\u0002\u0002\u0a2a\u0a2c\u0005",
    "\u00d0i\u0002\u0a2b\u0a2a\u0003\u0002\u0002\u0002\u0a2b\u0a2c\u0003",
    "\u0002\u0002\u0002\u0a2c\u0a2d\u0003\u0002\u0002\u0002\u0a2d\u0a2f\u0005",
    "\u0130\u0099\u0002\u0a2e\u0a30\u0007\u0085\u0002\u0002\u0a2f\u0a2e\u0003",
    "\u0002\u0002\u0002\u0a2f\u0a30\u0003\u0002\u0002\u0002\u0a30\u0175\u0003",
    "\u0002\u0002\u0002\u0a31\u0a32\u0007&\u0002\u0002\u0a32\u0a34\u0005",
    "\u0194\u00cb\u0002\u0a33\u0a35\u0005\u0136\u009c\u0002\u0a34\u0a33\u0003",
    "\u0002\u0002\u0002\u0a34\u0a35\u0003\u0002\u0002\u0002\u0a35\u0a36\u0003",
    "\u0002\u0002\u0002\u0a36\u0a38\u0005\u0138\u009d\u0002\u0a37\u0a39\u0007",
    "\u0085\u0002\u0002\u0a38\u0a37\u0003\u0002\u0002\u0002\u0a38\u0a39\u0003",
    "\u0002\u0002\u0002\u0a39\u0177\u0003\u0002\u0002\u0002\u0a3a\u0a3b\u0007",
    " \u0002\u0002\u0a3b\u0a3c\u0005\u00f4{\u0002\u0a3c\u0a3e\u0005\u0194",
    "\u00cb\u0002\u0a3d\u0a3f\u0005\u0128\u0095\u0002\u0a3e\u0a3d\u0003\u0002",
    "\u0002\u0002\u0a3e\u0a3f\u0003\u0002\u0002\u0002\u0a3f\u0a40\u0003\u0002",
    "\u0002\u0002\u0a40\u0a42\u0007\u0080\u0002\u0002\u0a41\u0a43\u0005\u00fa",
    "~\u0002\u0a42\u0a41\u0003\u0002\u0002\u0002\u0a42\u0a43\u0003\u0002",
    "\u0002\u0002\u0a43\u0a44\u0003\u0002\u0002\u0002\u0a44\u0a46\u0007\u0081",
    "\u0002\u0002\u0a45\u0a47\u0005\u00d0i\u0002\u0a46\u0a45\u0003\u0002",
    "\u0002\u0002\u0a46\u0a47\u0003\u0002\u0002\u0002\u0a47\u0a48\u0003\u0002",
    "\u0002\u0002\u0a48\u0a49\u0007\u0085\u0002\u0002\u0a49\u0179\u0003\u0002",
    "\u0002\u0002\u0a4a\u0a4b\u0007(\u0002\u0002\u0a4b\u0a54\u0005\u0006",
    "\u0004\u0002\u0a4c\u0a4d\u0005\u00eex\u0002\u0a4d\u0a4e\u0007\u0085",
    "\u0002\u0002\u0a4e\u0a55\u0003\u0002\u0002\u0002\u0a4f\u0a50\u0005\u00f6",
    "|\u0002\u0a50\u0a51\u0007|\u0002\u0002\u0a51\u0a52\u0005\u010e\u0088",
    "\u0002\u0a52\u0a53\u0007}\u0002\u0002\u0a53\u0a55\u0003\u0002\u0002",
    "\u0002\u0a54\u0a4c\u0003\u0002\u0002\u0002\u0a54\u0a4f\u0003\u0002\u0002",
    "\u0002\u0a55\u017b\u0003\u0002\u0002\u0002\u0a56\u0a57\u0005\u00eex",
    "\u0002\u0a57\u0a58\u0007\u0085\u0002\u0002\u0a58\u017d\u0003\u0002\u0002",
    "\u0002\u0a59\u0a67\u0005\u00f6|\u0002\u0a5a\u0a5b\u0007|\u0002\u0002",
    "\u0a5b\u0a5c\u0005\u0104\u0083\u0002\u0a5c\u0a61\u0007}\u0002\u0002",
    "\u0a5d\u0a5e\u0007\u0090\u0002\u0002\u0a5e\u0a5f\u0005\u00f2z\u0002",
    "\u0a5f\u0a60\u0007\u0085\u0002\u0002\u0a60\u0a62\u0003\u0002\u0002\u0002",
    "\u0a61\u0a5d\u0003\u0002\u0002\u0002\u0a61\u0a62\u0003\u0002\u0002\u0002",
    "\u0a62\u0a68\u0003\u0002\u0002\u0002\u0a63\u0a64\u0005\u0158\u00ad\u0002",
    "\u0a64\u0a65\u0005\u001a\u000e\u0002\u0a65\u0a66\u0007\u0085\u0002\u0002",
    "\u0a66\u0a68\u0003\u0002\u0002\u0002\u0a67\u0a5a\u0003\u0002\u0002\u0002",
    "\u0a67\u0a63\u0003\u0002\u0002\u0002\u0a68\u017f\u0003\u0002\u0002\u0002",
    "\u0a69\u0a6a\u0007\u001c\u0002\u0002\u0a6a\u0a6b\u0005\u0006\u0004\u0002",
    "\u0a6b\u0a6c\u0005\u00eav\u0002\u0a6c\u0a6d\u0007\u0085\u0002\u0002",
    "\u0a6d\u0181\u0003\u0002\u0002\u0002\u0a6e\u0a6f\u0007_\u0002\u0002",
    "\u0a6f\u0a70\u0007~\u0002\u0002\u0a70\u0a71\u0005\u00fa~\u0002\u0a71",
    "\u0a7a\u0007\u007f\u0002\u0002\u0a72\u0a73\u0007|\u0002\u0002\u0a73",
    "\u0a74\u0005\u0104\u0083\u0002\u0a74\u0a75\u0007}\u0002\u0002\u0a75",
    "\u0a7b\u0003\u0002\u0002\u0002\u0a76\u0a77\u0005\u0158\u00ad\u0002\u0a77",
    "\u0a78\u0005\u001a\u000e\u0002\u0a78\u0a79\u0007\u0085\u0002\u0002\u0a79",
    "\u0a7b\u0003\u0002\u0002\u0002\u0a7a\u0a72\u0003\u0002\u0002\u0002\u0a7a",
    "\u0a76\u0003\u0002\u0002\u0002\u0a7b\u0183\u0003\u0002\u0002\u0002\u0a7c",
    "\u0a7d\u0007\u008f\u0002\u0002\u0a7d\u0a7e\u0005\u0194\u00cb\u0002\u0a7e",
    "\u0a7f\u0007\u0080\u0002\u0002\u0a7f\u0a80\u0007\u0081\u0002\u0002\u0a80",
    "\u0a81\u0005\u011a\u008e\u0002\u0a81\u0185\u0003\u0002\u0002\u0002\u0a82",
    "\u0a83\u0005\u0194\u00cb\u0002\u0a83\u0a85\u0007\u0080\u0002\u0002\u0a84",
    "\u0a86\u0005\u00fa~\u0002\u0a85\u0a84\u0003\u0002\u0002\u0002\u0a85",
    "\u0a86\u0003\u0002\u0002\u0002\u0a86\u0a87\u0003\u0002\u0002\u0002\u0a87",
    "\u0a89\u0007\u0081\u0002\u0002\u0a88\u0a8a\u0005\u0118\u008d\u0002\u0a89",
    "\u0a88\u0003\u0002\u0002\u0002\u0a89\u0a8a\u0003\u0002\u0002\u0002\u0a8a",
    "\u0a8b\u0003\u0002\u0002\u0002\u0a8b\u0a8c\u0005\u011a\u008e\u0002\u0a8c",
    "\u0187\u0003\u0002\u0002\u0002\u0a8d\u0a8f\u0005\u018a\u00c6\u0002\u0a8e",
    "\u0a90\u0005\u00c8e\u0002\u0a8f\u0a8e\u0003\u0002\u0002\u0002\u0a8f",
    "\u0a90\u0003\u0002\u0002\u0002\u0a90\u0a91\u0003\u0002\u0002\u0002\u0a91",
    "\u0a93\u0007\u0080\u0002\u0002\u0a92\u0a94\u0005\u00fa~\u0002\u0a93",
    "\u0a92\u0003\u0002\u0002\u0002\u0a93\u0a94\u0003\u0002\u0002\u0002\u0a94",
    "\u0a95\u0003\u0002\u0002\u0002\u0a95\u0a97\u0007\u0081\u0002\u0002\u0a96",
    "\u0a98\u0005\u00d0i\u0002\u0a97\u0a96\u0003\u0002\u0002\u0002\u0a97",
    "\u0a98\u0003\u0002\u0002\u0002\u0a98\u0a9e\u0003\u0002\u0002\u0002\u0a99",
    "\u0a9f\u0005\u00f8}\u0002\u0a9a\u0a9b\u0005\u0158\u00ad\u0002\u0a9b",
    "\u0a9c\u0005\u001a\u000e\u0002\u0a9c\u0a9d\u0007\u0085\u0002\u0002\u0a9d",
    "\u0a9f\u0003\u0002\u0002\u0002\u0a9e\u0a99\u0003\u0002\u0002\u0002\u0a9e",
    "\u0a9a\u0003\u0002\u0002\u0002\u0a9f\u0189\u0003\u0002\u0002\u0002\u0aa0",
    "\u0aa6\u0005\u0194\u00cb\u0002\u0aa1\u0aa2\u0005\u0194\u00cb\u0002\u0aa2",
    "\u0aa3\u0007\u0094\u0002\u0002\u0aa3\u0aa4\u0005\u0194\u00cb\u0002\u0aa4",
    "\u0aa6\u0003\u0002\u0002\u0002\u0aa5\u0aa0\u0003\u0002\u0002\u0002\u0aa5",
    "\u0aa1\u0003\u0002\u0002\u0002\u0aa6\u0aae\u0003\u0002\u0002\u0002\u0aa7",
    "\u0aa9\u0005\u0014\u000b\u0002\u0aa8\u0aa7\u0003\u0002\u0002\u0002\u0aa8",
    "\u0aa9\u0003\u0002\u0002\u0002\u0aa9\u0aaa\u0003\u0002\u0002\u0002\u0aaa",
    "\u0aab\u0007\u0082\u0002\u0002\u0aab\u0aad\u0005\u0194\u00cb\u0002\u0aac",
    "\u0aa8\u0003\u0002\u0002\u0002\u0aad\u0ab0\u0003\u0002\u0002\u0002\u0aae",
    "\u0aac\u0003\u0002\u0002\u0002\u0aae\u0aaf\u0003\u0002\u0002\u0002\u0aaf",
    "\u018b\u0003\u0002\u0002\u0002\u0ab0\u0aae\u0003\u0002\u0002\u0002\u0ab1",
    "\u0ab2\u0007G\u0002\u0002\u0ab2\u0ab3\u0005\u0114\u008b\u0002\u0ab3",
    "\u0ab4\u0007\u0080\u0002\u0002\u0ab4\u0ab7\u0005\u018e\u00c8\u0002\u0ab5",
    "\u0ab6\u0007\u0083\u0002\u0002\u0ab6\u0ab8\u0005\u018e\u00c8\u0002\u0ab7",
    "\u0ab5\u0003\u0002\u0002\u0002\u0ab7\u0ab8\u0003\u0002\u0002\u0002\u0ab8",
    "\u0ab9\u0003\u0002\u0002\u0002\u0ab9\u0abf\u0007\u0081\u0002\u0002\u0aba",
    "\u0ac0\u0005\u011a\u008e\u0002\u0abb\u0abc\u0005\u0158\u00ad\u0002\u0abc",
    "\u0abd\u0005\u001a\u000e\u0002\u0abd\u0abe\u0007\u0085\u0002\u0002\u0abe",
    "\u0ac0\u0003\u0002\u0002\u0002\u0abf\u0aba\u0003\u0002\u0002\u0002\u0abf",
    "\u0abb\u0003\u0002\u0002\u0002\u0ac0\u018d\u0003\u0002\u0002\u0002\u0ac1",
    "\u0ac2\u0005\u0006\u0004\u0002\u0ac2\u0ac5\u0005\u0194\u00cb\u0002\u0ac3",
    "\u0ac4\u0007\u0090\u0002\u0002\u0ac4\u0ac6\u0005\u001a\u000e\u0002\u0ac5",
    "\u0ac3\u0003\u0002\u0002\u0002\u0ac5\u0ac6\u0003\u0002\u0002\u0002\u0ac6",
    "\u018f\u0003\u0002\u0002\u0002\u0ac7\u0ac9\u0007\u0080\u0002\u0002\u0ac8",
    "\u0aca\u0005\u0016\f\u0002\u0ac9\u0ac8\u0003\u0002\u0002\u0002\u0ac9",
    "\u0aca\u0003\u0002\u0002\u0002\u0aca\u0acb\u0003\u0002\u0002\u0002\u0acb",
    "\u0acc\u0007\u0081\u0002\u0002\u0acc\u0191\u0003\u0002\u0002\u0002\u0acd",
    "\u0acf\u0007\u0080\u0002\u0002\u0ace\u0ad0\u0005\u0016\f\u0002\u0acf",
    "\u0ace\u0003\u0002\u0002\u0002\u0acf\u0ad0\u0003\u0002\u0002\u0002\u0ad0",
    "\u0ad1\u0003\u0002\u0002\u0002\u0ad1\u0ad3\u0007\u0081\u0002\u0002\u0ad2",
    "\u0ad4\u0005J&\u0002\u0ad3\u0ad2\u0003\u0002\u0002\u0002\u0ad3\u0ad4",
    "\u0003\u0002\u0002\u0002\u0ad4\u0193\u0003\u0002\u0002\u0002\u0ad5\u0ad6",
    "\t\u0013\u0002\u0002\u0ad6\u0195\u0003\u0002\u0002\u0002\u0ad7\u0ad9",
    "\u0007\u0003\u0002\u0002\u0ad8\u0ad7\u0003\u0002\u0002\u0002\u0ad8\u0ad9",
    "\u0003\u0002\u0002\u0002\u0ad9\u0adb\u0003\u0002\u0002\u0002\u0ada\u0adc",
    "\u0005\u00b8]\u0002\u0adb\u0ada\u0003\u0002\u0002\u0002\u0adb\u0adc",
    "\u0003\u0002\u0002\u0002\u0adc\u0ade\u0003\u0002\u0002\u0002\u0add\u0adf",
    "\u0005\u00bc_\u0002\u0ade\u0add\u0003\u0002\u0002\u0002\u0ade\u0adf",
    "\u0003\u0002\u0002\u0002\u0adf\u0ae3\u0003\u0002\u0002\u0002\u0ae0\u0ae2",
    "\u0005\u013c\u009f\u0002\u0ae1\u0ae0\u0003\u0002\u0002\u0002\u0ae2\u0ae5",
    "\u0003\u0002\u0002\u0002\u0ae3\u0ae1\u0003\u0002\u0002\u0002\u0ae3\u0ae4",
    "\u0003\u0002\u0002\u0002\u0ae4\u0ae7\u0003\u0002\u0002\u0002\u0ae5\u0ae3",
    "\u0003\u0002\u0002\u0002\u0ae6\u0ae8\u0005\u00c0a\u0002\u0ae7\u0ae6",
    "\u0003\u0002\u0002\u0002\u0ae7\u0ae8\u0003\u0002\u0002\u0002\u0ae8\u0ae9",
    "\u0003\u0002\u0002\u0002\u0ae9\u0aea\u0007\u0002\u0002\u0003\u0aea\u0197",
    "\u0003\u0002\u0002\u0002\u0aeb\u0aed\u0005\u0194\u00cb\u0002\u0aec\u0aee",
    "\u0005\u0014\u000b\u0002\u0aed\u0aec\u0003\u0002\u0002\u0002\u0aed\u0aee",
    "\u0003\u0002\u0002\u0002\u0aee\u0af1\u0003\u0002\u0002\u0002\u0aef\u0af1",
    "\u0005\u00c6d\u0002\u0af0\u0aeb\u0003\u0002\u0002\u0002\u0af0\u0aef",
    "\u0003\u0002\u0002\u0002\u0af1\u0af9\u0003\u0002\u0002\u0002\u0af2\u0af3",
    "\u0007\u0082\u0002\u0002\u0af3\u0af5\u0005\u0194\u00cb\u0002\u0af4\u0af6",
    "\u0005\u0014\u000b\u0002\u0af5\u0af4\u0003\u0002\u0002\u0002\u0af5\u0af6",
    "\u0003\u0002\u0002\u0002\u0af6\u0af8\u0003\u0002\u0002\u0002\u0af7\u0af2",
    "\u0003\u0002\u0002\u0002\u0af8\u0afb\u0003\u0002\u0002\u0002\u0af9\u0af7",
    "\u0003\u0002\u0002\u0002\u0af9\u0afa\u0003\u0002\u0002\u0002\u0afa\u0afc",
    "\u0003\u0002\u0002\u0002\u0afb\u0af9\u0003\u0002\u0002\u0002\u0afc\u0afd",
    "\u0007\u0002\u0002\u0003\u0afd\u0199\u0003\u0002\u0002\u0002\u0afe\u0b04",
    "\u0005\b\u0005\u0002\u0aff\u0b03\u0007\u0093\u0002\u0002\u0b00\u0b03",
    "\u0005\u0124\u0093\u0002\u0b01\u0b03\u0007\u0088\u0002\u0002\u0b02\u0aff",
    "\u0003\u0002\u0002\u0002\u0b02\u0b00\u0003\u0002\u0002\u0002\u0b02\u0b01",
    "\u0003\u0002\u0002\u0002\u0b03\u0b06\u0003\u0002\u0002\u0002\u0b04\u0b02",
    "\u0003\u0002\u0002\u0002\u0b04\u0b05\u0003\u0002\u0002\u0002\u0b05\u0b07",
    "\u0003\u0002\u0002\u0002\u0b06\u0b04\u0003\u0002\u0002\u0002\u0b07\u0b08",
    "\u0007\u0002\u0002\u0003\u0b08\u019b\u0003\u0002\u0002\u0002\u0b09\u0b0a",
    "\u0005\n\u0006\u0002\u0b0a\u0b0b\u0007\u0002\u0002\u0003\u0b0b\u0b13",
    "\u0003\u0002\u0002\u0002\u0b0c\u0b0d\u0005\u0012\n\u0002\u0b0d\u0b0e",
    "\u0007\u0002\u0002\u0003\u0b0e\u0b13\u0003\u0002\u0002\u0002\u0b0f\u0b10",
    "\u0007l\u0002\u0002\u0b10\u0b11\u0007\u0088\u0002\u0002\u0b11\u0b13",
    "\u0007\u0002\u0002\u0003\u0b12\u0b09\u0003\u0002\u0002\u0002\u0b12\u0b0c",
    "\u0003\u0002\u0002\u0002\u0b12\u0b0f\u0003\u0002\u0002\u0002\u0b13\u019d",
    "\u0003\u0002\u0002\u0002\u0b14\u0b15\u0005\f\u0007\u0002\u0b15\u0b16",
    "\u0007\u0002\u0002\u0003\u0b16\u0b1a\u0003\u0002\u0002\u0002\u0b17\u0b18",
    "\u0007\u0013\u0002\u0002\u0b18\u0b1a\u0007\u0002\u0002\u0003\u0b19\u0b14",
    "\u0003\u0002\u0002\u0002\u0b19\u0b17\u0003\u0002\u0002\u0002\u0b1a\u019f",
    "\u0003\u0002\u0002\u0002\u0b1b\u0b1c\u0005\u000e\b\u0002\u0b1c\u0b1d",
    "\u0007\u0002\u0002\u0003\u0b1d\u0b24\u0003\u0002\u0002\u0002\u0b1e\u0b1f",
    "\u0005\u0010\t\u0002\u0b1f\u0b20\u0007\u0002\u0002\u0003\u0b20\u0b24",
    "\u0003\u0002\u0002\u0002\u0b21\u0b22\u0007\u001e\u0002\u0002\u0b22\u0b24",
    "\u0007\u0002\u0002\u0003\u0b23\u0b1b\u0003\u0002\u0002\u0002\u0b23\u0b1e",
    "\u0003\u0002\u0002\u0002\u0b23\u0b21\u0003\u0002\u0002\u0002\u0b24\u01a1",
    "\u0003\u0002\u0002\u0002\u0b25\u0b26\u0007T\u0002\u0002\u0b26\u0b38",
    "\u0007\u0002\u0002\u0003\u0b27\u0b28\u0007\u0016\u0002\u0002\u0b28\u0b38",
    "\u0007\u0002\u0002\u0003\u0b29\u0b2a\u0007X\u0002\u0002\u0b2a\u0b38",
    "\u0007\u0002\u0002\u0003\u0b2b\u0b2c\u0007h\u0002\u0002\u0b2c\u0b38",
    "\u0007\u0002\u0002\u0003\u0b2d\u0b2e\u00078\u0002\u0002\u0b2e\u0b38",
    "\u0007\u0002\u0002\u0003\u0b2f\u0b30\u0007d\u0002\u0002\u0b30\u0b38",
    "\u0007\u0002\u0002\u0003\u0b31\u0b32\u0007@\u0002\u0002\u0b32\u0b38",
    "\u0007\u0002\u0002\u0003\u0b33\u0b34\u0007e\u0002\u0002\u0b34\u0b38",
    "\u0007\u0002\u0002\u0003\u0b35\u0b36\u0007\u0019\u0002\u0002\u0b36\u0b38",
    "\u0007\u0002\u0002\u0003\u0b37\u0b25\u0003\u0002\u0002\u0002\u0b37\u0b27",
    "\u0003\u0002\u0002\u0002\u0b37\u0b29\u0003\u0002\u0002\u0002\u0b37\u0b2b",
    "\u0003\u0002\u0002\u0002\u0b37\u0b2d\u0003\u0002\u0002\u0002\u0b37\u0b2f",
    "\u0003\u0002\u0002\u0002\u0b37\u0b31\u0003\u0002\u0002\u0002\u0b37\u0b33",
    "\u0003\u0002\u0002\u0002\u0b37\u0b35\u0003\u0002\u0002\u0002\u0b38\u01a3",
    "\u0003\u0002\u0002\u0002\u0b39\u0b3a\u0007.\u0002\u0002\u0b3a\u0b3e",
    "\u0007\u0002\u0002\u0003\u0b3b\u0b3c\u0007#\u0002\u0002\u0b3c\u0b3e",
    "\u0007\u0002\u0002\u0003\u0b3d\u0b39\u0003\u0002\u0002\u0002\u0b3d\u0b3b",
    "\u0003\u0002\u0002\u0002\u0b3e\u01a5\u0003\u0002\u0002\u0002\u0b3f\u0b40",
    "\u0005\u0004\u0003\u0002\u0b40\u0b41\u0007\u0002\u0002\u0003\u0b41\u0b49",
    "\u0003\u0002\u0002\u0002\u0b42\u0b43\u0007E\u0002\u0002\u0b43\u0b49",
    "\u0007\u0002\u0002\u0003\u0b44\u0b45\u0007$\u0002\u0002\u0b45\u0b49",
    "\u0007\u0002\u0002\u0003\u0b46\u0b47\u0007\\\u0002\u0002\u0b47\u0b49",
    "\u0007\u0002\u0002\u0003\u0b48\u0b3f\u0003\u0002\u0002\u0002\u0b48\u0b42",
    "\u0003\u0002\u0002\u0002\u0b48\u0b44\u0003\u0002\u0002\u0002\u0b48\u0b46",
    "\u0003\u0002\u0002\u0002\u0b49\u01a7\u0003\u0002\u0002\u0002\u0b4a\u0b4b",
    "\u0007\u0091\u0002\u0002\u0b4b\u0b50\u0005\u0006\u0004\u0002\u0b4c\u0b4d",
    "\u0007\u0083\u0002\u0002\u0b4d\u0b4f\u0005\u0006\u0004\u0002\u0b4e\u0b4c",
    "\u0003\u0002\u0002\u0002\u0b4f\u0b52\u0003\u0002\u0002\u0002\u0b50\u0b4e",
    "\u0003\u0002\u0002\u0002\u0b50\u0b51\u0003\u0002\u0002\u0002\u0b51\u0b53",
    "\u0003\u0002\u0002\u0002\u0b52\u0b50\u0003\u0002\u0002\u0002\u0b53\u0b54",
    "\u0007\u0092\u0002\u0002\u0b54\u0b55\u0007\u0002\u0002\u0003\u0b55\u01a9",
    "\u0003\u0002\u0002\u0002\u0b56\u0b5b\u0005\u0018\r\u0002\u0b57\u0b58",
    "\u0007\u0083\u0002\u0002\u0b58\u0b5a\u0005\u0018\r\u0002\u0b59\u0b57",
    "\u0003\u0002\u0002\u0002\u0b5a\u0b5d\u0003\u0002\u0002\u0002\u0b5b\u0b59",
    "\u0003\u0002\u0002\u0002\u0b5b\u0b5c\u0003\u0002\u0002\u0002\u0b5c\u0b5e",
    "\u0003\u0002\u0002\u0002\u0b5d\u0b5b\u0003\u0002\u0002\u0002\u0b5e\u0b5f",
    "\u0007\u0002\u0002\u0003\u0b5f\u01ab\u0003\u0002\u0002\u0002\u0b60\u0b61",
    "\u0005\u0194\u00cb\u0002\u0b61\u0b62\u0007\u0084\u0002\u0002\u0b62\u0b64",
    "\u0003\u0002\u0002\u0002\u0b63\u0b60\u0003\u0002\u0002\u0002\u0b63\u0b64",
    "\u0003\u0002\u0002\u0002\u0b64\u0b66\u0003\u0002\u0002\u0002\u0b65\u0b67",
    "\t\u0004\u0002\u0002\u0b66\u0b65\u0003\u0002\u0002\u0002\u0b66\u0b67",
    "\u0003\u0002\u0002\u0002\u0b67\u0b6a\u0003\u0002\u0002\u0002\u0b68\u0b6b",
    "\u0007j\u0002\u0002\u0b69\u0b6b\u0005\u0006\u0004\u0002\u0b6a\u0b68",
    "\u0003\u0002\u0002\u0002\u0b6a\u0b69\u0003\u0002\u0002\u0002\u0b6a\u0b6b",
    "\u0003\u0002\u0002\u0002\u0b6b\u0b6c\u0003\u0002\u0002\u0002\u0b6c\u0b6d",
    "\u0005\u001a\u000e\u0002\u0b6d\u0b6e\u0007\u0002\u0002\u0003\u0b6e\u01ad",
    "\u0003\u0002\u0002\u0002\u0b6f\u0b70\u0005\u001e\u0010\u0002\u0b70\u0b71",
    "\u0007\u0002\u0002\u0003\u0b71\u0b76\u0003\u0002\u0002\u0002\u0b72\u0b73",
    "\u0005\u001c\u000f\u0002\u0b73\u0b74\u0007\u0002\u0002\u0003\u0b74\u0b76",
    "\u0003\u0002\u0002\u0002\u0b75\u0b6f\u0003\u0002\u0002\u0002\u0b75\u0b72",
    "\u0003\u0002\u0002\u0002\u0b76\u01af\u0003\u0002\u0002\u0002\u0b77\u0b78",
    "\u0005d3\u0002\u0b78\u0b79\u0007\u0002\u0002\u0003\u0b79\u0b81\u0003",
    "\u0002\u0002\u0002\u0b7a\u0b7b\u0005p9\u0002\u0b7b\u0b7c\u0007\u0002",
    "\u0002\u0003\u0b7c\u0b81\u0003\u0002\u0002\u0002\u0b7d\u0b7e\u0005\"",
    "\u0012\u0002\u0b7e\u0b7f\u0007\u0002\u0002\u0003\u0b7f\u0b81\u0003\u0002",
    "\u0002\u0002\u0b80\u0b77\u0003\u0002\u0002\u0002\u0b80\u0b7a\u0003\u0002",
    "\u0002\u0002\u0b80\u0b7d\u0003\u0002\u0002\u0002\u0b81\u01b1\u0003\u0002",
    "\u0002\u0002\u0b82\u0b83\u0005:\u001e\u0002\u0b83\u0b84\u0005 \u0011",
    "\u0002\u0b84\u0b85\u0005\u001a\u000e\u0002\u0b85\u0b86\u0007\u0002\u0002",
    "\u0003\u0b86\u01b3\u0003\u0002\u0002\u0002\u0b87\u0b88\u0007\u0090\u0002",
    "\u0002\u0b88\u0b9f\u0007\u0002\u0002\u0003\u0b89\u0b8a\u0007\u009f\u0002",
    "\u0002\u0b8a\u0b9f\u0007\u0002\u0002\u0003\u0b8b\u0b8c\u0007\u00a0\u0002",
    "\u0002\u0b8c\u0b9f\u0007\u0002\u0002\u0003\u0b8d\u0b8e\u0007\u00a1\u0002",
    "\u0002\u0b8e\u0b9f\u0007\u0002\u0002\u0003\u0b8f\u0b90\u0007\u00a2\u0002",
    "\u0002\u0b90\u0b9f\u0007\u0002\u0002\u0003\u0b91\u0b92\u0007\u00a3\u0002",
    "\u0002\u0b92\u0b9f\u0007\u0002\u0002\u0003\u0b93\u0b94\u0007\u00a4\u0002",
    "\u0002\u0b94\u0b9f\u0007\u0002\u0002\u0003\u0b95\u0b96\u0007\u00a5\u0002",
    "\u0002\u0b96\u0b9f\u0007\u0002\u0002\u0003\u0b97\u0b98\u0007\u00a6\u0002",
    "\u0002\u0b98\u0b9f\u0007\u0002\u0002\u0003\u0b99\u0b9a\u0007\u00a8\u0002",
    "\u0002\u0b9a\u0b9f\u0007\u0002\u0002\u0003\u0b9b\u0b9c\u0005\u015c\u00af",
    "\u0002\u0b9c\u0b9d\u0007\u0002\u0002\u0003\u0b9d\u0b9f\u0003\u0002\u0002",
    "\u0002\u0b9e\u0b87\u0003\u0002\u0002\u0002\u0b9e\u0b89\u0003\u0002\u0002",
    "\u0002\u0b9e\u0b8b\u0003\u0002\u0002\u0002\u0b9e\u0b8d\u0003\u0002\u0002",
    "\u0002\u0b9e\u0b8f\u0003\u0002\u0002\u0002\u0b9e\u0b91\u0003\u0002\u0002",
    "\u0002\u0b9e\u0b93\u0003\u0002\u0002\u0002\u0b9e\u0b95\u0003\u0002\u0002",
    "\u0002\u0b9e\u0b97\u0003\u0002\u0002\u0002\u0b9e\u0b99\u0003\u0002\u0002",
    "\u0002\u0b9e\u0b9b\u0003\u0002\u0002\u0002\u0b9f\u01b5\u0003\u0002\u0002",
    "\u0002\u0ba0\u0ba6\u0005$\u0013\u0002\u0ba1\u0ba2\u0007\u0093\u0002",
    "\u0002\u0ba2\u0ba3\u0005\u001a\u000e\u0002\u0ba3\u0ba4\u0007\u0084\u0002",
    "\u0002\u0ba4\u0ba5\u0005\u001a\u000e\u0002\u0ba5\u0ba7\u0003\u0002\u0002",
    "\u0002\u0ba6\u0ba1\u0003\u0002\u0002\u0002\u0ba6\u0ba7\u0003\u0002\u0002",
    "\u0002\u0ba7\u0ba8\u0003\u0002\u0002\u0002\u0ba8\u0ba9\u0007\u0002\u0002",
    "\u0003\u0ba9\u01b7\u0003\u0002\u0002\u0002\u0baa\u0bad\u0005&\u0014",
    "\u0002\u0bab\u0bac\u0007\u0095\u0002\u0002\u0bac\u0bae\u0005$\u0013",
    "\u0002\u0bad\u0bab\u0003\u0002\u0002\u0002\u0bad\u0bae\u0003\u0002\u0002",
    "\u0002\u0bae\u0baf\u0003\u0002\u0002\u0002\u0baf\u0bb0\u0007\u0002\u0002",
    "\u0003\u0bb0\u01b9\u0003\u0002\u0002\u0002\u0bb1\u0bb6\u0005(\u0015",
    "\u0002\u0bb2\u0bb3\u0007\u0099\u0002\u0002\u0bb3\u0bb5\u0005(\u0015",
    "\u0002\u0bb4\u0bb2\u0003\u0002\u0002\u0002\u0bb5\u0bb8\u0003\u0002\u0002",
    "\u0002\u0bb6\u0bb4\u0003\u0002\u0002\u0002\u0bb6\u0bb7\u0003\u0002\u0002",
    "\u0002\u0bb7\u0bb9\u0003\u0002\u0002\u0002\u0bb8\u0bb6\u0003\u0002\u0002",
    "\u0002\u0bb9\u0bba\u0007\u0002\u0002\u0003\u0bba\u01bb\u0003\u0002\u0002",
    "\u0002\u0bbb\u0bc0\u0005*\u0016\u0002\u0bbc\u0bbd\u0007\u0098\u0002",
    "\u0002\u0bbd\u0bbf\u0005*\u0016\u0002\u0bbe\u0bbc\u0003\u0002\u0002",
    "\u0002\u0bbf\u0bc2\u0003\u0002\u0002\u0002\u0bc0\u0bbe\u0003\u0002\u0002",
    "\u0002\u0bc0\u0bc1\u0003\u0002\u0002\u0002\u0bc1\u0bc3\u0003\u0002\u0002",
    "\u0002\u0bc2\u0bc0\u0003\u0002\u0002\u0002\u0bc3\u0bc4\u0007\u0002\u0002",
    "\u0003\u0bc4\u01bd\u0003\u0002\u0002\u0002\u0bc5\u0bca\u0005,\u0017",
    "\u0002\u0bc6\u0bc7\u0007\u008c\u0002\u0002\u0bc7\u0bc9\u0005,\u0017",
    "\u0002\u0bc8\u0bc6\u0003\u0002\u0002\u0002\u0bc9\u0bcc\u0003\u0002\u0002",
    "\u0002\u0bca\u0bc8\u0003\u0002\u0002\u0002\u0bca\u0bcb\u0003\u0002\u0002",
    "\u0002\u0bcb\u0bcd\u0003\u0002\u0002\u0002\u0bcc\u0bca\u0003\u0002\u0002",
    "\u0002\u0bcd\u0bce\u0007\u0002\u0002\u0003\u0bce\u01bf\u0003\u0002\u0002",
    "\u0002\u0bcf\u0bd4\u0005.\u0018\u0002\u0bd0\u0bd1\u0007\u008d\u0002",
    "\u0002\u0bd1\u0bd3\u0005.\u0018\u0002\u0bd2\u0bd0\u0003\u0002\u0002",
    "\u0002\u0bd3\u0bd6\u0003\u0002\u0002\u0002\u0bd4\u0bd2\u0003\u0002\u0002",
    "\u0002\u0bd4\u0bd5\u0003\u0002\u0002\u0002\u0bd5\u0bd7\u0003\u0002\u0002",
    "\u0002\u0bd6\u0bd4\u0003\u0002\u0002\u0002\u0bd7\u0bd8\u0007\u0002\u0002",
    "\u0003\u0bd8\u01c1\u0003\u0002\u0002\u0002\u0bd9\u0bde\u00050\u0019",
    "\u0002\u0bda\u0bdb\u0007\u008b\u0002\u0002\u0bdb\u0bdd\u00050\u0019",
    "\u0002\u0bdc\u0bda\u0003\u0002\u0002\u0002\u0bdd\u0be0\u0003\u0002\u0002",
    "\u0002\u0bde\u0bdc\u0003\u0002\u0002\u0002\u0bde\u0bdf\u0003\u0002\u0002",
    "\u0002\u0bdf\u0be1\u0003\u0002\u0002\u0002\u0be0\u0bde\u0003\u0002\u0002",
    "\u0002\u0be1\u0be2\u0007\u0002\u0002\u0003\u0be2\u01c3\u0003\u0002\u0002",
    "\u0002\u0be3\u0be8\u00052\u001a\u0002\u0be4\u0be5\t\u0005\u0002\u0002",
    "\u0be5\u0be7\u00052\u001a\u0002\u0be6\u0be4\u0003\u0002\u0002\u0002",
    "\u0be7\u0bea\u0003\u0002\u0002\u0002\u0be8\u0be6\u0003\u0002\u0002\u0002",
    "\u0be8\u0be9\u0003\u0002\u0002\u0002\u0be9\u0beb\u0003\u0002\u0002\u0002",
    "\u0bea\u0be8\u0003\u0002\u0002\u0002\u0beb\u0bec\u0007\u0002\u0002\u0003",
    "\u0bec\u01c5\u0003\u0002\u0002\u0002\u0bed\u0bf6\u00054\u001b\u0002",
    "\u0bee\u0bef\t\u0006\u0002\u0002\u0bef\u0bf5\u00054\u001b\u0002\u0bf0",
    "\u0bf1\u0007<\u0002\u0002\u0bf1\u0bf5\u0005b2\u0002\u0bf2\u0bf3\u0007",
    "\u000e\u0002\u0002\u0bf3\u0bf5\u0005\u0006\u0004\u0002\u0bf4\u0bee\u0003",
    "\u0002\u0002\u0002\u0bf4\u0bf0\u0003\u0002\u0002\u0002\u0bf4\u0bf2\u0003",
    "\u0002\u0002\u0002\u0bf5\u0bf8\u0003\u0002\u0002\u0002\u0bf6\u0bf4\u0003",
    "\u0002\u0002\u0002\u0bf6\u0bf7\u0003\u0002\u0002\u0002\u0bf7\u0bf9\u0003",
    "\u0002\u0002\u0002\u0bf8\u0bf6\u0003\u0002\u0002\u0002\u0bf9\u0bfa\u0007",
    "\u0002\u0002\u0003\u0bfa\u01c7\u0003\u0002\u0002\u0002\u0bfb\u0c03\u0005",
    "6\u001c\u0002\u0bfc\u0bff\u0007\u00a7\u0002\u0002\u0bfd\u0bff\u0005",
    "\u015a\u00ae\u0002\u0bfe\u0bfc\u0003\u0002\u0002\u0002\u0bfe\u0bfd\u0003",
    "\u0002\u0002\u0002\u0bff\u0c00\u0003\u0002\u0002\u0002\u0c00\u0c02\u0005",
    "6\u001c\u0002\u0c01\u0bfe\u0003\u0002\u0002\u0002\u0c02\u0c05\u0003",
    "\u0002\u0002\u0002\u0c03\u0c01\u0003\u0002\u0002\u0002\u0c03\u0c04\u0003",
    "\u0002\u0002\u0002\u0c04\u0c06\u0003\u0002\u0002\u0002\u0c05\u0c03\u0003",
    "\u0002\u0002\u0002\u0c06\u0c07\u0007\u0002\u0002\u0003\u0c07\u01c9\u0003",
    "\u0002\u0002\u0002\u0c08\u0c0d\u00058\u001d\u0002\u0c09\u0c0a\t\u0007",
    "\u0002\u0002\u0c0a\u0c0c\u00058\u001d\u0002\u0c0b\u0c09\u0003\u0002",
    "\u0002\u0002\u0c0c\u0c0f\u0003\u0002\u0002\u0002\u0c0d\u0c0b\u0003\u0002",
    "\u0002\u0002\u0c0d\u0c0e\u0003\u0002\u0002\u0002\u0c0e\u0c10\u0003\u0002",
    "\u0002\u0002\u0c0f\u0c0d\u0003\u0002\u0002\u0002\u0c10\u0c11\u0007\u0002",
    "\u0002\u0003\u0c11\u01cb\u0003\u0002\u0002\u0002\u0c12\u0c17\u0005:",
    "\u001e\u0002\u0c13\u0c14\t\b\u0002\u0002\u0c14\u0c16\u0005:\u001e\u0002",
    "\u0c15\u0c13\u0003\u0002\u0002\u0002\u0c16\u0c19\u0003\u0002\u0002\u0002",
    "\u0c17\u0c15\u0003\u0002\u0002\u0002\u0c17\u0c18\u0003\u0002\u0002\u0002",
    "\u0c18\u0c1a\u0003\u0002\u0002\u0002\u0c19\u0c17\u0003\u0002\u0002\u0002",
    "\u0c1a\u0c1b\u0007\u0002\u0002\u0003\u0c1b\u01cd\u0003\u0002\u0002\u0002",
    "\u0c1c\u0c1d\u0005<\u001f\u0002\u0c1d\u0c1e\u0007\u0002\u0002\u0003",
    "\u0c1e\u0c4a\u0003\u0002\u0002\u0002\u0c1f\u0c20\u0007\u0086\u0002\u0002",
    "\u0c20\u0c21\u0005:\u001e\u0002\u0c21\u0c22\u0007\u0002\u0002\u0003",
    "\u0c22\u0c4a\u0003\u0002\u0002\u0002\u0c23\u0c24\u0007\u0087\u0002\u0002",
    "\u0c24\u0c25\u0005:\u001e\u0002\u0c25\u0c26\u0007\u0002\u0002\u0003",
    "\u0c26\u0c4a\u0003\u0002\u0002\u0002\u0c27\u0c28\u0007\u008e\u0002\u0002",
    "\u0c28\u0c29\u0005:\u001e\u0002\u0c29\u0c2a\u0007\u0002\u0002\u0003",
    "\u0c2a\u0c4a\u0003\u0002\u0002\u0002\u0c2b\u0c2c\u0007\u008f\u0002\u0002",
    "\u0c2c\u0c2d\u0005:\u001e\u0002\u0c2d\u0c2e\u0007\u0002\u0002\u0003",
    "\u0c2e\u0c4a\u0003\u0002\u0002\u0002\u0c2f\u0c30\u0007\u0096\u0002\u0002",
    "\u0c30\u0c31\u0005:\u001e\u0002\u0c31\u0c32\u0007\u0002\u0002\u0003",
    "\u0c32\u0c4a\u0003\u0002\u0002\u0002\u0c33\u0c34\u0007\u0097\u0002\u0002",
    "\u0c34\u0c35\u0005:\u001e\u0002\u0c35\u0c36\u0007\u0002\u0002\u0003",
    "\u0c36\u0c4a\u0003\u0002\u0002\u0002\u0c37\u0c38\u0007\u0080\u0002\u0002",
    "\u0c38\u0c39\u0005\u0006\u0004\u0002\u0c39\u0c3a\u0007\u0081\u0002\u0002",
    "\u0c3a\u0c3b\u0005:\u001e\u0002\u0c3b\u0c3c\u0007\u0002\u0002\u0003",
    "\u0c3c\u0c4a\u0003\u0002\u0002\u0002\u0c3d\u0c3e\u0007\u0011\u0002\u0002",
    "\u0c3e\u0c3f\u0005:\u001e\u0002\u0c3f\u0c40\u0007\u0002\u0002\u0003",
    "\u0c40\u0c4a\u0003\u0002\u0002\u0002\u0c41\u0c42\u0007\u008b\u0002\u0002",
    "\u0c42\u0c43\u0005:\u001e\u0002\u0c43\u0c44\u0007\u0002\u0002\u0003",
    "\u0c44\u0c4a\u0003\u0002\u0002\u0002\u0c45\u0c46\u0007\u0088\u0002\u0002",
    "\u0c46\u0c47\u0005:\u001e\u0002\u0c47\u0c48\u0007\u0002\u0002\u0003",
    "\u0c48\u0c4a\u0003\u0002\u0002\u0002\u0c49\u0c1c\u0003\u0002\u0002\u0002",
    "\u0c49\u0c1f\u0003\u0002\u0002\u0002\u0c49\u0c23\u0003\u0002\u0002\u0002",
    "\u0c49\u0c27\u0003\u0002\u0002\u0002\u0c49\u0c2b\u0003\u0002\u0002\u0002",
    "\u0c49\u0c2f\u0003\u0002\u0002\u0002\u0c49\u0c33\u0003\u0002\u0002\u0002",
    "\u0c49\u0c37\u0003\u0002\u0002\u0002\u0c49\u0c3d\u0003\u0002\u0002\u0002",
    "\u0c49\u0c41\u0003\u0002\u0002\u0002\u0c49\u0c45\u0003\u0002\u0002\u0002",
    "\u0c4a\u01cf\u0003\u0002\u0002\u0002\u0c4b\u0c4f\u0005> \u0002\u0c4c",
    "\u0c4e\u0005B\"\u0002\u0c4d\u0c4c\u0003\u0002\u0002\u0002\u0c4e\u0c51",
    "\u0003\u0002\u0002\u0002\u0c4f\u0c4d\u0003\u0002\u0002\u0002\u0c4f\u0c50",
    "\u0003\u0002\u0002\u0002\u0c50\u0c62\u0003\u0002\u0002\u0002\u0c51\u0c4f",
    "\u0003\u0002\u0002\u0002\u0c52\u0c59\u0005@!\u0002\u0c53\u0c59\u0005",
    "\u0190\u00c9\u0002\u0c54\u0c59\u0007\u0096\u0002\u0002\u0c55\u0c59\u0007",
    "\u0097\u0002\u0002\u0c56\u0c57\u0007\u009a\u0002\u0002\u0c57\u0c59\u0005",
    "\u0194\u00cb\u0002\u0c58\u0c52\u0003\u0002\u0002\u0002\u0c58\u0c53\u0003",
    "\u0002\u0002\u0002\u0c58\u0c54\u0003\u0002\u0002\u0002\u0c58\u0c55\u0003",
    "\u0002\u0002\u0002\u0c58\u0c56\u0003\u0002\u0002\u0002\u0c59\u0c5d\u0003",
    "\u0002\u0002\u0002\u0c5a\u0c5c\u0005B\"\u0002\u0c5b\u0c5a\u0003\u0002",
    "\u0002\u0002\u0c5c\u0c5f\u0003\u0002\u0002\u0002\u0c5d\u0c5b\u0003\u0002",
    "\u0002\u0002\u0c5d\u0c5e\u0003\u0002\u0002\u0002\u0c5e\u0c61\u0003\u0002",
    "\u0002\u0002\u0c5f\u0c5d\u0003\u0002\u0002\u0002\u0c60\u0c58\u0003\u0002",
    "\u0002\u0002\u0c61\u0c64\u0003\u0002\u0002\u0002\u0c62\u0c60\u0003\u0002",
    "\u0002\u0002\u0c62\u0c63\u0003\u0002\u0002\u0002\u0c63\u0c65\u0003\u0002",
    "\u0002\u0002\u0c64\u0c62\u0003\u0002\u0002\u0002\u0c65\u0c66\u0007\u0002",
    "\u0002\u0003\u0c66\u01d1\u0003\u0002\u0002\u0002\u0c67\u0c68\u0005\u015e",
    "\u00b0\u0002\u0c68\u0c69\u0007\u0002\u0002\u0003\u0c69\u0cec\u0003\u0002",
    "\u0002\u0002\u0c6a\u0c6c\u0005\u0194\u00cb\u0002\u0c6b\u0c6d\u0005\u0014",
    "\u000b\u0002\u0c6c\u0c6b\u0003\u0002\u0002\u0002\u0c6c\u0c6d\u0003\u0002",
    "\u0002\u0002\u0c6d\u0c6e\u0003\u0002\u0002\u0002\u0c6e\u0c6f\u0007\u0002",
    "\u0002\u0003\u0c6f\u0cec\u0003\u0002\u0002\u0002\u0c70\u0c71\u0007\u0080",
    "\u0002\u0002\u0c71\u0c72\u0005\u001a\u000e\u0002\u0c72\u0c73\u0007\u0081",
    "\u0002\u0002\u0c73\u0c74\u0007\u0002\u0002\u0003\u0c74\u0cec\u0003\u0002",
    "\u0002\u0002\u0c75\u0c76\u0005F$\u0002\u0c76\u0c77\u0007\u0002\u0002",
    "\u0003\u0c77\u0cec\u0003\u0002\u0002\u0002\u0c78\u0c79\u0005\u00c6d",
    "\u0002\u0c79\u0c7a\u0007\u0002\u0002\u0003\u0c7a\u0cec\u0003\u0002\u0002",
    "\u0002\u0c7b\u0c7c\u0007s\u0002\u0002\u0c7c\u0cec\u0007\u0002\u0002",
    "\u0003\u0c7d\u0c7e\u0007_\u0002\u0002\u0c7e\u0cec\u0007\u0002\u0002",
    "\u0003\u0c7f\u0c89\u0007\u0012\u0002\u0002\u0c80\u0c81\u0007\u0082\u0002",
    "\u0002\u0c81\u0c83\u0005\u0194\u00cb\u0002\u0c82\u0c84\u0005\u0014\u000b",
    "\u0002\u0c83\u0c82\u0003\u0002\u0002\u0002\u0c83\u0c84\u0003\u0002\u0002",
    "\u0002\u0c84\u0c8a\u0003\u0002\u0002\u0002\u0c85\u0c86\u0007~\u0002",
    "\u0002\u0c86\u0c87\u0005H%\u0002\u0c87\u0c88\u0007\u007f\u0002\u0002",
    "\u0c88\u0c8a\u0003\u0002\u0002\u0002\u0c89\u0c80\u0003\u0002\u0002\u0002",
    "\u0c89\u0c85\u0003\u0002\u0002\u0002\u0c8a\u0c8b\u0003\u0002\u0002\u0002",
    "\u0c8b\u0c8c\u0007\u0002\u0002\u0003\u0c8c\u0cec\u0003\u0002\u0002\u0002",
    "\u0c8d\u0caa\u0007C\u0002\u0002\u0c8e\u0ca4\u0005\u0006\u0004\u0002",
    "\u0c8f\u0ca5\u0005\u0192\u00ca\u0002\u0c90\u0ca5\u0005J&\u0002\u0c91",
    "\u0c92\u0007~\u0002\u0002\u0c92\u0c93\u0005H%\u0002\u0c93\u0c97\u0007",
    "\u007f\u0002\u0002\u0c94\u0c96\u0005\u0124\u0093\u0002\u0c95\u0c94\u0003",
    "\u0002\u0002\u0002\u0c96\u0c99\u0003\u0002\u0002\u0002\u0c97\u0c95\u0003",
    "\u0002\u0002\u0002\u0c97\u0c98\u0003\u0002\u0002\u0002\u0c98\u0c9b\u0003",
    "\u0002\u0002\u0002\u0c99\u0c97\u0003\u0002\u0002\u0002\u0c9a\u0c9c\u0005",
    "\u0126\u0094\u0002\u0c9b\u0c9a\u0003\u0002\u0002\u0002\u0c9b\u0c9c\u0003",
    "\u0002\u0002\u0002\u0c9c\u0ca5\u0003\u0002\u0002\u0002\u0c9d\u0c9f\u0005",
    "\u0124\u0093\u0002\u0c9e\u0c9d\u0003\u0002\u0002\u0002\u0c9f\u0ca0\u0003",
    "\u0002\u0002\u0002\u0ca0\u0c9e\u0003\u0002\u0002\u0002\u0ca0\u0ca1\u0003",
    "\u0002\u0002\u0002\u0ca1\u0ca2\u0003\u0002\u0002\u0002\u0ca2\u0ca3\u0005",
    "\u0126\u0094\u0002\u0ca3\u0ca5\u0003\u0002\u0002\u0002\u0ca4\u0c8f\u0003",
    "\u0002\u0002\u0002\u0ca4\u0c90\u0003\u0002\u0002\u0002\u0ca4\u0c91\u0003",
    "\u0002\u0002\u0002\u0ca4\u0c9e\u0003\u0002\u0002\u0002\u0ca5\u0cab\u0003",
    "\u0002\u0002\u0002\u0ca6\u0cab\u0005X-\u0002\u0ca7\u0ca8\u0005\u0124",
    "\u0093\u0002\u0ca8\u0ca9\u0005\u0126\u0094\u0002\u0ca9\u0cab\u0003\u0002",
    "\u0002\u0002\u0caa\u0c8e\u0003\u0002\u0002\u0002\u0caa\u0ca6\u0003\u0002",
    "\u0002\u0002\u0caa\u0ca7\u0003\u0002\u0002\u0002\u0cab\u0cac\u0003\u0002",
    "\u0002\u0002\u0cac\u0cad\u0007\u0002\u0002\u0003\u0cad\u0cec\u0003\u0002",
    "\u0002\u0002\u0cae\u0caf\u0007c\u0002\u0002\u0caf\u0cb3\u0007\u0080",
    "\u0002\u0002\u0cb0\u0cb4\u0005^0\u0002\u0cb1\u0cb4\u0005\u0006\u0004",
    "\u0002\u0cb2\u0cb4\u0007l\u0002\u0002\u0cb3\u0cb0\u0003\u0002\u0002",
    "\u0002\u0cb3\u0cb1\u0003\u0002\u0002\u0002\u0cb3\u0cb2\u0003\u0002\u0002",
    "\u0002\u0cb4\u0cb5\u0003\u0002\u0002\u0002\u0cb5\u0cb6\u0007\u0081\u0002",
    "\u0002\u0cb6\u0cec\u0007\u0002\u0002\u0003\u0cb7\u0cb8\u0007\u001a\u0002",
    "\u0002\u0cb8\u0cb9\u0007\u0080\u0002\u0002\u0cb9\u0cba\u0005\u001a\u000e",
    "\u0002\u0cba\u0cbb\u0007\u0081\u0002\u0002\u0cbb\u0cbc\u0007\u0002\u0002",
    "\u0003\u0cbc\u0cec\u0003\u0002\u0002\u0002\u0cbd\u0cbe\u0007f\u0002",
    "\u0002\u0cbe\u0cbf\u0007\u0080\u0002\u0002\u0cbf\u0cc0\u0005\u001a\u000e",
    "\u0002\u0cc0\u0cc1\u0007\u0081\u0002\u0002\u0cc1\u0cc2\u0007\u0002\u0002",
    "\u0003\u0cc2\u0cec\u0003\u0002\u0002\u0002\u0cc3\u0cc4\u0007\u001f\u0002",
    "\u0002\u0cc4\u0cc5\u0007\u0080\u0002\u0002\u0cc5\u0cc6\u0005\u0006\u0004",
    "\u0002\u0cc6\u0cc7\u0007\u0081\u0002\u0002\u0cc7\u0cc8\u0007\u0002\u0002",
    "\u0003\u0cc8\u0cec\u0003\u0002\u0002\u0002\u0cc9\u0ccb\u0007\u0010\u0002",
    "\u0002\u0cca\u0cc9\u0003\u0002\u0002\u0002\u0cca\u0ccb\u0003\u0002\u0002",
    "\u0002\u0ccb\u0ccc\u0003\u0002\u0002\u0002\u0ccc\u0cd2\u0007 \u0002",
    "\u0002\u0ccd\u0ccf\u0007\u0080\u0002\u0002\u0cce\u0cd0\u0005h5\u0002",
    "\u0ccf\u0cce\u0003\u0002\u0002\u0002\u0ccf\u0cd0\u0003\u0002\u0002\u0002",
    "\u0cd0\u0cd1\u0003\u0002\u0002\u0002\u0cd1\u0cd3\u0007\u0081\u0002\u0002",
    "\u0cd2\u0ccd\u0003\u0002\u0002\u0002\u0cd2\u0cd3\u0003\u0002\u0002\u0002",
    "\u0cd3\u0cd4\u0003\u0002\u0002\u0002\u0cd4\u0cd5\u0005\u008eH\u0002",
    "\u0cd5\u0cd6\u0007\u0002\u0002\u0003\u0cd6\u0cec\u0003\u0002\u0002\u0002",
    "\u0cd7\u0cd8\u0007Y\u0002\u0002\u0cd8\u0cd9\u0007\u0080\u0002\u0002",
    "\u0cd9\u0cda\u0005\u0006\u0004\u0002\u0cda\u0cdb\u0007\u0081\u0002\u0002",
    "\u0cdb\u0cdc\u0007\u0002\u0002\u0003\u0cdc\u0cec\u0003\u0002\u0002\u0002",
    "\u0cdd\u0cde\u0007A\u0002\u0002\u0cde\u0ce4\u0007\u0080\u0002\u0002",
    "\u0cdf\u0ce0\u0005\u0194\u00cb\u0002\u0ce0\u0ce1\u0007\u0082\u0002\u0002",
    "\u0ce1\u0ce3\u0003\u0002\u0002\u0002\u0ce2\u0cdf\u0003\u0002\u0002\u0002",
    "\u0ce3\u0ce6\u0003\u0002\u0002\u0002\u0ce4\u0ce2\u0003\u0002\u0002\u0002",
    "\u0ce4\u0ce5\u0003\u0002\u0002\u0002\u0ce5\u0ce7\u0003\u0002\u0002\u0002",
    "\u0ce6\u0ce4\u0003\u0002\u0002\u0002\u0ce7\u0ce8\u0005\u0194\u00cb\u0002",
    "\u0ce8\u0ce9\u0007\u0081\u0002\u0002\u0ce9\u0cea\u0007\u0002\u0002\u0003",
    "\u0cea\u0cec\u0003\u0002\u0002\u0002\u0ceb\u0c67\u0003\u0002\u0002\u0002",
    "\u0ceb\u0c6a\u0003\u0002\u0002\u0002\u0ceb\u0c70\u0003\u0002\u0002\u0002",
    "\u0ceb\u0c75\u0003\u0002\u0002\u0002\u0ceb\u0c78\u0003\u0002\u0002\u0002",
    "\u0ceb\u0c7b\u0003\u0002\u0002\u0002\u0ceb\u0c7d\u0003\u0002\u0002\u0002",
    "\u0ceb\u0c7f\u0003\u0002\u0002\u0002\u0ceb\u0c8d\u0003\u0002\u0002\u0002",
    "\u0ceb\u0cae\u0003\u0002\u0002\u0002\u0ceb\u0cb7\u0003\u0002\u0002\u0002",
    "\u0ceb\u0cbd\u0003\u0002\u0002\u0002\u0ceb\u0cc3\u0003\u0002\u0002\u0002",
    "\u0ceb\u0cca\u0003\u0002\u0002\u0002\u0ceb\u0cd7\u0003\u0002\u0002\u0002",
    "\u0ceb\u0cdd\u0003\u0002\u0002\u0002\u0cec\u01d3\u0003\u0002\u0002\u0002",
    "\u0ced\u0cef\u0007\u0093\u0002\u0002\u0cee\u0ced\u0003\u0002\u0002\u0002",
    "\u0cee\u0cef\u0003\u0002\u0002\u0002\u0cef\u0cf0\u0003\u0002\u0002\u0002",
    "\u0cf0\u0cf1\u0007\u0082\u0002\u0002\u0cf1\u0cf3\u0005\u0194\u00cb\u0002",
    "\u0cf2\u0cf4\u0005\u0014\u000b\u0002\u0cf3\u0cf2\u0003\u0002\u0002\u0002",
    "\u0cf3\u0cf4\u0003\u0002\u0002\u0002\u0cf4\u0cf5\u0003\u0002\u0002\u0002",
    "\u0cf5\u0cf6\u0007\u0002\u0002\u0003\u0cf6\u01d5\u0003\u0002\u0002\u0002",
    "\u0cf7\u0cf9\u0007\u0093\u0002\u0002\u0cf8\u0cf7\u0003\u0002\u0002\u0002",
    "\u0cf8\u0cf9\u0003\u0002\u0002\u0002\u0cf9\u0cfa\u0003\u0002\u0002\u0002",
    "\u0cfa\u0cfb\u0007~\u0002\u0002\u0cfb\u0d00\u0005D#\u0002\u0cfc\u0cfd",
    "\u0007\u0083\u0002\u0002\u0cfd\u0cff\u0005D#\u0002\u0cfe\u0cfc\u0003",
    "\u0002\u0002\u0002\u0cff\u0d02\u0003\u0002\u0002\u0002\u0d00\u0cfe\u0003",
    "\u0002\u0002\u0002\u0d00\u0d01\u0003\u0002\u0002\u0002\u0d01\u0d03\u0003",
    "\u0002\u0002\u0002\u0d02\u0d00\u0003\u0002\u0002\u0002\u0d03\u0d04\u0007",
    "\u007f\u0002\u0002\u0d04\u0d05\u0007\u0002\u0002\u0003\u0d05\u01d7\u0003",
    "\u0002\u0002\u0002\u0d06\u0d07\u0005\u0194\u00cb\u0002\u0d07\u0d08\u0007",
    "\u0084\u0002\u0002\u0d08\u0d0a\u0003\u0002\u0002\u0002\u0d09\u0d06\u0003",
    "\u0002\u0002\u0002\u0d09\u0d0a\u0003\u0002\u0002\u0002\u0d0a\u0d0b\u0003",
    "\u0002\u0002\u0002\u0d0b\u0d0c\u0005\u001a\u000e\u0002\u0d0c\u0d0d\u0007",
    "\u0002\u0002\u0003\u0d0d\u01d9\u0003\u0002\u0002\u0002\u0d0e\u0d0f\u0007",
    "\u0013\u0002\u0002\u0d0f\u0d2d\u0007\u0002\u0002\u0003\u0d10\u0d11\u0007",
    "\u0016\u0002\u0002\u0d11\u0d2d\u0007\u0002\u0002\u0003\u0d12\u0d13\u0007",
    "\u0019\u0002\u0002\u0d13\u0d2d\u0007\u0002\u0002\u0003\u0d14\u0d15\u0007",
    "\u001e\u0002\u0002\u0d15\u0d2d\u0007\u0002\u0002\u0003\u0d16\u0d17\u0007",
    "#\u0002\u0002\u0d17\u0d2d\u0007\u0002\u0002\u0003\u0d18\u0d19\u0007",
    ".\u0002\u0002\u0d19\u0d2d\u0007\u0002\u0002\u0003\u0d1a\u0d1b\u0007",
    "8\u0002\u0002\u0d1b\u0d2d\u0007\u0002\u0002\u0003\u0d1c\u0d1d\u0007",
    "@\u0002\u0002\u0d1d\u0d2d\u0007\u0002\u0002\u0003\u0d1e\u0d1f\u0007",
    "E\u0002\u0002\u0d1f\u0d2d\u0007\u0002\u0002\u0003\u0d20\u0d21\u0007",
    "T\u0002\u0002\u0d21\u0d2d\u0007\u0002\u0002\u0003\u0d22\u0d23\u0007",
    "X\u0002\u0002\u0d23\u0d2d\u0007\u0002\u0002\u0003\u0d24\u0d25\u0007",
    "\\\u0002\u0002\u0d25\u0d2d\u0007\u0002\u0002\u0003\u0d26\u0d27\u0007",
    "d\u0002\u0002\u0d27\u0d2d\u0007\u0002\u0002\u0003\u0d28\u0d29\u0007",
    "e\u0002\u0002\u0d29\u0d2d\u0007\u0002\u0002\u0003\u0d2a\u0d2b\u0007",
    "h\u0002\u0002\u0d2b\u0d2d\u0007\u0002\u0002\u0003\u0d2c\u0d0e\u0003",
    "\u0002\u0002\u0002\u0d2c\u0d10\u0003\u0002\u0002\u0002\u0d2c\u0d12\u0003",
    "\u0002\u0002\u0002\u0d2c\u0d14\u0003\u0002\u0002\u0002\u0d2c\u0d16\u0003",
    "\u0002\u0002\u0002\u0d2c\u0d18\u0003\u0002\u0002\u0002\u0d2c\u0d1a\u0003",
    "\u0002\u0002\u0002\u0d2c\u0d1c\u0003\u0002\u0002\u0002\u0d2c\u0d1e\u0003",
    "\u0002\u0002\u0002\u0d2c\u0d20\u0003\u0002\u0002\u0002\u0d2c\u0d22\u0003",
    "\u0002\u0002\u0002\u0d2c\u0d24\u0003\u0002\u0002\u0002\u0d2c\u0d26\u0003",
    "\u0002\u0002\u0002\u0d2c\u0d28\u0003\u0002\u0002\u0002\u0d2c\u0d2a\u0003",
    "\u0002\u0002\u0002\u0d2d\u01db\u0003\u0002\u0002\u0002\u0d2e\u0d33\u0005",
    "\u001a\u000e\u0002\u0d2f\u0d30\u0007\u0083\u0002\u0002\u0d30\u0d32\u0005",
    "\u001a\u000e\u0002\u0d31\u0d2f\u0003\u0002\u0002\u0002\u0d32\u0d35\u0003",
    "\u0002\u0002\u0002\u0d33\u0d31\u0003\u0002\u0002\u0002\u0d33\u0d34\u0003",
    "\u0002\u0002\u0002\u0d34\u0d36\u0003\u0002\u0002\u0002\u0d35\u0d33\u0003",
    "\u0002\u0002\u0002\u0d36\u0d37\u0007\u0002\u0002\u0003\u0d37\u01dd\u0003",
    "\u0002\u0002\u0002\u0d38\u0d39\u0005L\'\u0002\u0d39\u0d3a\u0007\u0002",
    "\u0002\u0003\u0d3a\u0d3f\u0003\u0002\u0002\u0002\u0d3b\u0d3c\u0005T",
    "+\u0002\u0d3c\u0d3d\u0007\u0002\u0002\u0003\u0d3d\u0d3f\u0003\u0002",
    "\u0002\u0002\u0d3e\u0d38\u0003\u0002\u0002\u0002\u0d3e\u0d3b\u0003\u0002",
    "\u0002\u0002\u0d3f\u01df\u0003\u0002\u0002\u0002\u0d40\u0d45\u0007|",
    "\u0002\u0002\u0d41\u0d43\u0005N(\u0002\u0d42\u0d44\u0007\u0083\u0002",
    "\u0002\u0d43\u0d42\u0003\u0002\u0002\u0002\u0d43\u0d44\u0003\u0002\u0002",
    "\u0002\u0d44\u0d46\u0003\u0002\u0002\u0002\u0d45\u0d41\u0003\u0002\u0002",
    "\u0002\u0d45\u0d46\u0003\u0002\u0002\u0002\u0d46\u0d47\u0003\u0002\u0002",
    "\u0002\u0d47\u0d48\u0007}\u0002\u0002\u0d48\u0d49\u0007\u0002\u0002",
    "\u0003\u0d49\u01e1\u0003\u0002\u0002\u0002\u0d4a\u0d4f\u0005P)\u0002",
    "\u0d4b\u0d4c\u0007\u0083\u0002\u0002\u0d4c\u0d4e\u0005P)\u0002\u0d4d",
    "\u0d4b\u0003\u0002\u0002\u0002\u0d4e\u0d51\u0003\u0002\u0002\u0002\u0d4f",
    "\u0d4d\u0003\u0002\u0002\u0002\u0d4f\u0d50\u0003\u0002\u0002\u0002\u0d50",
    "\u0d52\u0003\u0002\u0002\u0002\u0d51\u0d4f\u0003\u0002\u0002\u0002\u0d52",
    "\u0d53\u0007\u0002\u0002\u0003\u0d53\u01e3\u0003\u0002\u0002\u0002\u0d54",
    "\u0d5a\u0005\u0194\u00cb\u0002\u0d55\u0d56\u0007~\u0002\u0002\u0d56",
    "\u0d57\u0005\u001a\u000e\u0002\u0d57\u0d58\u0007\u007f\u0002\u0002\u0d58",
    "\u0d5a\u0003\u0002\u0002\u0002\u0d59\u0d54\u0003\u0002\u0002\u0002\u0d59",
    "\u0d55\u0003\u0002\u0002\u0002\u0d5a\u0d5b\u0003\u0002\u0002\u0002\u0d5b",
    "\u0d5c\u0007\u0090\u0002\u0002\u0d5c\u0d5d\u0005R*\u0002\u0d5d\u0d5e",
    "\u0007\u0002\u0002\u0003\u0d5e\u01e5\u0003\u0002\u0002\u0002\u0d5f\u0d60",
    "\u0005\u001a\u000e\u0002\u0d60\u0d61\u0007\u0002\u0002\u0003\u0d61\u0d66",
    "\u0003\u0002\u0002\u0002\u0d62\u0d63\u0005J&\u0002\u0d63\u0d64\u0007",
    "\u0002\u0002\u0003\u0d64\u0d66\u0003\u0002\u0002\u0002\u0d65\u0d5f\u0003",
    "\u0002\u0002\u0002\u0d65\u0d62\u0003\u0002\u0002\u0002\u0d66\u01e7\u0003",
    "\u0002\u0002\u0002\u0d67\u0d68\u0007|\u0002\u0002\u0d68\u0d6d\u0005",
    "V,\u0002\u0d69\u0d6a\u0007\u0083\u0002\u0002\u0d6a\u0d6c\u0005V,\u0002",
    "\u0d6b\u0d69\u0003\u0002\u0002\u0002\u0d6c\u0d6f\u0003\u0002\u0002\u0002",
    "\u0d6d\u0d6b\u0003\u0002\u0002\u0002\u0d6d\u0d6e\u0003\u0002\u0002\u0002",
    "\u0d6e\u0d71\u0003\u0002\u0002\u0002\u0d6f\u0d6d\u0003\u0002\u0002\u0002",
    "\u0d70\u0d72\u0007\u0083\u0002\u0002\u0d71\u0d70\u0003\u0002\u0002\u0002",
    "\u0d71\u0d72\u0003\u0002\u0002\u0002\u0d72\u0d73\u0003\u0002\u0002\u0002",
    "\u0d73\u0d74\u0007}\u0002\u0002\u0d74\u0d75\u0007\u0002\u0002\u0003",
    "\u0d75\u01e9\u0003\u0002\u0002\u0002\u0d76\u0d77\u0005\u001c\u000f\u0002",
    "\u0d77\u0d78\u0007\u0002\u0002\u0003\u0d78\u0d7f\u0003\u0002\u0002\u0002",
    "\u0d79\u0d7a\u0007|\u0002\u0002\u0d7a\u0d7b\u0005H%\u0002\u0d7b\u0d7c",
    "\u0007}\u0002\u0002\u0d7c\u0d7d\u0007\u0002\u0002\u0003\u0d7d\u0d7f",
    "\u0003\u0002\u0002\u0002\u0d7e\u0d76\u0003\u0002\u0002\u0002\u0d7e\u0d79",
    "\u0003\u0002\u0002\u0002\u0d7f\u01eb\u0003\u0002\u0002\u0002\u0d80\u0d85",
    "\u0007|\u0002\u0002\u0d81\u0d83\u0005Z.\u0002\u0d82\u0d84\u0007\u0083",
    "\u0002\u0002\u0d83\u0d82\u0003\u0002\u0002\u0002\u0d83\u0d84\u0003\u0002",
    "\u0002\u0002\u0d84\u0d86\u0003\u0002\u0002\u0002\u0d85\u0d81\u0003\u0002",
    "\u0002\u0002\u0d85\u0d86\u0003\u0002\u0002\u0002\u0d86\u0d87\u0003\u0002",
    "\u0002\u0002\u0d87\u0d88\u0007}\u0002\u0002\u0d88\u0d89\u0007\u0002",
    "\u0002\u0003\u0d89\u01ed\u0003\u0002\u0002\u0002\u0d8a\u0d8f\u0005\\",
    "/\u0002\u0d8b\u0d8c\u0007\u0083\u0002\u0002\u0d8c\u0d8e\u0005\\/\u0002",
    "\u0d8d\u0d8b\u0003\u0002\u0002\u0002\u0d8e\u0d91\u0003\u0002\u0002\u0002",
    "\u0d8f\u0d8d\u0003\u0002\u0002\u0002\u0d8f\u0d90\u0003\u0002\u0002\u0002",
    "\u0d90\u0d92\u0003\u0002\u0002\u0002\u0d91\u0d8f\u0003\u0002\u0002\u0002",
    "\u0d92\u0d93\u0007\u0002\u0002\u0003\u0d93\u01ef\u0003\u0002\u0002\u0002",
    "\u0d94\u0d95\u0005<\u001f\u0002\u0d95\u0d96\u0007\u0002\u0002\u0003",
    "\u0d96\u0d9d\u0003\u0002\u0002\u0002\u0d97\u0d98\u0005\u0194\u00cb\u0002",
    "\u0d98\u0d99\u0007\u0090\u0002\u0002\u0d99\u0d9a\u0005\u001a\u000e\u0002",
    "\u0d9a\u0d9b\u0007\u0002\u0002\u0003\u0d9b\u0d9d\u0003\u0002\u0002\u0002",
    "\u0d9c\u0d94\u0003\u0002\u0002\u0002\u0d9c\u0d97\u0003\u0002\u0002\u0002",
    "\u0d9d\u01f1\u0003\u0002\u0002\u0002\u0d9e\u0da7\u0005\u0194\u00cb\u0002",
    "\u0d9f\u0da1\u0005`1\u0002\u0da0\u0d9f\u0003\u0002\u0002\u0002\u0da0",
    "\u0da1\u0003\u0002\u0002\u0002\u0da1\u0da8\u0003\u0002\u0002\u0002\u0da2",
    "\u0da3\u0007\u0094\u0002\u0002\u0da3\u0da5\u0005\u0194\u00cb\u0002\u0da4",
    "\u0da6\u0005`1\u0002\u0da5\u0da4\u0003\u0002\u0002\u0002\u0da5\u0da6",
    "\u0003\u0002\u0002\u0002\u0da6\u0da8\u0003\u0002\u0002\u0002\u0da7\u0da0",
    "\u0003\u0002\u0002\u0002\u0da7\u0da2\u0003\u0002\u0002\u0002\u0da8\u0db0",
    "\u0003\u0002\u0002\u0002\u0da9\u0daa\u0007\u0082\u0002\u0002\u0daa\u0dac",
    "\u0005\u0194\u00cb\u0002\u0dab\u0dad\u0005`1\u0002\u0dac\u0dab\u0003",
    "\u0002\u0002\u0002\u0dac\u0dad\u0003\u0002\u0002\u0002\u0dad\u0daf\u0003",
    "\u0002\u0002\u0002\u0dae\u0da9\u0003\u0002\u0002\u0002\u0daf\u0db2\u0003",
    "\u0002\u0002\u0002\u0db0\u0dae\u0003\u0002\u0002\u0002\u0db0\u0db1\u0003",
    "\u0002\u0002\u0002\u0db1\u0db3\u0003\u0002\u0002\u0002\u0db2\u0db0\u0003",
    "\u0002\u0002\u0002\u0db3\u0db4\u0007\u0002\u0002\u0003\u0db4\u01f3\u0003",
    "\u0002\u0002\u0002\u0db5\u0db9\u0007\u0091\u0002\u0002\u0db6\u0db8\u0007",
    "\u0083\u0002\u0002\u0db7\u0db6\u0003\u0002\u0002\u0002\u0db8\u0dbb\u0003",
    "\u0002\u0002\u0002\u0db9\u0db7\u0003\u0002\u0002\u0002\u0db9\u0dba\u0003",
    "\u0002\u0002\u0002\u0dba\u0dbc\u0003\u0002\u0002\u0002\u0dbb\u0db9\u0003",
    "\u0002\u0002\u0002\u0dbc\u0dbd\u0007\u0092\u0002\u0002\u0dbd\u0dbe\u0007",
    "\u0002\u0002\u0003\u0dbe\u01f5\u0003\u0002\u0002\u0002\u0dbf\u0dc4\u0005",
    "\b\u0005\u0002\u0dc0\u0dc3\u0005\u0124\u0093\u0002\u0dc1\u0dc3\u0007",
    "\u0088\u0002\u0002\u0dc2\u0dc0\u0003\u0002\u0002\u0002\u0dc2\u0dc1\u0003",
    "\u0002\u0002\u0002\u0dc3\u0dc6\u0003\u0002\u0002\u0002\u0dc4\u0dc2\u0003",
    "\u0002\u0002\u0002\u0dc4\u0dc5\u0003\u0002\u0002\u0002\u0dc5\u0dc8\u0003",
    "\u0002\u0002\u0002\u0dc6\u0dc4\u0003\u0002\u0002\u0002\u0dc7\u0dc9\u0007",
    "\u0093\u0002\u0002\u0dc8\u0dc7\u0003\u0002\u0002\u0002\u0dc8\u0dc9\u0003",
    "\u0002\u0002\u0002\u0dc9\u0dca\u0003\u0002\u0002\u0002\u0dca\u0dcb\u0007",
    "\u0002\u0002\u0003\u0dcb\u01f7\u0003\u0002\u0002\u0002\u0dcc\u0dce\u0007",
    "\u0010\u0002\u0002\u0dcd\u0dcc\u0003\u0002\u0002\u0002\u0dcd\u0dce\u0003",
    "\u0002\u0002\u0002\u0dce\u0dcf\u0003\u0002\u0002\u0002\u0dcf\u0dd0\u0005",
    "f4\u0002\u0dd0\u0dd1\u0005\u0158\u00ad\u0002\u0dd1\u0dd2\u0005n8\u0002",
    "\u0dd2\u0dd3\u0007\u0002\u0002\u0003\u0dd3\u01f9\u0003\u0002\u0002\u0002",
    "\u0dd4\u0dd5\u0007\u0080\u0002\u0002\u0dd5\u0dd6\u0007\u0081\u0002\u0002",
    "\u0dd6\u0de5\u0007\u0002\u0002\u0003\u0dd7\u0dd8\u0007\u0080\u0002\u0002",
    "\u0dd8\u0dd9\u0005h5\u0002\u0dd9\u0dda\u0007\u0081\u0002\u0002\u0dda",
    "\u0ddb\u0007\u0002\u0002\u0003\u0ddb\u0de5\u0003\u0002\u0002\u0002\u0ddc",
    "\u0ddd\u0007\u0080\u0002\u0002\u0ddd\u0dde\u0005l7\u0002\u0dde\u0ddf",
    "\u0007\u0081\u0002\u0002\u0ddf\u0de0\u0007\u0002\u0002\u0003\u0de0\u0de5",
    "\u0003\u0002\u0002\u0002\u0de1\u0de2\u0005\u0194\u00cb\u0002\u0de2\u0de3",
    "\u0007\u0002\u0002\u0003\u0de3\u0de5\u0003\u0002\u0002\u0002\u0de4\u0dd4",
    "\u0003\u0002\u0002\u0002\u0de4\u0dd7\u0003\u0002\u0002\u0002\u0de4\u0ddc",
    "\u0003\u0002\u0002\u0002\u0de4\u0de1\u0003\u0002\u0002\u0002\u0de5\u01fb",
    "\u0003\u0002\u0002\u0002\u0de6\u0deb\u0005j6\u0002\u0de7\u0de8\u0007",
    "\u0083\u0002\u0002\u0de8\u0dea\u0005j6\u0002\u0de9\u0de7\u0003\u0002",
    "\u0002\u0002\u0dea\u0ded\u0003\u0002\u0002\u0002\u0deb\u0de9\u0003\u0002",
    "\u0002\u0002\u0deb\u0dec\u0003\u0002\u0002\u0002\u0dec\u0dee\u0003\u0002",
    "\u0002\u0002\u0ded\u0deb\u0003\u0002\u0002\u0002\u0dee\u0def\u0007\u0002",
    "\u0002\u0003\u0def\u01fd\u0003\u0002\u0002\u0002\u0df0\u0df2\t\u0004",
    "\u0002\u0002\u0df1\u0df0\u0003\u0002\u0002\u0002\u0df1\u0df2\u0003\u0002",
    "\u0002\u0002\u0df2\u0df3\u0003\u0002\u0002\u0002\u0df3\u0df4\u0005\u0006",
    "\u0004\u0002\u0df4\u0df5\u0005\u0194\u00cb\u0002\u0df5\u0df6\u0007\u0002",
    "\u0002\u0003\u0df6\u01ff\u0003\u0002\u0002\u0002\u0df7\u0dfc\u0005\u0194",
    "\u00cb\u0002\u0df8\u0df9\u0007\u0083\u0002\u0002\u0df9\u0dfb\u0005\u0194",
    "\u00cb\u0002\u0dfa\u0df8\u0003\u0002\u0002\u0002\u0dfb\u0dfe\u0003\u0002",
    "\u0002\u0002\u0dfc\u0dfa\u0003\u0002\u0002\u0002\u0dfc\u0dfd\u0003\u0002",
    "\u0002\u0002\u0dfd\u0dff\u0003\u0002\u0002\u0002\u0dfe\u0dfc\u0003\u0002",
    "\u0002\u0002\u0dff\u0e00\u0007\u0002\u0002\u0003\u0e00\u0201\u0003\u0002",
    "\u0002\u0002\u0e01\u0e02\u0005\u001a\u000e\u0002\u0e02\u0e03\u0007\u0002",
    "\u0002\u0003\u0e03\u0e08\u0003\u0002\u0002\u0002\u0e04\u0e05\u0005\u008e",
    "H\u0002\u0e05\u0e06\u0007\u0002\u0002\u0003\u0e06\u0e08\u0003\u0002",
    "\u0002\u0002\u0e07\u0e01\u0003\u0002\u0002\u0002\u0e07\u0e04\u0003\u0002",
    "\u0002\u0002\u0e08\u0203\u0003\u0002\u0002\u0002\u0e09\u0e0a\u0005r",
    ":\u0002\u0e0a\u0e0b\u0005t;\u0002\u0e0b\u0e0c\u0007\u0002\u0002\u0003",
    "\u0e0c\u0205\u0003\u0002\u0002\u0002\u0e0d\u0e0f\u00071\u0002\u0002",
    "\u0e0e\u0e10\u0005\u0006\u0004\u0002\u0e0f\u0e0e\u0003\u0002\u0002\u0002",
    "\u0e0f\u0e10\u0003\u0002\u0002\u0002\u0e10\u0e11\u0003\u0002\u0002\u0002",
    "\u0e11\u0e12\u0005\u0194\u00cb\u0002\u0e12\u0e13\u00077\u0002\u0002",
    "\u0e13\u0e14\u0005\u001a\u000e\u0002\u0e14\u0e15\u0007\u0002\u0002\u0003",
    "\u0e15\u0207\u0003\u0002\u0002\u0002\u0e16\u0e18\u0005v<\u0002\u0e17",
    "\u0e16\u0003\u0002\u0002\u0002\u0e18\u0e1b\u0003\u0002\u0002\u0002\u0e19",
    "\u0e17\u0003\u0002\u0002\u0002\u0e19\u0e1a\u0003\u0002\u0002\u0002\u0e1a",
    "\u0e1c\u0003\u0002\u0002\u0002\u0e1b\u0e19\u0003\u0002\u0002\u0002\u0e1c",
    "\u0e1e\u0005\u0082B\u0002\u0e1d\u0e1f\u0005\u0084C\u0002\u0e1e\u0e1d",
    "\u0003\u0002\u0002\u0002\u0e1e\u0e1f\u0003\u0002\u0002\u0002\u0e1f\u0e20",
    "\u0003\u0002\u0002\u0002\u0e20\u0e21\u0007\u0002\u0002\u0003\u0e21\u0209",
    "\u0003\u0002\u0002\u0002\u0e22\u0e23\u0005r:\u0002\u0e23\u0e24\u0007",
    "\u0002\u0002\u0003\u0e24\u0e32\u0003\u0002\u0002\u0002\u0e25\u0e26\u0005",
    "x=\u0002\u0e26\u0e27\u0007\u0002\u0002\u0003\u0e27\u0e32\u0003\u0002",
    "\u0002\u0002\u0e28\u0e29\u0005z>\u0002\u0e29\u0e2a\u0007\u0002\u0002",
    "\u0003\u0e2a\u0e32\u0003\u0002\u0002\u0002\u0e2b\u0e2c\u0005|?\u0002",
    "\u0e2c\u0e2d\u0007\u0002\u0002\u0003\u0e2d\u0e32\u0003\u0002\u0002\u0002",
    "\u0e2e\u0e2f\u0005~@\u0002\u0e2f\u0e30\u0007\u0002\u0002\u0003\u0e30",
    "\u0e32\u0003\u0002\u0002\u0002\u0e31\u0e22\u0003\u0002\u0002\u0002\u0e31",
    "\u0e25\u0003\u0002\u0002\u0002\u0e31\u0e28\u0003\u0002\u0002\u0002\u0e31",
    "\u0e2b\u0003\u0002\u0002\u0002\u0e31\u0e2e\u0003\u0002\u0002\u0002\u0e32",
    "\u020b\u0003\u0002\u0002\u0002\u0e33\u0e34\u0007>\u0002\u0002\u0e34",
    "\u0e35\u0005\u0194\u00cb\u0002\u0e35\u0e36\u0007\u0090\u0002\u0002\u0e36",
    "\u0e37\u0005\u001a\u000e\u0002\u0e37\u0e38\u0007\u0002\u0002\u0003\u0e38",
    "\u020d\u0003\u0002\u0002\u0002\u0e39\u0e3a\u0007o\u0002\u0002\u0e3a",
    "\u0e3b\u0005\u001a\u000e\u0002\u0e3b\u0e3c\u0007\u0002\u0002\u0003\u0e3c",
    "\u020f\u0003\u0002\u0002\u0002\u0e3d\u0e3f\u0007=\u0002\u0002\u0e3e",
    "\u0e40\u0005\u0006\u0004\u0002\u0e3f\u0e3e\u0003\u0002\u0002\u0002\u0e3f",
    "\u0e40\u0003\u0002\u0002\u0002\u0e40\u0e41\u0003\u0002\u0002\u0002\u0e41",
    "\u0e42\u0005\u0194\u00cb\u0002\u0e42\u0e43\u00077\u0002\u0002\u0e43",
    "\u0e44\u0005\u001a\u000e\u0002\u0e44\u0e45\u0007F\u0002\u0002\u0e45",
    "\u0e46\u0005\u001a\u000e\u0002\u0e46\u0e47\u0007\'\u0002\u0002\u0e47",
    "\u0e4a\u0005\u001a\u000e\u0002\u0e48\u0e49\u0007;\u0002\u0002\u0e49",
    "\u0e4b\u0005\u0194\u00cb\u0002\u0e4a\u0e48\u0003\u0002\u0002\u0002\u0e4a",
    "\u0e4b\u0003\u0002\u0002\u0002\u0e4b\u0e4c\u0003\u0002\u0002\u0002\u0e4c",
    "\u0e4d\u0007\u0002\u0002\u0003\u0e4d\u0211\u0003\u0002\u0002\u0002\u0e4e",
    "\u0e4f\u0007H\u0002\u0002\u0e4f\u0e54\u0005\u0080A\u0002\u0e50\u0e51",
    "\u0007\u0083\u0002\u0002\u0e51\u0e53\u0005\u0080A\u0002\u0e52\u0e50",
    "\u0003\u0002\u0002\u0002\u0e53\u0e56\u0003\u0002\u0002\u0002\u0e54\u0e52",
    "\u0003\u0002\u0002\u0002\u0e54\u0e55\u0003\u0002\u0002\u0002\u0e55\u0e57",
    "\u0003\u0002\u0002\u0002\u0e56\u0e54\u0003\u0002\u0002\u0002\u0e57\u0e58",
    "\u0007\u0002\u0002\u0003\u0e58\u0213\u0003\u0002\u0002\u0002\u0e59\u0e5b",
    "\u0005\u001a\u000e\u0002\u0e5a\u0e5c\t\n\u0002\u0002\u0e5b\u0e5a\u0003",
    "\u0002\u0002\u0002\u0e5b\u0e5c\u0003\u0002\u0002\u0002\u0e5c\u0e5d\u0003",
    "\u0002\u0002\u0002\u0e5d\u0e5e\u0007\u0002\u0002\u0003\u0e5e\u0215\u0003",
    "\u0002\u0002\u0002\u0e5f\u0e60\u0007V\u0002\u0002\u0e60\u0e61\u0005",
    "\u001a\u000e\u0002\u0e61\u0e62\u0007\u0002\u0002\u0003\u0e62\u0e6a\u0003",
    "\u0002\u0002\u0002\u0e63\u0e64\u00074\u0002\u0002\u0e64\u0e65\u0005",
    "\u001a\u000e\u0002\u0e65\u0e66\u0007\u0015\u0002\u0002\u0e66\u0e67\u0005",
    "\u001a\u000e\u0002\u0e67\u0e68\u0007\u0002\u0002\u0003\u0e68\u0e6a\u0003",
    "\u0002\u0002\u0002\u0e69\u0e5f\u0003\u0002\u0002\u0002\u0e69\u0e63\u0003",
    "\u0002\u0002\u0002\u0e6a\u0217\u0003\u0002\u0002\u0002\u0e6b\u0e6c\u0007",
    ";\u0002\u0002\u0e6c\u0e6d\u0005\u0194\u00cb\u0002\u0e6d\u0e6e\u0005",
    "t;\u0002\u0e6e\u0e6f\u0007\u0002\u0002\u0003\u0e6f\u0219\u0003\u0002",
    "\u0002\u0002\u0e70\u0e71\u0005\u0088E\u0002\u0e71\u0e72\u0007\u0002",
    "\u0002\u0003\u0e72\u0e7e\u0003\u0002\u0002\u0002\u0e73\u0e76\u0005\u0090",
    "I\u0002\u0e74\u0e76\u0005\u0098M\u0002\u0e75\u0e73\u0003\u0002\u0002",
    "\u0002\u0e75\u0e74\u0003\u0002\u0002\u0002\u0e76\u0e77\u0003\u0002\u0002",
    "\u0002\u0e77\u0e78\u0007\u0085\u0002\u0002\u0e78\u0e79\u0007\u0002\u0002",
    "\u0003\u0e79\u0e7e\u0003\u0002\u0002\u0002\u0e7a\u0e7b\u0005\u008aF",
    "\u0002\u0e7b\u0e7c\u0007\u0002\u0002\u0003\u0e7c\u0e7e\u0003\u0002\u0002",
    "\u0002\u0e7d\u0e70\u0003\u0002\u0002\u0002\u0e7d\u0e75\u0003\u0002\u0002",
    "\u0002\u0e7d\u0e7a\u0003\u0002\u0002\u0002\u0e7e\u021b\u0003\u0002\u0002",
    "\u0002\u0e7f\u0e80\u0005\u0194\u00cb\u0002\u0e80\u0e81\u0007\u0084\u0002",
    "\u0002\u0e81\u0e82\u0005\u0086D\u0002\u0e82\u0e83\u0007\u0002\u0002",
    "\u0003\u0e83\u021d\u0003\u0002\u0002\u0002\u0e84\u0e85\u0005\u008eH",
    "\u0002\u0e85\u0e86\u0007\u0002\u0002\u0003\u0e86\u0e8b\u0003\u0002\u0002",
    "\u0002\u0e87\u0e88\u0005\u008cG\u0002\u0e88\u0e89\u0007\u0002\u0002",
    "\u0003\u0e89\u0e8b\u0003\u0002\u0002\u0002\u0e8a\u0e84\u0003\u0002\u0002",
    "\u0002\u0e8a\u0e87\u0003\u0002\u0002\u0002\u0e8b\u021f\u0003\u0002\u0002",
    "\u0002\u0e8c\u0e8d\u0007\u0085\u0002\u0002\u0e8d\u0f27\u0007\u0002\u0002",
    "\u0003\u0e8e\u0e8f\u0005\u001a\u000e\u0002\u0e8f\u0e90\u0007\u0085\u0002",
    "\u0002\u0e90\u0e91\u0007\u0002\u0002\u0003\u0e91\u0f27\u0003\u0002\u0002",
    "\u0002\u0e92\u0e93\u00075\u0002\u0002\u0e93\u0e94\u0007\u0080\u0002",
    "\u0002\u0e94\u0e95\u0005\u001a\u000e\u0002\u0e95\u0e96\u0007\u0081\u0002",
    "\u0002\u0e96\u0e99\u0005\u009aN\u0002\u0e97\u0e98\u0007%\u0002\u0002",
    "\u0e98\u0e9a\u0005\u009aN\u0002\u0e99\u0e97\u0003\u0002\u0002\u0002",
    "\u0e99\u0e9a\u0003\u0002\u0002\u0002\u0e9a\u0e9b\u0003\u0002\u0002\u0002",
    "\u0e9b\u0e9c\u0007\u0002\u0002\u0003\u0e9c\u0f27\u0003\u0002\u0002\u0002",
    "\u0e9d\u0e9e\u0007^\u0002\u0002\u0e9e\u0e9f\u0007\u0080\u0002\u0002",
    "\u0e9f\u0ea0\u0005\u001a\u000e\u0002\u0ea0\u0ea1\u0007\u0081\u0002\u0002",
    "\u0ea1\u0ea5\u0007|\u0002\u0002\u0ea2\u0ea4\u0005\u009cO\u0002\u0ea3",
    "\u0ea2\u0003\u0002\u0002\u0002\u0ea4\u0ea7\u0003\u0002\u0002\u0002\u0ea5",
    "\u0ea3\u0003\u0002\u0002\u0002\u0ea5\u0ea6\u0003\u0002\u0002\u0002\u0ea6",
    "\u0ea8\u0003\u0002\u0002\u0002\u0ea7\u0ea5\u0003\u0002\u0002\u0002\u0ea8",
    "\u0ea9\u0007}\u0002\u0002\u0ea9\u0eaa\u0007\u0002\u0002\u0003\u0eaa",
    "\u0f27\u0003\u0002\u0002\u0002\u0eab\u0eac\u0007p\u0002\u0002\u0eac",
    "\u0ead\u0007\u0080\u0002\u0002\u0ead\u0eae\u0005\u001a\u000e\u0002\u0eae",
    "\u0eaf\u0007\u0081\u0002\u0002\u0eaf\u0eb0\u0005\u008aF\u0002\u0eb0",
    "\u0eb1\u0007\u0002\u0002\u0003\u0eb1\u0f27\u0003\u0002\u0002\u0002\u0eb2",
    "\u0eb3\u0007\"\u0002\u0002\u0eb3\u0eb4\u0005\u008aF\u0002\u0eb4\u0eb5",
    "\u0007p\u0002\u0002\u0eb5\u0eb6\u0007\u0080\u0002\u0002\u0eb6\u0eb7",
    "\u0005\u001a\u000e\u0002\u0eb7\u0eb8\u0007\u0081\u0002\u0002\u0eb8\u0eb9",
    "\u0007\u0085\u0002\u0002\u0eb9\u0eba\u0007\u0002\u0002\u0003\u0eba\u0f27",
    "\u0003\u0002\u0002\u0002\u0ebb\u0ebc\u0007/\u0002\u0002\u0ebc\u0ebe",
    "\u0007\u0080\u0002\u0002\u0ebd\u0ebf\u0005\u00a2R\u0002\u0ebe\u0ebd",
    "\u0003\u0002\u0002\u0002\u0ebe\u0ebf\u0003\u0002\u0002\u0002\u0ebf\u0ec0",
    "\u0003\u0002\u0002\u0002\u0ec0\u0ec2\u0007\u0085\u0002\u0002\u0ec1\u0ec3",
    "\u0005\u001a\u000e\u0002\u0ec2\u0ec1\u0003\u0002\u0002\u0002\u0ec2\u0ec3",
    "\u0003\u0002\u0002\u0002\u0ec3\u0ec4\u0003\u0002\u0002\u0002\u0ec4\u0ec6",
    "\u0007\u0085\u0002\u0002\u0ec5\u0ec7\u0005\u00a4S\u0002\u0ec6\u0ec5",
    "\u0003\u0002\u0002\u0002\u0ec6\u0ec7\u0003\u0002\u0002\u0002\u0ec7\u0ec8",
    "\u0003\u0002\u0002\u0002\u0ec8\u0ec9\u0007\u0081\u0002\u0002\u0ec9\u0eca",
    "\u0005\u008aF\u0002\u0eca\u0ecb\u0007\u0002\u0002\u0003\u0ecb\u0f27",
    "\u0003\u0002\u0002\u0002\u0ecc\u0ecd\u00070\u0002\u0002\u0ecd\u0ece",
    "\u0007\u0080\u0002\u0002\u0ece\u0ecf\u0005\u0092J\u0002\u0ecf\u0ed0",
    "\u0005\u0194\u00cb\u0002\u0ed0\u0ed1\u00077\u0002\u0002\u0ed1\u0ed2",
    "\u0005\u001a\u000e\u0002\u0ed2\u0ed3\u0007\u0081\u0002\u0002\u0ed3\u0ed4",
    "\u0005\u008aF\u0002\u0ed4\u0ed5\u0007\u0002\u0002\u0003\u0ed5\u0f27",
    "\u0003\u0002\u0002\u0002\u0ed6\u0ed7\u0007\u0014\u0002\u0002\u0ed7\u0ed8",
    "\u0007\u0085\u0002\u0002\u0ed8\u0f27\u0007\u0002\u0002\u0003\u0ed9\u0eda",
    "\u0007\u001d\u0002\u0002\u0eda\u0edb\u0007\u0085\u0002\u0002\u0edb\u0f27",
    "\u0007\u0002\u0002\u0003\u0edc\u0ee1\u00073\u0002\u0002\u0edd\u0ee2",
    "\u0005\u0194\u00cb\u0002\u0ede\u0edf\u0007\u0017\u0002\u0002\u0edf\u0ee2",
    "\u0005\u001a\u000e\u0002\u0ee0\u0ee2\u0007\u001f\u0002\u0002\u0ee1\u0edd",
    "\u0003\u0002\u0002\u0002\u0ee1\u0ede\u0003\u0002\u0002\u0002\u0ee1\u0ee0",
    "\u0003\u0002\u0002\u0002\u0ee2\u0ee3\u0003\u0002\u0002\u0002\u0ee3\u0ee4",
    "\u0007\u0085\u0002\u0002\u0ee4\u0f27\u0007\u0002\u0002\u0003\u0ee5\u0ee7",
    "\u0007S\u0002\u0002\u0ee6\u0ee8\u0005\u001a\u000e\u0002\u0ee7\u0ee6",
    "\u0003\u0002\u0002\u0002\u0ee7\u0ee8\u0003\u0002\u0002\u0002\u0ee8\u0ee9",
    "\u0003\u0002\u0002\u0002\u0ee9\u0eea\u0007\u0085\u0002\u0002\u0eea\u0f27",
    "\u0007\u0002\u0002\u0003\u0eeb\u0eed\u0007`\u0002\u0002\u0eec\u0eee",
    "\u0005\u001a\u000e\u0002\u0eed\u0eec\u0003\u0002\u0002\u0002\u0eed\u0eee",
    "\u0003\u0002\u0002\u0002\u0eee\u0eef\u0003\u0002\u0002\u0002\u0eef\u0ef0",
    "\u0007\u0085\u0002\u0002\u0ef0\u0f27\u0007\u0002\u0002\u0003\u0ef1\u0ef2",
    "\u0007b\u0002\u0002\u0ef2\u0ef8\u0005\u008eH\u0002\u0ef3\u0ef5\u0005",
    "\u00a6T\u0002\u0ef4\u0ef6\u0005\u00aeX\u0002\u0ef5\u0ef4\u0003\u0002",
    "\u0002\u0002\u0ef5\u0ef6\u0003\u0002\u0002\u0002\u0ef6\u0ef9\u0003\u0002",
    "\u0002\u0002\u0ef7\u0ef9\u0005\u00aeX\u0002\u0ef8\u0ef3\u0003\u0002",
    "\u0002\u0002\u0ef8\u0ef7\u0003\u0002\u0002\u0002\u0ef9\u0efa\u0003\u0002",
    "\u0002\u0002\u0efa\u0efb\u0007\u0002\u0002\u0003\u0efb\u0f27\u0003\u0002",
    "\u0002\u0002\u0efc\u0efd\u0007\u001a\u0002\u0002\u0efd\u0efe\u0005\u008e",
    "H\u0002\u0efe\u0eff\u0007\u0002\u0002\u0003\u0eff\u0f27\u0003\u0002",
    "\u0002\u0002\u0f00\u0f01\u0007f\u0002\u0002\u0f01\u0f02\u0005\u008e",
    "H\u0002\u0f02\u0f03\u0007\u0002\u0002\u0003\u0f03\u0f27\u0003\u0002",
    "\u0002\u0002\u0f04\u0f05\u0007?\u0002\u0002\u0f05\u0f06\u0007\u0080",
    "\u0002\u0002\u0f06\u0f07\u0005\u001a\u000e\u0002\u0f07\u0f08\u0007\u0081",
    "\u0002\u0002\u0f08\u0f09\u0005\u008aF\u0002\u0f09\u0f0a\u0007\u0002",
    "\u0002\u0003\u0f0a\u0f27\u0003\u0002\u0002\u0002\u0f0b\u0f0c\u0007i",
    "\u0002\u0002\u0f0c\u0f0d\u0007\u0080\u0002\u0002\u0f0d\u0f0e\u0005\u00b0",
    "Y\u0002\u0f0e\u0f0f\u0007\u0081\u0002\u0002\u0f0f\u0f10\u0005\u008a",
    "F\u0002\u0f10\u0f11\u0007\u0002\u0002\u0003\u0f11\u0f27\u0003\u0002",
    "\u0002\u0002\u0f12\u0f16\u0007q\u0002\u0002\u0f13\u0f14\u0007S\u0002",
    "\u0002\u0f14\u0f17\u0005\u001a\u000e\u0002\u0f15\u0f17\u0007\u0014\u0002",
    "\u0002\u0f16\u0f13\u0003\u0002\u0002\u0002\u0f16\u0f15\u0003\u0002\u0002",
    "\u0002\u0f17\u0f18\u0003\u0002\u0002\u0002\u0f18\u0f19\u0007\u0085\u0002",
    "\u0002\u0f19\u0f27\u0007\u0002\u0002\u0003\u0f1a\u0f1b\u0007g\u0002",
    "\u0002\u0f1b\u0f1c\u0005\u008eH\u0002\u0f1c\u0f1d\u0007\u0002\u0002",
    "\u0003\u0f1d\u0f27\u0003\u0002\u0002\u0002\u0f1e\u0f1f\u0007-\u0002",
    "\u0002\u0f1f\u0f20\u0007\u0080\u0002\u0002\u0f20\u0f21\u0005\u014c\u00a7",
    "\u0002\u0f21\u0f22\u0005\u014e\u00a8\u0002\u0f22\u0f23\u0007\u0081\u0002",
    "\u0002\u0f23\u0f24\u0005\u008aF\u0002\u0f24\u0f25\u0007\u0002\u0002",
    "\u0003\u0f25\u0f27\u0003\u0002\u0002\u0002\u0f26\u0e8c\u0003\u0002\u0002",
    "\u0002\u0f26\u0e8e\u0003\u0002\u0002\u0002\u0f26\u0e92\u0003\u0002\u0002",
    "\u0002\u0f26\u0e9d\u0003\u0002\u0002\u0002\u0f26\u0eab\u0003\u0002\u0002",
    "\u0002\u0f26\u0eb2\u0003\u0002\u0002\u0002\u0f26\u0ebb\u0003\u0002\u0002",
    "\u0002\u0f26\u0ecc\u0003\u0002\u0002\u0002\u0f26\u0ed6\u0003\u0002\u0002",
    "\u0002\u0f26\u0ed9\u0003\u0002\u0002\u0002\u0f26\u0edc\u0003\u0002\u0002",
    "\u0002\u0f26\u0ee5\u0003\u0002\u0002\u0002\u0f26\u0eeb\u0003\u0002\u0002",
    "\u0002\u0f26\u0ef1\u0003\u0002\u0002\u0002\u0f26\u0efc\u0003\u0002\u0002",
    "\u0002\u0f26\u0f00\u0003\u0002\u0002\u0002\u0f26\u0f04\u0003\u0002\u0002",
    "\u0002\u0f26\u0f0b\u0003\u0002\u0002\u0002\u0f26\u0f12\u0003\u0002\u0002",
    "\u0002\u0f26\u0f1a\u0003\u0002\u0002\u0002\u0f26\u0f1e\u0003\u0002\u0002",
    "\u0002\u0f27\u0221\u0003\u0002\u0002\u0002\u0f28\u0f2a\u0007|\u0002",
    "\u0002\u0f29\u0f2b\u0005\u00a0Q\u0002\u0f2a\u0f29\u0003\u0002\u0002",
    "\u0002\u0f2a\u0f2b\u0003\u0002\u0002\u0002\u0f2b\u0f2c\u0003\u0002\u0002",
    "\u0002\u0f2c\u0f2d\u0007}\u0002\u0002\u0f2d\u0f2e\u0007\u0002\u0002",
    "\u0003\u0f2e\u0223\u0003\u0002\u0002\u0002\u0f2f\u0f30\u0005\u0092J",
    "\u0002\u0f30\u0f35\u0005\u0094K\u0002\u0f31\u0f32\u0007\u0083\u0002",
    "\u0002\u0f32\u0f34\u0005\u0094K\u0002\u0f33\u0f31\u0003\u0002\u0002",
    "\u0002\u0f34\u0f37\u0003\u0002\u0002\u0002\u0f35\u0f33\u0003\u0002\u0002",
    "\u0002\u0f35\u0f36\u0003\u0002\u0002\u0002\u0f36\u0f38\u0003\u0002\u0002",
    "\u0002\u0f37\u0f35\u0003\u0002\u0002\u0002\u0f38\u0f39\u0007\u0002\u0002",
    "\u0003\u0f39\u0225\u0003\u0002\u0002\u0002\u0f3a\u0f3b\u0007j\u0002",
    "\u0002\u0f3b\u0f40\u0007\u0002\u0002\u0003\u0f3c\u0f3d\u0005\u0006\u0004",
    "\u0002\u0f3d\u0f3e\u0007\u0002\u0002\u0003\u0f3e\u0f40\u0003\u0002\u0002",
    "\u0002\u0f3f\u0f3a\u0003\u0002\u0002\u0002\u0f3f\u0f3c\u0003\u0002\u0002",
    "\u0002\u0f40\u0227\u0003\u0002\u0002\u0002\u0f41\u0f44\u0005\u0194\u00cb",
    "\u0002\u0f42\u0f43\u0007\u0090\u0002\u0002\u0f43\u0f45\u0005\u0096L",
    "\u0002\u0f44\u0f42\u0003\u0002\u0002\u0002\u0f44\u0f45\u0003\u0002\u0002",
    "\u0002\u0f45\u0f46\u0003\u0002\u0002\u0002\u0f46\u0f47\u0007\u0002\u0002",
    "\u0003\u0f47\u0229\u0003\u0002\u0002\u0002\u0f48\u0f49\u0005\u001a\u000e",
    "\u0002\u0f49\u0f4a\u0007\u0002\u0002\u0003\u0f4a\u0f52\u0003\u0002\u0002",
    "\u0002\u0f4b\u0f4c\u0005\u0126\u0094\u0002\u0f4c\u0f4d\u0007\u0002\u0002",
    "\u0003\u0f4d\u0f52\u0003\u0002\u0002\u0002\u0f4e\u0f4f\u0005\u0156\u00ac",
    "\u0002\u0f4f\u0f50\u0007\u0002\u0002\u0003\u0f50\u0f52\u0003\u0002\u0002",
    "\u0002\u0f51\u0f48\u0003\u0002\u0002\u0002\u0f51\u0f4b\u0003\u0002\u0002",
    "\u0002\u0f51\u0f4e\u0003\u0002\u0002\u0002\u0f52\u022b\u0003\u0002\u0002",
    "\u0002\u0f53\u0f54\u0007\u001c\u0002\u0002\u0f54\u0f55\u0005\u0006\u0004",
    "\u0002\u0f55\u0f56\u0005\u00eav\u0002\u0f56\u0f57\u0007\u0002\u0002",
    "\u0003\u0f57\u022d\u0003\u0002\u0002\u0002\u0f58\u0f59\u0005\u008eH",
    "\u0002\u0f59\u0f5a\u0007\u0002\u0002\u0003\u0f5a\u0f5f\u0003\u0002\u0002",
    "\u0002\u0f5b\u0f5c\u0005\u008cG\u0002\u0f5c\u0f5d\u0007\u0002\u0002",
    "\u0003\u0f5d\u0f5f\u0003\u0002\u0002\u0002\u0f5e\u0f58\u0003\u0002\u0002",
    "\u0002\u0f5e\u0f5b\u0003\u0002\u0002\u0002\u0f5f\u022f\u0003\u0002\u0002",
    "\u0002\u0f60\u0f62\u0005\u009eP\u0002\u0f61\u0f60\u0003\u0002\u0002",
    "\u0002\u0f62\u0f63\u0003\u0002\u0002\u0002\u0f63\u0f61\u0003\u0002\u0002",
    "\u0002\u0f63\u0f64\u0003\u0002\u0002\u0002\u0f64\u0f65\u0003\u0002\u0002",
    "\u0002\u0f65\u0f66\u0005\u00a0Q\u0002\u0f66\u0f67\u0007\u0002\u0002",
    "\u0003\u0f67\u0231\u0003\u0002\u0002\u0002\u0f68\u0f69\u0007\u0017\u0002",
    "\u0002\u0f69\u0f6a\u0005\u001a\u000e\u0002\u0f6a\u0f6b\u0007\u0084\u0002",
    "\u0002\u0f6b\u0f6c\u0007\u0002\u0002\u0003\u0f6c\u0f71\u0003\u0002\u0002",
    "\u0002\u0f6d\u0f6e\u0007\u001f\u0002\u0002\u0f6e\u0f6f\u0007\u0084\u0002",
    "\u0002\u0f6f\u0f71\u0007\u0002\u0002\u0003\u0f70\u0f68\u0003\u0002\u0002",
    "\u0002\u0f70\u0f6d\u0003\u0002\u0002\u0002\u0f71\u0233\u0003\u0002\u0002",
    "\u0002\u0f72\u0f74\u0005\u0086D\u0002\u0f73\u0f72\u0003\u0002\u0002",
    "\u0002\u0f74\u0f75\u0003\u0002\u0002\u0002\u0f75\u0f73\u0003\u0002\u0002",
    "\u0002\u0f75\u0f76\u0003\u0002\u0002\u0002\u0f76\u0f77\u0003\u0002\u0002",
    "\u0002\u0f77\u0f78\u0007\u0002\u0002\u0003\u0f78\u0235\u0003\u0002\u0002",
    "\u0002\u0f79\u0f7a\u0005\u0090I\u0002\u0f7a\u0f7b\u0007\u0002\u0002",
    "\u0003\u0f7b\u0f87\u0003\u0002\u0002\u0002\u0f7c\u0f81\u0005\u001a\u000e",
    "\u0002\u0f7d\u0f7e\u0007\u0083\u0002\u0002\u0f7e\u0f80\u0005\u001a\u000e",
    "\u0002\u0f7f\u0f7d\u0003\u0002\u0002\u0002\u0f80\u0f83\u0003\u0002\u0002",
    "\u0002\u0f81\u0f7f\u0003\u0002\u0002\u0002\u0f81\u0f82\u0003\u0002\u0002",
    "\u0002\u0f82\u0f84\u0003\u0002\u0002\u0002\u0f83\u0f81\u0003\u0002\u0002",
    "\u0002\u0f84\u0f85\u0007\u0002\u0002\u0003\u0f85\u0f87\u0003\u0002\u0002",
    "\u0002\u0f86\u0f79\u0003\u0002\u0002\u0002\u0f86\u0f7c\u0003\u0002\u0002",
    "\u0002\u0f87\u0237\u0003\u0002\u0002\u0002\u0f88\u0f8d\u0005\u001a\u000e",
    "\u0002\u0f89\u0f8a\u0007\u0083\u0002\u0002\u0f8a\u0f8c\u0005\u001a\u000e",
    "\u0002\u0f8b\u0f89\u0003\u0002\u0002\u0002\u0f8c\u0f8f\u0003\u0002\u0002",
    "\u0002\u0f8d\u0f8b\u0003\u0002\u0002\u0002\u0f8d\u0f8e\u0003\u0002\u0002",
    "\u0002\u0f8e\u0f90\u0003\u0002\u0002\u0002\u0f8f\u0f8d\u0003\u0002\u0002",
    "\u0002\u0f90\u0f91\u0007\u0002\u0002\u0003\u0f91\u0239\u0003\u0002\u0002",
    "\u0002\u0f92\u0f96\u0005\u00a8U\u0002\u0f93\u0f95\u0005\u00a8U\u0002",
    "\u0f94\u0f93\u0003\u0002\u0002\u0002\u0f95\u0f98\u0003\u0002\u0002\u0002",
    "\u0f96\u0f94\u0003\u0002\u0002\u0002\u0f96\u0f97\u0003\u0002\u0002\u0002",
    "\u0f97\u0f9a\u0003\u0002\u0002\u0002\u0f98\u0f96\u0003\u0002\u0002\u0002",
    "\u0f99\u0f9b\u0005\u00aaV\u0002\u0f9a\u0f99\u0003\u0002\u0002\u0002",
    "\u0f9a\u0f9b\u0003\u0002\u0002\u0002\u0f9b\u0f9c\u0003\u0002\u0002\u0002",
    "\u0f9c\u0f9d\u0007\u0002\u0002\u0003\u0f9d\u0fa2\u0003\u0002\u0002\u0002",
    "\u0f9e\u0f9f\u0005\u00aaV\u0002\u0f9f\u0fa0\u0007\u0002\u0002\u0003",
    "\u0fa0\u0fa2\u0003\u0002\u0002\u0002\u0fa1\u0f92\u0003\u0002\u0002\u0002",
    "\u0fa1\u0f9e\u0003\u0002\u0002\u0002\u0fa2\u023b\u0003\u0002\u0002\u0002",
    "\u0fa3\u0fa4\u0007\u0018\u0002\u0002\u0fa4\u0fa5\u0007\u0080\u0002\u0002",
    "\u0fa5\u0fa7\u0005\u0012\n\u0002\u0fa6\u0fa8\u0005\u0194\u00cb\u0002",
    "\u0fa7\u0fa6\u0003\u0002\u0002\u0002\u0fa7\u0fa8\u0003\u0002\u0002\u0002",
    "\u0fa8\u0fa9\u0003\u0002\u0002\u0002\u0fa9\u0fab\u0007\u0081\u0002\u0002",
    "\u0faa\u0fac\u0005\u00acW\u0002\u0fab\u0faa\u0003\u0002\u0002\u0002",
    "\u0fab\u0fac\u0003\u0002\u0002\u0002\u0fac\u0fad\u0003\u0002\u0002\u0002",
    "\u0fad\u0fae\u0005\u008eH\u0002\u0fae\u0faf\u0007\u0002\u0002\u0003",
    "\u0faf\u023d\u0003\u0002\u0002\u0002\u0fb0\u0fb2\u0007\u0018\u0002\u0002",
    "\u0fb1\u0fb3\u0005\u00acW\u0002\u0fb2\u0fb1\u0003\u0002\u0002\u0002",
    "\u0fb2\u0fb3\u0003\u0002\u0002\u0002\u0fb3\u0fb4\u0003\u0002\u0002\u0002",
    "\u0fb4\u0fb5\u0005\u008eH\u0002\u0fb5\u0fb6\u0007\u0002\u0002\u0003",
    "\u0fb6\u023f\u0003\u0002\u0002\u0002\u0fb7\u0fb8\u0007n\u0002\u0002",
    "\u0fb8\u0fb9\u0007\u0080\u0002\u0002\u0fb9\u0fba\u0005\u001a\u000e\u0002",
    "\u0fba\u0fbb\u0007\u0081\u0002\u0002\u0fbb\u0fbc\u0007\u0002\u0002\u0003",
    "\u0fbc\u0241\u0003\u0002\u0002\u0002\u0fbd\u0fbe\u0007,\u0002\u0002",
    "\u0fbe\u0fbf\u0005\u008eH\u0002\u0fbf\u0fc0\u0007\u0002\u0002\u0003",
    "\u0fc0\u0243\u0003\u0002\u0002\u0002\u0fc1\u0fc2\u0005\u0090I\u0002",
    "\u0fc2\u0fc3\u0007\u0002\u0002\u0003\u0fc3\u0fc8\u0003\u0002\u0002\u0002",
    "\u0fc4\u0fc5\u0005\u001a\u000e\u0002\u0fc5\u0fc6\u0007\u0002\u0002\u0003",
    "\u0fc6\u0fc8\u0003\u0002\u0002\u0002\u0fc7\u0fc1\u0003\u0002\u0002\u0002",
    "\u0fc7\u0fc4\u0003\u0002\u0002\u0002\u0fc8\u0245\u0003\u0002\u0002\u0002",
    "\u0fc9\u0fca\u0007B\u0002\u0002\u0fca\u0fcb\u0005\u00b4[\u0002\u0fcb",
    "\u0fcd\u0005\u00b6\\\u0002\u0fcc\u0fce\u0007\u0085\u0002\u0002\u0fcd",
    "\u0fcc\u0003\u0002\u0002\u0002\u0fcd\u0fce\u0003\u0002\u0002\u0002\u0fce",
    "\u0fcf\u0003\u0002\u0002\u0002\u0fcf\u0fd0\u0007\u0002\u0002\u0003\u0fd0",
    "\u0247\u0003\u0002\u0002\u0002\u0fd1\u0fd6\u0005\u0194\u00cb\u0002\u0fd2",
    "\u0fd3\u0007\u0082\u0002\u0002\u0fd3\u0fd5\u0005\u0194\u00cb\u0002\u0fd4",
    "\u0fd2\u0003\u0002\u0002\u0002\u0fd5\u0fd8\u0003\u0002\u0002\u0002\u0fd6",
    "\u0fd4\u0003\u0002\u0002\u0002\u0fd6\u0fd7\u0003\u0002\u0002\u0002\u0fd7",
    "\u0fd9\u0003\u0002\u0002\u0002\u0fd8\u0fd6\u0003\u0002\u0002\u0002\u0fd9",
    "\u0fda\u0007\u0002\u0002\u0003\u0fda\u0249\u0003\u0002\u0002\u0002\u0fdb",
    "\u0fdd\u0007|\u0002\u0002\u0fdc\u0fde\u0005\u00b8]\u0002\u0fdd\u0fdc",
    "\u0003\u0002\u0002\u0002\u0fdd\u0fde\u0003\u0002\u0002\u0002\u0fde\u0fe0",
    "\u0003\u0002\u0002\u0002\u0fdf\u0fe1\u0005\u00bc_\u0002\u0fe0\u0fdf",
    "\u0003\u0002\u0002\u0002\u0fe0\u0fe1\u0003\u0002\u0002\u0002\u0fe1\u0fe3",
    "\u0003\u0002\u0002\u0002\u0fe2\u0fe4\u0005\u00c0a\u0002\u0fe3\u0fe2",
    "\u0003\u0002\u0002\u0002\u0fe3\u0fe4\u0003\u0002\u0002\u0002\u0fe4\u0fe5",
    "\u0003\u0002\u0002\u0002\u0fe5\u0fe6\u0007}\u0002\u0002\u0fe6\u0fe7",
    "\u0007\u0002\u0002\u0003\u0fe7\u024b\u0003\u0002\u0002\u0002\u0fe8\u0fea",
    "\u0005\u00ba^\u0002\u0fe9\u0fe8\u0003\u0002\u0002\u0002\u0fea\u0feb",
    "\u0003\u0002\u0002\u0002\u0feb\u0fe9\u0003\u0002\u0002\u0002\u0feb\u0fec",
    "\u0003\u0002\u0002\u0002\u0fec\u0fed\u0003\u0002\u0002\u0002\u0fed\u0fee",
    "\u0007\u0002\u0002\u0003\u0fee\u024d\u0003\u0002\u0002\u0002\u0fef\u0ff0",
    "\u0007*\u0002\u0002\u0ff0\u0ff1\u0007\f\u0002\u0002\u0ff1\u0ff2\u0005",
    "\u0194\u00cb\u0002\u0ff2\u0ff3\u0007\u0085\u0002\u0002\u0ff3\u0ff4\u0007",
    "\u0002\u0002\u0003\u0ff4\u024f\u0003\u0002\u0002\u0002\u0ff5\u0ff7\u0005",
    "\u00be`\u0002\u0ff6\u0ff5\u0003\u0002\u0002\u0002\u0ff7\u0ff8\u0003",
    "\u0002\u0002\u0002\u0ff8\u0ff6\u0003\u0002\u0002\u0002\u0ff8\u0ff9\u0003",
    "\u0002\u0002\u0002\u0ff9\u0ffa\u0003\u0002\u0002\u0002\u0ffa\u0ffb\u0007",
    "\u0002\u0002\u0003\u0ffb\u0251\u0003\u0002\u0002\u0002\u0ffc\u0ffd\u0007",
    "i\u0002\u0002\u0ffd\u0ffe\u0005\u0194\u00cb\u0002\u0ffe\u0fff\u0007",
    "\u0090\u0002\u0002\u0fff\u1000\u0005\u0004\u0003\u0002\u1000\u1001\u0007",
    "\u0085\u0002\u0002\u1001\u1002\u0007\u0002\u0002\u0003\u1002\u100f\u0003",
    "\u0002\u0002\u0002\u1003\u1004\u0007i\u0002\u0002\u1004\u1005\u0005",
    "\u0004\u0003\u0002\u1005\u1006\u0007\u0085\u0002\u0002\u1006\u1007\u0007",
    "\u0002\u0002\u0003\u1007\u100f\u0003\u0002\u0002\u0002\u1008\u1009\u0007",
    "i\u0002\u0002\u1009\u100a\u0007[\u0002\u0002\u100a\u100b\u0005\u0004",
    "\u0003\u0002\u100b\u100c\u0007\u0085\u0002\u0002\u100c\u100d\u0007\u0002",
    "\u0002\u0003\u100d\u100f\u0003\u0002\u0002\u0002\u100e\u0ffc\u0003\u0002",
    "\u0002\u0002\u100e\u1003\u0003\u0002\u0002\u0002\u100e\u1008\u0003\u0002",
    "\u0002\u0002\u100f\u0253\u0003\u0002\u0002\u0002\u1010\u1012\u0005\u00c2",
    "b\u0002\u1011\u1010\u0003\u0002\u0002\u0002\u1012\u1013\u0003\u0002",
    "\u0002\u0002\u1013\u1011\u0003\u0002\u0002\u0002\u1013\u1014\u0003\u0002",
    "\u0002\u0002\u1014\u1015\u0003\u0002\u0002\u0002\u1015\u1016\u0007\u0002",
    "\u0002\u0003\u1016\u0255\u0003\u0002\u0002\u0002\u1017\u1018\u0005\u00b2",
    "Z\u0002\u1018\u1019\u0007\u0002\u0002\u0003\u1019\u101e\u0003\u0002",
    "\u0002\u0002\u101a\u101b\u0005\u00c4c\u0002\u101b\u101c\u0007\u0002",
    "\u0002\u0003\u101c\u101e\u0003\u0002\u0002\u0002\u101d\u1017\u0003\u0002",
    "\u0002\u0002\u101d\u101a\u0003\u0002\u0002\u0002\u101e\u0257\u0003\u0002",
    "\u0002\u0002\u101f\u1021\u0005\u0140\u00a1\u0002\u1020\u101f\u0003\u0002",
    "\u0002\u0002\u1020\u1021\u0003\u0002\u0002\u0002\u1021\u1023\u0003\u0002",
    "\u0002\u0002\u1022\u1024\u0005\u00e2r\u0002\u1023\u1022\u0003\u0002",
    "\u0002\u0002\u1023\u1024\u0003\u0002\u0002\u0002\u1024\u102a\u0003\u0002",
    "\u0002\u0002\u1025\u102b\u0005\u0170\u00b9\u0002\u1026\u102b\u0005\u0172",
    "\u00ba\u0002\u1027\u102b\u0005\u0174\u00bb\u0002\u1028\u102b\u0005\u0176",
    "\u00bc\u0002\u1029\u102b\u0005\u0178\u00bd\u0002\u102a\u1025\u0003\u0002",
    "\u0002\u0002\u102a\u1026\u0003\u0002\u0002\u0002\u102a\u1027\u0003\u0002",
    "\u0002\u0002\u102a\u1028\u0003\u0002\u0002\u0002\u102a\u1029\u0003\u0002",
    "\u0002\u0002\u102b\u102c\u0003\u0002\u0002\u0002\u102c\u102d\u0007\u0002",
    "\u0002\u0003\u102d\u0259\u0003\u0002\u0002\u0002\u102e\u102f\u0005\u0194",
    "\u00cb\u0002\u102f\u1030\u0007\u0094\u0002\u0002\u1030\u1032\u0005\u0194",
    "\u00cb\u0002\u1031\u1033\u0005\u0014\u000b\u0002\u1032\u1031\u0003\u0002",
    "\u0002\u0002\u1032\u1033\u0003\u0002\u0002\u0002\u1033\u1034\u0003\u0002",
    "\u0002\u0002\u1034\u1035\u0007\u0002\u0002\u0003\u1035\u025b\u0003\u0002",
    "\u0002\u0002\u1036\u1037\u0007\u0091\u0002\u0002\u1037\u103c\u0005\u00ca",
    "f\u0002\u1038\u1039\u0007\u0083\u0002\u0002\u1039\u103b\u0005\u00ca",
    "f\u0002\u103a\u1038\u0003\u0002\u0002\u0002\u103b\u103e\u0003\u0002",
    "\u0002\u0002\u103c\u103a\u0003\u0002\u0002\u0002\u103c\u103d\u0003\u0002",
    "\u0002\u0002\u103d\u103f\u0003\u0002\u0002\u0002\u103e\u103c\u0003\u0002",
    "\u0002\u0002\u103f\u1040\u0007\u0092\u0002\u0002\u1040\u1041\u0007\u0002",
    "\u0002\u0003\u1041\u025d\u0003\u0002\u0002\u0002\u1042\u1044\u0005\u0140",
    "\u00a1\u0002\u1043\u1042\u0003\u0002\u0002\u0002\u1043\u1044\u0003\u0002",
    "\u0002\u0002\u1044\u1045\u0003\u0002\u0002\u0002\u1045\u1046\u0005\u0194",
    "\u00cb\u0002\u1046\u1047\u0007\u0002\u0002\u0003\u1047\u025f\u0003\u0002",
    "\u0002\u0002\u1048\u1049\u0007\u0084\u0002\u0002\u1049\u104e\u0005\u0012",
    "\n\u0002\u104a\u104b\u0007\u0083\u0002\u0002\u104b\u104d\u0005\u0004",
    "\u0003\u0002\u104c\u104a\u0003\u0002\u0002\u0002\u104d\u1050\u0003\u0002",
    "\u0002\u0002\u104e\u104c\u0003\u0002\u0002\u0002\u104e\u104f\u0003\u0002",
    "\u0002\u0002\u104f\u1051\u0003\u0002\u0002\u0002\u1050\u104e\u0003\u0002",
    "\u0002\u0002\u1051\u1052\u0007\u0002\u0002\u0003\u1052\u0261\u0003\u0002",
    "\u0002\u0002\u1053\u1058\u0005\u0004\u0003\u0002\u1054\u1055\u0007\u0083",
    "\u0002\u0002\u1055\u1057\u0005\u0004\u0003\u0002\u1056\u1054\u0003\u0002",
    "\u0002\u0002\u1057\u105a\u0003\u0002\u0002\u0002\u1058\u1056\u0003\u0002",
    "\u0002\u0002\u1058\u1059\u0003\u0002\u0002\u0002\u1059\u105b\u0003\u0002",
    "\u0002\u0002\u105a\u1058\u0003\u0002\u0002\u0002\u105b\u105c\u0007\u0002",
    "\u0002\u0003\u105c\u0263\u0003\u0002\u0002\u0002\u105d\u105f\u0005\u00d2",
    "j\u0002\u105e\u105d\u0003\u0002\u0002\u0002\u105f\u1060\u0003\u0002",
    "\u0002\u0002\u1060\u105e\u0003\u0002\u0002\u0002\u1060\u1061\u0003\u0002",
    "\u0002\u0002\u1061\u1062\u0003\u0002\u0002\u0002\u1062\u1063\u0007\u0002",
    "\u0002\u0003\u1063\u0265\u0003\u0002\u0002\u0002\u1064\u1065\u0007o",
    "\u0002\u0002\u1065\u1066\u0005\u0194\u00cb\u0002\u1066\u1067\u0007\u0084",
    "\u0002\u0002\u1067\u1068\u0005\u00d4k\u0002\u1068\u1069\u0007\u0002",
    "\u0002\u0003\u1069\u0267\u0003\u0002\u0002\u0002\u106a\u106b\u0005\u00da",
    "n\u0002\u106b\u106c\u0007\u0002\u0002\u0003\u106c\u1079\u0003\u0002",
    "\u0002\u0002\u106d\u1070\u0005\u00d6l\u0002\u106e\u106f\u0007\u0083",
    "\u0002\u0002\u106f\u1071\u0005\u00d8m\u0002\u1070\u106e\u0003\u0002",
    "\u0002\u0002\u1070\u1071\u0003\u0002\u0002\u0002\u1071\u1074\u0003\u0002",
    "\u0002\u0002\u1072\u1073\u0007\u0083\u0002\u0002\u1073\u1075\u0005\u00da",
    "n\u0002\u1074\u1072\u0003\u0002\u0002\u0002\u1074\u1075\u0003\u0002",
    "\u0002\u0002\u1075\u1076\u0003\u0002\u0002\u0002\u1076\u1077\u0007\u0002",
    "\u0002\u0003\u1077\u1079\u0003\u0002\u0002\u0002\u1078\u106a\u0003\u0002",
    "\u0002\u0002\u1078\u106d\u0003\u0002\u0002\u0002\u1079\u0269\u0003\u0002",
    "\u0002\u0002\u107a\u107b\u0005\u0012\n\u0002\u107b\u107c\u0007\u0002",
    "\u0002\u0003\u107c\u1082\u0003\u0002\u0002\u0002\u107d\u107e\u0007\u001b",
    "\u0002\u0002\u107e\u1082\u0007\u0002\u0002\u0003\u107f\u1080\u0007]",
    "\u0002\u0002\u1080\u1082\u0007\u0002\u0002\u0003\u1081\u107a\u0003\u0002",
    "\u0002\u0002\u1081\u107d\u0003\u0002\u0002\u0002\u1081\u107f\u0003\u0002",
    "\u0002\u0002\u1082\u026b\u0003\u0002\u0002\u0002\u1083\u1088\u0005\u0004",
    "\u0003\u0002\u1084\u1085\u0007\u0083\u0002\u0002\u1085\u1087\u0005\u0004",
    "\u0003\u0002\u1086\u1084\u0003\u0002\u0002\u0002\u1087\u108a\u0003\u0002",
    "\u0002\u0002\u1088\u1086\u0003\u0002\u0002\u0002\u1088\u1089\u0003\u0002",
    "\u0002\u0002\u1089\u108b\u0003\u0002\u0002\u0002\u108a\u1088\u0003\u0002",
    "\u0002\u0002\u108b\u108c\u0007\u0002\u0002\u0003\u108c\u026d\u0003\u0002",
    "\u0002\u0002\u108d\u108e\u0007C\u0002\u0002\u108e\u108f\u0007\u0080",
    "\u0002\u0002\u108f\u1090\u0007\u0081\u0002\u0002\u1090\u1091\u0007\u0002",
    "\u0002\u0003\u1091\u026f\u0003\u0002\u0002\u0002\u1092\u1094\u0007|",
    "\u0002\u0002\u1093\u1095\u0005\u00dep\u0002\u1094\u1093\u0003\u0002",
    "\u0002\u0002\u1094\u1095\u0003\u0002\u0002\u0002\u1095\u1096\u0003\u0002",
    "\u0002\u0002\u1096\u1097\u0007}\u0002\u0002\u1097\u1098\u0007\u0002",
    "\u0002\u0003\u1098\u0271\u0003\u0002\u0002\u0002\u1099\u109b\u0005\u00e0",
    "q\u0002\u109a\u1099\u0003\u0002\u0002\u0002\u109b\u109c\u0003\u0002",
    "\u0002\u0002\u109c\u109a\u0003\u0002\u0002\u0002\u109c\u109d\u0003\u0002",
    "\u0002\u0002\u109d\u109e\u0003\u0002\u0002\u0002\u109e\u109f\u0007\u0002",
    "\u0002\u0003\u109f\u0273\u0003\u0002\u0002\u0002\u10a0\u10a2\u0005\u0140",
    "\u00a1\u0002\u10a1\u10a0\u0003\u0002\u0002\u0002\u10a1\u10a2\u0003\u0002",
    "\u0002\u0002\u10a2\u10a4\u0003\u0002\u0002\u0002\u10a3\u10a5\u0005\u00e2",
    "r\u0002\u10a4\u10a3\u0003\u0002\u0002\u0002\u10a4\u10a5\u0003\u0002",
    "\u0002\u0002\u10a5\u10a8\u0003\u0002\u0002\u0002\u10a6\u10a9\u0005\u00e6",
    "t\u0002\u10a7\u10a9\u0005\u0184\u00c3\u0002\u10a8\u10a6\u0003\u0002",
    "\u0002\u0002\u10a8\u10a7\u0003\u0002\u0002\u0002\u10a9\u10aa\u0003\u0002",
    "\u0002\u0002\u10aa\u10ab\u0007\u0002\u0002\u0003\u10ab\u0275\u0003\u0002",
    "\u0002\u0002\u10ac\u10ae\u0005\u00e4s\u0002\u10ad\u10ac\u0003\u0002",
    "\u0002\u0002\u10ae\u10af\u0003\u0002\u0002\u0002\u10af\u10ad\u0003\u0002",
    "\u0002\u0002\u10af\u10b0\u0003\u0002\u0002\u0002\u10b0\u10b1\u0003\u0002",
    "\u0002\u0002\u10b1\u10b2\u0007\u0002\u0002\u0003\u10b2\u0277\u0003\u0002",
    "\u0002\u0002\u10b3\u10b4\u0007C\u0002\u0002\u10b4\u10d4\u0007\u0002",
    "\u0002\u0003\u10b5\u10b6\u0007O\u0002\u0002\u10b6\u10d4\u0007\u0002",
    "\u0002\u0003\u10b7\u10b8\u0007N\u0002\u0002\u10b8\u10d4\u0007\u0002",
    "\u0002\u0003\u10b9\u10ba\u0007:\u0002\u0002\u10ba\u10d4\u0007\u0002",
    "\u0002\u0003\u10bb\u10bc\u0007M\u0002\u0002\u10bc\u10d4\u0007\u0002",
    "\u0002\u0003\u10bd\u10be\u0007P\u0002\u0002\u10be\u10d4\u0007\u0002",
    "\u0002\u0003\u10bf\u10c0\u0007m\u0002\u0002\u10c0\u10d4\u0007\u0002",
    "\u0002\u0003\u10c1\u10c2\u0007k\u0002\u0002\u10c2\u10d4\u0007\u0002",
    "\u0002\u0003\u10c3\u10c4\u0007U\u0002\u0002\u10c4\u10d4\u0007\u0002",
    "\u0002\u0003\u10c5\u10c6\u0007J\u0002\u0002\u10c6\u10d4\u0007\u0002",
    "\u0002\u0003\u10c7\u10c8\u0007\n\u0002\u0002\u10c8\u10d4\u0007\u0002",
    "\u0002\u0003\u10c9\u10ca\u0007[\u0002\u0002\u10ca\u10d4\u0007\u0002",
    "\u0002\u0003\u10cb\u10cc\u0007g\u0002\u0002\u10cc\u10d4\u0007\u0002",
    "\u0002\u0003\u10cd\u10ce\u0007*\u0002\u0002\u10ce\u10d4\u0007\u0002",
    "\u0002\u0003\u10cf\u10d0\u0007L\u0002\u0002\u10d0\u10d4\u0007\u0002",
    "\u0002\u0003\u10d1\u10d2\u0007\u0010\u0002\u0002\u10d2\u10d4\u0007\u0002",
    "\u0002\u0003\u10d3\u10b3\u0003\u0002\u0002\u0002\u10d3\u10b5\u0003\u0002",
    "\u0002\u0002\u10d3\u10b7\u0003\u0002\u0002\u0002\u10d3\u10b9\u0003\u0002",
    "\u0002\u0002\u10d3\u10bb\u0003\u0002\u0002\u0002\u10d3\u10bd\u0003\u0002",
    "\u0002\u0002\u10d3\u10bf\u0003\u0002\u0002\u0002\u10d3\u10c1\u0003\u0002",
    "\u0002\u0002\u10d3\u10c3\u0003\u0002\u0002\u0002\u10d3\u10c5\u0003\u0002",
    "\u0002\u0002\u10d3\u10c7\u0003\u0002\u0002\u0002\u10d3\u10c9\u0003\u0002",
    "\u0002\u0002\u10d3\u10cb\u0003\u0002\u0002\u0002\u10d3\u10cd\u0003\u0002",
    "\u0002\u0002\u10d3\u10cf\u0003\u0002\u0002\u0002\u10d3\u10d1\u0003\u0002",
    "\u0002\u0002\u10d4\u0279\u0003\u0002\u0002\u0002\u10d5\u10d6\u0005\u0180",
    "\u00c1\u0002\u10d6\u10d7\u0007\u0002\u0002\u0003\u10d7\u10ff\u0003\u0002",
    "\u0002\u0002\u10d8\u10d9\u0005\u00e8u\u0002\u10d9\u10da\u0007\u0002",
    "\u0002\u0003\u10da\u10ff\u0003\u0002\u0002\u0002\u10db\u10dc\u0005\u017a",
    "\u00be\u0002\u10dc\u10dd\u0007\u0002\u0002\u0003\u10dd\u10ff\u0003\u0002",
    "\u0002\u0002\u10de\u10e4\u0005\u0116\u008c\u0002\u10df\u10e5\u0005\u011a",
    "\u008e\u0002\u10e0\u10e1\u0005\u0158\u00ad\u0002\u10e1\u10e2\u0005\u001a",
    "\u000e\u0002\u10e2\u10e3\u0007\u0085\u0002\u0002\u10e3\u10e5\u0003\u0002",
    "\u0002\u0002\u10e4\u10df\u0003\u0002\u0002\u0002\u10e4\u10e0\u0003\u0002",
    "\u0002\u0002\u10e5\u10e6\u0003\u0002\u0002\u0002\u10e6\u10e7\u0007\u0002",
    "\u0002\u0003\u10e7\u10ff\u0003\u0002\u0002\u0002\u10e8\u10e9\u0005\u0186",
    "\u00c4\u0002\u10e9\u10ea\u0007\u0002\u0002\u0003\u10ea\u10ff\u0003\u0002",
    "\u0002\u0002\u10eb\u10ec\u0007l\u0002\u0002\u10ec\u10ed\u0005\u0188",
    "\u00c5\u0002\u10ed\u10ee\u0007\u0002\u0002\u0003\u10ee\u10ff\u0003\u0002",
    "\u0002\u0002\u10ef\u10f0\u0005\u0170\u00b9\u0002\u10f0\u10f1\u0007\u0002",
    "\u0002\u0003\u10f1\u10ff\u0003\u0002\u0002\u0002\u10f2\u10f3\u0005\u0172",
    "\u00ba\u0002\u10f3\u10f4\u0007\u0002\u0002\u0003\u10f4\u10ff\u0003\u0002",
    "\u0002\u0002\u10f5\u10f6\u0005\u0174\u00bb\u0002\u10f6\u10f7\u0007\u0002",
    "\u0002\u0003\u10f7\u10ff\u0003\u0002\u0002\u0002\u10f8\u10f9\u0005\u0176",
    "\u00bc\u0002\u10f9\u10fa\u0007\u0002\u0002\u0003\u10fa\u10ff\u0003\u0002",
    "\u0002\u0002\u10fb\u10fc\u0005\u0178\u00bd\u0002\u10fc\u10fd\u0007\u0002",
    "\u0002\u0003\u10fd\u10ff\u0003\u0002\u0002\u0002\u10fe\u10d5\u0003\u0002",
    "\u0002\u0002\u10fe\u10d8\u0003\u0002\u0002\u0002\u10fe\u10db\u0003\u0002",
    "\u0002\u0002\u10fe\u10de\u0003\u0002\u0002\u0002\u10fe\u10e8\u0003\u0002",
    "\u0002\u0002\u10fe\u10eb\u0003\u0002\u0002\u0002\u10fe\u10ef\u0003\u0002",
    "\u0002\u0002\u10fe\u10f2\u0003\u0002\u0002\u0002\u10fe\u10f5\u0003\u0002",
    "\u0002\u0002\u10fe\u10f8\u0003\u0002\u0002\u0002\u10fe\u10fb\u0003\u0002",
    "\u0002\u0002\u10ff\u027b\u0003\u0002\u0002\u0002\u1100\u110a\u0005\u0006",
    "\u0004\u0002\u1101\u1102\u0005\u0004\u0003\u0002\u1102\u1103\u0007\u0082",
    "\u0002\u0002\u1103\u1104\u0005\u0182\u00c2\u0002\u1104\u110b\u0003\u0002",
    "\u0002\u0002\u1105\u110b\u0005\u0188\u00c5\u0002\u1106\u110b\u0005\u017e",
    "\u00c0\u0002\u1107\u110b\u0005\u0182\u00c2\u0002\u1108\u110b\u0005\u018c",
    "\u00c7\u0002\u1109\u110b\u0005\u017c\u00bf\u0002\u110a\u1101\u0003\u0002",
    "\u0002\u0002\u110a\u1105\u0003\u0002\u0002\u0002\u110a\u1106\u0003\u0002",
    "\u0002\u0002\u110a\u1107\u0003\u0002\u0002\u0002\u110a\u1108\u0003\u0002",
    "\u0002\u0002\u110a\u1109\u0003\u0002\u0002\u0002\u110b\u110c\u0003\u0002",
    "\u0002\u0002\u110c\u110d\u0007\u0002\u0002\u0003\u110d\u027d\u0003\u0002",
    "\u0002\u0002\u110e\u1113\u0005\u00ecw\u0002\u110f\u1110\u0007\u0083",
    "\u0002\u0002\u1110\u1112\u0005\u00ecw\u0002\u1111\u110f\u0003\u0002",
    "\u0002\u0002\u1112\u1115\u0003\u0002\u0002\u0002\u1113\u1111\u0003\u0002",
    "\u0002\u0002\u1113\u1114\u0003\u0002\u0002\u0002\u1114\u1116\u0003\u0002",
    "\u0002\u0002\u1115\u1113\u0003\u0002\u0002\u0002\u1116\u1117\u0007\u0002",
    "\u0002\u0003\u1117\u027f\u0003\u0002\u0002\u0002\u1118\u1119\u0005\u0194",
    "\u00cb\u0002\u1119\u111a\u0007\u0090\u0002\u0002\u111a\u111b\u0005\u001a",
    "\u000e\u0002\u111b\u111c\u0007\u0002\u0002\u0003\u111c\u0281\u0003\u0002",
    "\u0002\u0002\u111d\u1122\u0005\u00f0y\u0002\u111e\u111f\u0007\u0083",
    "\u0002\u0002\u111f\u1121\u0005\u00f0y\u0002\u1120\u111e\u0003\u0002",
    "\u0002\u0002\u1121\u1124\u0003\u0002\u0002\u0002\u1122\u1120\u0003\u0002",
    "\u0002\u0002\u1122\u1123\u0003\u0002\u0002\u0002\u1123\u1125\u0003\u0002",
    "\u0002\u0002\u1124\u1122\u0003\u0002\u0002\u0002\u1125\u1126\u0007\u0002",
    "\u0002\u0003\u1126\u0283\u0003\u0002\u0002\u0002\u1127\u112a\u0005\u0194",
    "\u00cb\u0002\u1128\u1129\u0007\u0090\u0002\u0002\u1129\u112b\u0005\u00f2",
    "z\u0002\u112a\u1128\u0003\u0002\u0002\u0002\u112a\u112b\u0003\u0002",
    "\u0002\u0002\u112b\u112c\u0003\u0002\u0002\u0002\u112c\u112d\u0007\u0002",
    "\u0002\u0003\u112d\u0285\u0003\u0002\u0002\u0002\u112e\u112f\u0005\u001a",
    "\u000e\u0002\u112f\u1130\u0007\u0002\u0002\u0003\u1130\u1135\u0003\u0002",
    "\u0002\u0002\u1131\u1132\u0005\u0126\u0094\u0002\u1132\u1133\u0007\u0002",
    "\u0002\u0003\u1133\u1135\u0003\u0002\u0002\u0002\u1134\u112e\u0003\u0002",
    "\u0002\u0002\u1134\u1131\u0003\u0002\u0002\u0002\u1135\u0287\u0003\u0002",
    "\u0002\u0002\u1136\u1137\u0005\u0006\u0004\u0002\u1137\u1138\u0007\u0002",
    "\u0002\u0003\u1138\u113c\u0003\u0002\u0002\u0002\u1139\u113a\u0007l",
    "\u0002\u0002\u113a\u113c\u0007\u0002\u0002\u0003\u113b\u1136\u0003\u0002",
    "\u0002\u0002\u113b\u1139\u0003\u0002\u0002\u0002\u113c\u0289\u0003\u0002",
    "\u0002\u0002\u113d\u113e\u0005\u0004\u0003\u0002\u113e\u113f\u0007\u0002",
    "\u0002\u0003\u113f\u028b\u0003\u0002\u0002\u0002\u1140\u1141\u0005\u008e",
    "H\u0002\u1141\u1142\u0007\u0002\u0002\u0003\u1142\u1146\u0003\u0002",
    "\u0002\u0002\u1143\u1144\u0007\u0085\u0002\u0002\u1144\u1146\u0007\u0002",
    "\u0002\u0003\u1145\u1140\u0003\u0002\u0002\u0002\u1145\u1143\u0003\u0002",
    "\u0002\u0002\u1146\u028d\u0003\u0002\u0002\u0002\u1147\u1148\u0005\u0102",
    "\u0082\u0002\u1148\u1149\u0007\u0002\u0002\u0003\u1149\u1152\u0003\u0002",
    "\u0002\u0002\u114a\u114d\u0005\u00fc\u007f\u0002\u114b\u114c\u0007\u0083",
    "\u0002\u0002\u114c\u114e\u0005\u0102\u0082\u0002\u114d\u114b\u0003\u0002",
    "\u0002\u0002\u114d\u114e\u0003\u0002\u0002\u0002\u114e\u114f\u0003\u0002",
    "\u0002\u0002\u114f\u1150\u0007\u0002\u0002\u0003\u1150\u1152\u0003\u0002",
    "\u0002\u0002\u1151\u1147\u0003\u0002\u0002\u0002\u1151\u114a\u0003\u0002",
    "\u0002\u0002\u1152\u028f\u0003\u0002\u0002\u0002\u1153\u1158\u0005\u00fe",
    "\u0080\u0002\u1154\u1155\u0007\u0083\u0002\u0002\u1155\u1157\u0005\u00fe",
    "\u0080\u0002\u1156\u1154\u0003\u0002\u0002\u0002\u1157\u115a\u0003\u0002",
    "\u0002\u0002\u1158\u1156\u0003\u0002\u0002\u0002\u1158\u1159\u0003\u0002",
    "\u0002\u0002\u1159\u115b\u0003\u0002\u0002\u0002\u115a\u1158\u0003\u0002",
    "\u0002\u0002\u115b\u115c\u0007\u0002\u0002\u0003\u115c\u0291\u0003\u0002",
    "\u0002\u0002\u115d\u115f\u0005\u0140\u00a1\u0002\u115e\u115d\u0003\u0002",
    "\u0002\u0002\u115e\u115f\u0003\u0002\u0002\u0002\u115f\u1161\u0003\u0002",
    "\u0002\u0002\u1160\u1162\u0005\u0100\u0081\u0002\u1161\u1160\u0003\u0002",
    "\u0002\u0002\u1161\u1162\u0003\u0002\u0002\u0002\u1162\u1163\u0003\u0002",
    "\u0002\u0002\u1163\u1164\u0005\u018e\u00c8\u0002\u1164\u1165\u0007\u0002",
    "\u0002\u0003\u1165\u1169\u0003\u0002\u0002\u0002\u1166\u1167\u0007\r",
    "\u0002\u0002\u1167\u1169\u0007\u0002\u0002\u0003\u1168\u115e\u0003\u0002",
    "\u0002\u0002\u1168\u1166\u0003\u0002\u0002\u0002\u1169\u0293\u0003\u0002",
    "\u0002\u0002\u116a\u116b\u0007Q\u0002\u0002\u116b\u1171\u0007\u0002",
    "\u0002\u0003\u116c\u116d\u0007I\u0002\u0002\u116d\u1171\u0007\u0002",
    "\u0002\u0003\u116e\u116f\u0007_\u0002\u0002\u116f\u1171\u0007\u0002",
    "\u0002\u0003\u1170\u116a\u0003\u0002\u0002\u0002\u1170\u116c\u0003\u0002",
    "\u0002\u0002\u1170\u116e\u0003\u0002\u0002\u0002\u1171\u0295\u0003\u0002",
    "\u0002\u0002\u1172\u1174\u0005\u0140\u00a1\u0002\u1173\u1172\u0003\u0002",
    "\u0002\u0002\u1173\u1174\u0003\u0002\u0002\u0002\u1174\u1175\u0003\u0002",
    "\u0002\u0002\u1175\u1176\u0007K\u0002\u0002\u1176\u1177\u0005\u0122",
    "\u0092\u0002\u1177\u1178\u0005\u0194\u00cb\u0002\u1178\u1179\u0007\u0002",
    "\u0002\u0003\u1179\u0297\u0003\u0002\u0002\u0002\u117a\u117c\u0005\u0140",
    "\u00a1\u0002\u117b\u117a\u0003\u0002\u0002\u0002\u117b\u117c\u0003\u0002",
    "\u0002\u0002\u117c\u117e\u0003\u0002\u0002\u0002\u117d\u117f\u0005\u010a",
    "\u0086\u0002\u117e\u117d\u0003\u0002\u0002\u0002\u117e\u117f\u0003\u0002",
    "\u0002\u0002\u117f\u118a\u0003\u0002\u0002\u0002\u1180\u1181\u00072",
    "\u0002\u0002\u1181\u1183\u0005\u010c\u0087\u0002\u1182\u1184\u0005\u0108",
    "\u0085\u0002\u1183\u1182\u0003\u0002\u0002\u0002\u1183\u1184\u0003\u0002",
    "\u0002\u0002\u1184\u118b\u0003\u0002\u0002\u0002\u1185\u1186\u0007W",
    "\u0002\u0002\u1186\u1188\u0005\u010c\u0087\u0002\u1187\u1189\u0005\u0106",
    "\u0084\u0002\u1188\u1187\u0003\u0002\u0002\u0002\u1188\u1189\u0003\u0002",
    "\u0002\u0002\u1189\u118b\u0003\u0002\u0002\u0002\u118a\u1180\u0003\u0002",
    "\u0002\u0002\u118a\u1185\u0003\u0002\u0002\u0002\u118b\u118c\u0003\u0002",
    "\u0002\u0002\u118c\u118d\u0007\u0002\u0002\u0003\u118d\u0299\u0003\u0002",
    "\u0002\u0002\u118e\u1190\u0005\u0140\u00a1\u0002\u118f\u118e\u0003\u0002",
    "\u0002\u0002\u118f\u1190\u0003\u0002\u0002\u0002\u1190\u1192\u0003\u0002",
    "\u0002\u0002\u1191\u1193\u0005\u010a\u0086\u0002\u1192\u1191\u0003\u0002",
    "\u0002\u0002\u1192\u1193\u0003\u0002\u0002\u0002\u1193\u1194\u0003\u0002",
    "\u0002\u0002\u1194\u1195\u00072\u0002\u0002\u1195\u1196\u0005\u010c",
    "\u0087\u0002\u1196\u1197\u0007\u0002\u0002\u0003\u1197\u029b\u0003\u0002",
    "\u0002\u0002\u1198\u119a\u0005\u0140\u00a1\u0002\u1199\u1198\u0003\u0002",
    "\u0002\u0002\u1199\u119a\u0003\u0002\u0002\u0002\u119a\u119c\u0003\u0002",
    "\u0002\u0002\u119b\u119d\u0005\u010a\u0086\u0002\u119c\u119b\u0003\u0002",
    "\u0002\u0002\u119c\u119d\u0003\u0002\u0002\u0002\u119d\u119e\u0003\u0002",
    "\u0002\u0002\u119e\u119f\u0007W\u0002\u0002\u119f\u11a0\u0005\u010c",
    "\u0087\u0002\u11a0\u11a1\u0007\u0002\u0002\u0003\u11a1\u029d\u0003\u0002",
    "\u0002\u0002\u11a2\u11a3\u0007N\u0002\u0002\u11a3\u11af\u0007\u0002",
    "\u0002\u0003\u11a4\u11a5\u0007:\u0002\u0002\u11a5\u11af\u0007\u0002",
    "\u0002\u0003\u11a6\u11a7\u0007M\u0002\u0002\u11a7\u11af\u0007\u0002",
    "\u0002\u0003\u11a8\u11a9\u0007N\u0002\u0002\u11a9\u11aa\u0007:\u0002",
    "\u0002\u11aa\u11af\u0007\u0002\u0002\u0003\u11ab\u11ac\u0007:\u0002",
    "\u0002\u11ac\u11ad\u0007N\u0002\u0002\u11ad\u11af\u0007\u0002\u0002",
    "\u0003\u11ae\u11a2\u0003\u0002\u0002\u0002\u11ae\u11a4\u0003\u0002\u0002",
    "\u0002\u11ae\u11a6\u0003\u0002\u0002\u0002\u11ae\u11a8\u0003\u0002\u0002",
    "\u0002\u11ae\u11ab\u0003\u0002\u0002\u0002\u11af\u029f\u0003\u0002\u0002",
    "\u0002\u11b0\u11b1\u0005\u008eH\u0002\u11b1\u11b2\u0007\u0002\u0002",
    "\u0003\u11b2\u11b6\u0003\u0002\u0002\u0002\u11b3\u11b4\u0007\u0085\u0002",
    "\u0002\u11b4\u11b6\u0007\u0002\u0002\u0003\u11b5\u11b0\u0003\u0002\u0002",
    "\u0002\u11b5\u11b3\u0003\u0002\u0002\u0002\u11b6\u02a1\u0003\u0002\u0002",
    "\u0002\u11b7\u11b9\u0005\u0140\u00a1\u0002\u11b8\u11b7\u0003\u0002\u0002",
    "\u0002\u11b8\u11b9\u0003\u0002\u0002\u0002\u11b9\u11c2\u0003\u0002\u0002",
    "\u0002\u11ba\u11bb\u0007\u000b\u0002\u0002\u11bb\u11bc\u0005\u008eH",
    "\u0002\u11bc\u11bd\u0005\u0112\u008a\u0002\u11bd\u11c3\u0003\u0002\u0002",
    "\u0002\u11be\u11bf\u0007R\u0002\u0002\u11bf\u11c0\u0005\u008eH\u0002",
    "\u11c0\u11c1\u0005\u0110\u0089\u0002\u11c1\u11c3\u0003\u0002\u0002\u0002",
    "\u11c2\u11ba\u0003\u0002\u0002\u0002\u11c2\u11be\u0003\u0002\u0002\u0002",
    "\u11c3\u11c4\u0003\u0002\u0002\u0002\u11c4\u11c5\u0007\u0002\u0002\u0003",
    "\u11c5\u02a3\u0003\u0002\u0002\u0002\u11c6\u11c8\u0005\u0140\u00a1\u0002",
    "\u11c7\u11c6\u0003\u0002\u0002\u0002\u11c7\u11c8\u0003\u0002\u0002\u0002",
    "\u11c8\u11c9\u0003\u0002\u0002\u0002\u11c9\u11ca\u0007\u000b\u0002\u0002",
    "\u11ca\u11cb\u0005\u008eH\u0002\u11cb\u11cc\u0007\u0002\u0002\u0003",
    "\u11cc\u02a5\u0003\u0002\u0002\u0002\u11cd\u11cf\u0005\u0140\u00a1\u0002",
    "\u11ce\u11cd\u0003\u0002\u0002\u0002\u11ce\u11cf\u0003\u0002\u0002\u0002",
    "\u11cf\u11d0\u0003\u0002\u0002\u0002\u11d0\u11d1\u0007R\u0002\u0002",
    "\u11d1\u11d2\u0005\u008eH\u0002\u11d2\u11d3\u0007\u0002\u0002\u0003",
    "\u11d3\u02a7\u0003\u0002\u0002\u0002\u11d4\u11d5\u0007\u0086\u0002\u0002",
    "\u11d5\u1202\u0007\u0002\u0002\u0003\u11d6\u11d7\u0007\u0087\u0002\u0002",
    "\u11d7\u1202\u0007\u0002\u0002\u0003\u11d8\u11d9\u0007\u008e\u0002\u0002",
    "\u11d9\u1202\u0007\u0002\u0002\u0003\u11da\u11db\u0007\u008f\u0002\u0002",
    "\u11db\u1202\u0007\u0002\u0002\u0003\u11dc\u11dd\u0007\u0096\u0002\u0002",
    "\u11dd\u1202\u0007\u0002\u0002\u0003\u11de\u11df\u0007\u0097\u0002\u0002",
    "\u11df\u1202\u0007\u0002\u0002\u0003\u11e0\u11e1\u0007a\u0002\u0002",
    "\u11e1\u1202\u0007\u0002\u0002\u0003\u11e2\u11e3\u0007+\u0002\u0002",
    "\u11e3\u1202\u0007\u0002\u0002\u0003\u11e4\u11e5\u0007\u0088\u0002\u0002",
    "\u11e5\u1202\u0007\u0002\u0002\u0003\u11e6\u11e7\u0007\u0089\u0002\u0002",
    "\u11e7\u1202\u0007\u0002\u0002\u0003\u11e8\u11e9\u0007\u008a\u0002\u0002",
    "\u11e9\u1202\u0007\u0002\u0002\u0003\u11ea\u11eb\u0007\u008b\u0002\u0002",
    "\u11eb\u1202\u0007\u0002\u0002\u0003\u11ec\u11ed\u0007\u008c\u0002\u0002",
    "\u11ed\u1202\u0007\u0002\u0002\u0003\u11ee\u11ef\u0007\u008d\u0002\u0002",
    "\u11ef\u1202\u0007\u0002\u0002\u0003\u11f0\u11f1\u0007\u00a7\u0002\u0002",
    "\u11f1\u1202\u0007\u0002\u0002\u0003\u11f2\u11f3\u0005\u015a\u00ae\u0002",
    "\u11f3\u11f4\u0007\u0002\u0002\u0003\u11f4\u1202\u0003\u0002\u0002\u0002",
    "\u11f5\u11f6\u0007\u009b\u0002\u0002\u11f6\u1202\u0007\u0002\u0002\u0003",
    "\u11f7\u11f8\u0007\u009c\u0002\u0002\u11f8\u1202\u0007\u0002\u0002\u0003",
    "\u11f9\u11fa\u0007\u0092\u0002\u0002\u11fa\u1202\u0007\u0002\u0002\u0003",
    "\u11fb\u11fc\u0007\u0091\u0002\u0002\u11fc\u1202\u0007\u0002\u0002\u0003",
    "\u11fd\u11fe\u0007\u009e\u0002\u0002\u11fe\u1202\u0007\u0002\u0002\u0003",
    "\u11ff\u1200\u0007\u009d\u0002\u0002\u1200\u1202\u0007\u0002\u0002\u0003",
    "\u1201\u11d4\u0003\u0002\u0002\u0002\u1201\u11d6\u0003\u0002\u0002\u0002",
    "\u1201\u11d8\u0003\u0002\u0002\u0002\u1201\u11da\u0003\u0002\u0002\u0002",
    "\u1201\u11dc\u0003\u0002\u0002\u0002\u1201\u11de\u0003\u0002\u0002\u0002",
    "\u1201\u11e0\u0003\u0002\u0002\u0002\u1201\u11e2\u0003\u0002\u0002\u0002",
    "\u1201\u11e4\u0003\u0002\u0002\u0002\u1201\u11e6\u0003\u0002\u0002\u0002",
    "\u1201\u11e8\u0003\u0002\u0002\u0002\u1201\u11ea\u0003\u0002\u0002\u0002",
    "\u1201\u11ec\u0003\u0002\u0002\u0002\u1201\u11ee\u0003\u0002\u0002\u0002",
    "\u1201\u11f0\u0003\u0002\u0002\u0002\u1201\u11f2\u0003\u0002\u0002\u0002",
    "\u1201\u11f5\u0003\u0002\u0002\u0002\u1201\u11f7\u0003\u0002\u0002\u0002",
    "\u1201\u11f9\u0003\u0002\u0002\u0002\u1201\u11fb\u0003\u0002\u0002\u0002",
    "\u1201\u11fd\u0003\u0002\u0002\u0002\u1201\u11ff\u0003\u0002\u0002\u0002",
    "\u1202\u02a9\u0003\u0002\u0002\u0002\u1203\u1204\t\r\u0002\u0002\u1204",
    "\u1205\u0007G\u0002\u0002\u1205\u1206\u0005\u0006\u0004\u0002\u1206",
    "\u1207\u0007\u0080\u0002\u0002\u1207\u1208\u0005\u018e\u00c8\u0002\u1208",
    "\u1209\u0007\u0081\u0002\u0002\u1209\u120a\u0007\u0002\u0002\u0003\u120a",
    "\u02ab\u0003\u0002\u0002\u0002\u120b\u120c\u0007\u0084\u0002\u0002\u120c",
    "\u120d\t\u000e\u0002\u0002\u120d\u120f\u0007\u0080\u0002\u0002\u120e",
    "\u1210\u0005\u0016\f\u0002\u120f\u120e\u0003\u0002\u0002\u0002\u120f",
    "\u1210\u0003\u0002\u0002\u0002\u1210\u1211\u0003\u0002\u0002\u0002\u1211",
    "\u1212\u0007\u0081\u0002\u0002\u1212\u1213\u0007\u0002\u0002\u0003\u1213",
    "\u02ad\u0003\u0002\u0002\u0002\u1214\u1215\u0005\u008eH\u0002\u1215",
    "\u1216\u0007\u0002\u0002\u0003\u1216\u121a\u0003\u0002\u0002\u0002\u1217",
    "\u1218\u0007\u0085\u0002\u0002\u1218\u121a\u0007\u0002\u0002\u0003\u1219",
    "\u1214\u0003\u0002\u0002\u0002\u1219\u1217\u0003\u0002\u0002\u0002\u121a",
    "\u02af\u0003\u0002\u0002\u0002\u121b\u121c\u0007\u0084\u0002\u0002\u121c",
    "\u121d\u0005\u00ceh\u0002\u121d\u121e\u0007\u0002\u0002\u0003\u121e",
    "\u02b1\u0003\u0002\u0002\u0002\u121f\u1223\u0007|\u0002\u0002\u1220",
    "\u1222\u0005\u0120\u0091\u0002\u1221\u1220\u0003\u0002\u0002\u0002\u1222",
    "\u1225\u0003\u0002\u0002\u0002\u1223\u1221\u0003\u0002\u0002\u0002\u1223",
    "\u1224\u0003\u0002\u0002\u0002\u1224\u1226\u0003\u0002\u0002\u0002\u1225",
    "\u1223\u0003\u0002\u0002\u0002\u1226\u1227\u0007}\u0002\u0002\u1227",
    "\u1228\u0007\u0002\u0002\u0003\u1228\u02b3\u0003\u0002\u0002\u0002\u1229",
    "\u122b\u0005\u0140\u00a1\u0002\u122a\u1229\u0003\u0002\u0002\u0002\u122a",
    "\u122b\u0003\u0002\u0002\u0002\u122b\u122d\u0003\u0002\u0002\u0002\u122c",
    "\u122e\u0005\u00e2r\u0002\u122d\u122c\u0003\u0002\u0002\u0002\u122d",
    "\u122e\u0003\u0002\u0002\u0002\u122e\u1239\u0003\u0002\u0002\u0002\u122f",
    "\u123a\u0005\u00e6t\u0002\u1230\u1231\u0007-\u0002\u0002\u1231\u1233",
    "\u0005\u0006\u0004\u0002\u1232\u1234\u0005\u0154\u00ab\u0002\u1233\u1232",
    "\u0003\u0002\u0002\u0002\u1234\u1235\u0003\u0002\u0002\u0002\u1235\u1233",
    "\u0003\u0002\u0002\u0002\u1235\u1236\u0003\u0002\u0002\u0002\u1236\u1237",
    "\u0003\u0002\u0002\u0002\u1237\u1238\u0007\u0085\u0002\u0002\u1238\u123a",
    "\u0003\u0002\u0002\u0002\u1239\u122f\u0003\u0002\u0002\u0002\u1239\u1230",
    "\u0003\u0002\u0002\u0002\u123a\u123b\u0003\u0002\u0002\u0002\u123b\u123c",
    "\u0007\u0002\u0002\u0003\u123c\u02b5\u0003\u0002\u0002\u0002\u123d\u1245",
    "\u0005\b\u0005\u0002\u123e\u1240\t\u000f\u0002\u0002\u123f\u123e\u0003",
    "\u0002\u0002\u0002\u1240\u1243\u0003\u0002\u0002\u0002\u1241\u123f\u0003",
    "\u0002\u0002\u0002\u1241\u1242\u0003\u0002\u0002\u0002\u1242\u1244\u0003",
    "\u0002\u0002\u0002\u1243\u1241\u0003\u0002\u0002\u0002\u1244\u1246\u0005",
    "\u0124\u0093\u0002\u1245\u1241\u0003\u0002\u0002\u0002\u1246\u1247\u0003",
    "\u0002\u0002\u0002\u1247\u1245\u0003\u0002\u0002\u0002\u1247\u1248\u0003",
    "\u0002\u0002\u0002\u1248\u1249\u0003\u0002\u0002\u0002\u1249\u124a\u0007",
    "\u0002\u0002\u0003\u124a\u02b7\u0003\u0002\u0002\u0002\u124b\u124f\u0007",
    "~\u0002\u0002\u124c\u124e\u0007\u0083\u0002\u0002\u124d\u124c\u0003",
    "\u0002\u0002\u0002\u124e\u1251\u0003\u0002\u0002\u0002\u124f\u124d\u0003",
    "\u0002\u0002\u0002\u124f\u1250\u0003\u0002\u0002\u0002\u1250\u1252\u0003",
    "\u0002\u0002\u0002\u1251\u124f\u0003\u0002\u0002\u0002\u1252\u1253\u0007",
    "\u007f\u0002\u0002\u1253\u1254\u0007\u0002\u0002\u0003\u1254\u02b9\u0003",
    "\u0002\u0002\u0002\u1255\u1261\u0007|\u0002\u0002\u1256\u125b\u0005",
    "\u00f2z\u0002\u1257\u1258\u0007\u0083\u0002\u0002\u1258\u125a\u0005",
    "\u00f2z\u0002\u1259\u1257\u0003\u0002\u0002\u0002\u125a\u125d\u0003",
    "\u0002\u0002\u0002\u125b\u1259\u0003\u0002\u0002\u0002\u125b\u125c\u0003",
    "\u0002\u0002\u0002\u125c\u125f\u0003\u0002\u0002\u0002\u125d\u125b\u0003",
    "\u0002\u0002\u0002\u125e\u1260\u0007\u0083\u0002\u0002\u125f\u125e\u0003",
    "\u0002\u0002\u0002\u125f\u1260\u0003\u0002\u0002\u0002\u1260\u1262\u0003",
    "\u0002\u0002\u0002\u1261\u1256\u0003\u0002\u0002\u0002\u1261\u1262\u0003",
    "\u0002\u0002\u0002\u1262\u1263\u0003\u0002\u0002\u0002\u1263\u1264\u0007",
    "}\u0002\u0002\u1264\u1265\u0007\u0002\u0002\u0003\u1265\u02bb\u0003",
    "\u0002\u0002\u0002\u1266\u1267\u0007\u0091\u0002\u0002\u1267\u126c\u0005",
    "\u012a\u0096\u0002\u1268\u1269\u0007\u0083\u0002\u0002\u1269\u126b\u0005",
    "\u012a\u0096\u0002\u126a\u1268\u0003\u0002\u0002\u0002\u126b\u126e\u0003",
    "\u0002\u0002\u0002\u126c\u126a\u0003\u0002\u0002\u0002\u126c\u126d\u0003",
    "\u0002\u0002\u0002\u126d\u126f\u0003\u0002\u0002\u0002\u126e\u126c\u0003",
    "\u0002\u0002\u0002\u126f\u1270\u0007\u0092\u0002\u0002\u1270\u1271\u0007",
    "\u0002\u0002\u0003\u1271\u02bd\u0003\u0002\u0002\u0002\u1272\u1274\u0005",
    "\u0140\u00a1\u0002\u1273\u1272\u0003\u0002\u0002\u0002\u1273\u1274\u0003",
    "\u0002\u0002\u0002\u1274\u1276\u0003\u0002\u0002\u0002\u1275\u1277\u0005",
    "\u012c\u0097\u0002\u1276\u1275\u0003\u0002\u0002\u0002\u1276\u1277\u0003",
    "\u0002\u0002\u0002\u1277\u1278\u0003\u0002\u0002\u0002\u1278\u1279\u0005",
    "\u0194\u00cb\u0002\u1279\u127a\u0007\u0002\u0002\u0003\u127a\u02bf\u0003",
    "\u0002\u0002\u0002\u127b\u127c\u00077\u0002\u0002\u127c\u1280\u0007",
    "\u0002\u0002\u0003\u127d\u127e\u0007I\u0002\u0002\u127e\u1280\u0007",
    "\u0002\u0002\u0003\u127f\u127b\u0003\u0002\u0002\u0002\u127f\u127d\u0003",
    "\u0002\u0002\u0002\u1280\u02c1\u0003\u0002\u0002\u0002\u1281\u1282\u0007",
    "\u0084\u0002\u0002\u1282\u1283\u0005\u00ceh\u0002\u1283\u1284\u0007",
    "\u0002\u0002\u0003\u1284\u02c3\u0003\u0002\u0002\u0002\u1285\u1289\u0007",
    "|\u0002\u0002\u1286\u1288\u0005\u0132\u009a\u0002\u1287\u1286\u0003",
    "\u0002\u0002\u0002\u1288\u128b\u0003\u0002\u0002\u0002\u1289\u1287\u0003",
    "\u0002\u0002\u0002\u1289\u128a\u0003\u0002\u0002\u0002\u128a\u128c\u0003",
    "\u0002\u0002\u0002\u128b\u1289\u0003\u0002\u0002\u0002\u128c\u128d\u0007",
    "}\u0002\u0002\u128d\u128e\u0007\u0002\u0002\u0003\u128e\u02c5\u0003",
    "\u0002\u0002\u0002\u128f\u1291\u0005\u0140\u00a1\u0002\u1290\u128f\u0003",
    "\u0002\u0002\u0002\u1290\u1291\u0003\u0002\u0002\u0002\u1291\u1293\u0003",
    "\u0002\u0002\u0002\u1292\u1294\u0007C\u0002\u0002\u1293\u1292\u0003",
    "\u0002\u0002\u0002\u1293\u1294\u0003\u0002\u0002\u0002\u1294\u12d0\u0003",
    "\u0002\u0002\u0002\u1295\u1297\u0007g\u0002\u0002\u1296\u1295\u0003",
    "\u0002\u0002\u0002\u1296\u1297\u0003\u0002\u0002\u0002\u1297\u1298\u0003",
    "\u0002\u0002\u0002\u1298\u12b4\u0005\u0006\u0004\u0002\u1299\u129b\u0005",
    "\u0194\u00cb\u0002\u129a\u129c\u0005\u00c8e\u0002\u129b\u129a\u0003",
    "\u0002\u0002\u0002\u129b\u129c\u0003\u0002\u0002\u0002\u129c\u129d\u0003",
    "\u0002\u0002\u0002\u129d\u129f\u0007\u0080\u0002\u0002\u129e\u12a0\u0005",
    "\u00fa~\u0002\u129f\u129e\u0003\u0002\u0002\u0002\u129f\u12a0\u0003",
    "\u0002\u0002\u0002\u12a0\u12a1\u0003\u0002\u0002\u0002\u12a1\u12a3\u0007",
    "\u0081\u0002\u0002\u12a2\u12a4\u0005\u00d0i\u0002\u12a3\u12a2\u0003",
    "\u0002\u0002\u0002\u12a3\u12a4\u0003\u0002\u0002\u0002\u12a4\u12a5\u0003",
    "\u0002\u0002\u0002\u12a5\u12a6\u0007\u0085\u0002\u0002\u12a6\u12b5\u0003",
    "\u0002\u0002\u0002\u12a7\u12a8\u0005\u0194\u00cb\u0002\u12a8\u12a9\u0007",
    "|\u0002\u0002\u12a9\u12aa\u0005\u0134\u009b\u0002\u12aa\u12ab\u0007",
    "}\u0002\u0002\u12ab\u12b5\u0003\u0002\u0002\u0002\u12ac\u12ad\u0007",
    "_\u0002\u0002\u12ad\u12ae\u0007~\u0002\u0002\u12ae\u12af\u0005\u00fa",
    "~\u0002\u12af\u12b0\u0007\u007f\u0002\u0002\u12b0\u12b1\u0007|\u0002",
    "\u0002\u12b1\u12b2\u0005\u0134\u009b\u0002\u12b2\u12b3\u0007}\u0002",
    "\u0002\u12b3\u12b5\u0003\u0002\u0002\u0002\u12b4\u1299\u0003\u0002\u0002",
    "\u0002\u12b4\u12a7\u0003\u0002\u0002\u0002\u12b4\u12ac\u0003\u0002\u0002",
    "\u0002\u12b5\u12b6\u0003\u0002\u0002\u0002\u12b6\u12b7\u0007\u0002\u0002",
    "\u0003\u12b7\u12d1\u0003\u0002\u0002\u0002\u12b8\u12ba\u0007g\u0002",
    "\u0002\u12b9\u12b8\u0003\u0002\u0002\u0002\u12b9\u12ba\u0003\u0002\u0002",
    "\u0002\u12ba\u12bb\u0003\u0002\u0002\u0002\u12bb\u12bc\u0007l\u0002",
    "\u0002\u12bc\u12be\u0005\u0194\u00cb\u0002\u12bd\u12bf\u0005\u00c8e",
    "\u0002\u12be\u12bd\u0003\u0002\u0002\u0002\u12be\u12bf\u0003\u0002\u0002",
    "\u0002\u12bf\u12c0\u0003\u0002\u0002\u0002\u12c0\u12c2\u0007\u0080\u0002",
    "\u0002\u12c1\u12c3\u0005\u00fa~\u0002\u12c2\u12c1\u0003\u0002\u0002",
    "\u0002\u12c2\u12c3\u0003\u0002\u0002\u0002\u12c3\u12c4\u0003\u0002\u0002",
    "\u0002\u12c4\u12c6\u0007\u0081\u0002\u0002\u12c5\u12c7\u0005\u00d0i",
    "\u0002\u12c6\u12c5\u0003\u0002\u0002\u0002\u12c6\u12c7\u0003\u0002\u0002",
    "\u0002\u12c7\u12c8\u0003\u0002\u0002\u0002\u12c8\u12c9\u0007\u0085\u0002",
    "\u0002\u12c9\u12ca\u0007\u0002\u0002\u0003\u12ca\u12d1\u0003\u0002\u0002",
    "\u0002\u12cb\u12cc\u0007(\u0002\u0002\u12cc\u12cd\u0005\u0006\u0004",
    "\u0002\u12cd\u12ce\u0005\u0194\u00cb\u0002\u12ce\u12cf\u0007\u0085\u0002",
    "\u0002\u12cf\u12d1\u0003\u0002\u0002\u0002\u12d0\u1296\u0003\u0002\u0002",
    "\u0002\u12d0\u12b9\u0003\u0002\u0002\u0002\u12d0\u12cb\u0003\u0002\u0002",
    "\u0002\u12d1\u12d2\u0003\u0002\u0002\u0002\u12d2\u12d3\u0007\u0002\u0002",
    "\u0003\u12d3\u02c7\u0003\u0002\u0002\u0002\u12d4\u12d6\u0005\u0140\u00a1",
    "\u0002\u12d5\u12d4\u0003\u0002\u0002\u0002\u12d5\u12d6\u0003\u0002\u0002",
    "\u0002\u12d6\u12e9\u0003\u0002\u0002\u0002\u12d7\u12d8\u00072\u0002",
    "\u0002\u12d8\u12de\u0007\u0085\u0002\u0002\u12d9\u12db\u0005\u0140\u00a1",
    "\u0002\u12da\u12d9\u0003\u0002\u0002\u0002\u12da\u12db\u0003\u0002\u0002",
    "\u0002\u12db\u12dc\u0003\u0002\u0002\u0002\u12dc\u12dd\u0007W\u0002",
    "\u0002\u12dd\u12df\u0007\u0085\u0002\u0002\u12de\u12da\u0003\u0002\u0002",
    "\u0002\u12de\u12df\u0003\u0002\u0002\u0002\u12df\u12ea\u0003\u0002\u0002",
    "\u0002\u12e0\u12e1\u0007W\u0002\u0002\u12e1\u12e7\u0007\u0085\u0002",
    "\u0002\u12e2\u12e4\u0005\u0140\u00a1\u0002\u12e3\u12e2\u0003\u0002\u0002",
    "\u0002\u12e3\u12e4\u0003\u0002\u0002\u0002\u12e4\u12e5\u0003\u0002\u0002",
    "\u0002\u12e5\u12e6\u00072\u0002\u0002\u12e6\u12e8\u0007\u0085\u0002",
    "\u0002\u12e7\u12e3\u0003\u0002\u0002\u0002\u12e7\u12e8\u0003\u0002\u0002",
    "\u0002\u12e8\u12ea\u0003\u0002\u0002\u0002\u12e9\u12d7\u0003\u0002\u0002",
    "\u0002\u12e9\u12e0\u0003\u0002\u0002\u0002\u12ea\u12eb\u0003\u0002\u0002",
    "\u0002\u12eb\u12ec\u0007\u0002\u0002\u0003\u12ec\u02c9\u0003\u0002\u0002",
    "\u0002\u12ed\u12ee\u0007\u0084\u0002\u0002\u12ee\u12ef\u0005\u0006\u0004",
    "\u0002\u12ef\u12f0\u0007\u0002\u0002\u0003\u12f0\u02cb\u0003\u0002\u0002",
    "\u0002\u12f1\u12fd\u0007|\u0002\u0002\u12f2\u12f7\u0005\u013a\u009e",
    "\u0002\u12f3\u12f4\u0007\u0083\u0002\u0002\u12f4\u12f6\u0005\u013a\u009e",
    "\u0002\u12f5\u12f3\u0003\u0002\u0002\u0002\u12f6\u12f9\u0003\u0002\u0002",
    "\u0002\u12f7\u12f5\u0003\u0002\u0002\u0002\u12f7\u12f8\u0003\u0002\u0002",
    "\u0002\u12f8\u12fb\u0003\u0002\u0002\u0002\u12f9\u12f7\u0003\u0002\u0002",
    "\u0002\u12fa\u12fc\u0007\u0083\u0002\u0002\u12fb\u12fa\u0003\u0002\u0002",
    "\u0002\u12fb\u12fc\u0003\u0002\u0002\u0002\u12fc\u12fe\u0003\u0002\u0002",
    "\u0002\u12fd\u12f2\u0003\u0002\u0002\u0002\u12fd\u12fe\u0003\u0002\u0002",
    "\u0002\u12fe\u12ff\u0003\u0002\u0002\u0002\u12ff\u1300\u0007}\u0002",
    "\u0002\u1300\u1301\u0007\u0002\u0002\u0003\u1301\u02cd\u0003\u0002\u0002",
    "\u0002\u1302\u1304\u0005\u0140\u00a1\u0002\u1303\u1302\u0003\u0002\u0002",
    "\u0002\u1303\u1304\u0003\u0002\u0002\u0002\u1304\u1305\u0003\u0002\u0002",
    "\u0002\u1305\u1308\u0005\u0194\u00cb\u0002\u1306\u1307\u0007\u0090\u0002",
    "\u0002\u1307\u1309\u0005\u001a\u000e\u0002\u1308\u1306\u0003\u0002\u0002",
    "\u0002\u1308\u1309\u0003\u0002\u0002\u0002\u1309\u130a\u0003\u0002\u0002",
    "\u0002\u130a\u130b\u0007\u0002\u0002\u0003\u130b\u02cf\u0003\u0002\u0002",
    "\u0002\u130c\u130d\u0007~\u0002\u0002\u130d\u130e\u0005\u013e\u00a0",
    "\u0002\u130e\u130f\u0007\u0084\u0002\u0002\u130f\u1311\u0005\u0146\u00a4",
    "\u0002\u1310\u1312\u0007\u0083\u0002\u0002\u1311\u1310\u0003\u0002\u0002",
    "\u0002\u1311\u1312\u0003\u0002\u0002\u0002\u1312\u1313\u0003\u0002\u0002",
    "\u0002\u1313\u1314\u0007\u007f\u0002\u0002\u1314\u1315\u0007\u0002\u0002",
    "\u0003\u1315\u02d1\u0003\u0002\u0002\u0002\u1316\u1317\u0005\u016e\u00b8",
    "\u0002\u1317\u1318\u0007\u0002\u0002\u0003\u1318\u131d\u0003\u0002\u0002",
    "\u0002\u1319\u131a\u0005\u0194\u00cb\u0002\u131a\u131b\u0007\u0002\u0002",
    "\u0003\u131b\u131d\u0003\u0002\u0002\u0002\u131c\u1316\u0003\u0002\u0002",
    "\u0002\u131c\u1319\u0003\u0002\u0002\u0002\u131d\u02d3\u0003\u0002\u0002",
    "\u0002\u131e\u1320\u0005\u0142\u00a2\u0002\u131f\u131e\u0003\u0002\u0002",
    "\u0002\u1320\u1321\u0003\u0002\u0002\u0002\u1321\u131f\u0003\u0002\u0002",
    "\u0002\u1321\u1322\u0003\u0002\u0002\u0002\u1322\u1323\u0003\u0002\u0002",
    "\u0002\u1323\u1324\u0007\u0002\u0002\u0003\u1324\u02d5\u0003\u0002\u0002",
    "\u0002\u1325\u1329\u0007~\u0002\u0002\u1326\u1327\u0005\u0144\u00a3",
    "\u0002\u1327\u1328\u0007\u0084\u0002\u0002\u1328\u132a\u0003\u0002\u0002",
    "\u0002\u1329\u1326\u0003\u0002\u0002\u0002\u1329\u132a\u0003\u0002\u0002",
    "\u0002\u132a\u132b\u0003\u0002\u0002\u0002\u132b\u132d\u0005\u0146\u00a4",
    "\u0002\u132c\u132e\u0007\u0083\u0002\u0002\u132d\u132c\u0003\u0002\u0002",
    "\u0002\u132d\u132e\u0003\u0002\u0002\u0002\u132e\u132f\u0003\u0002\u0002",
    "\u0002\u132f\u1330\u0007\u007f\u0002\u0002\u1330\u1331\u0007\u0002\u0002",
    "\u0003\u1331\u02d7\u0003\u0002\u0002\u0002\u1332\u1333\u0005\u016e\u00b8",
    "\u0002\u1333\u1334\u0007\u0002\u0002\u0003\u1334\u1339\u0003\u0002\u0002",
    "\u0002\u1335\u1336\u0005\u0194\u00cb\u0002\u1336\u1337\u0007\u0002\u0002",
    "\u0003\u1337\u1339\u0003\u0002\u0002\u0002\u1338\u1332\u0003\u0002\u0002",
    "\u0002\u1338\u1335\u0003\u0002\u0002\u0002\u1339\u02d9\u0003\u0002\u0002",
    "\u0002\u133a\u133f\u0005\u0148\u00a5\u0002\u133b\u133c\u0007\u0083\u0002",
    "\u0002\u133c\u133e\u0005\u0148\u00a5\u0002\u133d\u133b\u0003\u0002\u0002",
    "\u0002\u133e\u1341\u0003\u0002\u0002\u0002\u133f\u133d\u0003\u0002\u0002",
    "\u0002\u133f\u1340\u0003\u0002\u0002\u0002\u1340\u1342\u0003\u0002\u0002",
    "\u0002\u1341\u133f\u0003\u0002\u0002\u0002\u1342\u1343\u0007\u0002\u0002",
    "\u0003\u1343\u02db\u0003\u0002\u0002\u0002\u1344\u1351\u0005\u0004\u0003",
    "\u0002\u1345\u134e\u0007\u0080\u0002\u0002\u1346\u134b\u0005\u014a\u00a6",
    "\u0002\u1347\u1348\u0007\u0083\u0002\u0002\u1348\u134a\u0005\u014a\u00a6",
    "\u0002\u1349\u1347\u0003\u0002\u0002\u0002\u134a\u134d\u0003\u0002\u0002",
    "\u0002\u134b\u1349\u0003\u0002\u0002\u0002\u134b\u134c\u0003\u0002\u0002",
    "\u0002\u134c\u134f\u0003\u0002\u0002\u0002\u134d\u134b\u0003\u0002\u0002",
    "\u0002\u134e\u1346\u0003\u0002\u0002\u0002\u134e\u134f\u0003\u0002\u0002",
    "\u0002\u134f\u1350\u0003\u0002\u0002\u0002\u1350\u1352\u0007\u0081\u0002",
    "\u0002\u1351\u1345\u0003\u0002\u0002\u0002\u1351\u1352\u0003\u0002\u0002",
    "\u0002\u1352\u1353\u0003\u0002\u0002\u0002\u1353\u1354\u0007\u0002\u0002",
    "\u0003\u1354\u02dd\u0003\u0002\u0002\u0002\u1355\u1356\u0005\u0194\u00cb",
    "\u0002\u1356\u1357\u0007\u0084\u0002\u0002\u1357\u1359\u0003\u0002\u0002",
    "\u0002\u1358\u1355\u0003\u0002\u0002\u0002\u1358\u1359\u0003\u0002\u0002",
    "\u0002\u1359\u135a\u0003\u0002\u0002\u0002\u135a\u135b\u0005\u001a\u000e",
    "\u0002\u135b\u135c\u0007\u0002\u0002\u0003\u135c\u02df\u0003\u0002\u0002",
    "\u0002\u135d\u1360\u0005\n\u0006\u0002\u135e\u1360\u0005\u0012\n\u0002",
    "\u135f\u135d\u0003\u0002\u0002\u0002\u135f\u135e\u0003\u0002\u0002\u0002",
    "\u1360\u1365\u0003\u0002\u0002\u0002\u1361\u1364\u0005\u0124\u0093\u0002",
    "\u1362\u1364\u0007\u0093\u0002\u0002\u1363\u1361\u0003\u0002\u0002\u0002",
    "\u1363\u1362\u0003\u0002\u0002\u0002\u1364\u1367\u0003\u0002\u0002\u0002",
    "\u1365\u1363\u0003\u0002\u0002\u0002\u1365\u1366\u0003\u0002\u0002\u0002",
    "\u1366\u1368\u0003\u0002\u0002\u0002\u1367\u1365\u0003\u0002\u0002\u0002",
    "\u1368\u1369\u0007\u0088\u0002\u0002\u1369\u136a\u0007\u0002\u0002\u0003",
    "\u136a\u136f\u0003\u0002\u0002\u0002\u136b\u136c\u0007l\u0002\u0002",
    "\u136c\u136d\u0007\u0088\u0002\u0002\u136d\u136f\u0007\u0002\u0002\u0003",
    "\u136e\u135f\u0003\u0002\u0002\u0002\u136e\u136b\u0003\u0002\u0002\u0002",
    "\u136f\u02e1\u0003\u0002\u0002\u0002\u1370\u1375\u0005\u0150\u00a9\u0002",
    "\u1371\u1372\u0007\u0083\u0002\u0002\u1372\u1374\u0005\u0150\u00a9\u0002",
    "\u1373\u1371\u0003\u0002\u0002\u0002\u1374\u1377\u0003\u0002\u0002\u0002",
    "\u1375\u1373\u0003\u0002\u0002\u0002\u1375\u1376\u0003\u0002\u0002\u0002",
    "\u1376\u1378\u0003\u0002\u0002\u0002\u1377\u1375\u0003\u0002\u0002\u0002",
    "\u1378\u1379\u0007\u0002\u0002\u0003\u1379\u02e3\u0003\u0002\u0002\u0002",
    "\u137a\u137b\u0005\u0194\u00cb\u0002\u137b\u137c\u0007\u0090\u0002\u0002",
    "\u137c\u137d\u0005\u0152\u00aa\u0002\u137d\u137e\u0007\u0002\u0002\u0003",
    "\u137e\u02e5\u0003\u0002\u0002\u0002\u137f\u1381\u0007\u008b\u0002\u0002",
    "\u1380\u137f\u0003\u0002\u0002\u0002\u1380\u1381\u0003\u0002\u0002\u0002",
    "\u1381\u1382\u0003\u0002\u0002\u0002\u1382\u1383\u0005\u001a\u000e\u0002",
    "\u1383\u1384\u0007\u0002\u0002\u0003\u1384\u1389\u0003\u0002\u0002\u0002",
    "\u1385\u1386\u0005\u0156\u00ac\u0002\u1386\u1387\u0007\u0002\u0002\u0003",
    "\u1387\u1389\u0003\u0002\u0002\u0002\u1388\u1380\u0003\u0002\u0002\u0002",
    "\u1388\u1385\u0003\u0002\u0002\u0002\u1389\u02e7\u0003\u0002\u0002\u0002",
    "\u138a\u138b\u0005\u0194\u00cb\u0002\u138b\u138c\u0007~\u0002\u0002",
    "\u138c\u138d\u0005\u001a\u000e\u0002\u138d\u138e\u0007\u007f\u0002\u0002",
    "\u138e\u138f\u0007\u0002\u0002\u0003\u138f\u02e9\u0003\u0002\u0002\u0002",
    "\u1390\u1391\u0007Z\u0002\u0002\u1391\u1392\u0005\u0006\u0004\u0002",
    "\u1392\u1393\u0007~\u0002\u0002\u1393\u1394\u0005\u001a\u000e\u0002",
    "\u1394\u1395\u0007\u007f\u0002\u0002\u1395\u1396\u0007\u0002\u0002\u0003",
    "\u1396\u02eb\u0003\u0002\u0002\u0002\u1397\u1398\u0007\u0090\u0002\u0002",
    "\u1398\u1399\u0007\u0092\u0002\u0002\u1399\u139a\u0006\u0177\u0005\u0003",
    "\u139a\u139b\u0007\u0002\u0002\u0003\u139b\u02ed\u0003\u0002\u0002\u0002",
    "\u139c\u139d\u0007\u0092\u0002\u0002\u139d\u139e\u0007\u0092\u0002\u0002",
    "\u139e\u139f\u0006\u0178\u0006\u0003\u139f\u13a0\u0007\u0002\u0002\u0003",
    "\u13a0\u02ef\u0003\u0002\u0002\u0002\u13a1\u13a2\u0007\u0092\u0002\u0002",
    "\u13a2\u13a3\u0007\u009e\u0002\u0002\u13a3\u13a4\u0006\u0179\u0007\u0003",
    "\u13a4\u13a5\u0007\u0002\u0002\u0003\u13a5\u02f1\u0003\u0002\u0002\u0002",
    "\u13a6\u13a7\u0005\u0160\u00b1\u0002\u13a7\u13a8\u0007\u0002\u0002\u0003",
    "\u13a8\u13b7\u0003\u0002\u0002\u0002\u13a9\u13aa\u0005\u0162\u00b2\u0002",
    "\u13aa\u13ab\u0007\u0002\u0002\u0003\u13ab\u13b7\u0003\u0002\u0002\u0002",
    "\u13ac\u13ad\u0007t\u0002\u0002\u13ad\u13b7\u0007\u0002\u0002\u0003",
    "\u13ae\u13af\u0007u\u0002\u0002\u13af\u13b7\u0007\u0002\u0002\u0003",
    "\u13b0\u13b1\u0007v\u0002\u0002\u13b1\u13b7\u0007\u0002\u0002\u0003",
    "\u13b2\u13b3\u0007w\u0002\u0002\u13b3\u13b7\u0007\u0002\u0002\u0003",
    "\u13b4\u13b5\u0007D\u0002\u0002\u13b5\u13b7\u0007\u0002\u0002\u0003",
    "\u13b6\u13a6\u0003\u0002\u0002\u0002\u13b6\u13a9\u0003\u0002\u0002\u0002",
    "\u13b6\u13ac\u0003\u0002\u0002\u0002\u13b6\u13ae\u0003\u0002\u0002\u0002",
    "\u13b6\u13b0\u0003\u0002\u0002\u0002\u13b6\u13b2\u0003\u0002\u0002\u0002",
    "\u13b6\u13b4\u0003\u0002\u0002\u0002\u13b7\u02f3\u0003\u0002\u0002\u0002",
    "\u13b8\u13b9\u0007a\u0002\u0002\u13b9\u13bd\u0007\u0002\u0002\u0003",
    "\u13ba\u13bb\u0007+\u0002\u0002\u13bb\u13bd\u0007\u0002\u0002\u0003",
    "\u13bc\u13b8\u0003\u0002\u0002\u0002\u13bc\u13ba\u0003\u0002\u0002\u0002",
    "\u13bd\u02f5\u0003\u0002\u0002\u0002\u13be\u13bf\u0005\u0164\u00b3\u0002",
    "\u13bf\u13c0\u0007\u0002\u0002\u0003\u13c0\u13c9\u0003\u0002\u0002\u0002",
    "\u13c1\u13c2\u0005\u0166\u00b4\u0002\u13c2\u13c3\u0007\u0002\u0002\u0003",
    "\u13c3\u13c9\u0003\u0002\u0002\u0002\u13c4\u13c5\u0007x\u0002\u0002",
    "\u13c5\u13c9\u0007\u0002\u0002\u0003\u13c6\u13c7\u0007y\u0002\u0002",
    "\u13c7\u13c9\u0007\u0002\u0002\u0003\u13c8\u13be\u0003\u0002\u0002\u0002",
    "\u13c8\u13c1\u0003\u0002\u0002\u0002\u13c8\u13c4\u0003\u0002\u0002\u0002",
    "\u13c8\u13c6\u0003\u0002\u0002\u0002\u13c9\u02f7\u0003\u0002\u0002\u0002",
    "\u13ca\u13ce\u0007z\u0002\u0002\u13cb\u13cd\u0005\u0168\u00b5\u0002",
    "\u13cc\u13cb\u0003\u0002\u0002\u0002\u13cd\u13d0\u0003\u0002\u0002\u0002",
    "\u13ce\u13cc\u0003\u0002\u0002\u0002\u13ce\u13cf\u0003\u0002\u0002\u0002",
    "\u13cf\u13d1\u0003\u0002\u0002\u0002\u13d0\u13ce\u0003\u0002\u0002\u0002",
    "\u13d1\u13d2\u0007\u00ad\u0002\u0002\u13d2\u13d3\u0007\u0002\u0002\u0003",
    "\u13d3\u02f9\u0003\u0002\u0002\u0002\u13d4\u13d8\u0007{\u0002\u0002",
    "\u13d5\u13d7\u0005\u016a\u00b6\u0002\u13d6\u13d5\u0003\u0002\u0002\u0002",
    "\u13d7\u13da\u0003\u0002\u0002\u0002\u13d8\u13d6\u0003\u0002\u0002\u0002",
    "\u13d8\u13d9\u0003\u0002\u0002\u0002\u13d9\u13db\u0003\u0002\u0002\u0002",
    "\u13da\u13d8\u0003\u0002\u0002\u0002\u13db\u13dc\u0007\u00ad\u0002\u0002",
    "\u13dc\u13dd\u0007\u0002\u0002\u0003\u13dd\u02fb\u0003\u0002\u0002\u0002",
    "\u13de\u13df\u0005\u016c\u00b7\u0002\u13df\u13e0\u0007\u0002\u0002\u0003",
    "\u13e0\u13e8\u0003\u0002\u0002\u0002\u13e1\u13e2\u0007\u00a9\u0002\u0002",
    "\u13e2\u13e8\u0007\u0002\u0002\u0003\u13e3\u13e4\u0007\u00ab\u0002\u0002",
    "\u13e4\u13e8\u0007\u0002\u0002\u0003\u13e5\u13e6\u0007\u00ae\u0002\u0002",
    "\u13e6\u13e8\u0007\u0002\u0002\u0003\u13e7\u13de\u0003\u0002\u0002\u0002",
    "\u13e7\u13e1\u0003\u0002\u0002\u0002\u13e7\u13e3\u0003\u0002\u0002\u0002",
    "\u13e7\u13e5\u0003\u0002\u0002\u0002\u13e8\u02fd\u0003\u0002\u0002\u0002",
    "\u13e9\u13ea\u0005\u016c\u00b7\u0002\u13ea\u13eb\u0007\u0002\u0002\u0003",
    "\u13eb\u13f3\u0003\u0002\u0002\u0002\u13ec\u13ed\u0007\u00a9\u0002\u0002",
    "\u13ed\u13f3\u0007\u0002\u0002\u0003\u13ee\u13ef\u0007\u00ac\u0002\u0002",
    "\u13ef\u13f3\u0007\u0002\u0002\u0003\u13f0\u13f1\u0007\u00af\u0002\u0002",
    "\u13f1\u13f3\u0007\u0002\u0002\u0003\u13f2\u13e9\u0003\u0002\u0002\u0002",
    "\u13f2\u13ec\u0003\u0002\u0002\u0002\u13f2\u13ee\u0003\u0002\u0002\u0002",
    "\u13f2\u13f0\u0003\u0002\u0002\u0002\u13f3\u02ff\u0003\u0002\u0002\u0002",
    "\u13f4\u13f9\u0005\u001a\u000e\u0002\u13f5\u13f6\u0007\u0083\u0002\u0002",
    "\u13f6\u13f8\u0005\u001a\u000e\u0002\u13f7\u13f5\u0003\u0002\u0002\u0002",
    "\u13f8\u13fb\u0003\u0002\u0002\u0002\u13f9\u13f7\u0003\u0002\u0002\u0002",
    "\u13f9\u13fa\u0003\u0002\u0002\u0002\u13fa\u1402\u0003\u0002\u0002\u0002",
    "\u13fb\u13f9\u0003\u0002\u0002\u0002\u13fc\u13fe\u0007\u0084\u0002\u0002",
    "\u13fd\u13ff\u0007\u00b1\u0002\u0002\u13fe\u13fd\u0003\u0002\u0002\u0002",
    "\u13ff\u1400\u0003\u0002\u0002\u0002\u1400\u13fe\u0003\u0002\u0002\u0002",
    "\u1400\u1401\u0003\u0002\u0002\u0002\u1401\u1403\u0003\u0002\u0002\u0002",
    "\u1402\u13fc\u0003\u0002\u0002\u0002\u1402\u1403\u0003\u0002\u0002\u0002",
    "\u1403\u1404\u0003\u0002\u0002\u0002\u1404\u1405\u0007\u0002\u0002\u0003",
    "\u1405\u0301\u0003\u0002\u0002\u0002\u1406\u1407\u0007\n\u0002\u0002",
    "\u1407\u14a1\u0007\u0002\u0002\u0003\u1408\u1409\u0007\u000e\u0002\u0002",
    "\u1409\u14a1\u0007\u0002\u0002\u0003\u140a\u140b\u0007\u0012\u0002\u0002",
    "\u140b\u14a1\u0007\u0002\u0002\u0003\u140c\u140d\u0007\u0013\u0002\u0002",
    "\u140d\u14a1\u0007\u0002\u0002\u0003\u140e\u140f\u0007\u0014\u0002\u0002",
    "\u140f\u14a1\u0007\u0002\u0002\u0003\u1410\u1411\u0007\u0016\u0002\u0002",
    "\u1411\u14a1\u0007\u0002\u0002\u0003\u1412\u1413\u0007\u0017\u0002\u0002",
    "\u1413\u14a1\u0007\u0002\u0002\u0003\u1414\u1415\u0007\u0018\u0002\u0002",
    "\u1415\u14a1\u0007\u0002\u0002\u0003\u1416\u1417\u0007\u0019\u0002\u0002",
    "\u1417\u14a1\u0007\u0002\u0002\u0003\u1418\u1419\u0007\u001a\u0002\u0002",
    "\u1419\u14a1\u0007\u0002\u0002\u0003\u141a\u141b\u0007\u001b\u0002\u0002",
    "\u141b\u14a1\u0007\u0002\u0002\u0003\u141c\u141d\u0007\u001c\u0002\u0002",
    "\u141d\u14a1\u0007\u0002\u0002\u0003\u141e\u141f\u0007\u001d\u0002\u0002",
    "\u141f\u14a1\u0007\u0002\u0002\u0003\u1420\u1421\u0007\u001e\u0002\u0002",
    "\u1421\u14a1\u0007\u0002\u0002\u0003\u1422\u1423\u0007\u001f\u0002\u0002",
    "\u1423\u14a1\u0007\u0002\u0002\u0003\u1424\u1425\u0007 \u0002\u0002",
    "\u1425\u14a1\u0007\u0002\u0002\u0003\u1426\u1427\u0007\"\u0002\u0002",
    "\u1427\u14a1\u0007\u0002\u0002\u0003\u1428\u1429\u0007#\u0002\u0002",
    "\u1429\u14a1\u0007\u0002\u0002\u0003\u142a\u142b\u0007%\u0002\u0002",
    "\u142b\u14a1\u0007\u0002\u0002\u0003\u142c\u142d\u0007&\u0002\u0002",
    "\u142d\u14a1\u0007\u0002\u0002\u0003\u142e\u142f\u0007(\u0002\u0002",
    "\u142f\u14a1\u0007\u0002\u0002\u0003\u1430\u1431\u0007)\u0002\u0002",
    "\u1431\u14a1\u0007\u0002\u0002\u0003\u1432\u1433\u0007*\u0002\u0002",
    "\u1433\u14a1\u0007\u0002\u0002\u0003\u1434\u1435\u0007+\u0002\u0002",
    "\u1435\u14a1\u0007\u0002\u0002\u0003\u1436\u1437\u0007,\u0002\u0002",
    "\u1437\u14a1\u0007\u0002\u0002\u0003\u1438\u1439\u0007-\u0002\u0002",
    "\u1439\u14a1\u0007\u0002\u0002\u0003\u143a\u143b\u0007.\u0002\u0002",
    "\u143b\u14a1\u0007\u0002\u0002\u0003\u143c\u143d\u0007/\u0002\u0002",
    "\u143d\u14a1\u0007\u0002\u0002\u0003\u143e\u143f\u00070\u0002\u0002",
    "\u143f\u14a1\u0007\u0002\u0002\u0003\u1440\u1441\u00073\u0002\u0002",
    "\u1441\u14a1\u0007\u0002\u0002\u0003\u1442\u1443\u00075\u0002\u0002",
    "\u1443\u14a1\u0007\u0002\u0002\u0003\u1444\u1445\u00076\u0002\u0002",
    "\u1445\u14a1\u0007\u0002\u0002\u0003\u1446\u1447\u00077\u0002\u0002",
    "\u1447\u14a1\u0007\u0002\u0002\u0003\u1448\u1449\u00078\u0002\u0002",
    "\u1449\u14a1\u0007\u0002\u0002\u0003\u144a\u144b\u00079\u0002\u0002",
    "\u144b\u14a1\u0007\u0002\u0002\u0003\u144c\u144d\u0007:\u0002\u0002",
    "\u144d\u14a1\u0007\u0002\u0002\u0003\u144e\u144f\u0007<\u0002\u0002",
    "\u144f\u14a1\u0007\u0002\u0002\u0003\u1450\u1451\u0007?\u0002\u0002",
    "\u1451\u14a1\u0007\u0002\u0002\u0003\u1452\u1453\u0007@\u0002\u0002",
    "\u1453\u14a1\u0007\u0002\u0002\u0003\u1454\u1455\u0007B\u0002\u0002",
    "\u1455\u14a1\u0007\u0002\u0002\u0003\u1456\u1457\u0007C\u0002\u0002",
    "\u1457\u14a1\u0007\u0002\u0002\u0003\u1458\u1459\u0007D\u0002\u0002",
    "\u1459\u14a1\u0007\u0002\u0002\u0003\u145a\u145b\u0007E\u0002\u0002",
    "\u145b\u14a1\u0007\u0002\u0002\u0003\u145c\u145d\u0007G\u0002\u0002",
    "\u145d\u14a1\u0007\u0002\u0002\u0003\u145e\u145f\u0007I\u0002\u0002",
    "\u145f\u14a1\u0007\u0002\u0002\u0003\u1460\u1461\u0007J\u0002\u0002",
    "\u1461\u14a1\u0007\u0002\u0002\u0003\u1462\u1463\u0007K\u0002\u0002",
    "\u1463\u14a1\u0007\u0002\u0002\u0003\u1464\u1465\u0007M\u0002\u0002",
    "\u1465\u14a1\u0007\u0002\u0002\u0003\u1466\u1467\u0007N\u0002\u0002",
    "\u1467\u14a1\u0007\u0002\u0002\u0003\u1468\u1469\u0007O\u0002\u0002",
    "\u1469\u14a1\u0007\u0002\u0002\u0003\u146a\u146b\u0007P\u0002\u0002",
    "\u146b\u14a1\u0007\u0002\u0002\u0003\u146c\u146d\u0007Q\u0002\u0002",
    "\u146d\u14a1\u0007\u0002\u0002\u0003\u146e\u146f\u0007S\u0002\u0002",
    "\u146f\u14a1\u0007\u0002\u0002\u0003\u1470\u1471\u0007T\u0002\u0002",
    "\u1471\u14a1\u0007\u0002\u0002\u0003\u1472\u1473\u0007U\u0002\u0002",
    "\u1473\u14a1\u0007\u0002\u0002\u0003\u1474\u1475\u0007X\u0002\u0002",
    "\u1475\u14a1\u0007\u0002\u0002\u0003\u1476\u1477\u0007Y\u0002\u0002",
    "\u1477\u14a1\u0007\u0002\u0002\u0003\u1478\u1479\u0007Z\u0002\u0002",
    "\u1479\u14a1\u0007\u0002\u0002\u0003\u147a\u147b\u0007[\u0002\u0002",
    "\u147b\u14a1\u0007\u0002\u0002\u0003\u147c\u147d\u0007\\\u0002\u0002",
    "\u147d\u14a1\u0007\u0002\u0002\u0003\u147e\u147f\u0007]\u0002\u0002",
    "\u147f\u14a1\u0007\u0002\u0002\u0003\u1480\u1481\u0007^\u0002\u0002",
    "\u1481\u14a1\u0007\u0002\u0002\u0003\u1482\u1483\u0007_\u0002\u0002",
    "\u1483\u14a1\u0007\u0002\u0002\u0003\u1484\u1485\u0007`\u0002\u0002",
    "\u1485\u14a1\u0007\u0002\u0002\u0003\u1486\u1487\u0007a\u0002\u0002",
    "\u1487\u14a1\u0007\u0002\u0002\u0003\u1488\u1489\u0007b\u0002\u0002",
    "\u1489\u14a1\u0007\u0002\u0002\u0003\u148a\u148b\u0007c\u0002\u0002",
    "\u148b\u14a1\u0007\u0002\u0002\u0003\u148c\u148d\u0007d\u0002\u0002",
    "\u148d\u14a1\u0007\u0002\u0002\u0003\u148e\u148f\u0007e\u0002\u0002",
    "\u148f\u14a1\u0007\u0002\u0002\u0003\u1490\u1491\u0007f\u0002\u0002",
    "\u1491\u14a1\u0007\u0002\u0002\u0003\u1492\u1493\u0007g\u0002\u0002",
    "\u1493\u14a1\u0007\u0002\u0002\u0003\u1494\u1495\u0007h\u0002\u0002",
    "\u1495\u14a1\u0007\u0002\u0002\u0003\u1496\u1497\u0007i\u0002\u0002",
    "\u1497\u14a1\u0007\u0002\u0002\u0003\u1498\u1499\u0007k\u0002\u0002",
    "\u1499\u14a1\u0007\u0002\u0002\u0003\u149a\u149b\u0007l\u0002\u0002",
    "\u149b\u14a1\u0007\u0002\u0002\u0003\u149c\u149d\u0007m\u0002\u0002",
    "\u149d\u14a1\u0007\u0002\u0002\u0003\u149e\u149f\u0007p\u0002\u0002",
    "\u149f\u14a1\u0007\u0002\u0002\u0003\u14a0\u1406\u0003\u0002\u0002\u0002",
    "\u14a0\u1408\u0003\u0002\u0002\u0002\u14a0\u140a\u0003\u0002\u0002\u0002",
    "\u14a0\u140c\u0003\u0002\u0002\u0002\u14a0\u140e\u0003\u0002\u0002\u0002",
    "\u14a0\u1410\u0003\u0002\u0002\u0002\u14a0\u1412\u0003\u0002\u0002\u0002",
    "\u14a0\u1414\u0003\u0002\u0002\u0002\u14a0\u1416\u0003\u0002\u0002\u0002",
    "\u14a0\u1418\u0003\u0002\u0002\u0002\u14a0\u141a\u0003\u0002\u0002\u0002",
    "\u14a0\u141c\u0003\u0002\u0002\u0002\u14a0\u141e\u0003\u0002\u0002\u0002",
    "\u14a0\u1420\u0003\u0002\u0002\u0002\u14a0\u1422\u0003\u0002\u0002\u0002",
    "\u14a0\u1424\u0003\u0002\u0002\u0002\u14a0\u1426\u0003\u0002\u0002\u0002",
    "\u14a0\u1428\u0003\u0002\u0002\u0002\u14a0\u142a\u0003\u0002\u0002\u0002",
    "\u14a0\u142c\u0003\u0002\u0002\u0002\u14a0\u142e\u0003\u0002\u0002\u0002",
    "\u14a0\u1430\u0003\u0002\u0002\u0002\u14a0\u1432\u0003\u0002\u0002\u0002",
    "\u14a0\u1434\u0003\u0002\u0002\u0002\u14a0\u1436\u0003\u0002\u0002\u0002",
    "\u14a0\u1438\u0003\u0002\u0002\u0002\u14a0\u143a\u0003\u0002\u0002\u0002",
    "\u14a0\u143c\u0003\u0002\u0002\u0002\u14a0\u143e\u0003\u0002\u0002\u0002",
    "\u14a0\u1440\u0003\u0002\u0002\u0002\u14a0\u1442\u0003\u0002\u0002\u0002",
    "\u14a0\u1444\u0003\u0002\u0002\u0002\u14a0\u1446\u0003\u0002\u0002\u0002",
    "\u14a0\u1448\u0003\u0002\u0002\u0002\u14a0\u144a\u0003\u0002\u0002\u0002",
    "\u14a0\u144c\u0003\u0002\u0002\u0002\u14a0\u144e\u0003\u0002\u0002\u0002",
    "\u14a0\u1450\u0003\u0002\u0002\u0002\u14a0\u1452\u0003\u0002\u0002\u0002",
    "\u14a0\u1454\u0003\u0002\u0002\u0002\u14a0\u1456\u0003\u0002\u0002\u0002",
    "\u14a0\u1458\u0003\u0002\u0002\u0002\u14a0\u145a\u0003\u0002\u0002\u0002",
    "\u14a0\u145c\u0003\u0002\u0002\u0002\u14a0\u145e\u0003\u0002\u0002\u0002",
    "\u14a0\u1460\u0003\u0002\u0002\u0002\u14a0\u1462\u0003\u0002\u0002\u0002",
    "\u14a0\u1464\u0003\u0002\u0002\u0002\u14a0\u1466\u0003\u0002\u0002\u0002",
    "\u14a0\u1468\u0003\u0002\u0002\u0002\u14a0\u146a\u0003\u0002\u0002\u0002",
    "\u14a0\u146c\u0003\u0002\u0002\u0002\u14a0\u146e\u0003\u0002\u0002\u0002",
    "\u14a0\u1470\u0003\u0002\u0002\u0002\u14a0\u1472\u0003\u0002\u0002\u0002",
    "\u14a0\u1474\u0003\u0002\u0002\u0002\u14a0\u1476\u0003\u0002\u0002\u0002",
    "\u14a0\u1478\u0003\u0002\u0002\u0002\u14a0\u147a\u0003\u0002\u0002\u0002",
    "\u14a0\u147c\u0003\u0002\u0002\u0002\u14a0\u147e\u0003\u0002\u0002\u0002",
    "\u14a0\u1480\u0003\u0002\u0002\u0002\u14a0\u1482\u0003\u0002\u0002\u0002",
    "\u14a0\u1484\u0003\u0002\u0002\u0002\u14a0\u1486\u0003\u0002\u0002\u0002",
    "\u14a0\u1488\u0003\u0002\u0002\u0002\u14a0\u148a\u0003\u0002\u0002\u0002",
    "\u14a0\u148c\u0003\u0002\u0002\u0002\u14a0\u148e\u0003\u0002\u0002\u0002",
    "\u14a0\u1490\u0003\u0002\u0002\u0002\u14a0\u1492\u0003\u0002\u0002\u0002",
    "\u14a0\u1494\u0003\u0002\u0002\u0002\u14a0\u1496\u0003\u0002\u0002\u0002",
    "\u14a0\u1498\u0003\u0002\u0002\u0002\u14a0\u149a\u0003\u0002\u0002\u0002",
    "\u14a0\u149c\u0003\u0002\u0002\u0002\u14a0\u149e\u0003\u0002\u0002\u0002",
    "\u14a1\u0303\u0003\u0002\u0002\u0002\u14a2\u14a3\u0007\u001b\u0002\u0002",
    "\u14a3\u14a5\u0005\u0194\u00cb\u0002\u14a4\u14a6\u0005\u00c8e\u0002",
    "\u14a5\u14a4\u0003\u0002\u0002\u0002\u14a5\u14a6\u0003\u0002\u0002\u0002",
    "\u14a6\u14a8\u0003\u0002\u0002\u0002\u14a7\u14a9\u0005\u00ccg\u0002",
    "\u14a8\u14a7\u0003\u0002\u0002\u0002\u14a8\u14a9\u0003\u0002\u0002\u0002",
    "\u14a9\u14ab\u0003\u0002\u0002\u0002\u14aa\u14ac\u0005\u00d0i\u0002",
    "\u14ab\u14aa\u0003\u0002\u0002\u0002\u14ab\u14ac\u0003\u0002\u0002\u0002",
    "\u14ac\u14ad\u0003\u0002\u0002\u0002\u14ad\u14af\u0005\u00dco\u0002",
    "\u14ae\u14b0\u0007\u0085\u0002\u0002\u14af\u14ae\u0003\u0002\u0002\u0002",
    "\u14af\u14b0\u0003\u0002\u0002\u0002\u14b0\u14b1\u0003\u0002\u0002\u0002",
    "\u14b1\u14b2\u0007\u0002\u0002\u0003\u14b2\u0305\u0003\u0002\u0002\u0002",
    "\u14b3\u14b4\u0007]\u0002\u0002\u14b4\u14b6\u0005\u0194\u00cb\u0002",
    "\u14b5\u14b7\u0005\u00c8e\u0002\u14b6\u14b5\u0003\u0002\u0002\u0002",
    "\u14b6\u14b7\u0003\u0002\u0002\u0002\u14b7\u14b9\u0003\u0002\u0002\u0002",
    "\u14b8\u14ba\u0005\u011c\u008f\u0002\u14b9\u14b8\u0003\u0002\u0002\u0002",
    "\u14b9\u14ba\u0003\u0002\u0002\u0002\u14ba\u14bc\u0003\u0002\u0002\u0002",
    "\u14bb\u14bd\u0005\u00d0i\u0002\u14bc\u14bb\u0003\u0002\u0002\u0002",
    "\u14bc\u14bd\u0003\u0002\u0002\u0002\u14bd\u14be\u0003\u0002\u0002\u0002",
    "\u14be\u14c0\u0005\u011e\u0090\u0002\u14bf\u14c1\u0007\u0085\u0002\u0002",
    "\u14c0\u14bf\u0003\u0002\u0002\u0002\u14c0\u14c1\u0003\u0002\u0002\u0002",
    "\u14c1\u14c2\u0003\u0002\u0002\u0002\u14c2\u14c3\u0007\u0002\u0002\u0003",
    "\u14c3\u0307\u0003\u0002\u0002\u0002\u14c4\u14c5\u00079\u0002\u0002",
    "\u14c5\u14c7\u0005\u0194\u00cb\u0002\u14c6\u14c8\u0005\u0128\u0095\u0002",
    "\u14c7\u14c6\u0003\u0002\u0002\u0002\u14c7\u14c8\u0003\u0002\u0002\u0002",
    "\u14c8\u14ca\u0003\u0002\u0002\u0002\u14c9\u14cb\u0005\u012e\u0098\u0002",
    "\u14ca\u14c9\u0003\u0002\u0002\u0002\u14ca\u14cb\u0003\u0002\u0002\u0002",
    "\u14cb\u14cd\u0003\u0002\u0002\u0002\u14cc\u14ce\u0005\u00d0i\u0002",
    "\u14cd\u14cc\u0003\u0002\u0002\u0002\u14cd\u14ce\u0003\u0002\u0002\u0002",
    "\u14ce\u14cf\u0003\u0002\u0002\u0002\u14cf\u14d1\u0005\u0130\u0099\u0002",
    "\u14d0\u14d2\u0007\u0085\u0002\u0002\u14d1\u14d0\u0003\u0002\u0002\u0002",
    "\u14d1\u14d2\u0003\u0002\u0002\u0002\u14d2\u14d3\u0003\u0002\u0002\u0002",
    "\u14d3\u14d4\u0007\u0002\u0002\u0003\u14d4\u0309\u0003\u0002\u0002\u0002",
    "\u14d5\u14d6\u0007&\u0002\u0002\u14d6\u14d8\u0005\u0194\u00cb\u0002",
    "\u14d7\u14d9\u0005\u0136\u009c\u0002\u14d8\u14d7\u0003\u0002\u0002\u0002",
    "\u14d8\u14d9\u0003\u0002\u0002\u0002\u14d9\u14da\u0003\u0002\u0002\u0002",
    "\u14da\u14dc\u0005\u0138\u009d\u0002\u14db\u14dd\u0007\u0085\u0002\u0002",
    "\u14dc\u14db\u0003\u0002\u0002\u0002\u14dc\u14dd\u0003\u0002\u0002\u0002",
    "\u14dd\u14de\u0003\u0002\u0002\u0002\u14de\u14df\u0007\u0002\u0002\u0003",
    "\u14df\u030b\u0003\u0002\u0002\u0002\u14e0\u14e1\u0007 \u0002\u0002",
    "\u14e1\u14e2\u0005\u00f4{\u0002\u14e2\u14e4\u0005\u0194\u00cb\u0002",
    "\u14e3\u14e5\u0005\u0128\u0095\u0002\u14e4\u14e3\u0003\u0002\u0002\u0002",
    "\u14e4\u14e5\u0003\u0002\u0002\u0002\u14e5\u14e6\u0003\u0002\u0002\u0002",
    "\u14e6\u14e8\u0007\u0080\u0002\u0002\u14e7\u14e9\u0005\u00fa~\u0002",
    "\u14e8\u14e7\u0003\u0002\u0002\u0002\u14e8\u14e9\u0003\u0002\u0002\u0002",
    "\u14e9\u14ea\u0003\u0002\u0002\u0002\u14ea\u14ec\u0007\u0081\u0002\u0002",
    "\u14eb\u14ed\u0005\u00d0i\u0002\u14ec\u14eb\u0003\u0002\u0002\u0002",
    "\u14ec\u14ed\u0003\u0002\u0002\u0002\u14ed\u14ee\u0003\u0002\u0002\u0002",
    "\u14ee\u14ef\u0007\u0085\u0002\u0002\u14ef\u14f0\u0007\u0002\u0002\u0003",
    "\u14f0\u030d\u0003\u0002\u0002\u0002\u14f1\u14f2\u0007(\u0002\u0002",
    "\u14f2\u14fb\u0005\u0006\u0004\u0002\u14f3\u14f4\u0005\u00eex\u0002",
    "\u14f4\u14f5\u0007\u0085\u0002\u0002\u14f5\u14fc\u0003\u0002\u0002\u0002",
    "\u14f6\u14f7\u0005\u00f6|\u0002\u14f7\u14f8\u0007|\u0002\u0002\u14f8",
    "\u14f9\u0005\u010e\u0088\u0002\u14f9\u14fa\u0007}\u0002\u0002\u14fa",
    "\u14fc\u0003\u0002\u0002\u0002\u14fb\u14f3\u0003\u0002\u0002\u0002\u14fb",
    "\u14f6\u0003\u0002\u0002\u0002\u14fc\u14fd\u0003\u0002\u0002\u0002\u14fd",
    "\u14fe\u0007\u0002\u0002\u0003\u14fe\u030f\u0003\u0002\u0002\u0002\u14ff",
    "\u1500\u0005\u00eex\u0002\u1500\u1501\u0007\u0085\u0002\u0002\u1501",
    "\u1502\u0007\u0002\u0002\u0003\u1502\u0311\u0003\u0002\u0002\u0002\u1503",
    "\u1511\u0005\u00f6|\u0002\u1504\u1505\u0007|\u0002\u0002\u1505\u1506",
    "\u0005\u0104\u0083\u0002\u1506\u150b\u0007}\u0002\u0002\u1507\u1508",
    "\u0007\u0090\u0002\u0002\u1508\u1509\u0005\u00f2z\u0002\u1509\u150a",
    "\u0007\u0085\u0002\u0002\u150a\u150c\u0003\u0002\u0002\u0002\u150b\u1507",
    "\u0003\u0002\u0002\u0002\u150b\u150c\u0003\u0002\u0002\u0002\u150c\u1512",
    "\u0003\u0002\u0002\u0002\u150d\u150e\u0005\u0158\u00ad\u0002\u150e\u150f",
    "\u0005\u001a\u000e\u0002\u150f\u1510\u0007\u0085\u0002\u0002\u1510\u1512",
    "\u0003\u0002\u0002\u0002\u1511\u1504\u0003\u0002\u0002\u0002\u1511\u150d",
    "\u0003\u0002\u0002\u0002\u1512\u1513\u0003\u0002\u0002\u0002\u1513\u1514",
    "\u0007\u0002\u0002\u0003\u1514\u0313\u0003\u0002\u0002\u0002\u1515\u1516",
    "\u0007\u001c\u0002\u0002\u1516\u1517\u0005\u0006\u0004\u0002\u1517\u1518",
    "\u0005\u00eav\u0002\u1518\u1519\u0007\u0085\u0002\u0002\u1519\u151a",
    "\u0007\u0002\u0002\u0003\u151a\u0315\u0003\u0002\u0002\u0002\u151b\u151c",
    "\u0007_\u0002\u0002\u151c\u151d\u0007~\u0002\u0002\u151d\u151e\u0005",
    "\u00fa~\u0002\u151e\u1527\u0007\u007f\u0002\u0002\u151f\u1520\u0007",
    "|\u0002\u0002\u1520\u1521\u0005\u0104\u0083\u0002\u1521\u1522\u0007",
    "}\u0002\u0002\u1522\u1528\u0003\u0002\u0002\u0002\u1523\u1524\u0005",
    "\u0158\u00ad\u0002\u1524\u1525\u0005\u001a\u000e\u0002\u1525\u1526\u0007",
    "\u0085\u0002\u0002\u1526\u1528\u0003\u0002\u0002\u0002\u1527\u151f\u0003",
    "\u0002\u0002\u0002\u1527\u1523\u0003\u0002\u0002\u0002\u1528\u1529\u0003",
    "\u0002\u0002\u0002\u1529\u152a\u0007\u0002\u0002\u0003\u152a\u0317\u0003",
    "\u0002\u0002\u0002\u152b\u152c\u0007\u008f\u0002\u0002\u152c\u152d\u0005",
    "\u0194\u00cb\u0002\u152d\u152e\u0007\u0080\u0002\u0002\u152e\u152f\u0007",
    "\u0081\u0002\u0002\u152f\u1530\u0005\u011a\u008e\u0002\u1530\u1531\u0007",
    "\u0002\u0002\u0003\u1531\u0319\u0003\u0002\u0002\u0002\u1532\u1533\u0005",
    "\u0194\u00cb\u0002\u1533\u1535\u0007\u0080\u0002\u0002\u1534\u1536\u0005",
    "\u00fa~\u0002\u1535\u1534\u0003\u0002\u0002\u0002\u1535\u1536\u0003",
    "\u0002\u0002\u0002\u1536\u1537\u0003\u0002\u0002\u0002\u1537\u1539\u0007",
    "\u0081\u0002\u0002\u1538\u153a\u0005\u0118\u008d\u0002\u1539\u1538\u0003",
    "\u0002\u0002\u0002\u1539\u153a\u0003\u0002\u0002\u0002\u153a\u153b\u0003",
    "\u0002\u0002\u0002\u153b\u153c\u0005\u011a\u008e\u0002\u153c\u153d\u0007",
    "\u0002\u0002\u0003\u153d\u031b\u0003\u0002\u0002\u0002\u153e\u1540\u0005",
    "\u018a\u00c6\u0002\u153f\u1541\u0005\u00c8e\u0002\u1540\u153f\u0003",
    "\u0002\u0002\u0002\u1540\u1541\u0003\u0002\u0002\u0002\u1541\u1542\u0003",
    "\u0002\u0002\u0002\u1542\u1544\u0007\u0080\u0002\u0002\u1543\u1545\u0005",
    "\u00fa~\u0002\u1544\u1543\u0003\u0002\u0002\u0002\u1544\u1545\u0003",
    "\u0002\u0002\u0002\u1545\u1546\u0003\u0002\u0002\u0002\u1546\u1548\u0007",
    "\u0081\u0002\u0002\u1547\u1549\u0005\u00d0i\u0002\u1548\u1547\u0003",
    "\u0002\u0002\u0002\u1548\u1549\u0003\u0002\u0002\u0002\u1549\u154f\u0003",
    "\u0002\u0002\u0002\u154a\u1550\u0005\u00f8}\u0002\u154b\u154c\u0005",
    "\u0158\u00ad\u0002\u154c\u154d\u0005\u001a\u000e\u0002\u154d\u154e\u0007",
    "\u0085\u0002\u0002\u154e\u1550\u0003\u0002\u0002\u0002\u154f\u154a\u0003",
    "\u0002\u0002\u0002\u154f\u154b\u0003\u0002\u0002\u0002\u1550\u1551\u0003",
    "\u0002\u0002\u0002\u1551\u1552\u0007\u0002\u0002\u0003\u1552\u031d\u0003",
    "\u0002\u0002\u0002\u1553\u1559\u0005\u0194\u00cb\u0002\u1554\u1555\u0005",
    "\u0194\u00cb\u0002\u1555\u1556\u0007\u0094\u0002\u0002\u1556\u1557\u0005",
    "\u0194\u00cb\u0002\u1557\u1559\u0003\u0002\u0002\u0002\u1558\u1553\u0003",
    "\u0002\u0002\u0002\u1558\u1554\u0003\u0002\u0002\u0002\u1559\u1561\u0003",
    "\u0002\u0002\u0002\u155a\u155c\u0005\u0014\u000b\u0002\u155b\u155a\u0003",
    "\u0002\u0002\u0002\u155b\u155c\u0003\u0002\u0002\u0002\u155c\u155d\u0003",
    "\u0002\u0002\u0002\u155d\u155e\u0007\u0082\u0002\u0002\u155e\u1560\u0005",
    "\u0194\u00cb\u0002\u155f\u155b\u0003\u0002\u0002\u0002\u1560\u1563\u0003",
    "\u0002\u0002\u0002\u1561\u155f\u0003\u0002\u0002\u0002\u1561\u1562\u0003",
    "\u0002\u0002\u0002\u1562\u1564\u0003\u0002\u0002\u0002\u1563\u1561\u0003",
    "\u0002\u0002\u0002\u1564\u1565\u0007\u0002\u0002\u0003\u1565\u031f\u0003",
    "\u0002\u0002\u0002\u1566\u1567\u0007G\u0002\u0002\u1567\u1568\u0005",
    "\u0114\u008b\u0002\u1568\u1569\u0007\u0080\u0002\u0002\u1569\u156c\u0005",
    "\u018e\u00c8\u0002\u156a\u156b\u0007\u0083\u0002\u0002\u156b\u156d\u0005",
    "\u018e\u00c8\u0002\u156c\u156a\u0003\u0002\u0002\u0002\u156c\u156d\u0003",
    "\u0002\u0002\u0002\u156d\u156e\u0003\u0002\u0002\u0002\u156e\u1574\u0007",
    "\u0081\u0002\u0002\u156f\u1575\u0005\u011a\u008e\u0002\u1570\u1571\u0005",
    "\u0158\u00ad\u0002\u1571\u1572\u0005\u001a\u000e\u0002\u1572\u1573\u0007",
    "\u0085\u0002\u0002\u1573\u1575\u0003\u0002\u0002\u0002\u1574\u156f\u0003",
    "\u0002\u0002\u0002\u1574\u1570\u0003\u0002\u0002\u0002\u1575\u1576\u0003",
    "\u0002\u0002\u0002\u1576\u1577\u0007\u0002\u0002\u0003\u1577\u0321\u0003",
    "\u0002\u0002\u0002\u1578\u1579\u0005\u0006\u0004\u0002\u1579\u157c\u0005",
    "\u0194\u00cb\u0002\u157a\u157b\u0007\u0090\u0002\u0002\u157b\u157d\u0005",
    "\u001a\u000e\u0002\u157c\u157a\u0003\u0002\u0002\u0002\u157c\u157d\u0003",
    "\u0002\u0002\u0002\u157d\u157e\u0003\u0002\u0002\u0002\u157e\u157f\u0007",
    "\u0002\u0002\u0003\u157f\u0323\u0003\u0002\u0002\u0002\u1580\u1582\u0007",
    "\u0080\u0002\u0002\u1581\u1583\u0005\u0016\f\u0002\u1582\u1581\u0003",
    "\u0002\u0002\u0002\u1582\u1583\u0003\u0002\u0002\u0002\u1583\u1584\u0003",
    "\u0002\u0002\u0002\u1584\u1585\u0007\u0081\u0002\u0002\u1585\u1586\u0007",
    "\u0002\u0002\u0003\u1586\u0325\u0003\u0002\u0002\u0002\u1587\u1589\u0007",
    "\u0080\u0002\u0002\u1588\u158a\u0005\u0016\f\u0002\u1589\u1588\u0003",
    "\u0002\u0002\u0002\u1589\u158a\u0003\u0002\u0002\u0002\u158a\u158b\u0003",
    "\u0002\u0002\u0002\u158b\u158d\u0007\u0081\u0002\u0002\u158c\u158e\u0005",
    "J&\u0002\u158d\u158c\u0003\u0002\u0002\u0002\u158d\u158e\u0003\u0002",
    "\u0002\u0002\u158e\u158f\u0003\u0002\u0002\u0002\u158f\u1590\u0007\u0002",
    "\u0002\u0003\u1590\u0327\u0003\u0002\u0002\u0002\u1591\u1592\u0007r",
    "\u0002\u0002\u1592\u15ca\u0007\u0002\u0002\u0003\u1593\u1594\u0007\u000b",
    "\u0002\u0002\u1594\u15ca\u0007\u0002\u0002\u0003\u1595\u1596\u0007\f",
    "\u0002\u0002\u1596\u15ca\u0007\u0002\u0002\u0003\u1597\u1598\u0007\r",
    "\u0002\u0002\u1598\u15ca\u0007\u0002\u0002\u0003\u1599\u159a\u0007\u000f",
    "\u0002\u0002\u159a\u15ca\u0007\u0002\u0002\u0003\u159b\u159c\u0007\u0010",
    "\u0002\u0002\u159c\u15ca\u0007\u0002\u0002\u0003\u159d\u159e\u0007\u0011",
    "\u0002\u0002\u159e\u15ca\u0007\u0002\u0002\u0003\u159f\u15a0\u0007\u0015",
    "\u0002\u0002\u15a0\u15ca\u0007\u0002\u0002\u0003\u15a1\u15a2\u0007!",
    "\u0002\u0002\u15a2\u15ca\u0007\u0002\u0002\u0003\u15a3\u15a4\u0007$",
    "\u0002\u0002\u15a4\u15ca\u0007\u0002\u0002\u0003\u15a5\u15a6\u0007\'",
    "\u0002\u0002\u15a6\u15ca\u0007\u0002\u0002\u0003\u15a7\u15a8\u00071",
    "\u0002\u0002\u15a8\u15ca\u0007\u0002\u0002\u0003\u15a9\u15aa\u00072",
    "\u0002\u0002\u15aa\u15ca\u0007\u0002\u0002\u0003\u15ab\u15ac\u00074",
    "\u0002\u0002\u15ac\u15ca\u0007\u0002\u0002\u0003\u15ad\u15ae\u0007;",
    "\u0002\u0002\u15ae\u15ca\u0007\u0002\u0002\u0003\u15af\u15b0\u0007=",
    "\u0002\u0002\u15b0\u15ca\u0007\u0002\u0002\u0003\u15b1\u15b2\u0007>",
    "\u0002\u0002\u15b2\u15ca\u0007\u0002\u0002\u0003\u15b3\u15b4\u0007A",
    "\u0002\u0002\u15b4\u15ca\u0007\u0002\u0002\u0003\u15b5\u15b6\u0007F",
    "\u0002\u0002\u15b6\u15ca\u0007\u0002\u0002\u0003\u15b7\u15b8\u0007H",
    "\u0002\u0002\u15b8\u15ca\u0007\u0002\u0002\u0003\u15b9\u15ba\u0007L",
    "\u0002\u0002\u15ba\u15ca\u0007\u0002\u0002\u0003\u15bb\u15bc\u0007R",
    "\u0002\u0002\u15bc\u15ca\u0007\u0002\u0002\u0003\u15bd\u15be\u0007V",
    "\u0002\u0002\u15be\u15ca\u0007\u0002\u0002\u0003\u15bf\u15c0\u0007W",
    "\u0002\u0002\u15c0\u15ca\u0007\u0002\u0002\u0003\u15c1\u15c2\u0007j",
    "\u0002\u0002\u15c2\u15ca\u0007\u0002\u0002\u0003\u15c3\u15c4\u0007n",
    "\u0002\u0002\u15c4\u15ca\u0007\u0002\u0002\u0003\u15c5\u15c6\u0007o",
    "\u0002\u0002\u15c6\u15ca\u0007\u0002\u0002\u0003\u15c7\u15c8\u0007q",
    "\u0002\u0002\u15c8\u15ca\u0007\u0002\u0002\u0003\u15c9\u1591\u0003\u0002",
    "\u0002\u0002\u15c9\u1593\u0003\u0002\u0002\u0002\u15c9\u1595\u0003\u0002",
    "\u0002\u0002\u15c9\u1597\u0003\u0002\u0002\u0002\u15c9\u1599\u0003\u0002",
    "\u0002\u0002\u15c9\u159b\u0003\u0002\u0002\u0002\u15c9\u159d\u0003\u0002",
    "\u0002\u0002\u15c9\u159f\u0003\u0002\u0002\u0002\u15c9\u15a1\u0003\u0002",
    "\u0002\u0002\u15c9\u15a3\u0003\u0002\u0002\u0002\u15c9\u15a5\u0003\u0002",
    "\u0002\u0002\u15c9\u15a7\u0003\u0002\u0002\u0002\u15c9\u15a9\u0003\u0002",
    "\u0002\u0002\u15c9\u15ab\u0003\u0002\u0002\u0002\u15c9\u15ad\u0003\u0002",
    "\u0002\u0002\u15c9\u15af\u0003\u0002\u0002\u0002\u15c9\u15b1\u0003\u0002",
    "\u0002\u0002\u15c9\u15b3\u0003\u0002\u0002\u0002\u15c9\u15b5\u0003\u0002",
    "\u0002\u0002\u15c9\u15b7\u0003\u0002\u0002\u0002\u15c9\u15b9\u0003\u0002",
    "\u0002\u0002\u15c9\u15bb\u0003\u0002\u0002\u0002\u15c9\u15bd\u0003\u0002",
    "\u0002\u0002\u15c9\u15bf\u0003\u0002\u0002\u0002\u15c9\u15c1\u0003\u0002",
    "\u0002\u0002\u15c9\u15c3\u0003\u0002\u0002\u0002\u15c9\u15c5\u0003\u0002",
    "\u0002\u0002\u15c9\u15c7\u0003\u0002\u0002\u0002\u15ca\u0329\u0003\u0002",
    "\u0002\u0002\u025f\u032b\u032e\u0331\u0336\u033a\u0340\u0343\u0348\u034c",
    "\u0353\u0355\u035c\u0360\u0365\u036f\u0377\u0381\u0387\u038a\u038e\u0394",
    "\u0399\u03aa\u03b2\u03b7\u03be\u03c6\u03ce\u03d6\u03de\u03e6\u03f0\u03f2",
    "\u03f8\u03fd\u0405\u040d\u0428\u042e\u0437\u043c\u0441\u0447\u0455\u045b",
    "\u0467\u046b\u0470\u0474\u047a\u0481\u0494\u0499\u049c\u04ab\u04b1\u04b4",
    "\u04b9\u04bc\u04c4\u04cc\u04d7\u04dc\u04e1\u04e3\u04ec\u04f4\u04fb\u0503",
    "\u0507\u0510\u0515\u0517\u0520\u0528\u052c\u0531\u0533\u0538\u053c\u0543",
    "\u054b\u054d\u0551\u0554\u0565\u056c\u0570\u057a\u057f\u0586\u058f\u0594",
    "\u059b\u05a7\u05b2\u05ba\u05bf\u05c8\u05d1\u05d6\u05de\u05eb\u05f5\u060b",
    "\u060f\u0613\u0629\u062e\u0633\u063a\u063d\u0653\u065f\u0663\u066d\u0672",
    "\u0677\u067c\u0684\u0689\u0693\u0698\u06a0\u06a3\u06aa\u06b1\u06b5\u06b8",
    "\u06be\u06c2\u06c8\u06d6\u06dc\u06e3\u06e8\u06eb\u06ee\u06f5\u06ff\u0710",
    "\u0715\u0719\u071c\u071f\u0726\u072c\u0734\u073a\u0744\u074c\u0752\u075d",
    "\u0761\u0763\u0768\u076f\u0778\u077f\u0782\u0785\u0789\u078e\u079b\u07a5",
    "\u07b1\u07b8\u07c4\u07ca\u07ce\u07d2\u07d8\u07de\u07e0\u07e7\u07eb\u07ee",
    "\u07f2\u07f7\u07fe\u0801\u0806\u080b\u080d\u0810\u0813\u0819\u081c\u0828",
    "\u082c\u082f\u0839\u083c\u0842\u085d\u086a\u0870\u0879\u087f\u0882\u088a",
    "\u088e\u0894\u089a\u08a0\u08ab\u08af\u08b1\u08bb\u08c1\u08c4\u08d1\u08d7",
    "\u08da\u08dd\u08e2\u08e6\u08ea\u08fb\u08fe\u0903\u0907\u090b\u0914\u0917",
    "\u091c\u0920\u0925\u0929\u092b\u0936\u093a\u093c\u0941\u0946\u094d\u0953",
    "\u0958\u095e\u0962\u0968\u096f\u0979\u097c\u097f\u0984\u098a\u098e\u0990",
    "\u0997\u099e\u09a6\u09aa\u09ca\u09d2\u09d8\u09e1\u09ea\u09f0\u09f7\u09fe",
    "\u0a00\u0a07\u0a0a\u0a0d\u0a11\u0a16\u0a19\u0a1c\u0a20\u0a25\u0a28\u0a2b",
    "\u0a2f\u0a34\u0a38\u0a3e\u0a42\u0a46\u0a54\u0a61\u0a67\u0a7a\u0a85\u0a89",
    "\u0a8f\u0a93\u0a97\u0a9e\u0aa5\u0aa8\u0aae\u0ab7\u0abf\u0ac5\u0ac9\u0acf",
    "\u0ad3\u0ad8\u0adb\u0ade\u0ae3\u0ae7\u0aed\u0af0\u0af5\u0af9\u0b02\u0b04",
    "\u0b12\u0b19\u0b23\u0b37\u0b3d\u0b48\u0b50\u0b5b\u0b63\u0b66\u0b6a\u0b75",
    "\u0b80\u0b9e\u0ba6\u0bad\u0bb6\u0bc0\u0bca\u0bd4\u0bde\u0be8\u0bf4\u0bf6",
    "\u0bfe\u0c03\u0c0d\u0c17\u0c49\u0c4f\u0c58\u0c5d\u0c62\u0c6c\u0c83\u0c89",
    "\u0c97\u0c9b\u0ca0\u0ca4\u0caa\u0cb3\u0cca\u0ccf\u0cd2\u0ce4\u0ceb\u0cee",
    "\u0cf3\u0cf8\u0d00\u0d09\u0d2c\u0d33\u0d3e\u0d43\u0d45\u0d4f\u0d59\u0d65",
    "\u0d6d\u0d71\u0d7e\u0d83\u0d85\u0d8f\u0d9c\u0da0\u0da5\u0da7\u0dac\u0db0",
    "\u0db9\u0dc2\u0dc4\u0dc8\u0dcd\u0de4\u0deb\u0df1\u0dfc\u0e07\u0e0f\u0e19",
    "\u0e1e\u0e31\u0e3f\u0e4a\u0e54\u0e5b\u0e69\u0e75\u0e7d\u0e8a\u0e99\u0ea5",
    "\u0ebe\u0ec2\u0ec6\u0ee1\u0ee7\u0eed\u0ef5\u0ef8\u0f16\u0f26\u0f2a\u0f35",
    "\u0f3f\u0f44\u0f51\u0f5e\u0f63\u0f70\u0f75\u0f81\u0f86\u0f8d\u0f96\u0f9a",
    "\u0fa1\u0fa7\u0fab\u0fb2\u0fc7\u0fcd\u0fd6\u0fdd\u0fe0\u0fe3\u0feb\u0ff8",
    "\u100e\u1013\u101d\u1020\u1023\u102a\u1032\u103c\u1043\u104e\u1058\u1060",
    "\u1070\u1074\u1078\u1081\u1088\u1094\u109c\u10a1\u10a4\u10a8\u10af\u10d3",
    "\u10e4\u10fe\u110a\u1113\u1122\u112a\u1134\u113b\u1145\u114d\u1151\u1158",
    "\u115e\u1161\u1168\u1170\u1173\u117b\u117e\u1183\u1188\u118a\u118f\u1192",
    "\u1199\u119c\u11ae\u11b5\u11b8\u11c2\u11c7\u11ce\u1201\u120f\u1219\u1223",
    "\u122a\u122d\u1235\u1239\u1241\u1247\u124f\u125b\u125f\u1261\u126c\u1273",
    "\u1276\u127f\u1289\u1290\u1293\u1296\u129b\u129f\u12a3\u12b4\u12b9\u12be",
    "\u12c2\u12c6\u12d0\u12d5\u12da\u12de\u12e3\u12e7\u12e9\u12f7\u12fb\u12fd",
    "\u1303\u1308\u1311\u131c\u1321\u1329\u132d\u1338\u133f\u134b\u134e\u1351",
    "\u1358\u135f\u1363\u1365\u136e\u1375\u1380\u1388\u13b6\u13bc\u13c8\u13ce",
    "\u13d8\u13e7\u13f2\u13f9\u1400\u1402\u14a0\u14a5\u14a8\u14ab\u14af\u14b6",
    "\u14b9\u14bc\u14c0\u14c7\u14ca\u14cd\u14d1\u14d8\u14dc\u14e4\u14e8\u14ec",
    "\u14fb\u150b\u1511\u1527\u1535\u1539\u1540\u1544\u1548\u154f\u1558\u155b",
    "\u1561\u156c\u1574\u157c\u1582\u1589\u158d\u15c9"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'\u00EF\u00BB\u00BF'", null, null, null, null, 
                     null, "'#'", "'abstract'", "'add'", "'alias'", "'__arglist'", 
                     "'as'", "'ascending'", "'async'", "'await'", "'base'", 
                     "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
                     "'char'", "'checked'", "'class'", "'const'", "'continue'", 
                     "'decimal'", "'default'", "'delegate'", "'descending'", 
                     "'do'", "'double'", "'dynamic'", "'else'", "'enum'", 
                     "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
                     "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", 
                     "'from'", "'get'", "'goto'", "'group'", "'if'", "'implicit'", 
                     "'in'", "'int'", "'interface'", "'internal'", "'into'", 
                     "'is'", "'join'", "'let'", "'lock'", "'long'", "'nameof'", 
                     "'namespace'", "'new'", "'null'", "'object'", "'on'", 
                     "'operator'", "'orderby'", "'out'", "'override'", "'params'", 
                     "'partial'", "'private'", "'protected'", "'public'", 
                     "'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", 
                     "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", 
                     "'stackalloc'", "'static'", "'string'", "'struct'", 
                     "'switch'", "'this'", "'throw'", "'true'", "'try'", 
                     "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unsafe'", 
                     "'ushort'", "'using'", "'var'", "'virtual'", "'void'", 
                     "'volatile'", "'when'", "'where'", "'while'", "'yield'", 
                     null, null, null, null, null, null, null, null, null, 
                     null, "'{'", "'}'", "'['", "']'", "'('", "')'", "'.'", 
                     "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", 
                     "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", 
                     "'?'", "'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", 
                     "'->'", "'=='", "'!='", "'<='", "'>='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<'", 
                     "'<<='", "'{{'", null, null, null, null, null, null, 
                     null, null, null, null, "'define'", "'undef'", "'elif'", 
                     "'endif'", "'line'", null, null, null, null, null, 
                     "'hidden'", null, null, null, "'}}'" ];

var symbolicNames = [ null, "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", 
                      "DELIMITED_DOC_COMMENT", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", 
                      "WHITESPACES", "SHARP", "ABSTRACT", "ADD", "ALIAS", 
                      "ARGLIST", "AS", "ASCENDING", "ASYNC", "AWAIT", "BASE", 
                      "BOOL", "BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", 
                      "CHECKED", "CLASS", "CONST", "CONTINUE", "DECIMAL", 
                      "DEFAULT", "DELEGATE", "DESCENDING", "DO", "DOUBLE", 
                      "DYNAMIC", "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", 
                      "EXTERN", "FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", 
                      "FOREACH", "FROM", "GET", "GOTO", "GROUP", "IF", "IMPLICIT", 
                      "IN", "INT", "INTERFACE", "INTERNAL", "INTO", "IS", 
                      "JOIN", "LET", "LOCK", "LONG", "NAMEOF", "NAMESPACE", 
                      "NEW", "NULL", "OBJECT", "ON", "OPERATOR", "ORDERBY", 
                      "OUT", "OVERRIDE", "PARAMS", "PARTIAL", "PRIVATE", 
                      "PROTECTED", "PUBLIC", "READONLY", "REF", "REMOVE", 
                      "RETURN", "SBYTE", "SEALED", "SELECT", "SET", "SHORT", 
                      "SIZEOF", "STACKALLOC", "STATIC", "STRING", "STRUCT", 
                      "SWITCH", "THIS", "THROW", "TRUE", "TRY", "TYPEOF", 
                      "UINT", "ULONG", "UNCHECKED", "UNSAFE", "USHORT", 
                      "USING", "VAR", "VIRTUAL", "VOID", "VOLATILE", "WHEN", 
                      "WHERE", "WHILE", "YIELD", "IDENTIFIER", "LITERAL_ACCESS", 
                      "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "REAL_LITERAL", 
                      "CHARACTER_LITERAL", "REGULAR_STRING", "VERBATIUM_STRING", 
                      "INTERPOLATED_REGULAR_STRING_START", "INTERPOLATED_VERBATIUM_STRING_START", 
                      "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
                      "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", "COLON", 
                      "SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", 
                      "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", 
                      "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", 
                      "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", 
                      "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", 
                      "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
                      "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
                      "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "DOUBLE_CURLY_INSIDE", 
                      "OPEN_BRACE_INSIDE", "REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", 
                      "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", "VERBATIUM_INSIDE_STRING", 
                      "CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", 
                      "DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", 
                      "ERROR", "WARNING", "REGION", "ENDREGION", "PRAGMA", 
                      "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", "DIRECTIVE_NEW_LINE", 
                      "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE" ];

var ruleNames =  [ "compilationUnit", "namespace_or_type_name", "var_type", 
                   "base_type", "simple_type", "numeric_type", "integral_type", 
                   "floating_point_type", "class_type", "type_argument_list", 
                   "argument_list", "argument", "expression", "non_assignment_expression", 
                   "assignment", "assignment_operator", "conditional_expression", 
                   "null_coalescing_expression", "conditional_or_expression", 
                   "conditional_and_expression", "inclusive_or_expression", 
                   "exclusive_or_expression", "and_expression", "equality_expression", 
                   "relational_expression", "shift_expression", "additive_expression", 
                   "multiplicative_expression", "unary_expression", "primary_expression", 
                   "primary_expression_start", "member_access", "bracket_expression", 
                   "indexer_argument", "predefined_type", "expression_list", 
                   "object_or_collection_initializer", "object_initializer", 
                   "member_initializer_list", "member_initializer", "initializer_value", 
                   "collection_initializer", "element_initializer", "anonymous_object_initializer", 
                   "member_declarator_list", "member_declarator", "unbound_type_name", 
                   "generic_dimension_specifier", "isType", "lambda_expression", 
                   "anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
                   "explicit_anonymous_function_parameter", "implicit_anonymous_function_parameter_list", 
                   "anonymous_function_body", "query_expression", "from_clause", 
                   "query_body", "query_body_clause", "let_clause", "where_clause", 
                   "combined_join_clause", "orderby_clause", "ordering", 
                   "select_or_group_clause", "query_continuation", "statement", 
                   "labeled_Statement", "embedded_statement", "simple_embedded_statement", 
                   "block", "local_variable_declaration", "local_variable_type", 
                   "local_variable_declarator", "local_variable_initializer", 
                   "local_constant_declaration", "if_body", "switch_section", 
                   "switch_label", "statement_list", "for_initializer", 
                   "for_iterator", "catch_clauses", "specific_catch_clause", 
                   "general_catch_clause", "exception_filter", "finally_clause", 
                   "resource_acquisition", "namespace_declaration", "qualified_identifier", 
                   "namespace_body", "extern_alias_directives", "extern_alias_directive", 
                   "using_directives", "using_directive", "namespace_member_declarations", 
                   "namespace_member_declaration", "type_declaration", "qualified_alias_member", 
                   "type_parameter_list", "type_parameter", "class_base", 
                   "interface_type_list", "type_parameter_constraints_clauses", 
                   "type_parameter_constraints_clause", "type_parameter_constraints", 
                   "primary_constraint", "secondary_constraints", "constructor_constraint", 
                   "class_body", "class_member_declarations", "class_member_declaration", 
                   "all_member_modifiers", "all_member_modifier", "common_member_declaration", 
                   "typed_member_declaration", "constant_declarators", "constant_declarator", 
                   "variable_declarators", "variable_declarator", "variable_initializer", 
                   "return_type", "member_name", "method_body", "formal_parameter_list", 
                   "fixed_parameters", "fixed_parameter", "parameter_modifier", 
                   "parameter_array", "accessor_declarations", "get_accessor_declaration", 
                   "set_accessor_declaration", "accessor_modifier", "accessor_body", 
                   "event_accessor_declarations", "add_accessor_declaration", 
                   "remove_accessor_declaration", "overloadable_operator", 
                   "conversion_operator_declarator", "constructor_initializer", 
                   "body", "struct_interfaces", "struct_body", "struct_member_declaration", 
                   "array_type", "rank_specifier", "array_initializer", 
                   "variant_type_parameter_list", "variant_type_parameter", 
                   "variance_annotation", "interface_base", "interface_body", 
                   "interface_member_declaration", "interface_accessors", 
                   "enum_base", "enum_body", "enum_member_declaration", 
                   "global_attribute_section", "global_attribute_target", 
                   "attributes", "attribute_section", "attribute_target", 
                   "attribute_list", "attribute", "attribute_argument", 
                   "pointer_type", "fixed_pointer_declarators", "fixed_pointer_declarator", 
                   "fixed_pointer_initializer", "fixed_size_buffer_declarator", 
                   "local_variable_initializer_unsafe", "right_arrow", "right_shift", 
                   "right_shift_assignment", "literal", "boolean_literal", 
                   "string_literal", "interpolated_regular_string", "interpolated_verbatium_string", 
                   "interpolated_regular_string_part", "interpolated_verbatium_string_part", 
                   "interpolated_string_expression", "keyword", "class_definition", 
                   "struct_definition", "interface_definition", "enum_definition", 
                   "delegate_definition", "event_declaration", "field_declaration", 
                   "property_declaration", "constant_declaration", "indexer_declaration", 
                   "destructor_definition", "constructor_declaration", "method_declaration", 
                   "method_member_name", "operator_declaration", "arg_declaration", 
                   "method_invocation", "object_creation_expression", "identifier", 
                   "compilationUnit_DropletFile", "namespace_or_type_name_DropletFile", 
                   "var_type_DropletFile", "base_type_DropletFile", "simple_type_DropletFile", 
                   "numeric_type_DropletFile", "integral_type_DropletFile", 
                   "floating_point_type_DropletFile", "class_type_DropletFile", 
                   "type_argument_list_DropletFile", "argument_list_DropletFile", 
                   "argument_DropletFile", "expression_DropletFile", "non_assignment_expression_DropletFile", 
                   "assignment_DropletFile", "assignment_operator_DropletFile", 
                   "conditional_expression_DropletFile", "null_coalescing_expression_DropletFile", 
                   "conditional_or_expression_DropletFile", "conditional_and_expression_DropletFile", 
                   "inclusive_or_expression_DropletFile", "exclusive_or_expression_DropletFile", 
                   "and_expression_DropletFile", "equality_expression_DropletFile", 
                   "relational_expression_DropletFile", "shift_expression_DropletFile", 
                   "additive_expression_DropletFile", "multiplicative_expression_DropletFile", 
                   "unary_expression_DropletFile", "primary_expression_DropletFile", 
                   "primary_expression_start_DropletFile", "member_access_DropletFile", 
                   "bracket_expression_DropletFile", "indexer_argument_DropletFile", 
                   "predefined_type_DropletFile", "expression_list_DropletFile", 
                   "object_or_collection_initializer_DropletFile", "object_initializer_DropletFile", 
                   "member_initializer_list_DropletFile", "member_initializer_DropletFile", 
                   "initializer_value_DropletFile", "collection_initializer_DropletFile", 
                   "element_initializer_DropletFile", "anonymous_object_initializer_DropletFile", 
                   "member_declarator_list_DropletFile", "member_declarator_DropletFile", 
                   "unbound_type_name_DropletFile", "generic_dimension_specifier_DropletFile", 
                   "isType_DropletFile", "lambda_expression_DropletFile", 
                   "anonymous_function_signature_DropletFile", "explicit_anonymous_function_parameter_list_DropletFile", 
                   "explicit_anonymous_function_parameter_DropletFile", 
                   "implicit_anonymous_function_parameter_list_DropletFile", 
                   "anonymous_function_body_DropletFile", "query_expression_DropletFile", 
                   "from_clause_DropletFile", "query_body_DropletFile", 
                   "query_body_clause_DropletFile", "let_clause_DropletFile", 
                   "where_clause_DropletFile", "combined_join_clause_DropletFile", 
                   "orderby_clause_DropletFile", "ordering_DropletFile", 
                   "select_or_group_clause_DropletFile", "query_continuation_DropletFile", 
                   "statement_DropletFile", "labeled_Statement_DropletFile", 
                   "embedded_statement_DropletFile", "simple_embedded_statement_DropletFile", 
                   "block_DropletFile", "local_variable_declaration_DropletFile", 
                   "local_variable_type_DropletFile", "local_variable_declarator_DropletFile", 
                   "local_variable_initializer_DropletFile", "local_constant_declaration_DropletFile", 
                   "if_body_DropletFile", "switch_section_DropletFile", 
                   "switch_label_DropletFile", "statement_list_DropletFile", 
                   "for_initializer_DropletFile", "for_iterator_DropletFile", 
                   "catch_clauses_DropletFile", "specific_catch_clause_DropletFile", 
                   "general_catch_clause_DropletFile", "exception_filter_DropletFile", 
                   "finally_clause_DropletFile", "resource_acquisition_DropletFile", 
                   "namespace_declaration_DropletFile", "qualified_identifier_DropletFile", 
                   "namespace_body_DropletFile", "extern_alias_directives_DropletFile", 
                   "extern_alias_directive_DropletFile", "using_directives_DropletFile", 
                   "using_directive_DropletFile", "namespace_member_declarations_DropletFile", 
                   "namespace_member_declaration_DropletFile", "type_declaration_DropletFile", 
                   "qualified_alias_member_DropletFile", "type_parameter_list_DropletFile", 
                   "type_parameter_DropletFile", "class_base_DropletFile", 
                   "interface_type_list_DropletFile", "type_parameter_constraints_clauses_DropletFile", 
                   "type_parameter_constraints_clause_DropletFile", "type_parameter_constraints_DropletFile", 
                   "primary_constraint_DropletFile", "secondary_constraints_DropletFile", 
                   "constructor_constraint_DropletFile", "class_body_DropletFile", 
                   "class_member_declarations_DropletFile", "class_member_declaration_DropletFile", 
                   "all_member_modifiers_DropletFile", "all_member_modifier_DropletFile", 
                   "common_member_declaration_DropletFile", "typed_member_declaration_DropletFile", 
                   "constant_declarators_DropletFile", "constant_declarator_DropletFile", 
                   "variable_declarators_DropletFile", "variable_declarator_DropletFile", 
                   "variable_initializer_DropletFile", "return_type_DropletFile", 
                   "member_name_DropletFile", "method_body_DropletFile", 
                   "formal_parameter_list_DropletFile", "fixed_parameters_DropletFile", 
                   "fixed_parameter_DropletFile", "parameter_modifier_DropletFile", 
                   "parameter_array_DropletFile", "accessor_declarations_DropletFile", 
                   "get_accessor_declaration_DropletFile", "set_accessor_declaration_DropletFile", 
                   "accessor_modifier_DropletFile", "accessor_body_DropletFile", 
                   "event_accessor_declarations_DropletFile", "add_accessor_declaration_DropletFile", 
                   "remove_accessor_declaration_DropletFile", "overloadable_operator_DropletFile", 
                   "conversion_operator_declarator_DropletFile", "constructor_initializer_DropletFile", 
                   "body_DropletFile", "struct_interfaces_DropletFile", 
                   "struct_body_DropletFile", "struct_member_declaration_DropletFile", 
                   "array_type_DropletFile", "rank_specifier_DropletFile", 
                   "array_initializer_DropletFile", "variant_type_parameter_list_DropletFile", 
                   "variant_type_parameter_DropletFile", "variance_annotation_DropletFile", 
                   "interface_base_DropletFile", "interface_body_DropletFile", 
                   "interface_member_declaration_DropletFile", "interface_accessors_DropletFile", 
                   "enum_base_DropletFile", "enum_body_DropletFile", "enum_member_declaration_DropletFile", 
                   "global_attribute_section_DropletFile", "global_attribute_target_DropletFile", 
                   "attributes_DropletFile", "attribute_section_DropletFile", 
                   "attribute_target_DropletFile", "attribute_list_DropletFile", 
                   "attribute_DropletFile", "attribute_argument_DropletFile", 
                   "pointer_type_DropletFile", "fixed_pointer_declarators_DropletFile", 
                   "fixed_pointer_declarator_DropletFile", "fixed_pointer_initializer_DropletFile", 
                   "fixed_size_buffer_declarator_DropletFile", "local_variable_initializer_unsafe_DropletFile", 
                   "right_arrow_DropletFile", "right_shift_DropletFile", 
                   "right_shift_assignment_DropletFile", "literal_DropletFile", 
                   "boolean_literal_DropletFile", "string_literal_DropletFile", 
                   "interpolated_regular_string_DropletFile", "interpolated_verbatium_string_DropletFile", 
                   "interpolated_regular_string_part_DropletFile", "interpolated_verbatium_string_part_DropletFile", 
                   "interpolated_string_expression_DropletFile", "keyword_DropletFile", 
                   "class_definition_DropletFile", "struct_definition_DropletFile", 
                   "interface_definition_DropletFile", "enum_definition_DropletFile", 
                   "delegate_definition_DropletFile", "event_declaration_DropletFile", 
                   "field_declaration_DropletFile", "property_declaration_DropletFile", 
                   "constant_declaration_DropletFile", "indexer_declaration_DropletFile", 
                   "destructor_definition_DropletFile", "constructor_declaration_DropletFile", 
                   "method_declaration_DropletFile", "method_member_name_DropletFile", 
                   "operator_declaration_DropletFile", "arg_declaration_DropletFile", 
                   "method_invocation_DropletFile", "object_creation_expression_DropletFile", 
                   "identifier_DropletFile" ];

function CSharpParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CSharpParser.prototype = Object.create(antlr4.Parser.prototype);
CSharpParser.prototype.constructor = CSharpParser;

Object.defineProperty(CSharpParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CSharpParser.EOF = antlr4.Token.EOF;
CSharpParser.BYTE_ORDER_MARK = 1;
CSharpParser.SINGLE_LINE_DOC_COMMENT = 2;
CSharpParser.DELIMITED_DOC_COMMENT = 3;
CSharpParser.SINGLE_LINE_COMMENT = 4;
CSharpParser.DELIMITED_COMMENT = 5;
CSharpParser.WHITESPACES = 6;
CSharpParser.SHARP = 7;
CSharpParser.ABSTRACT = 8;
CSharpParser.ADD = 9;
CSharpParser.ALIAS = 10;
CSharpParser.ARGLIST = 11;
CSharpParser.AS = 12;
CSharpParser.ASCENDING = 13;
CSharpParser.ASYNC = 14;
CSharpParser.AWAIT = 15;
CSharpParser.BASE = 16;
CSharpParser.BOOL = 17;
CSharpParser.BREAK = 18;
CSharpParser.BY = 19;
CSharpParser.BYTE = 20;
CSharpParser.CASE = 21;
CSharpParser.CATCH = 22;
CSharpParser.CHAR = 23;
CSharpParser.CHECKED = 24;
CSharpParser.CLASS = 25;
CSharpParser.CONST = 26;
CSharpParser.CONTINUE = 27;
CSharpParser.DECIMAL = 28;
CSharpParser.DEFAULT = 29;
CSharpParser.DELEGATE = 30;
CSharpParser.DESCENDING = 31;
CSharpParser.DO = 32;
CSharpParser.DOUBLE = 33;
CSharpParser.DYNAMIC = 34;
CSharpParser.ELSE = 35;
CSharpParser.ENUM = 36;
CSharpParser.EQUALS = 37;
CSharpParser.EVENT = 38;
CSharpParser.EXPLICIT = 39;
CSharpParser.EXTERN = 40;
CSharpParser.FALSE = 41;
CSharpParser.FINALLY = 42;
CSharpParser.FIXED = 43;
CSharpParser.FLOAT = 44;
CSharpParser.FOR = 45;
CSharpParser.FOREACH = 46;
CSharpParser.FROM = 47;
CSharpParser.GET = 48;
CSharpParser.GOTO = 49;
CSharpParser.GROUP = 50;
CSharpParser.IF = 51;
CSharpParser.IMPLICIT = 52;
CSharpParser.IN = 53;
CSharpParser.INT = 54;
CSharpParser.INTERFACE = 55;
CSharpParser.INTERNAL = 56;
CSharpParser.INTO = 57;
CSharpParser.IS = 58;
CSharpParser.JOIN = 59;
CSharpParser.LET = 60;
CSharpParser.LOCK = 61;
CSharpParser.LONG = 62;
CSharpParser.NAMEOF = 63;
CSharpParser.NAMESPACE = 64;
CSharpParser.NEW = 65;
CSharpParser.NULL = 66;
CSharpParser.OBJECT = 67;
CSharpParser.ON = 68;
CSharpParser.OPERATOR = 69;
CSharpParser.ORDERBY = 70;
CSharpParser.OUT = 71;
CSharpParser.OVERRIDE = 72;
CSharpParser.PARAMS = 73;
CSharpParser.PARTIAL = 74;
CSharpParser.PRIVATE = 75;
CSharpParser.PROTECTED = 76;
CSharpParser.PUBLIC = 77;
CSharpParser.READONLY = 78;
CSharpParser.REF = 79;
CSharpParser.REMOVE = 80;
CSharpParser.RETURN = 81;
CSharpParser.SBYTE = 82;
CSharpParser.SEALED = 83;
CSharpParser.SELECT = 84;
CSharpParser.SET = 85;
CSharpParser.SHORT = 86;
CSharpParser.SIZEOF = 87;
CSharpParser.STACKALLOC = 88;
CSharpParser.STATIC = 89;
CSharpParser.STRING = 90;
CSharpParser.STRUCT = 91;
CSharpParser.SWITCH = 92;
CSharpParser.THIS = 93;
CSharpParser.THROW = 94;
CSharpParser.TRUE = 95;
CSharpParser.TRY = 96;
CSharpParser.TYPEOF = 97;
CSharpParser.UINT = 98;
CSharpParser.ULONG = 99;
CSharpParser.UNCHECKED = 100;
CSharpParser.UNSAFE = 101;
CSharpParser.USHORT = 102;
CSharpParser.USING = 103;
CSharpParser.VAR = 104;
CSharpParser.VIRTUAL = 105;
CSharpParser.VOID = 106;
CSharpParser.VOLATILE = 107;
CSharpParser.WHEN = 108;
CSharpParser.WHERE = 109;
CSharpParser.WHILE = 110;
CSharpParser.YIELD = 111;
CSharpParser.IDENTIFIER = 112;
CSharpParser.LITERAL_ACCESS = 113;
CSharpParser.INTEGER_LITERAL = 114;
CSharpParser.HEX_INTEGER_LITERAL = 115;
CSharpParser.REAL_LITERAL = 116;
CSharpParser.CHARACTER_LITERAL = 117;
CSharpParser.REGULAR_STRING = 118;
CSharpParser.VERBATIUM_STRING = 119;
CSharpParser.INTERPOLATED_REGULAR_STRING_START = 120;
CSharpParser.INTERPOLATED_VERBATIUM_STRING_START = 121;
CSharpParser.OPEN_BRACE = 122;
CSharpParser.CLOSE_BRACE = 123;
CSharpParser.OPEN_BRACKET = 124;
CSharpParser.CLOSE_BRACKET = 125;
CSharpParser.OPEN_PARENS = 126;
CSharpParser.CLOSE_PARENS = 127;
CSharpParser.DOT = 128;
CSharpParser.COMMA = 129;
CSharpParser.COLON = 130;
CSharpParser.SEMICOLON = 131;
CSharpParser.PLUS = 132;
CSharpParser.MINUS = 133;
CSharpParser.STAR = 134;
CSharpParser.DIV = 135;
CSharpParser.PERCENT = 136;
CSharpParser.AMP = 137;
CSharpParser.BITWISE_OR = 138;
CSharpParser.CARET = 139;
CSharpParser.BANG = 140;
CSharpParser.TILDE = 141;
CSharpParser.ASSIGNMENT = 142;
CSharpParser.LT = 143;
CSharpParser.GT = 144;
CSharpParser.INTERR = 145;
CSharpParser.DOUBLE_COLON = 146;
CSharpParser.OP_COALESCING = 147;
CSharpParser.OP_INC = 148;
CSharpParser.OP_DEC = 149;
CSharpParser.OP_AND = 150;
CSharpParser.OP_OR = 151;
CSharpParser.OP_PTR = 152;
CSharpParser.OP_EQ = 153;
CSharpParser.OP_NE = 154;
CSharpParser.OP_LE = 155;
CSharpParser.OP_GE = 156;
CSharpParser.OP_ADD_ASSIGNMENT = 157;
CSharpParser.OP_SUB_ASSIGNMENT = 158;
CSharpParser.OP_MULT_ASSIGNMENT = 159;
CSharpParser.OP_DIV_ASSIGNMENT = 160;
CSharpParser.OP_MOD_ASSIGNMENT = 161;
CSharpParser.OP_AND_ASSIGNMENT = 162;
CSharpParser.OP_OR_ASSIGNMENT = 163;
CSharpParser.OP_XOR_ASSIGNMENT = 164;
CSharpParser.OP_LEFT_SHIFT = 165;
CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT = 166;
CSharpParser.DOUBLE_CURLY_INSIDE = 167;
CSharpParser.OPEN_BRACE_INSIDE = 168;
CSharpParser.REGULAR_CHAR_INSIDE = 169;
CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE = 170;
CSharpParser.DOUBLE_QUOTE_INSIDE = 171;
CSharpParser.REGULAR_STRING_INSIDE = 172;
CSharpParser.VERBATIUM_INSIDE_STRING = 173;
CSharpParser.CLOSE_BRACE_INSIDE = 174;
CSharpParser.FORMAT_STRING = 175;
CSharpParser.DIRECTIVE_WHITESPACES = 176;
CSharpParser.DIGITS = 177;
CSharpParser.DEFINE = 178;
CSharpParser.UNDEF = 179;
CSharpParser.ELIF = 180;
CSharpParser.ENDIF = 181;
CSharpParser.LINE = 182;
CSharpParser.ERROR = 183;
CSharpParser.WARNING = 184;
CSharpParser.REGION = 185;
CSharpParser.ENDREGION = 186;
CSharpParser.PRAGMA = 187;
CSharpParser.DIRECTIVE_HIDDEN = 188;
CSharpParser.CONDITIONAL_SYMBOL = 189;
CSharpParser.DIRECTIVE_NEW_LINE = 190;
CSharpParser.TEXT = 191;
CSharpParser.DOUBLE_CURLY_CLOSE_INSIDE = 192;

CSharpParser.RULE_compilationUnit = 0;
CSharpParser.RULE_namespace_or_type_name = 1;
CSharpParser.RULE_var_type = 2;
CSharpParser.RULE_base_type = 3;
CSharpParser.RULE_simple_type = 4;
CSharpParser.RULE_numeric_type = 5;
CSharpParser.RULE_integral_type = 6;
CSharpParser.RULE_floating_point_type = 7;
CSharpParser.RULE_class_type = 8;
CSharpParser.RULE_type_argument_list = 9;
CSharpParser.RULE_argument_list = 10;
CSharpParser.RULE_argument = 11;
CSharpParser.RULE_expression = 12;
CSharpParser.RULE_non_assignment_expression = 13;
CSharpParser.RULE_assignment = 14;
CSharpParser.RULE_assignment_operator = 15;
CSharpParser.RULE_conditional_expression = 16;
CSharpParser.RULE_null_coalescing_expression = 17;
CSharpParser.RULE_conditional_or_expression = 18;
CSharpParser.RULE_conditional_and_expression = 19;
CSharpParser.RULE_inclusive_or_expression = 20;
CSharpParser.RULE_exclusive_or_expression = 21;
CSharpParser.RULE_and_expression = 22;
CSharpParser.RULE_equality_expression = 23;
CSharpParser.RULE_relational_expression = 24;
CSharpParser.RULE_shift_expression = 25;
CSharpParser.RULE_additive_expression = 26;
CSharpParser.RULE_multiplicative_expression = 27;
CSharpParser.RULE_unary_expression = 28;
CSharpParser.RULE_primary_expression = 29;
CSharpParser.RULE_primary_expression_start = 30;
CSharpParser.RULE_member_access = 31;
CSharpParser.RULE_bracket_expression = 32;
CSharpParser.RULE_indexer_argument = 33;
CSharpParser.RULE_predefined_type = 34;
CSharpParser.RULE_expression_list = 35;
CSharpParser.RULE_object_or_collection_initializer = 36;
CSharpParser.RULE_object_initializer = 37;
CSharpParser.RULE_member_initializer_list = 38;
CSharpParser.RULE_member_initializer = 39;
CSharpParser.RULE_initializer_value = 40;
CSharpParser.RULE_collection_initializer = 41;
CSharpParser.RULE_element_initializer = 42;
CSharpParser.RULE_anonymous_object_initializer = 43;
CSharpParser.RULE_member_declarator_list = 44;
CSharpParser.RULE_member_declarator = 45;
CSharpParser.RULE_unbound_type_name = 46;
CSharpParser.RULE_generic_dimension_specifier = 47;
CSharpParser.RULE_isType = 48;
CSharpParser.RULE_lambda_expression = 49;
CSharpParser.RULE_anonymous_function_signature = 50;
CSharpParser.RULE_explicit_anonymous_function_parameter_list = 51;
CSharpParser.RULE_explicit_anonymous_function_parameter = 52;
CSharpParser.RULE_implicit_anonymous_function_parameter_list = 53;
CSharpParser.RULE_anonymous_function_body = 54;
CSharpParser.RULE_query_expression = 55;
CSharpParser.RULE_from_clause = 56;
CSharpParser.RULE_query_body = 57;
CSharpParser.RULE_query_body_clause = 58;
CSharpParser.RULE_let_clause = 59;
CSharpParser.RULE_where_clause = 60;
CSharpParser.RULE_combined_join_clause = 61;
CSharpParser.RULE_orderby_clause = 62;
CSharpParser.RULE_ordering = 63;
CSharpParser.RULE_select_or_group_clause = 64;
CSharpParser.RULE_query_continuation = 65;
CSharpParser.RULE_statement = 66;
CSharpParser.RULE_labeled_Statement = 67;
CSharpParser.RULE_embedded_statement = 68;
CSharpParser.RULE_simple_embedded_statement = 69;
CSharpParser.RULE_block = 70;
CSharpParser.RULE_local_variable_declaration = 71;
CSharpParser.RULE_local_variable_type = 72;
CSharpParser.RULE_local_variable_declarator = 73;
CSharpParser.RULE_local_variable_initializer = 74;
CSharpParser.RULE_local_constant_declaration = 75;
CSharpParser.RULE_if_body = 76;
CSharpParser.RULE_switch_section = 77;
CSharpParser.RULE_switch_label = 78;
CSharpParser.RULE_statement_list = 79;
CSharpParser.RULE_for_initializer = 80;
CSharpParser.RULE_for_iterator = 81;
CSharpParser.RULE_catch_clauses = 82;
CSharpParser.RULE_specific_catch_clause = 83;
CSharpParser.RULE_general_catch_clause = 84;
CSharpParser.RULE_exception_filter = 85;
CSharpParser.RULE_finally_clause = 86;
CSharpParser.RULE_resource_acquisition = 87;
CSharpParser.RULE_namespace_declaration = 88;
CSharpParser.RULE_qualified_identifier = 89;
CSharpParser.RULE_namespace_body = 90;
CSharpParser.RULE_extern_alias_directives = 91;
CSharpParser.RULE_extern_alias_directive = 92;
CSharpParser.RULE_using_directives = 93;
CSharpParser.RULE_using_directive = 94;
CSharpParser.RULE_namespace_member_declarations = 95;
CSharpParser.RULE_namespace_member_declaration = 96;
CSharpParser.RULE_type_declaration = 97;
CSharpParser.RULE_qualified_alias_member = 98;
CSharpParser.RULE_type_parameter_list = 99;
CSharpParser.RULE_type_parameter = 100;
CSharpParser.RULE_class_base = 101;
CSharpParser.RULE_interface_type_list = 102;
CSharpParser.RULE_type_parameter_constraints_clauses = 103;
CSharpParser.RULE_type_parameter_constraints_clause = 104;
CSharpParser.RULE_type_parameter_constraints = 105;
CSharpParser.RULE_primary_constraint = 106;
CSharpParser.RULE_secondary_constraints = 107;
CSharpParser.RULE_constructor_constraint = 108;
CSharpParser.RULE_class_body = 109;
CSharpParser.RULE_class_member_declarations = 110;
CSharpParser.RULE_class_member_declaration = 111;
CSharpParser.RULE_all_member_modifiers = 112;
CSharpParser.RULE_all_member_modifier = 113;
CSharpParser.RULE_common_member_declaration = 114;
CSharpParser.RULE_typed_member_declaration = 115;
CSharpParser.RULE_constant_declarators = 116;
CSharpParser.RULE_constant_declarator = 117;
CSharpParser.RULE_variable_declarators = 118;
CSharpParser.RULE_variable_declarator = 119;
CSharpParser.RULE_variable_initializer = 120;
CSharpParser.RULE_return_type = 121;
CSharpParser.RULE_member_name = 122;
CSharpParser.RULE_method_body = 123;
CSharpParser.RULE_formal_parameter_list = 124;
CSharpParser.RULE_fixed_parameters = 125;
CSharpParser.RULE_fixed_parameter = 126;
CSharpParser.RULE_parameter_modifier = 127;
CSharpParser.RULE_parameter_array = 128;
CSharpParser.RULE_accessor_declarations = 129;
CSharpParser.RULE_get_accessor_declaration = 130;
CSharpParser.RULE_set_accessor_declaration = 131;
CSharpParser.RULE_accessor_modifier = 132;
CSharpParser.RULE_accessor_body = 133;
CSharpParser.RULE_event_accessor_declarations = 134;
CSharpParser.RULE_add_accessor_declaration = 135;
CSharpParser.RULE_remove_accessor_declaration = 136;
CSharpParser.RULE_overloadable_operator = 137;
CSharpParser.RULE_conversion_operator_declarator = 138;
CSharpParser.RULE_constructor_initializer = 139;
CSharpParser.RULE_body = 140;
CSharpParser.RULE_struct_interfaces = 141;
CSharpParser.RULE_struct_body = 142;
CSharpParser.RULE_struct_member_declaration = 143;
CSharpParser.RULE_array_type = 144;
CSharpParser.RULE_rank_specifier = 145;
CSharpParser.RULE_array_initializer = 146;
CSharpParser.RULE_variant_type_parameter_list = 147;
CSharpParser.RULE_variant_type_parameter = 148;
CSharpParser.RULE_variance_annotation = 149;
CSharpParser.RULE_interface_base = 150;
CSharpParser.RULE_interface_body = 151;
CSharpParser.RULE_interface_member_declaration = 152;
CSharpParser.RULE_interface_accessors = 153;
CSharpParser.RULE_enum_base = 154;
CSharpParser.RULE_enum_body = 155;
CSharpParser.RULE_enum_member_declaration = 156;
CSharpParser.RULE_global_attribute_section = 157;
CSharpParser.RULE_global_attribute_target = 158;
CSharpParser.RULE_attributes = 159;
CSharpParser.RULE_attribute_section = 160;
CSharpParser.RULE_attribute_target = 161;
CSharpParser.RULE_attribute_list = 162;
CSharpParser.RULE_attribute = 163;
CSharpParser.RULE_attribute_argument = 164;
CSharpParser.RULE_pointer_type = 165;
CSharpParser.RULE_fixed_pointer_declarators = 166;
CSharpParser.RULE_fixed_pointer_declarator = 167;
CSharpParser.RULE_fixed_pointer_initializer = 168;
CSharpParser.RULE_fixed_size_buffer_declarator = 169;
CSharpParser.RULE_local_variable_initializer_unsafe = 170;
CSharpParser.RULE_right_arrow = 171;
CSharpParser.RULE_right_shift = 172;
CSharpParser.RULE_right_shift_assignment = 173;
CSharpParser.RULE_literal = 174;
CSharpParser.RULE_boolean_literal = 175;
CSharpParser.RULE_string_literal = 176;
CSharpParser.RULE_interpolated_regular_string = 177;
CSharpParser.RULE_interpolated_verbatium_string = 178;
CSharpParser.RULE_interpolated_regular_string_part = 179;
CSharpParser.RULE_interpolated_verbatium_string_part = 180;
CSharpParser.RULE_interpolated_string_expression = 181;
CSharpParser.RULE_keyword = 182;
CSharpParser.RULE_class_definition = 183;
CSharpParser.RULE_struct_definition = 184;
CSharpParser.RULE_interface_definition = 185;
CSharpParser.RULE_enum_definition = 186;
CSharpParser.RULE_delegate_definition = 187;
CSharpParser.RULE_event_declaration = 188;
CSharpParser.RULE_field_declaration = 189;
CSharpParser.RULE_property_declaration = 190;
CSharpParser.RULE_constant_declaration = 191;
CSharpParser.RULE_indexer_declaration = 192;
CSharpParser.RULE_destructor_definition = 193;
CSharpParser.RULE_constructor_declaration = 194;
CSharpParser.RULE_method_declaration = 195;
CSharpParser.RULE_method_member_name = 196;
CSharpParser.RULE_operator_declaration = 197;
CSharpParser.RULE_arg_declaration = 198;
CSharpParser.RULE_method_invocation = 199;
CSharpParser.RULE_object_creation_expression = 200;
CSharpParser.RULE_identifier = 201;
CSharpParser.RULE_compilationUnit_DropletFile = 202;
CSharpParser.RULE_namespace_or_type_name_DropletFile = 203;
CSharpParser.RULE_var_type_DropletFile = 204;
CSharpParser.RULE_base_type_DropletFile = 205;
CSharpParser.RULE_simple_type_DropletFile = 206;
CSharpParser.RULE_numeric_type_DropletFile = 207;
CSharpParser.RULE_integral_type_DropletFile = 208;
CSharpParser.RULE_floating_point_type_DropletFile = 209;
CSharpParser.RULE_class_type_DropletFile = 210;
CSharpParser.RULE_type_argument_list_DropletFile = 211;
CSharpParser.RULE_argument_list_DropletFile = 212;
CSharpParser.RULE_argument_DropletFile = 213;
CSharpParser.RULE_expression_DropletFile = 214;
CSharpParser.RULE_non_assignment_expression_DropletFile = 215;
CSharpParser.RULE_assignment_DropletFile = 216;
CSharpParser.RULE_assignment_operator_DropletFile = 217;
CSharpParser.RULE_conditional_expression_DropletFile = 218;
CSharpParser.RULE_null_coalescing_expression_DropletFile = 219;
CSharpParser.RULE_conditional_or_expression_DropletFile = 220;
CSharpParser.RULE_conditional_and_expression_DropletFile = 221;
CSharpParser.RULE_inclusive_or_expression_DropletFile = 222;
CSharpParser.RULE_exclusive_or_expression_DropletFile = 223;
CSharpParser.RULE_and_expression_DropletFile = 224;
CSharpParser.RULE_equality_expression_DropletFile = 225;
CSharpParser.RULE_relational_expression_DropletFile = 226;
CSharpParser.RULE_shift_expression_DropletFile = 227;
CSharpParser.RULE_additive_expression_DropletFile = 228;
CSharpParser.RULE_multiplicative_expression_DropletFile = 229;
CSharpParser.RULE_unary_expression_DropletFile = 230;
CSharpParser.RULE_primary_expression_DropletFile = 231;
CSharpParser.RULE_primary_expression_start_DropletFile = 232;
CSharpParser.RULE_member_access_DropletFile = 233;
CSharpParser.RULE_bracket_expression_DropletFile = 234;
CSharpParser.RULE_indexer_argument_DropletFile = 235;
CSharpParser.RULE_predefined_type_DropletFile = 236;
CSharpParser.RULE_expression_list_DropletFile = 237;
CSharpParser.RULE_object_or_collection_initializer_DropletFile = 238;
CSharpParser.RULE_object_initializer_DropletFile = 239;
CSharpParser.RULE_member_initializer_list_DropletFile = 240;
CSharpParser.RULE_member_initializer_DropletFile = 241;
CSharpParser.RULE_initializer_value_DropletFile = 242;
CSharpParser.RULE_collection_initializer_DropletFile = 243;
CSharpParser.RULE_element_initializer_DropletFile = 244;
CSharpParser.RULE_anonymous_object_initializer_DropletFile = 245;
CSharpParser.RULE_member_declarator_list_DropletFile = 246;
CSharpParser.RULE_member_declarator_DropletFile = 247;
CSharpParser.RULE_unbound_type_name_DropletFile = 248;
CSharpParser.RULE_generic_dimension_specifier_DropletFile = 249;
CSharpParser.RULE_isType_DropletFile = 250;
CSharpParser.RULE_lambda_expression_DropletFile = 251;
CSharpParser.RULE_anonymous_function_signature_DropletFile = 252;
CSharpParser.RULE_explicit_anonymous_function_parameter_list_DropletFile = 253;
CSharpParser.RULE_explicit_anonymous_function_parameter_DropletFile = 254;
CSharpParser.RULE_implicit_anonymous_function_parameter_list_DropletFile = 255;
CSharpParser.RULE_anonymous_function_body_DropletFile = 256;
CSharpParser.RULE_query_expression_DropletFile = 257;
CSharpParser.RULE_from_clause_DropletFile = 258;
CSharpParser.RULE_query_body_DropletFile = 259;
CSharpParser.RULE_query_body_clause_DropletFile = 260;
CSharpParser.RULE_let_clause_DropletFile = 261;
CSharpParser.RULE_where_clause_DropletFile = 262;
CSharpParser.RULE_combined_join_clause_DropletFile = 263;
CSharpParser.RULE_orderby_clause_DropletFile = 264;
CSharpParser.RULE_ordering_DropletFile = 265;
CSharpParser.RULE_select_or_group_clause_DropletFile = 266;
CSharpParser.RULE_query_continuation_DropletFile = 267;
CSharpParser.RULE_statement_DropletFile = 268;
CSharpParser.RULE_labeled_Statement_DropletFile = 269;
CSharpParser.RULE_embedded_statement_DropletFile = 270;
CSharpParser.RULE_simple_embedded_statement_DropletFile = 271;
CSharpParser.RULE_block_DropletFile = 272;
CSharpParser.RULE_local_variable_declaration_DropletFile = 273;
CSharpParser.RULE_local_variable_type_DropletFile = 274;
CSharpParser.RULE_local_variable_declarator_DropletFile = 275;
CSharpParser.RULE_local_variable_initializer_DropletFile = 276;
CSharpParser.RULE_local_constant_declaration_DropletFile = 277;
CSharpParser.RULE_if_body_DropletFile = 278;
CSharpParser.RULE_switch_section_DropletFile = 279;
CSharpParser.RULE_switch_label_DropletFile = 280;
CSharpParser.RULE_statement_list_DropletFile = 281;
CSharpParser.RULE_for_initializer_DropletFile = 282;
CSharpParser.RULE_for_iterator_DropletFile = 283;
CSharpParser.RULE_catch_clauses_DropletFile = 284;
CSharpParser.RULE_specific_catch_clause_DropletFile = 285;
CSharpParser.RULE_general_catch_clause_DropletFile = 286;
CSharpParser.RULE_exception_filter_DropletFile = 287;
CSharpParser.RULE_finally_clause_DropletFile = 288;
CSharpParser.RULE_resource_acquisition_DropletFile = 289;
CSharpParser.RULE_namespace_declaration_DropletFile = 290;
CSharpParser.RULE_qualified_identifier_DropletFile = 291;
CSharpParser.RULE_namespace_body_DropletFile = 292;
CSharpParser.RULE_extern_alias_directives_DropletFile = 293;
CSharpParser.RULE_extern_alias_directive_DropletFile = 294;
CSharpParser.RULE_using_directives_DropletFile = 295;
CSharpParser.RULE_using_directive_DropletFile = 296;
CSharpParser.RULE_namespace_member_declarations_DropletFile = 297;
CSharpParser.RULE_namespace_member_declaration_DropletFile = 298;
CSharpParser.RULE_type_declaration_DropletFile = 299;
CSharpParser.RULE_qualified_alias_member_DropletFile = 300;
CSharpParser.RULE_type_parameter_list_DropletFile = 301;
CSharpParser.RULE_type_parameter_DropletFile = 302;
CSharpParser.RULE_class_base_DropletFile = 303;
CSharpParser.RULE_interface_type_list_DropletFile = 304;
CSharpParser.RULE_type_parameter_constraints_clauses_DropletFile = 305;
CSharpParser.RULE_type_parameter_constraints_clause_DropletFile = 306;
CSharpParser.RULE_type_parameter_constraints_DropletFile = 307;
CSharpParser.RULE_primary_constraint_DropletFile = 308;
CSharpParser.RULE_secondary_constraints_DropletFile = 309;
CSharpParser.RULE_constructor_constraint_DropletFile = 310;
CSharpParser.RULE_class_body_DropletFile = 311;
CSharpParser.RULE_class_member_declarations_DropletFile = 312;
CSharpParser.RULE_class_member_declaration_DropletFile = 313;
CSharpParser.RULE_all_member_modifiers_DropletFile = 314;
CSharpParser.RULE_all_member_modifier_DropletFile = 315;
CSharpParser.RULE_common_member_declaration_DropletFile = 316;
CSharpParser.RULE_typed_member_declaration_DropletFile = 317;
CSharpParser.RULE_constant_declarators_DropletFile = 318;
CSharpParser.RULE_constant_declarator_DropletFile = 319;
CSharpParser.RULE_variable_declarators_DropletFile = 320;
CSharpParser.RULE_variable_declarator_DropletFile = 321;
CSharpParser.RULE_variable_initializer_DropletFile = 322;
CSharpParser.RULE_return_type_DropletFile = 323;
CSharpParser.RULE_member_name_DropletFile = 324;
CSharpParser.RULE_method_body_DropletFile = 325;
CSharpParser.RULE_formal_parameter_list_DropletFile = 326;
CSharpParser.RULE_fixed_parameters_DropletFile = 327;
CSharpParser.RULE_fixed_parameter_DropletFile = 328;
CSharpParser.RULE_parameter_modifier_DropletFile = 329;
CSharpParser.RULE_parameter_array_DropletFile = 330;
CSharpParser.RULE_accessor_declarations_DropletFile = 331;
CSharpParser.RULE_get_accessor_declaration_DropletFile = 332;
CSharpParser.RULE_set_accessor_declaration_DropletFile = 333;
CSharpParser.RULE_accessor_modifier_DropletFile = 334;
CSharpParser.RULE_accessor_body_DropletFile = 335;
CSharpParser.RULE_event_accessor_declarations_DropletFile = 336;
CSharpParser.RULE_add_accessor_declaration_DropletFile = 337;
CSharpParser.RULE_remove_accessor_declaration_DropletFile = 338;
CSharpParser.RULE_overloadable_operator_DropletFile = 339;
CSharpParser.RULE_conversion_operator_declarator_DropletFile = 340;
CSharpParser.RULE_constructor_initializer_DropletFile = 341;
CSharpParser.RULE_body_DropletFile = 342;
CSharpParser.RULE_struct_interfaces_DropletFile = 343;
CSharpParser.RULE_struct_body_DropletFile = 344;
CSharpParser.RULE_struct_member_declaration_DropletFile = 345;
CSharpParser.RULE_array_type_DropletFile = 346;
CSharpParser.RULE_rank_specifier_DropletFile = 347;
CSharpParser.RULE_array_initializer_DropletFile = 348;
CSharpParser.RULE_variant_type_parameter_list_DropletFile = 349;
CSharpParser.RULE_variant_type_parameter_DropletFile = 350;
CSharpParser.RULE_variance_annotation_DropletFile = 351;
CSharpParser.RULE_interface_base_DropletFile = 352;
CSharpParser.RULE_interface_body_DropletFile = 353;
CSharpParser.RULE_interface_member_declaration_DropletFile = 354;
CSharpParser.RULE_interface_accessors_DropletFile = 355;
CSharpParser.RULE_enum_base_DropletFile = 356;
CSharpParser.RULE_enum_body_DropletFile = 357;
CSharpParser.RULE_enum_member_declaration_DropletFile = 358;
CSharpParser.RULE_global_attribute_section_DropletFile = 359;
CSharpParser.RULE_global_attribute_target_DropletFile = 360;
CSharpParser.RULE_attributes_DropletFile = 361;
CSharpParser.RULE_attribute_section_DropletFile = 362;
CSharpParser.RULE_attribute_target_DropletFile = 363;
CSharpParser.RULE_attribute_list_DropletFile = 364;
CSharpParser.RULE_attribute_DropletFile = 365;
CSharpParser.RULE_attribute_argument_DropletFile = 366;
CSharpParser.RULE_pointer_type_DropletFile = 367;
CSharpParser.RULE_fixed_pointer_declarators_DropletFile = 368;
CSharpParser.RULE_fixed_pointer_declarator_DropletFile = 369;
CSharpParser.RULE_fixed_pointer_initializer_DropletFile = 370;
CSharpParser.RULE_fixed_size_buffer_declarator_DropletFile = 371;
CSharpParser.RULE_local_variable_initializer_unsafe_DropletFile = 372;
CSharpParser.RULE_right_arrow_DropletFile = 373;
CSharpParser.RULE_right_shift_DropletFile = 374;
CSharpParser.RULE_right_shift_assignment_DropletFile = 375;
CSharpParser.RULE_literal_DropletFile = 376;
CSharpParser.RULE_boolean_literal_DropletFile = 377;
CSharpParser.RULE_string_literal_DropletFile = 378;
CSharpParser.RULE_interpolated_regular_string_DropletFile = 379;
CSharpParser.RULE_interpolated_verbatium_string_DropletFile = 380;
CSharpParser.RULE_interpolated_regular_string_part_DropletFile = 381;
CSharpParser.RULE_interpolated_verbatium_string_part_DropletFile = 382;
CSharpParser.RULE_interpolated_string_expression_DropletFile = 383;
CSharpParser.RULE_keyword_DropletFile = 384;
CSharpParser.RULE_class_definition_DropletFile = 385;
CSharpParser.RULE_struct_definition_DropletFile = 386;
CSharpParser.RULE_interface_definition_DropletFile = 387;
CSharpParser.RULE_enum_definition_DropletFile = 388;
CSharpParser.RULE_delegate_definition_DropletFile = 389;
CSharpParser.RULE_event_declaration_DropletFile = 390;
CSharpParser.RULE_field_declaration_DropletFile = 391;
CSharpParser.RULE_property_declaration_DropletFile = 392;
CSharpParser.RULE_constant_declaration_DropletFile = 393;
CSharpParser.RULE_indexer_declaration_DropletFile = 394;
CSharpParser.RULE_destructor_definition_DropletFile = 395;
CSharpParser.RULE_constructor_declaration_DropletFile = 396;
CSharpParser.RULE_method_declaration_DropletFile = 397;
CSharpParser.RULE_method_member_name_DropletFile = 398;
CSharpParser.RULE_operator_declaration_DropletFile = 399;
CSharpParser.RULE_arg_declaration_DropletFile = 400;
CSharpParser.RULE_method_invocation_DropletFile = 401;
CSharpParser.RULE_object_creation_expression_DropletFile = 402;
CSharpParser.RULE_identifier_DropletFile = 403;

function CompilationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_compilationUnit;
    return this;
}

CompilationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompilationUnitContext.prototype.constructor = CompilationUnitContext;

CompilationUnitContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

CompilationUnitContext.prototype.BYTE_ORDER_MARK = function() {
    return this.getToken(CSharpParser.BYTE_ORDER_MARK, 0);
};

CompilationUnitContext.prototype.extern_alias_directives = function() {
    return this.getTypedRuleContext(Extern_alias_directivesContext,0);
};

CompilationUnitContext.prototype.using_directives = function() {
    return this.getTypedRuleContext(Using_directivesContext,0);
};

CompilationUnitContext.prototype.global_attribute_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Global_attribute_sectionContext);
    } else {
        return this.getTypedRuleContext(Global_attribute_sectionContext,i);
    }
};

CompilationUnitContext.prototype.namespace_member_declarations = function() {
    return this.getTypedRuleContext(Namespace_member_declarationsContext,0);
};

CompilationUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCompilationUnit(this);
	}
};




CSharpParser.CompilationUnitContext = CompilationUnitContext;

CSharpParser.prototype.compilationUnit = function() {

    var localctx = new CompilationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CSharpParser.RULE_compilationUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 809;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.BYTE_ORDER_MARK) {
            this.state = 808;
            this.match(CSharpParser.BYTE_ORDER_MARK);
        }

        this.state = 812;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        if(la_===1) {
            this.state = 811;
            this.extern_alias_directives();

        }
        this.state = 815;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.USING) {
            this.state = 814;
            this.using_directives();
        }

        this.state = 820;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 817;
                this.global_attribute_section(); 
            }
            this.state = 822;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
        }

        this.state = 824;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CSharpParser.ENUM - 36)) | (1 << (CSharpParser.EXTERN - 36)) | (1 << (CSharpParser.INTERFACE - 36)) | (1 << (CSharpParser.INTERNAL - 36)) | (1 << (CSharpParser.NAMESPACE - 36)) | (1 << (CSharpParser.NEW - 36)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CSharpParser.OVERRIDE - 72)) | (1 << (CSharpParser.PARTIAL - 72)) | (1 << (CSharpParser.PRIVATE - 72)) | (1 << (CSharpParser.PROTECTED - 72)) | (1 << (CSharpParser.PUBLIC - 72)) | (1 << (CSharpParser.READONLY - 72)) | (1 << (CSharpParser.SEALED - 72)) | (1 << (CSharpParser.STATIC - 72)) | (1 << (CSharpParser.STRUCT - 72)) | (1 << (CSharpParser.UNSAFE - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CSharpParser.VIRTUAL - 105)) | (1 << (CSharpParser.VOLATILE - 105)) | (1 << (CSharpParser.OPEN_BRACKET - 105)))) !== 0)) {
            this.state = 823;
            this.namespace_member_declarations();
        }

        this.state = 826;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Namespace_or_type_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_namespace_or_type_name;
    return this;
}

Namespace_or_type_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Namespace_or_type_nameContext.prototype.constructor = Namespace_or_type_nameContext;

Namespace_or_type_nameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Namespace_or_type_nameContext.prototype.qualified_alias_member = function() {
    return this.getTypedRuleContext(Qualified_alias_memberContext,0);
};

Namespace_or_type_nameContext.prototype.type_argument_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_argument_listContext);
    } else {
        return this.getTypedRuleContext(Type_argument_listContext,i);
    }
};

Namespace_or_type_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNamespace_or_type_name(this);
	}
};

Namespace_or_type_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNamespace_or_type_name(this);
	}
};




CSharpParser.Namespace_or_type_nameContext = Namespace_or_type_nameContext;

CSharpParser.prototype.namespace_or_type_name = function() {

    var localctx = new Namespace_or_type_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CSharpParser.RULE_namespace_or_type_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 833;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.state = 828;
            this.identifier();
            this.state = 830;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
            if(la_===1) {
                this.state = 829;
                this.type_argument_list();

            }
            break;

        case 2:
            this.state = 832;
            this.qualified_alias_member();
            break;

        }
        this.state = 842;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 835;
                this.match(CSharpParser.DOT);
                this.state = 836;
                this.identifier();
                this.state = 838;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
                if(la_===1) {
                    this.state = 837;
                    this.type_argument_list();

                } 
            }
            this.state = 844;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Var_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_var_type;
    return this;
}

Var_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var_typeContext.prototype.constructor = Var_typeContext;

Var_typeContext.prototype.base_type = function() {
    return this.getTypedRuleContext(Base_typeContext,0);
};

Var_typeContext.prototype.rank_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rank_specifierContext);
    } else {
        return this.getTypedRuleContext(Rank_specifierContext,i);
    }
};

Var_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVar_type(this);
	}
};

Var_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVar_type(this);
	}
};




CSharpParser.Var_typeContext = Var_typeContext;

CSharpParser.prototype.var_type = function() {

    var localctx = new Var_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CSharpParser.RULE_var_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 845;
        this.base_type();
        this.state = 851;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 849;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CSharpParser.INTERR:
                    this.state = 846;
                    this.match(CSharpParser.INTERR);
                    break;
                case CSharpParser.OPEN_BRACKET:
                    this.state = 847;
                    this.rank_specifier();
                    break;
                case CSharpParser.STAR:
                    this.state = 848;
                    this.match(CSharpParser.STAR);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 853;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Base_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_base_type;
    return this;
}

Base_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Base_typeContext.prototype.constructor = Base_typeContext;

Base_typeContext.prototype.simple_type = function() {
    return this.getTypedRuleContext(Simple_typeContext,0);
};

Base_typeContext.prototype.class_type = function() {
    return this.getTypedRuleContext(Class_typeContext,0);
};

Base_typeContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};

Base_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBase_type(this);
	}
};

Base_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBase_type(this);
	}
};




CSharpParser.Base_typeContext = Base_typeContext;

CSharpParser.prototype.base_type = function() {

    var localctx = new Base_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CSharpParser.RULE_base_type);
    try {
        this.state = 858;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.BOOL:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.DECIMAL:
        case CSharpParser.DOUBLE:
        case CSharpParser.FLOAT:
        case CSharpParser.INT:
        case CSharpParser.LONG:
        case CSharpParser.SBYTE:
        case CSharpParser.SHORT:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.USHORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 854;
            this.simple_type();
            break;
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BY:
        case CSharpParser.DESCENDING:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.NAMEOF:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.STRING:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 855;
            this.class_type();
            break;
        case CSharpParser.VOID:
            this.enterOuterAlt(localctx, 3);
            this.state = 856;
            this.match(CSharpParser.VOID);
            this.state = 857;
            this.match(CSharpParser.STAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_simple_type;
    return this;
}

Simple_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_typeContext.prototype.constructor = Simple_typeContext;

Simple_typeContext.prototype.numeric_type = function() {
    return this.getTypedRuleContext(Numeric_typeContext,0);
};

Simple_typeContext.prototype.BOOL = function() {
    return this.getToken(CSharpParser.BOOL, 0);
};

Simple_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSimple_type(this);
	}
};

Simple_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSimple_type(this);
	}
};




CSharpParser.Simple_typeContext = Simple_typeContext;

CSharpParser.prototype.simple_type = function() {

    var localctx = new Simple_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CSharpParser.RULE_simple_type);
    try {
        this.state = 862;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.DECIMAL:
        case CSharpParser.DOUBLE:
        case CSharpParser.FLOAT:
        case CSharpParser.INT:
        case CSharpParser.LONG:
        case CSharpParser.SBYTE:
        case CSharpParser.SHORT:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.USHORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 860;
            this.numeric_type();
            break;
        case CSharpParser.BOOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 861;
            this.match(CSharpParser.BOOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_numeric_type;
    return this;
}

Numeric_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_typeContext.prototype.constructor = Numeric_typeContext;

Numeric_typeContext.prototype.integral_type = function() {
    return this.getTypedRuleContext(Integral_typeContext,0);
};

Numeric_typeContext.prototype.floating_point_type = function() {
    return this.getTypedRuleContext(Floating_point_typeContext,0);
};

Numeric_typeContext.prototype.DECIMAL = function() {
    return this.getToken(CSharpParser.DECIMAL, 0);
};

Numeric_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNumeric_type(this);
	}
};

Numeric_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNumeric_type(this);
	}
};




CSharpParser.Numeric_typeContext = Numeric_typeContext;

CSharpParser.prototype.numeric_type = function() {

    var localctx = new Numeric_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CSharpParser.RULE_numeric_type);
    try {
        this.state = 867;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.INT:
        case CSharpParser.LONG:
        case CSharpParser.SBYTE:
        case CSharpParser.SHORT:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.USHORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 864;
            this.integral_type();
            break;
        case CSharpParser.DOUBLE:
        case CSharpParser.FLOAT:
            this.enterOuterAlt(localctx, 2);
            this.state = 865;
            this.floating_point_type();
            break;
        case CSharpParser.DECIMAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 866;
            this.match(CSharpParser.DECIMAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Integral_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_integral_type;
    return this;
}

Integral_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Integral_typeContext.prototype.constructor = Integral_typeContext;

Integral_typeContext.prototype.SBYTE = function() {
    return this.getToken(CSharpParser.SBYTE, 0);
};

Integral_typeContext.prototype.BYTE = function() {
    return this.getToken(CSharpParser.BYTE, 0);
};

Integral_typeContext.prototype.SHORT = function() {
    return this.getToken(CSharpParser.SHORT, 0);
};

Integral_typeContext.prototype.USHORT = function() {
    return this.getToken(CSharpParser.USHORT, 0);
};

Integral_typeContext.prototype.INT = function() {
    return this.getToken(CSharpParser.INT, 0);
};

Integral_typeContext.prototype.UINT = function() {
    return this.getToken(CSharpParser.UINT, 0);
};

Integral_typeContext.prototype.LONG = function() {
    return this.getToken(CSharpParser.LONG, 0);
};

Integral_typeContext.prototype.ULONG = function() {
    return this.getToken(CSharpParser.ULONG, 0);
};

Integral_typeContext.prototype.CHAR = function() {
    return this.getToken(CSharpParser.CHAR, 0);
};

Integral_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIntegral_type(this);
	}
};

Integral_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIntegral_type(this);
	}
};




CSharpParser.Integral_typeContext = Integral_typeContext;

CSharpParser.prototype.integral_type = function() {

    var localctx = new Integral_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CSharpParser.RULE_integral_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 869;
        _la = this._input.LA(1);
        if(!(_la===CSharpParser.BYTE || _la===CSharpParser.CHAR || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CSharpParser.INT - 54)) | (1 << (CSharpParser.LONG - 54)) | (1 << (CSharpParser.SBYTE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CSharpParser.SHORT - 86)) | (1 << (CSharpParser.UINT - 86)) | (1 << (CSharpParser.ULONG - 86)) | (1 << (CSharpParser.USHORT - 86)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Floating_point_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_floating_point_type;
    return this;
}

Floating_point_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Floating_point_typeContext.prototype.constructor = Floating_point_typeContext;

Floating_point_typeContext.prototype.FLOAT = function() {
    return this.getToken(CSharpParser.FLOAT, 0);
};

Floating_point_typeContext.prototype.DOUBLE = function() {
    return this.getToken(CSharpParser.DOUBLE, 0);
};

Floating_point_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFloating_point_type(this);
	}
};

Floating_point_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFloating_point_type(this);
	}
};




CSharpParser.Floating_point_typeContext = Floating_point_typeContext;

CSharpParser.prototype.floating_point_type = function() {

    var localctx = new Floating_point_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CSharpParser.RULE_floating_point_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 871;
        _la = this._input.LA(1);
        if(!(_la===CSharpParser.DOUBLE || _la===CSharpParser.FLOAT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_class_type;
    return this;
}

Class_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_typeContext.prototype.constructor = Class_typeContext;

Class_typeContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};

Class_typeContext.prototype.OBJECT = function() {
    return this.getToken(CSharpParser.OBJECT, 0);
};

Class_typeContext.prototype.DYNAMIC = function() {
    return this.getToken(CSharpParser.DYNAMIC, 0);
};

Class_typeContext.prototype.STRING = function() {
    return this.getToken(CSharpParser.STRING, 0);
};

Class_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterClass_type(this);
	}
};

Class_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitClass_type(this);
	}
};




CSharpParser.Class_typeContext = Class_typeContext;

CSharpParser.prototype.class_type = function() {

    var localctx = new Class_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CSharpParser.RULE_class_type);
    try {
        this.state = 877;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 873;
            this.namespace_or_type_name();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 874;
            this.match(CSharpParser.OBJECT);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 875;
            this.match(CSharpParser.DYNAMIC);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 876;
            this.match(CSharpParser.STRING);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_argument_list;
    return this;
}

Type_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_argument_listContext.prototype.constructor = Type_argument_listContext;

Type_argument_listContext.prototype.var_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Var_typeContext);
    } else {
        return this.getTypedRuleContext(Var_typeContext,i);
    }
};

Type_argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_argument_list(this);
	}
};

Type_argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_argument_list(this);
	}
};




CSharpParser.Type_argument_listContext = Type_argument_listContext;

CSharpParser.prototype.type_argument_list = function() {

    var localctx = new Type_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CSharpParser.RULE_type_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 879;
        this.match(CSharpParser.LT);
        this.state = 880;
        this.var_type();
        this.state = 885;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 881;
            this.match(CSharpParser.COMMA);
            this.state = 882;
            this.var_type();
            this.state = 887;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 888;
        this.match(CSharpParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_argument_list;
    return this;
}

Argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_listContext.prototype.constructor = Argument_listContext;

Argument_listContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

Argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterArgument_list(this);
	}
};

Argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitArgument_list(this);
	}
};




CSharpParser.Argument_listContext = Argument_listContext;

CSharpParser.prototype.argument_list = function() {

    var localctx = new Argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CSharpParser.RULE_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 890;
        this.argument();
        this.state = 895;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 891;
            this.match(CSharpParser.COMMA);
            this.state = 892;
            this.argument();
            this.state = 897;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_argument;
    this.refout = null; // Token
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArgumentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ArgumentContext.prototype.VAR = function() {
    return this.getToken(CSharpParser.VAR, 0);
};

ArgumentContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

ArgumentContext.prototype.REF = function() {
    return this.getToken(CSharpParser.REF, 0);
};

ArgumentContext.prototype.OUT = function() {
    return this.getToken(CSharpParser.OUT, 0);
};

ArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterArgument(this);
	}
};

ArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitArgument(this);
	}
};




CSharpParser.ArgumentContext = ArgumentContext;

CSharpParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CSharpParser.RULE_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 901;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        if(la_===1) {
            this.state = 898;
            this.identifier();
            this.state = 899;
            this.match(CSharpParser.COLON);

        }
        this.state = 904;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OUT || _la===CSharpParser.REF) {
            this.state = 903;
            localctx.refout = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===CSharpParser.OUT || _la===CSharpParser.REF)) {
                localctx.refout = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 908;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 906;
            this.match(CSharpParser.VAR);

        } else if(la_===2) {
            this.state = 907;
            this.var_type();

        }
        this.state = 910;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.assignment = function() {
    return this.getTypedRuleContext(AssignmentContext,0);
};

ExpressionContext.prototype.non_assignment_expression = function() {
    return this.getTypedRuleContext(Non_assignment_expressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExpression(this);
	}
};




CSharpParser.ExpressionContext = ExpressionContext;

CSharpParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CSharpParser.RULE_expression);
    try {
        this.state = 914;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 912;
            this.assignment();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 913;
            this.non_assignment_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_assignment_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_non_assignment_expression;
    return this;
}

Non_assignment_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_assignment_expressionContext.prototype.constructor = Non_assignment_expressionContext;

Non_assignment_expressionContext.prototype.lambda_expression = function() {
    return this.getTypedRuleContext(Lambda_expressionContext,0);
};

Non_assignment_expressionContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

Non_assignment_expressionContext.prototype.conditional_expression = function() {
    return this.getTypedRuleContext(Conditional_expressionContext,0);
};

Non_assignment_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNon_assignment_expression(this);
	}
};

Non_assignment_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNon_assignment_expression(this);
	}
};




CSharpParser.Non_assignment_expressionContext = Non_assignment_expressionContext;

CSharpParser.prototype.non_assignment_expression = function() {

    var localctx = new Non_assignment_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CSharpParser.RULE_non_assignment_expression);
    try {
        this.state = 919;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 916;
            this.lambda_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 917;
            this.query_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 918;
            this.conditional_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_assignment;
    return this;
}

AssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

AssignmentContext.prototype.unary_expression = function() {
    return this.getTypedRuleContext(Unary_expressionContext,0);
};

AssignmentContext.prototype.assignment_operator = function() {
    return this.getTypedRuleContext(Assignment_operatorContext,0);
};

AssignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAssignment(this);
	}
};

AssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAssignment(this);
	}
};




CSharpParser.AssignmentContext = AssignmentContext;

CSharpParser.prototype.assignment = function() {

    var localctx = new AssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CSharpParser.RULE_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 921;
        this.unary_expression();
        this.state = 922;
        this.assignment_operator();
        this.state = 923;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assignment_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_assignment_operator;
    return this;
}

Assignment_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignment_operatorContext.prototype.constructor = Assignment_operatorContext;

Assignment_operatorContext.prototype.right_shift_assignment = function() {
    return this.getTypedRuleContext(Right_shift_assignmentContext,0);
};

Assignment_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAssignment_operator(this);
	}
};

Assignment_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAssignment_operator(this);
	}
};




CSharpParser.Assignment_operatorContext = Assignment_operatorContext;

CSharpParser.prototype.assignment_operator = function() {

    var localctx = new Assignment_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CSharpParser.RULE_assignment_operator);
    try {
        this.state = 936;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ASSIGNMENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 925;
            this.match(CSharpParser.ASSIGNMENT);
            break;
        case CSharpParser.OP_ADD_ASSIGNMENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 926;
            this.match(CSharpParser.OP_ADD_ASSIGNMENT);
            break;
        case CSharpParser.OP_SUB_ASSIGNMENT:
            this.enterOuterAlt(localctx, 3);
            this.state = 927;
            this.match(CSharpParser.OP_SUB_ASSIGNMENT);
            break;
        case CSharpParser.OP_MULT_ASSIGNMENT:
            this.enterOuterAlt(localctx, 4);
            this.state = 928;
            this.match(CSharpParser.OP_MULT_ASSIGNMENT);
            break;
        case CSharpParser.OP_DIV_ASSIGNMENT:
            this.enterOuterAlt(localctx, 5);
            this.state = 929;
            this.match(CSharpParser.OP_DIV_ASSIGNMENT);
            break;
        case CSharpParser.OP_MOD_ASSIGNMENT:
            this.enterOuterAlt(localctx, 6);
            this.state = 930;
            this.match(CSharpParser.OP_MOD_ASSIGNMENT);
            break;
        case CSharpParser.OP_AND_ASSIGNMENT:
            this.enterOuterAlt(localctx, 7);
            this.state = 931;
            this.match(CSharpParser.OP_AND_ASSIGNMENT);
            break;
        case CSharpParser.OP_OR_ASSIGNMENT:
            this.enterOuterAlt(localctx, 8);
            this.state = 932;
            this.match(CSharpParser.OP_OR_ASSIGNMENT);
            break;
        case CSharpParser.OP_XOR_ASSIGNMENT:
            this.enterOuterAlt(localctx, 9);
            this.state = 933;
            this.match(CSharpParser.OP_XOR_ASSIGNMENT);
            break;
        case CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT:
            this.enterOuterAlt(localctx, 10);
            this.state = 934;
            this.match(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT);
            break;
        case CSharpParser.GT:
            this.enterOuterAlt(localctx, 11);
            this.state = 935;
            this.right_shift_assignment();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_conditional_expression;
    return this;
}

Conditional_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_expressionContext.prototype.constructor = Conditional_expressionContext;

Conditional_expressionContext.prototype.null_coalescing_expression = function() {
    return this.getTypedRuleContext(Null_coalescing_expressionContext,0);
};

Conditional_expressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Conditional_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConditional_expression(this);
	}
};

Conditional_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConditional_expression(this);
	}
};




CSharpParser.Conditional_expressionContext = Conditional_expressionContext;

CSharpParser.prototype.conditional_expression = function() {

    var localctx = new Conditional_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CSharpParser.RULE_conditional_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 938;
        this.null_coalescing_expression();
        this.state = 944;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.INTERR) {
            this.state = 939;
            this.match(CSharpParser.INTERR);
            this.state = 940;
            this.expression();
            this.state = 941;
            this.match(CSharpParser.COLON);
            this.state = 942;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_coalescing_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_null_coalescing_expression;
    return this;
}

Null_coalescing_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_coalescing_expressionContext.prototype.constructor = Null_coalescing_expressionContext;

Null_coalescing_expressionContext.prototype.conditional_or_expression = function() {
    return this.getTypedRuleContext(Conditional_or_expressionContext,0);
};

Null_coalescing_expressionContext.prototype.null_coalescing_expression = function() {
    return this.getTypedRuleContext(Null_coalescing_expressionContext,0);
};

Null_coalescing_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNull_coalescing_expression(this);
	}
};

Null_coalescing_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNull_coalescing_expression(this);
	}
};




CSharpParser.Null_coalescing_expressionContext = Null_coalescing_expressionContext;

CSharpParser.prototype.null_coalescing_expression = function() {

    var localctx = new Null_coalescing_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CSharpParser.RULE_null_coalescing_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 946;
        this.conditional_or_expression();
        this.state = 949;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OP_COALESCING) {
            this.state = 947;
            this.match(CSharpParser.OP_COALESCING);
            this.state = 948;
            this.null_coalescing_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_or_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_conditional_or_expression;
    return this;
}

Conditional_or_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_or_expressionContext.prototype.constructor = Conditional_or_expressionContext;

Conditional_or_expressionContext.prototype.conditional_and_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Conditional_and_expressionContext);
    } else {
        return this.getTypedRuleContext(Conditional_and_expressionContext,i);
    }
};

Conditional_or_expressionContext.prototype.OP_OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.OP_OR);
    } else {
        return this.getToken(CSharpParser.OP_OR, i);
    }
};


Conditional_or_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConditional_or_expression(this);
	}
};

Conditional_or_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConditional_or_expression(this);
	}
};




CSharpParser.Conditional_or_expressionContext = Conditional_or_expressionContext;

CSharpParser.prototype.conditional_or_expression = function() {

    var localctx = new Conditional_or_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CSharpParser.RULE_conditional_or_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 951;
        this.conditional_and_expression();
        this.state = 956;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.OP_OR) {
            this.state = 952;
            this.match(CSharpParser.OP_OR);
            this.state = 953;
            this.conditional_and_expression();
            this.state = 958;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_and_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_conditional_and_expression;
    return this;
}

Conditional_and_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_and_expressionContext.prototype.constructor = Conditional_and_expressionContext;

Conditional_and_expressionContext.prototype.inclusive_or_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Inclusive_or_expressionContext);
    } else {
        return this.getTypedRuleContext(Inclusive_or_expressionContext,i);
    }
};

Conditional_and_expressionContext.prototype.OP_AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.OP_AND);
    } else {
        return this.getToken(CSharpParser.OP_AND, i);
    }
};


Conditional_and_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConditional_and_expression(this);
	}
};

Conditional_and_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConditional_and_expression(this);
	}
};




CSharpParser.Conditional_and_expressionContext = Conditional_and_expressionContext;

CSharpParser.prototype.conditional_and_expression = function() {

    var localctx = new Conditional_and_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CSharpParser.RULE_conditional_and_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 959;
        this.inclusive_or_expression();
        this.state = 964;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.OP_AND) {
            this.state = 960;
            this.match(CSharpParser.OP_AND);
            this.state = 961;
            this.inclusive_or_expression();
            this.state = 966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Inclusive_or_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_inclusive_or_expression;
    return this;
}

Inclusive_or_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Inclusive_or_expressionContext.prototype.constructor = Inclusive_or_expressionContext;

Inclusive_or_expressionContext.prototype.exclusive_or_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Exclusive_or_expressionContext);
    } else {
        return this.getTypedRuleContext(Exclusive_or_expressionContext,i);
    }
};

Inclusive_or_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInclusive_or_expression(this);
	}
};

Inclusive_or_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInclusive_or_expression(this);
	}
};




CSharpParser.Inclusive_or_expressionContext = Inclusive_or_expressionContext;

CSharpParser.prototype.inclusive_or_expression = function() {

    var localctx = new Inclusive_or_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CSharpParser.RULE_inclusive_or_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 967;
        this.exclusive_or_expression();
        this.state = 972;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.BITWISE_OR) {
            this.state = 968;
            this.match(CSharpParser.BITWISE_OR);
            this.state = 969;
            this.exclusive_or_expression();
            this.state = 974;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exclusive_or_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_exclusive_or_expression;
    return this;
}

Exclusive_or_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exclusive_or_expressionContext.prototype.constructor = Exclusive_or_expressionContext;

Exclusive_or_expressionContext.prototype.and_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(And_expressionContext);
    } else {
        return this.getTypedRuleContext(And_expressionContext,i);
    }
};

Exclusive_or_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExclusive_or_expression(this);
	}
};

Exclusive_or_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExclusive_or_expression(this);
	}
};




CSharpParser.Exclusive_or_expressionContext = Exclusive_or_expressionContext;

CSharpParser.prototype.exclusive_or_expression = function() {

    var localctx = new Exclusive_or_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CSharpParser.RULE_exclusive_or_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 975;
        this.and_expression();
        this.state = 980;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.CARET) {
            this.state = 976;
            this.match(CSharpParser.CARET);
            this.state = 977;
            this.and_expression();
            this.state = 982;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function And_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_and_expression;
    return this;
}

And_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_expressionContext.prototype.constructor = And_expressionContext;

And_expressionContext.prototype.equality_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Equality_expressionContext);
    } else {
        return this.getTypedRuleContext(Equality_expressionContext,i);
    }
};

And_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAnd_expression(this);
	}
};

And_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAnd_expression(this);
	}
};




CSharpParser.And_expressionContext = And_expressionContext;

CSharpParser.prototype.and_expression = function() {

    var localctx = new And_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CSharpParser.RULE_and_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 983;
        this.equality_expression();
        this.state = 988;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 984;
                this.match(CSharpParser.AMP);
                this.state = 985;
                this.equality_expression(); 
            }
            this.state = 990;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Equality_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_equality_expression;
    return this;
}

Equality_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Equality_expressionContext.prototype.constructor = Equality_expressionContext;

Equality_expressionContext.prototype.relational_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Relational_expressionContext);
    } else {
        return this.getTypedRuleContext(Relational_expressionContext,i);
    }
};

Equality_expressionContext.prototype.OP_EQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.OP_EQ);
    } else {
        return this.getToken(CSharpParser.OP_EQ, i);
    }
};


Equality_expressionContext.prototype.OP_NE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.OP_NE);
    } else {
        return this.getToken(CSharpParser.OP_NE, i);
    }
};


Equality_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEquality_expression(this);
	}
};

Equality_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEquality_expression(this);
	}
};




CSharpParser.Equality_expressionContext = Equality_expressionContext;

CSharpParser.prototype.equality_expression = function() {

    var localctx = new Equality_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CSharpParser.RULE_equality_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 991;
        this.relational_expression();
        this.state = 996;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.OP_EQ || _la===CSharpParser.OP_NE) {
            this.state = 992;
            _la = this._input.LA(1);
            if(!(_la===CSharpParser.OP_EQ || _la===CSharpParser.OP_NE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 993;
            this.relational_expression();
            this.state = 998;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relational_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_relational_expression;
    return this;
}

Relational_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relational_expressionContext.prototype.constructor = Relational_expressionContext;

Relational_expressionContext.prototype.shift_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Shift_expressionContext);
    } else {
        return this.getTypedRuleContext(Shift_expressionContext,i);
    }
};

Relational_expressionContext.prototype.IS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.IS);
    } else {
        return this.getToken(CSharpParser.IS, i);
    }
};


Relational_expressionContext.prototype.isType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IsTypeContext);
    } else {
        return this.getTypedRuleContext(IsTypeContext,i);
    }
};

Relational_expressionContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.AS);
    } else {
        return this.getToken(CSharpParser.AS, i);
    }
};


Relational_expressionContext.prototype.var_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Var_typeContext);
    } else {
        return this.getTypedRuleContext(Var_typeContext,i);
    }
};

Relational_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterRelational_expression(this);
	}
};

Relational_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitRelational_expression(this);
	}
};




CSharpParser.Relational_expressionContext = Relational_expressionContext;

CSharpParser.prototype.relational_expression = function() {

    var localctx = new Relational_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CSharpParser.RULE_relational_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 999;
        this.shift_expression();
        this.state = 1008;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.AS || _la===CSharpParser.IS || ((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (CSharpParser.LT - 143)) | (1 << (CSharpParser.GT - 143)) | (1 << (CSharpParser.OP_LE - 143)) | (1 << (CSharpParser.OP_GE - 143)))) !== 0)) {
            this.state = 1006;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.LT:
            case CSharpParser.GT:
            case CSharpParser.OP_LE:
            case CSharpParser.OP_GE:
                this.state = 1000;
                _la = this._input.LA(1);
                if(!(((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (CSharpParser.LT - 143)) | (1 << (CSharpParser.GT - 143)) | (1 << (CSharpParser.OP_LE - 143)) | (1 << (CSharpParser.OP_GE - 143)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1001;
                this.shift_expression();
                break;
            case CSharpParser.IS:
                this.state = 1002;
                this.match(CSharpParser.IS);
                this.state = 1003;
                this.isType();
                break;
            case CSharpParser.AS:
                this.state = 1004;
                this.match(CSharpParser.AS);
                this.state = 1005;
                this.var_type();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1010;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Shift_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_shift_expression;
    return this;
}

Shift_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Shift_expressionContext.prototype.constructor = Shift_expressionContext;

Shift_expressionContext.prototype.additive_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Additive_expressionContext);
    } else {
        return this.getTypedRuleContext(Additive_expressionContext,i);
    }
};

Shift_expressionContext.prototype.right_shift = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Right_shiftContext);
    } else {
        return this.getTypedRuleContext(Right_shiftContext,i);
    }
};

Shift_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterShift_expression(this);
	}
};

Shift_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitShift_expression(this);
	}
};




CSharpParser.Shift_expressionContext = Shift_expressionContext;

CSharpParser.prototype.shift_expression = function() {

    var localctx = new Shift_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CSharpParser.RULE_shift_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1011;
        this.additive_expression();
        this.state = 1019;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1014;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CSharpParser.OP_LEFT_SHIFT:
                    this.state = 1012;
                    this.match(CSharpParser.OP_LEFT_SHIFT);
                    break;
                case CSharpParser.GT:
                    this.state = 1013;
                    this.right_shift();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1016;
                this.additive_expression(); 
            }
            this.state = 1021;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Additive_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_additive_expression;
    return this;
}

Additive_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Additive_expressionContext.prototype.constructor = Additive_expressionContext;

Additive_expressionContext.prototype.multiplicative_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Multiplicative_expressionContext);
    } else {
        return this.getTypedRuleContext(Multiplicative_expressionContext,i);
    }
};

Additive_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAdditive_expression(this);
	}
};

Additive_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAdditive_expression(this);
	}
};




CSharpParser.Additive_expressionContext = Additive_expressionContext;

CSharpParser.prototype.additive_expression = function() {

    var localctx = new Additive_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CSharpParser.RULE_additive_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1022;
        this.multiplicative_expression();
        this.state = 1027;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1023;
                _la = this._input.LA(1);
                if(!(_la===CSharpParser.PLUS || _la===CSharpParser.MINUS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1024;
                this.multiplicative_expression(); 
            }
            this.state = 1029;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiplicative_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_multiplicative_expression;
    return this;
}

Multiplicative_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiplicative_expressionContext.prototype.constructor = Multiplicative_expressionContext;

Multiplicative_expressionContext.prototype.unary_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Unary_expressionContext);
    } else {
        return this.getTypedRuleContext(Unary_expressionContext,i);
    }
};

Multiplicative_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMultiplicative_expression(this);
	}
};

Multiplicative_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMultiplicative_expression(this);
	}
};




CSharpParser.Multiplicative_expressionContext = Multiplicative_expressionContext;

CSharpParser.prototype.multiplicative_expression = function() {

    var localctx = new Multiplicative_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CSharpParser.RULE_multiplicative_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1030;
        this.unary_expression();
        this.state = 1035;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1031;
                _la = this._input.LA(1);
                if(!(((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (CSharpParser.STAR - 134)) | (1 << (CSharpParser.DIV - 134)) | (1 << (CSharpParser.PERCENT - 134)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1032;
                this.unary_expression(); 
            }
            this.state = 1037;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_unary_expression;
    return this;
}

Unary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unary_expressionContext.prototype.constructor = Unary_expressionContext;

Unary_expressionContext.prototype.primary_expression = function() {
    return this.getTypedRuleContext(Primary_expressionContext,0);
};

Unary_expressionContext.prototype.unary_expression = function() {
    return this.getTypedRuleContext(Unary_expressionContext,0);
};

Unary_expressionContext.prototype.BANG = function() {
    return this.getToken(CSharpParser.BANG, 0);
};

Unary_expressionContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Unary_expressionContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Unary_expressionContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Unary_expressionContext.prototype.AWAIT = function() {
    return this.getToken(CSharpParser.AWAIT, 0);
};

Unary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUnary_expression(this);
	}
};

Unary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUnary_expression(this);
	}
};




CSharpParser.Unary_expressionContext = Unary_expressionContext;

CSharpParser.prototype.unary_expression = function() {

    var localctx = new Unary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CSharpParser.RULE_unary_expression);
    try {
        this.state = 1062;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1038;
            this.primary_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1039;
            this.match(CSharpParser.PLUS);
            this.state = 1040;
            this.unary_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1041;
            this.match(CSharpParser.MINUS);
            this.state = 1042;
            this.unary_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1043;
            this.match(CSharpParser.BANG);
            this.state = 1044;
            this.unary_expression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1045;
            this.match(CSharpParser.TILDE);
            this.state = 1046;
            this.unary_expression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1047;
            this.match(CSharpParser.OP_INC);
            this.state = 1048;
            this.unary_expression();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1049;
            this.match(CSharpParser.OP_DEC);
            this.state = 1050;
            this.unary_expression();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1051;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1052;
            this.var_type();
            this.state = 1053;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 1054;
            this.unary_expression();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1056;
            this.match(CSharpParser.AWAIT);
            this.state = 1057;
            this.unary_expression();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1058;
            this.match(CSharpParser.AMP);
            this.state = 1059;
            this.unary_expression();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1060;
            this.match(CSharpParser.STAR);
            this.state = 1061;
            this.unary_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_primary_expression;
    this.pe = null; // Primary_expression_startContext
    return this;
}

Primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_expressionContext.prototype.constructor = Primary_expressionContext;

Primary_expressionContext.prototype.primary_expression_start = function() {
    return this.getTypedRuleContext(Primary_expression_startContext,0);
};

Primary_expressionContext.prototype.bracket_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bracket_expressionContext);
    } else {
        return this.getTypedRuleContext(Bracket_expressionContext,i);
    }
};

Primary_expressionContext.prototype.member_access = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Member_accessContext);
    } else {
        return this.getTypedRuleContext(Member_accessContext,i);
    }
};

Primary_expressionContext.prototype.method_invocation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Method_invocationContext);
    } else {
        return this.getTypedRuleContext(Method_invocationContext,i);
    }
};

Primary_expressionContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterPrimary_expression(this);
	}
};

Primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitPrimary_expression(this);
	}
};




CSharpParser.Primary_expressionContext = Primary_expressionContext;

CSharpParser.prototype.primary_expression = function() {

    var localctx = new Primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CSharpParser.RULE_primary_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1064;
        localctx.pe = this.primary_expression_start();
        this.state = 1068;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,38,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1065;
                this.bracket_expression(); 
            }
            this.state = 1070;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,38,this._ctx);
        }

        this.state = 1087;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1077;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CSharpParser.DOT:
                case CSharpParser.INTERR:
                    this.state = 1071;
                    this.member_access();
                    break;
                case CSharpParser.OPEN_PARENS:
                    this.state = 1072;
                    this.method_invocation();
                    break;
                case CSharpParser.OP_INC:
                    this.state = 1073;
                    this.match(CSharpParser.OP_INC);
                    break;
                case CSharpParser.OP_DEC:
                    this.state = 1074;
                    this.match(CSharpParser.OP_DEC);
                    break;
                case CSharpParser.OP_PTR:
                    this.state = 1075;
                    this.match(CSharpParser.OP_PTR);
                    this.state = 1076;
                    this.identifier();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1082;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1079;
                        this.bracket_expression(); 
                    }
                    this.state = 1084;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
                }
         
            }
            this.state = 1089;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Primary_expression_startContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_primary_expression_start;
    return this;
}

Primary_expression_startContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_expression_startContext.prototype.constructor = Primary_expression_startContext;


 
Primary_expression_startContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LiteralAccessExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralAccessExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
LiteralAccessExpressionContext.prototype.constructor = LiteralAccessExpressionContext;

CSharpParser.LiteralAccessExpressionContext = LiteralAccessExpressionContext;

LiteralAccessExpressionContext.prototype.LITERAL_ACCESS = function() {
    return this.getToken(CSharpParser.LITERAL_ACCESS, 0);
};
LiteralAccessExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLiteralAccessExpression(this);
	}
};

LiteralAccessExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLiteralAccessExpression(this);
	}
};


function DefaultValueExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefaultValueExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
DefaultValueExpressionContext.prototype.constructor = DefaultValueExpressionContext;

CSharpParser.DefaultValueExpressionContext = DefaultValueExpressionContext;

DefaultValueExpressionContext.prototype.DEFAULT = function() {
    return this.getToken(CSharpParser.DEFAULT, 0);
};

DefaultValueExpressionContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

DefaultValueExpressionContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

DefaultValueExpressionContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
DefaultValueExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterDefaultValueExpression(this);
	}
};

DefaultValueExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitDefaultValueExpression(this);
	}
};


function BaseAccessExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BaseAccessExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
BaseAccessExpressionContext.prototype.constructor = BaseAccessExpressionContext;

CSharpParser.BaseAccessExpressionContext = BaseAccessExpressionContext;

BaseAccessExpressionContext.prototype.BASE = function() {
    return this.getToken(CSharpParser.BASE, 0);
};

BaseAccessExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BaseAccessExpressionContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

BaseAccessExpressionContext.prototype.type_argument_list = function() {
    return this.getTypedRuleContext(Type_argument_listContext,0);
};
BaseAccessExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBaseAccessExpression(this);
	}
};

BaseAccessExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBaseAccessExpression(this);
	}
};


function SizeofExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SizeofExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
SizeofExpressionContext.prototype.constructor = SizeofExpressionContext;

CSharpParser.SizeofExpressionContext = SizeofExpressionContext;

SizeofExpressionContext.prototype.SIZEOF = function() {
    return this.getToken(CSharpParser.SIZEOF, 0);
};

SizeofExpressionContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

SizeofExpressionContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

SizeofExpressionContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
SizeofExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSizeofExpression(this);
	}
};

SizeofExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSizeofExpression(this);
	}
};


function ParenthesisExpressionsContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesisExpressionsContext.prototype = Object.create(Primary_expression_startContext.prototype);
ParenthesisExpressionsContext.prototype.constructor = ParenthesisExpressionsContext;

CSharpParser.ParenthesisExpressionsContext = ParenthesisExpressionsContext;

ParenthesisExpressionsContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

ParenthesisExpressionsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParenthesisExpressionsContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
ParenthesisExpressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterParenthesisExpressions(this);
	}
};

ParenthesisExpressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitParenthesisExpressions(this);
	}
};


function ThisReferenceExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisReferenceExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
ThisReferenceExpressionContext.prototype.constructor = ThisReferenceExpressionContext;

CSharpParser.ThisReferenceExpressionContext = ThisReferenceExpressionContext;

ThisReferenceExpressionContext.prototype.THIS = function() {
    return this.getToken(CSharpParser.THIS, 0);
};
ThisReferenceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterThisReferenceExpression(this);
	}
};

ThisReferenceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitThisReferenceExpression(this);
	}
};


function ObjectCreationExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ObjectCreationExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
ObjectCreationExpressionContext.prototype.constructor = ObjectCreationExpressionContext;

CSharpParser.ObjectCreationExpressionContext = ObjectCreationExpressionContext;

ObjectCreationExpressionContext.prototype.NEW = function() {
    return this.getToken(CSharpParser.NEW, 0);
};

ObjectCreationExpressionContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

ObjectCreationExpressionContext.prototype.anonymous_object_initializer = function() {
    return this.getTypedRuleContext(Anonymous_object_initializerContext,0);
};

ObjectCreationExpressionContext.prototype.rank_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rank_specifierContext);
    } else {
        return this.getTypedRuleContext(Rank_specifierContext,i);
    }
};

ObjectCreationExpressionContext.prototype.array_initializer = function() {
    return this.getTypedRuleContext(Array_initializerContext,0);
};

ObjectCreationExpressionContext.prototype.object_creation_expression = function() {
    return this.getTypedRuleContext(Object_creation_expressionContext,0);
};

ObjectCreationExpressionContext.prototype.object_or_collection_initializer = function() {
    return this.getTypedRuleContext(Object_or_collection_initializerContext,0);
};

ObjectCreationExpressionContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};
ObjectCreationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterObjectCreationExpression(this);
	}
};

ObjectCreationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitObjectCreationExpression(this);
	}
};


function AnonymousMethodExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnonymousMethodExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
AnonymousMethodExpressionContext.prototype.constructor = AnonymousMethodExpressionContext;

CSharpParser.AnonymousMethodExpressionContext = AnonymousMethodExpressionContext;

AnonymousMethodExpressionContext.prototype.DELEGATE = function() {
    return this.getToken(CSharpParser.DELEGATE, 0);
};

AnonymousMethodExpressionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

AnonymousMethodExpressionContext.prototype.ASYNC = function() {
    return this.getToken(CSharpParser.ASYNC, 0);
};

AnonymousMethodExpressionContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

AnonymousMethodExpressionContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

AnonymousMethodExpressionContext.prototype.explicit_anonymous_function_parameter_list = function() {
    return this.getTypedRuleContext(Explicit_anonymous_function_parameter_listContext,0);
};
AnonymousMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAnonymousMethodExpression(this);
	}
};

AnonymousMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAnonymousMethodExpression(this);
	}
};


function TypeofExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeofExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
TypeofExpressionContext.prototype.constructor = TypeofExpressionContext;

CSharpParser.TypeofExpressionContext = TypeofExpressionContext;

TypeofExpressionContext.prototype.TYPEOF = function() {
    return this.getToken(CSharpParser.TYPEOF, 0);
};

TypeofExpressionContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

TypeofExpressionContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

TypeofExpressionContext.prototype.unbound_type_name = function() {
    return this.getTypedRuleContext(Unbound_type_nameContext,0);
};

TypeofExpressionContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

TypeofExpressionContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};
TypeofExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterTypeofExpression(this);
	}
};

TypeofExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitTypeofExpression(this);
	}
};


function UncheckedExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UncheckedExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
UncheckedExpressionContext.prototype.constructor = UncheckedExpressionContext;

CSharpParser.UncheckedExpressionContext = UncheckedExpressionContext;

UncheckedExpressionContext.prototype.UNCHECKED = function() {
    return this.getToken(CSharpParser.UNCHECKED, 0);
};

UncheckedExpressionContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

UncheckedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UncheckedExpressionContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
UncheckedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUncheckedExpression(this);
	}
};

UncheckedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUncheckedExpression(this);
	}
};


function SimpleNameExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleNameExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
SimpleNameExpressionContext.prototype.constructor = SimpleNameExpressionContext;

CSharpParser.SimpleNameExpressionContext = SimpleNameExpressionContext;

SimpleNameExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SimpleNameExpressionContext.prototype.type_argument_list = function() {
    return this.getTypedRuleContext(Type_argument_listContext,0);
};
SimpleNameExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSimpleNameExpression(this);
	}
};

SimpleNameExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSimpleNameExpression(this);
	}
};


function MemberAccessExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberAccessExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
MemberAccessExpressionContext.prototype.constructor = MemberAccessExpressionContext;

CSharpParser.MemberAccessExpressionContext = MemberAccessExpressionContext;

MemberAccessExpressionContext.prototype.predefined_type = function() {
    return this.getTypedRuleContext(Predefined_typeContext,0);
};

MemberAccessExpressionContext.prototype.qualified_alias_member = function() {
    return this.getTypedRuleContext(Qualified_alias_memberContext,0);
};
MemberAccessExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMemberAccessExpression(this);
	}
};

MemberAccessExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMemberAccessExpression(this);
	}
};


function CheckedExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CheckedExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
CheckedExpressionContext.prototype.constructor = CheckedExpressionContext;

CSharpParser.CheckedExpressionContext = CheckedExpressionContext;

CheckedExpressionContext.prototype.CHECKED = function() {
    return this.getToken(CSharpParser.CHECKED, 0);
};

CheckedExpressionContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

CheckedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CheckedExpressionContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
CheckedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCheckedExpression(this);
	}
};

CheckedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCheckedExpression(this);
	}
};


function LiteralExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
LiteralExpressionContext.prototype.constructor = LiteralExpressionContext;

CSharpParser.LiteralExpressionContext = LiteralExpressionContext;

LiteralExpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};
LiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLiteralExpression(this);
	}
};

LiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLiteralExpression(this);
	}
};


function NameofExpressionContext(parser, ctx) {
	Primary_expression_startContext.call(this, parser);
    Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NameofExpressionContext.prototype = Object.create(Primary_expression_startContext.prototype);
NameofExpressionContext.prototype.constructor = NameofExpressionContext;

CSharpParser.NameofExpressionContext = NameofExpressionContext;

NameofExpressionContext.prototype.NAMEOF = function() {
    return this.getToken(CSharpParser.NAMEOF, 0);
};

NameofExpressionContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

NameofExpressionContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

NameofExpressionContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
NameofExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNameofExpression(this);
	}
};

NameofExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNameofExpression(this);
	}
};



CSharpParser.Primary_expression_startContext = Primary_expression_startContext;

CSharpParser.prototype.primary_expression_start = function() {

    var localctx = new Primary_expression_startContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CSharpParser.RULE_primary_expression_start);
    var _la = 0; // Token type
    try {
        this.state = 1199;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1090;
            this.literal();
            break;

        case 2:
            localctx = new SimpleNameExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1091;
            this.identifier();
            this.state = 1093;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
            if(la_===1) {
                this.state = 1092;
                this.type_argument_list();

            }
            break;

        case 3:
            localctx = new ParenthesisExpressionsContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1095;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1096;
            this.expression();
            this.state = 1097;
            this.match(CSharpParser.CLOSE_PARENS);
            break;

        case 4:
            localctx = new MemberAccessExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1099;
            this.predefined_type();
            break;

        case 5:
            localctx = new MemberAccessExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1100;
            this.qualified_alias_member();
            break;

        case 6:
            localctx = new LiteralAccessExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1101;
            this.match(CSharpParser.LITERAL_ACCESS);
            break;

        case 7:
            localctx = new ThisReferenceExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1102;
            this.match(CSharpParser.THIS);
            break;

        case 8:
            localctx = new BaseAccessExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1103;
            this.match(CSharpParser.BASE);
            this.state = 1113;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.DOT:
                this.state = 1104;
                this.match(CSharpParser.DOT);
                this.state = 1105;
                this.identifier();
                this.state = 1107;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
                if(la_===1) {
                    this.state = 1106;
                    this.type_argument_list();

                }
                break;
            case CSharpParser.OPEN_BRACKET:
                this.state = 1109;
                this.match(CSharpParser.OPEN_BRACKET);
                this.state = 1110;
                this.expression_list();
                this.state = 1111;
                this.match(CSharpParser.CLOSE_BRACKET);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 9:
            localctx = new ObjectCreationExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1115;
            this.match(CSharpParser.NEW);
            this.state = 1144;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.ADD:
            case CSharpParser.ALIAS:
            case CSharpParser.ARGLIST:
            case CSharpParser.ASCENDING:
            case CSharpParser.ASYNC:
            case CSharpParser.AWAIT:
            case CSharpParser.BOOL:
            case CSharpParser.BY:
            case CSharpParser.BYTE:
            case CSharpParser.CHAR:
            case CSharpParser.DECIMAL:
            case CSharpParser.DESCENDING:
            case CSharpParser.DOUBLE:
            case CSharpParser.DYNAMIC:
            case CSharpParser.EQUALS:
            case CSharpParser.FLOAT:
            case CSharpParser.FROM:
            case CSharpParser.GET:
            case CSharpParser.GROUP:
            case CSharpParser.INT:
            case CSharpParser.INTO:
            case CSharpParser.JOIN:
            case CSharpParser.LET:
            case CSharpParser.LONG:
            case CSharpParser.NAMEOF:
            case CSharpParser.OBJECT:
            case CSharpParser.ON:
            case CSharpParser.ORDERBY:
            case CSharpParser.PARTIAL:
            case CSharpParser.REMOVE:
            case CSharpParser.SBYTE:
            case CSharpParser.SELECT:
            case CSharpParser.SET:
            case CSharpParser.SHORT:
            case CSharpParser.STRING:
            case CSharpParser.UINT:
            case CSharpParser.ULONG:
            case CSharpParser.USHORT:
            case CSharpParser.VAR:
            case CSharpParser.VOID:
            case CSharpParser.WHEN:
            case CSharpParser.WHERE:
            case CSharpParser.YIELD:
            case CSharpParser.IDENTIFIER:
                this.state = 1116;
                this.var_type();
                this.state = 1138;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1117;
                    this.object_creation_expression();
                    break;

                case 2:
                    this.state = 1118;
                    this.object_or_collection_initializer();
                    break;

                case 3:
                    this.state = 1119;
                    this.match(CSharpParser.OPEN_BRACKET);
                    this.state = 1120;
                    this.expression_list();
                    this.state = 1121;
                    this.match(CSharpParser.CLOSE_BRACKET);
                    this.state = 1125;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 1122;
                            this.rank_specifier(); 
                        }
                        this.state = 1127;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
                    }

                    this.state = 1129;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CSharpParser.OPEN_BRACE) {
                        this.state = 1128;
                        this.array_initializer();
                    }

                    break;

                case 4:
                    this.state = 1132; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 1131;
                        this.rank_specifier();
                        this.state = 1134; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===CSharpParser.OPEN_BRACKET);
                    this.state = 1136;
                    this.array_initializer();
                    break;

                }
                break;
            case CSharpParser.OPEN_BRACE:
                this.state = 1140;
                this.anonymous_object_initializer();
                break;
            case CSharpParser.OPEN_BRACKET:
                this.state = 1141;
                this.rank_specifier();
                this.state = 1142;
                this.array_initializer();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 10:
            localctx = new TypeofExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1146;
            this.match(CSharpParser.TYPEOF);
            this.state = 1147;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1151;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1148;
                this.unbound_type_name();
                break;

            case 2:
                this.state = 1149;
                this.var_type();
                break;

            case 3:
                this.state = 1150;
                this.match(CSharpParser.VOID);
                break;

            }
            this.state = 1153;
            this.match(CSharpParser.CLOSE_PARENS);
            break;

        case 11:
            localctx = new CheckedExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1154;
            this.match(CSharpParser.CHECKED);
            this.state = 1155;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1156;
            this.expression();
            this.state = 1157;
            this.match(CSharpParser.CLOSE_PARENS);
            break;

        case 12:
            localctx = new UncheckedExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1159;
            this.match(CSharpParser.UNCHECKED);
            this.state = 1160;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1161;
            this.expression();
            this.state = 1162;
            this.match(CSharpParser.CLOSE_PARENS);
            break;

        case 13:
            localctx = new DefaultValueExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 1164;
            this.match(CSharpParser.DEFAULT);
            this.state = 1165;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1166;
            this.var_type();
            this.state = 1167;
            this.match(CSharpParser.CLOSE_PARENS);
            break;

        case 14:
            localctx = new AnonymousMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 1170;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.ASYNC) {
                this.state = 1169;
                this.match(CSharpParser.ASYNC);
            }

            this.state = 1172;
            this.match(CSharpParser.DELEGATE);
            this.state = 1178;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.OPEN_PARENS) {
                this.state = 1173;
                this.match(CSharpParser.OPEN_PARENS);
                this.state = 1175;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CSharpParser.OBJECT - 67)) | (1 << (CSharpParser.ON - 67)) | (1 << (CSharpParser.ORDERBY - 67)) | (1 << (CSharpParser.OUT - 67)) | (1 << (CSharpParser.PARTIAL - 67)) | (1 << (CSharpParser.REF - 67)) | (1 << (CSharpParser.REMOVE - 67)) | (1 << (CSharpParser.SBYTE - 67)) | (1 << (CSharpParser.SELECT - 67)) | (1 << (CSharpParser.SET - 67)) | (1 << (CSharpParser.SHORT - 67)) | (1 << (CSharpParser.STRING - 67)) | (1 << (CSharpParser.UINT - 67)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)))) !== 0)) {
                    this.state = 1174;
                    this.explicit_anonymous_function_parameter_list();
                }

                this.state = 1177;
                this.match(CSharpParser.CLOSE_PARENS);
            }

            this.state = 1180;
            this.block();
            break;

        case 15:
            localctx = new SizeofExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 1181;
            this.match(CSharpParser.SIZEOF);
            this.state = 1182;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1183;
            this.var_type();
            this.state = 1184;
            this.match(CSharpParser.CLOSE_PARENS);
            break;

        case 16:
            localctx = new NameofExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 1186;
            this.match(CSharpParser.NAMEOF);
            this.state = 1187;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1193;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1188;
                    this.identifier();
                    this.state = 1189;
                    this.match(CSharpParser.DOT); 
                }
                this.state = 1195;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
            }

            this.state = 1196;
            this.identifier();
            this.state = 1197;
            this.match(CSharpParser.CLOSE_PARENS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_accessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_member_access;
    return this;
}

Member_accessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_accessContext.prototype.constructor = Member_accessContext;

Member_accessContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Member_accessContext.prototype.type_argument_list = function() {
    return this.getTypedRuleContext(Type_argument_listContext,0);
};

Member_accessContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMember_access(this);
	}
};

Member_accessContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMember_access(this);
	}
};




CSharpParser.Member_accessContext = Member_accessContext;

CSharpParser.prototype.member_access = function() {

    var localctx = new Member_accessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CSharpParser.RULE_member_access);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1202;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.INTERR) {
            this.state = 1201;
            this.match(CSharpParser.INTERR);
        }

        this.state = 1204;
        this.match(CSharpParser.DOT);
        this.state = 1205;
        this.identifier();
        this.state = 1207;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        if(la_===1) {
            this.state = 1206;
            this.type_argument_list();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bracket_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_bracket_expression;
    return this;
}

Bracket_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bracket_expressionContext.prototype.constructor = Bracket_expressionContext;

Bracket_expressionContext.prototype.indexer_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Indexer_argumentContext);
    } else {
        return this.getTypedRuleContext(Indexer_argumentContext,i);
    }
};

Bracket_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBracket_expression(this);
	}
};

Bracket_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBracket_expression(this);
	}
};




CSharpParser.Bracket_expressionContext = Bracket_expressionContext;

CSharpParser.prototype.bracket_expression = function() {

    var localctx = new Bracket_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CSharpParser.RULE_bracket_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1210;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.INTERR) {
            this.state = 1209;
            this.match(CSharpParser.INTERR);
        }

        this.state = 1212;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 1213;
        this.indexer_argument();
        this.state = 1218;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 1214;
            this.match(CSharpParser.COMMA);
            this.state = 1215;
            this.indexer_argument();
            this.state = 1220;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1221;
        this.match(CSharpParser.CLOSE_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Indexer_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_indexer_argument;
    return this;
}

Indexer_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Indexer_argumentContext.prototype.constructor = Indexer_argumentContext;

Indexer_argumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Indexer_argumentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Indexer_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIndexer_argument(this);
	}
};

Indexer_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIndexer_argument(this);
	}
};




CSharpParser.Indexer_argumentContext = Indexer_argumentContext;

CSharpParser.prototype.indexer_argument = function() {

    var localctx = new Indexer_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CSharpParser.RULE_indexer_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1226;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        if(la_===1) {
            this.state = 1223;
            this.identifier();
            this.state = 1224;
            this.match(CSharpParser.COLON);

        }
        this.state = 1228;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Predefined_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_predefined_type;
    return this;
}

Predefined_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Predefined_typeContext.prototype.constructor = Predefined_typeContext;

Predefined_typeContext.prototype.BOOL = function() {
    return this.getToken(CSharpParser.BOOL, 0);
};

Predefined_typeContext.prototype.BYTE = function() {
    return this.getToken(CSharpParser.BYTE, 0);
};

Predefined_typeContext.prototype.CHAR = function() {
    return this.getToken(CSharpParser.CHAR, 0);
};

Predefined_typeContext.prototype.DECIMAL = function() {
    return this.getToken(CSharpParser.DECIMAL, 0);
};

Predefined_typeContext.prototype.DOUBLE = function() {
    return this.getToken(CSharpParser.DOUBLE, 0);
};

Predefined_typeContext.prototype.FLOAT = function() {
    return this.getToken(CSharpParser.FLOAT, 0);
};

Predefined_typeContext.prototype.INT = function() {
    return this.getToken(CSharpParser.INT, 0);
};

Predefined_typeContext.prototype.LONG = function() {
    return this.getToken(CSharpParser.LONG, 0);
};

Predefined_typeContext.prototype.OBJECT = function() {
    return this.getToken(CSharpParser.OBJECT, 0);
};

Predefined_typeContext.prototype.SBYTE = function() {
    return this.getToken(CSharpParser.SBYTE, 0);
};

Predefined_typeContext.prototype.SHORT = function() {
    return this.getToken(CSharpParser.SHORT, 0);
};

Predefined_typeContext.prototype.STRING = function() {
    return this.getToken(CSharpParser.STRING, 0);
};

Predefined_typeContext.prototype.UINT = function() {
    return this.getToken(CSharpParser.UINT, 0);
};

Predefined_typeContext.prototype.ULONG = function() {
    return this.getToken(CSharpParser.ULONG, 0);
};

Predefined_typeContext.prototype.USHORT = function() {
    return this.getToken(CSharpParser.USHORT, 0);
};

Predefined_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterPredefined_type(this);
	}
};

Predefined_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitPredefined_type(this);
	}
};




CSharpParser.Predefined_typeContext = Predefined_typeContext;

CSharpParser.prototype.predefined_type = function() {

    var localctx = new Predefined_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CSharpParser.RULE_predefined_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1230;
        _la = this._input.LA(1);
        if(!(((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (CSharpParser.BOOL - 17)) | (1 << (CSharpParser.BYTE - 17)) | (1 << (CSharpParser.CHAR - 17)) | (1 << (CSharpParser.DECIMAL - 17)) | (1 << (CSharpParser.DOUBLE - 17)) | (1 << (CSharpParser.FLOAT - 17)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CSharpParser.INT - 54)) | (1 << (CSharpParser.LONG - 54)) | (1 << (CSharpParser.OBJECT - 54)) | (1 << (CSharpParser.SBYTE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CSharpParser.SHORT - 86)) | (1 << (CSharpParser.STRING - 86)) | (1 << (CSharpParser.UINT - 86)) | (1 << (CSharpParser.ULONG - 86)) | (1 << (CSharpParser.USHORT - 86)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_expression_list;
    return this;
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_listContext.prototype.constructor = Expression_listContext;

Expression_listContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExpression_list(this);
	}
};

Expression_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExpression_list(this);
	}
};




CSharpParser.Expression_listContext = Expression_listContext;

CSharpParser.prototype.expression_list = function() {

    var localctx = new Expression_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CSharpParser.RULE_expression_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1232;
        this.expression();
        this.state = 1237;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 1233;
            this.match(CSharpParser.COMMA);
            this.state = 1234;
            this.expression();
            this.state = 1239;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_or_collection_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_object_or_collection_initializer;
    return this;
}

Object_or_collection_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_or_collection_initializerContext.prototype.constructor = Object_or_collection_initializerContext;

Object_or_collection_initializerContext.prototype.object_initializer = function() {
    return this.getTypedRuleContext(Object_initializerContext,0);
};

Object_or_collection_initializerContext.prototype.collection_initializer = function() {
    return this.getTypedRuleContext(Collection_initializerContext,0);
};

Object_or_collection_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterObject_or_collection_initializer(this);
	}
};

Object_or_collection_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitObject_or_collection_initializer(this);
	}
};




CSharpParser.Object_or_collection_initializerContext = Object_or_collection_initializerContext;

CSharpParser.prototype.object_or_collection_initializer = function() {

    var localctx = new Object_or_collection_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CSharpParser.RULE_object_or_collection_initializer);
    try {
        this.state = 1242;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1240;
            this.object_initializer();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1241;
            this.collection_initializer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_object_initializer;
    return this;
}

Object_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_initializerContext.prototype.constructor = Object_initializerContext;

Object_initializerContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Object_initializerContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Object_initializerContext.prototype.member_initializer_list = function() {
    return this.getTypedRuleContext(Member_initializer_listContext,0);
};

Object_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterObject_initializer(this);
	}
};

Object_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitObject_initializer(this);
	}
};




CSharpParser.Object_initializerContext = Object_initializerContext;

CSharpParser.prototype.object_initializer = function() {

    var localctx = new Object_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CSharpParser.RULE_object_initializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1244;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 1249;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CSharpParser.DYNAMIC - 34)) | (1 << (CSharpParser.EQUALS - 34)) | (1 << (CSharpParser.FROM - 34)) | (1 << (CSharpParser.GET - 34)) | (1 << (CSharpParser.GROUP - 34)) | (1 << (CSharpParser.INTO - 34)) | (1 << (CSharpParser.JOIN - 34)) | (1 << (CSharpParser.LET - 34)) | (1 << (CSharpParser.NAMEOF - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CSharpParser.ON - 68)) | (1 << (CSharpParser.ORDERBY - 68)) | (1 << (CSharpParser.PARTIAL - 68)) | (1 << (CSharpParser.REMOVE - 68)) | (1 << (CSharpParser.SELECT - 68)) | (1 << (CSharpParser.SET - 68)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (CSharpParser.VAR - 104)) | (1 << (CSharpParser.WHEN - 104)) | (1 << (CSharpParser.WHERE - 104)) | (1 << (CSharpParser.YIELD - 104)) | (1 << (CSharpParser.IDENTIFIER - 104)) | (1 << (CSharpParser.OPEN_BRACKET - 104)))) !== 0)) {
            this.state = 1245;
            this.member_initializer_list();
            this.state = 1247;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.COMMA) {
                this.state = 1246;
                this.match(CSharpParser.COMMA);
            }

        }

        this.state = 1251;
        this.match(CSharpParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_initializer_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_member_initializer_list;
    return this;
}

Member_initializer_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_initializer_listContext.prototype.constructor = Member_initializer_listContext;

Member_initializer_listContext.prototype.member_initializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Member_initializerContext);
    } else {
        return this.getTypedRuleContext(Member_initializerContext,i);
    }
};

Member_initializer_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMember_initializer_list(this);
	}
};

Member_initializer_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMember_initializer_list(this);
	}
};




CSharpParser.Member_initializer_listContext = Member_initializer_listContext;

CSharpParser.prototype.member_initializer_list = function() {

    var localctx = new Member_initializer_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CSharpParser.RULE_member_initializer_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1253;
        this.member_initializer();
        this.state = 1258;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1254;
                this.match(CSharpParser.COMMA);
                this.state = 1255;
                this.member_initializer(); 
            }
            this.state = 1260;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_member_initializer;
    return this;
}

Member_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_initializerContext.prototype.constructor = Member_initializerContext;

Member_initializerContext.prototype.initializer_value = function() {
    return this.getTypedRuleContext(Initializer_valueContext,0);
};

Member_initializerContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Member_initializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Member_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMember_initializer(this);
	}
};

Member_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMember_initializer(this);
	}
};




CSharpParser.Member_initializerContext = Member_initializerContext;

CSharpParser.prototype.member_initializer = function() {

    var localctx = new Member_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CSharpParser.RULE_member_initializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1266;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BY:
        case CSharpParser.DESCENDING:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.NAMEOF:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.state = 1261;
            this.identifier();
            break;
        case CSharpParser.OPEN_BRACKET:
            this.state = 1262;
            this.match(CSharpParser.OPEN_BRACKET);
            this.state = 1263;
            this.expression();
            this.state = 1264;
            this.match(CSharpParser.CLOSE_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1268;
        this.match(CSharpParser.ASSIGNMENT);
        this.state = 1269;
        this.initializer_value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Initializer_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_initializer_value;
    return this;
}

Initializer_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_valueContext.prototype.constructor = Initializer_valueContext;

Initializer_valueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Initializer_valueContext.prototype.object_or_collection_initializer = function() {
    return this.getTypedRuleContext(Object_or_collection_initializerContext,0);
};

Initializer_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInitializer_value(this);
	}
};

Initializer_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInitializer_value(this);
	}
};




CSharpParser.Initializer_valueContext = Initializer_valueContext;

CSharpParser.prototype.initializer_value = function() {

    var localctx = new Initializer_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CSharpParser.RULE_initializer_value);
    try {
        this.state = 1273;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 1271;
            this.expression();
            break;
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1272;
            this.object_or_collection_initializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collection_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_collection_initializer;
    return this;
}

Collection_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collection_initializerContext.prototype.constructor = Collection_initializerContext;

Collection_initializerContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Collection_initializerContext.prototype.element_initializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Element_initializerContext);
    } else {
        return this.getTypedRuleContext(Element_initializerContext,i);
    }
};

Collection_initializerContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Collection_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCollection_initializer(this);
	}
};

Collection_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCollection_initializer(this);
	}
};




CSharpParser.Collection_initializerContext = Collection_initializerContext;

CSharpParser.prototype.collection_initializer = function() {

    var localctx = new Collection_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CSharpParser.RULE_collection_initializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1275;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 1276;
        this.element_initializer();
        this.state = 1281;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1277;
                this.match(CSharpParser.COMMA);
                this.state = 1278;
                this.element_initializer(); 
            }
            this.state = 1283;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
        }

        this.state = 1285;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COMMA) {
            this.state = 1284;
            this.match(CSharpParser.COMMA);
        }

        this.state = 1287;
        this.match(CSharpParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Element_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_element_initializer;
    return this;
}

Element_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Element_initializerContext.prototype.constructor = Element_initializerContext;

Element_initializerContext.prototype.non_assignment_expression = function() {
    return this.getTypedRuleContext(Non_assignment_expressionContext,0);
};

Element_initializerContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Element_initializerContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Element_initializerContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Element_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterElement_initializer(this);
	}
};

Element_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitElement_initializer(this);
	}
};




CSharpParser.Element_initializerContext = Element_initializerContext;

CSharpParser.prototype.element_initializer = function() {

    var localctx = new Element_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CSharpParser.RULE_element_initializer);
    try {
        this.state = 1294;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 1289;
            this.non_assignment_expression();
            break;
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1290;
            this.match(CSharpParser.OPEN_BRACE);
            this.state = 1291;
            this.expression_list();
            this.state = 1292;
            this.match(CSharpParser.CLOSE_BRACE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Anonymous_object_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_anonymous_object_initializer;
    return this;
}

Anonymous_object_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Anonymous_object_initializerContext.prototype.constructor = Anonymous_object_initializerContext;

Anonymous_object_initializerContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Anonymous_object_initializerContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Anonymous_object_initializerContext.prototype.member_declarator_list = function() {
    return this.getTypedRuleContext(Member_declarator_listContext,0);
};

Anonymous_object_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAnonymous_object_initializer(this);
	}
};

Anonymous_object_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAnonymous_object_initializer(this);
	}
};




CSharpParser.Anonymous_object_initializerContext = Anonymous_object_initializerContext;

CSharpParser.prototype.anonymous_object_initializer = function() {

    var localctx = new Anonymous_object_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CSharpParser.RULE_anonymous_object_initializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1296;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 1301;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0)) {
            this.state = 1297;
            this.member_declarator_list();
            this.state = 1299;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.COMMA) {
                this.state = 1298;
                this.match(CSharpParser.COMMA);
            }

        }

        this.state = 1303;
        this.match(CSharpParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_declarator_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_member_declarator_list;
    return this;
}

Member_declarator_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_declarator_listContext.prototype.constructor = Member_declarator_listContext;

Member_declarator_listContext.prototype.member_declarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Member_declaratorContext);
    } else {
        return this.getTypedRuleContext(Member_declaratorContext,i);
    }
};

Member_declarator_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMember_declarator_list(this);
	}
};

Member_declarator_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMember_declarator_list(this);
	}
};




CSharpParser.Member_declarator_listContext = Member_declarator_listContext;

CSharpParser.prototype.member_declarator_list = function() {

    var localctx = new Member_declarator_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CSharpParser.RULE_member_declarator_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1305;
        this.member_declarator();
        this.state = 1310;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1306;
                this.match(CSharpParser.COMMA);
                this.state = 1307;
                this.member_declarator(); 
            }
            this.state = 1312;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_declaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_member_declarator;
    return this;
}

Member_declaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_declaratorContext.prototype.constructor = Member_declaratorContext;

Member_declaratorContext.prototype.primary_expression = function() {
    return this.getTypedRuleContext(Primary_expressionContext,0);
};

Member_declaratorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Member_declaratorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Member_declaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMember_declarator(this);
	}
};

Member_declaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMember_declarator(this);
	}
};




CSharpParser.Member_declaratorContext = Member_declaratorContext;

CSharpParser.prototype.member_declarator = function() {

    var localctx = new Member_declaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CSharpParser.RULE_member_declarator);
    try {
        this.state = 1318;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1313;
            this.primary_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1314;
            this.identifier();
            this.state = 1315;
            this.match(CSharpParser.ASSIGNMENT);
            this.state = 1316;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unbound_type_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_unbound_type_name;
    return this;
}

Unbound_type_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unbound_type_nameContext.prototype.constructor = Unbound_type_nameContext;

Unbound_type_nameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Unbound_type_nameContext.prototype.generic_dimension_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Generic_dimension_specifierContext);
    } else {
        return this.getTypedRuleContext(Generic_dimension_specifierContext,i);
    }
};

Unbound_type_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUnbound_type_name(this);
	}
};

Unbound_type_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUnbound_type_name(this);
	}
};




CSharpParser.Unbound_type_nameContext = Unbound_type_nameContext;

CSharpParser.prototype.unbound_type_name = function() {

    var localctx = new Unbound_type_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CSharpParser.RULE_unbound_type_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1320;
        this.identifier();
        this.state = 1329;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.CLOSE_PARENS:
        case CSharpParser.DOT:
        case CSharpParser.LT:
            this.state = 1322;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.LT) {
                this.state = 1321;
                this.generic_dimension_specifier();
            }

            break;
        case CSharpParser.DOUBLE_COLON:
            this.state = 1324;
            this.match(CSharpParser.DOUBLE_COLON);
            this.state = 1325;
            this.identifier();
            this.state = 1327;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.LT) {
                this.state = 1326;
                this.generic_dimension_specifier();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1338;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.DOT) {
            this.state = 1331;
            this.match(CSharpParser.DOT);
            this.state = 1332;
            this.identifier();
            this.state = 1334;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.LT) {
                this.state = 1333;
                this.generic_dimension_specifier();
            }

            this.state = 1340;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Generic_dimension_specifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_generic_dimension_specifier;
    return this;
}

Generic_dimension_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_dimension_specifierContext.prototype.constructor = Generic_dimension_specifierContext;


Generic_dimension_specifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterGeneric_dimension_specifier(this);
	}
};

Generic_dimension_specifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitGeneric_dimension_specifier(this);
	}
};




CSharpParser.Generic_dimension_specifierContext = Generic_dimension_specifierContext;

CSharpParser.prototype.generic_dimension_specifier = function() {

    var localctx = new Generic_dimension_specifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CSharpParser.RULE_generic_dimension_specifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1341;
        this.match(CSharpParser.LT);
        this.state = 1345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 1342;
            this.match(CSharpParser.COMMA);
            this.state = 1347;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1348;
        this.match(CSharpParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IsTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_isType;
    return this;
}

IsTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsTypeContext.prototype.constructor = IsTypeContext;

IsTypeContext.prototype.base_type = function() {
    return this.getTypedRuleContext(Base_typeContext,0);
};

IsTypeContext.prototype.rank_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rank_specifierContext);
    } else {
        return this.getTypedRuleContext(Rank_specifierContext,i);
    }
};

IsTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIsType(this);
	}
};

IsTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIsType(this);
	}
};




CSharpParser.IsTypeContext = IsTypeContext;

CSharpParser.prototype.isType = function() {

    var localctx = new IsTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CSharpParser.RULE_isType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1350;
        this.base_type();
        this.state = 1355;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1353;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CSharpParser.OPEN_BRACKET:
                    this.state = 1351;
                    this.rank_specifier();
                    break;
                case CSharpParser.STAR:
                    this.state = 1352;
                    this.match(CSharpParser.STAR);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 1357;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
        }

        this.state = 1359;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        if(la_===1) {
            this.state = 1358;
            this.match(CSharpParser.INTERR);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lambda_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_lambda_expression;
    return this;
}

Lambda_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lambda_expressionContext.prototype.constructor = Lambda_expressionContext;

Lambda_expressionContext.prototype.anonymous_function_signature = function() {
    return this.getTypedRuleContext(Anonymous_function_signatureContext,0);
};

Lambda_expressionContext.prototype.right_arrow = function() {
    return this.getTypedRuleContext(Right_arrowContext,0);
};

Lambda_expressionContext.prototype.anonymous_function_body = function() {
    return this.getTypedRuleContext(Anonymous_function_bodyContext,0);
};

Lambda_expressionContext.prototype.ASYNC = function() {
    return this.getToken(CSharpParser.ASYNC, 0);
};

Lambda_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLambda_expression(this);
	}
};

Lambda_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLambda_expression(this);
	}
};




CSharpParser.Lambda_expressionContext = Lambda_expressionContext;

CSharpParser.prototype.lambda_expression = function() {

    var localctx = new Lambda_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CSharpParser.RULE_lambda_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1362;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        if(la_===1) {
            this.state = 1361;
            this.match(CSharpParser.ASYNC);

        }
        this.state = 1364;
        this.anonymous_function_signature();
        this.state = 1365;
        this.right_arrow();
        this.state = 1366;
        this.anonymous_function_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Anonymous_function_signatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_anonymous_function_signature;
    return this;
}

Anonymous_function_signatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Anonymous_function_signatureContext.prototype.constructor = Anonymous_function_signatureContext;

Anonymous_function_signatureContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Anonymous_function_signatureContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Anonymous_function_signatureContext.prototype.explicit_anonymous_function_parameter_list = function() {
    return this.getTypedRuleContext(Explicit_anonymous_function_parameter_listContext,0);
};

Anonymous_function_signatureContext.prototype.implicit_anonymous_function_parameter_list = function() {
    return this.getTypedRuleContext(Implicit_anonymous_function_parameter_listContext,0);
};

Anonymous_function_signatureContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Anonymous_function_signatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAnonymous_function_signature(this);
	}
};

Anonymous_function_signatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAnonymous_function_signature(this);
	}
};




CSharpParser.Anonymous_function_signatureContext = Anonymous_function_signatureContext;

CSharpParser.prototype.anonymous_function_signature = function() {

    var localctx = new Anonymous_function_signatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CSharpParser.RULE_anonymous_function_signature);
    try {
        this.state = 1379;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1368;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1369;
            this.match(CSharpParser.CLOSE_PARENS);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1370;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1371;
            this.explicit_anonymous_function_parameter_list();
            this.state = 1372;
            this.match(CSharpParser.CLOSE_PARENS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1374;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1375;
            this.implicit_anonymous_function_parameter_list();
            this.state = 1376;
            this.match(CSharpParser.CLOSE_PARENS);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1378;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Explicit_anonymous_function_parameter_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_explicit_anonymous_function_parameter_list;
    return this;
}

Explicit_anonymous_function_parameter_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Explicit_anonymous_function_parameter_listContext.prototype.constructor = Explicit_anonymous_function_parameter_listContext;

Explicit_anonymous_function_parameter_listContext.prototype.explicit_anonymous_function_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Explicit_anonymous_function_parameterContext);
    } else {
        return this.getTypedRuleContext(Explicit_anonymous_function_parameterContext,i);
    }
};

Explicit_anonymous_function_parameter_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExplicit_anonymous_function_parameter_list(this);
	}
};

Explicit_anonymous_function_parameter_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExplicit_anonymous_function_parameter_list(this);
	}
};




CSharpParser.Explicit_anonymous_function_parameter_listContext = Explicit_anonymous_function_parameter_listContext;

CSharpParser.prototype.explicit_anonymous_function_parameter_list = function() {

    var localctx = new Explicit_anonymous_function_parameter_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CSharpParser.RULE_explicit_anonymous_function_parameter_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1381;
        this.explicit_anonymous_function_parameter();
        this.state = 1386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 1382;
            this.match(CSharpParser.COMMA);
            this.state = 1383;
            this.explicit_anonymous_function_parameter();
            this.state = 1388;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Explicit_anonymous_function_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_explicit_anonymous_function_parameter;
    this.refout = null; // Token
    return this;
}

Explicit_anonymous_function_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Explicit_anonymous_function_parameterContext.prototype.constructor = Explicit_anonymous_function_parameterContext;

Explicit_anonymous_function_parameterContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Explicit_anonymous_function_parameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Explicit_anonymous_function_parameterContext.prototype.REF = function() {
    return this.getToken(CSharpParser.REF, 0);
};

Explicit_anonymous_function_parameterContext.prototype.OUT = function() {
    return this.getToken(CSharpParser.OUT, 0);
};

Explicit_anonymous_function_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExplicit_anonymous_function_parameter(this);
	}
};

Explicit_anonymous_function_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExplicit_anonymous_function_parameter(this);
	}
};




CSharpParser.Explicit_anonymous_function_parameterContext = Explicit_anonymous_function_parameterContext;

CSharpParser.prototype.explicit_anonymous_function_parameter = function() {

    var localctx = new Explicit_anonymous_function_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CSharpParser.RULE_explicit_anonymous_function_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1390;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OUT || _la===CSharpParser.REF) {
            this.state = 1389;
            localctx.refout = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===CSharpParser.OUT || _la===CSharpParser.REF)) {
                localctx.refout = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1392;
        this.var_type();
        this.state = 1393;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Implicit_anonymous_function_parameter_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_implicit_anonymous_function_parameter_list;
    return this;
}

Implicit_anonymous_function_parameter_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Implicit_anonymous_function_parameter_listContext.prototype.constructor = Implicit_anonymous_function_parameter_listContext;

Implicit_anonymous_function_parameter_listContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Implicit_anonymous_function_parameter_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterImplicit_anonymous_function_parameter_list(this);
	}
};

Implicit_anonymous_function_parameter_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitImplicit_anonymous_function_parameter_list(this);
	}
};




CSharpParser.Implicit_anonymous_function_parameter_listContext = Implicit_anonymous_function_parameter_listContext;

CSharpParser.prototype.implicit_anonymous_function_parameter_list = function() {

    var localctx = new Implicit_anonymous_function_parameter_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CSharpParser.RULE_implicit_anonymous_function_parameter_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1395;
        this.identifier();
        this.state = 1400;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 1396;
            this.match(CSharpParser.COMMA);
            this.state = 1397;
            this.identifier();
            this.state = 1402;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Anonymous_function_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_anonymous_function_body;
    return this;
}

Anonymous_function_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Anonymous_function_bodyContext.prototype.constructor = Anonymous_function_bodyContext;

Anonymous_function_bodyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Anonymous_function_bodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Anonymous_function_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAnonymous_function_body(this);
	}
};

Anonymous_function_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAnonymous_function_body(this);
	}
};




CSharpParser.Anonymous_function_bodyContext = Anonymous_function_bodyContext;

CSharpParser.prototype.anonymous_function_body = function() {

    var localctx = new Anonymous_function_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CSharpParser.RULE_anonymous_function_body);
    try {
        this.state = 1405;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 1403;
            this.expression();
            break;
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1404;
            this.block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_query_expression;
    return this;
}

Query_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_expressionContext.prototype.constructor = Query_expressionContext;

Query_expressionContext.prototype.from_clause = function() {
    return this.getTypedRuleContext(From_clauseContext,0);
};

Query_expressionContext.prototype.query_body = function() {
    return this.getTypedRuleContext(Query_bodyContext,0);
};

Query_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterQuery_expression(this);
	}
};

Query_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitQuery_expression(this);
	}
};




CSharpParser.Query_expressionContext = Query_expressionContext;

CSharpParser.prototype.query_expression = function() {

    var localctx = new Query_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CSharpParser.RULE_query_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1407;
        this.from_clause();
        this.state = 1408;
        this.query_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function From_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_from_clause;
    return this;
}

From_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
From_clauseContext.prototype.constructor = From_clauseContext;

From_clauseContext.prototype.FROM = function() {
    return this.getToken(CSharpParser.FROM, 0);
};

From_clauseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

From_clauseContext.prototype.IN = function() {
    return this.getToken(CSharpParser.IN, 0);
};

From_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

From_clauseContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

From_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFrom_clause(this);
	}
};

From_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFrom_clause(this);
	}
};




CSharpParser.From_clauseContext = From_clauseContext;

CSharpParser.prototype.from_clause = function() {

    var localctx = new From_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CSharpParser.RULE_from_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1410;
        this.match(CSharpParser.FROM);
        this.state = 1412;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        if(la_===1) {
            this.state = 1411;
            this.var_type();

        }
        this.state = 1414;
        this.identifier();
        this.state = 1415;
        this.match(CSharpParser.IN);
        this.state = 1416;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_query_body;
    return this;
}

Query_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_bodyContext.prototype.constructor = Query_bodyContext;

Query_bodyContext.prototype.select_or_group_clause = function() {
    return this.getTypedRuleContext(Select_or_group_clauseContext,0);
};

Query_bodyContext.prototype.query_body_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Query_body_clauseContext);
    } else {
        return this.getTypedRuleContext(Query_body_clauseContext,i);
    }
};

Query_bodyContext.prototype.query_continuation = function() {
    return this.getTypedRuleContext(Query_continuationContext,0);
};

Query_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterQuery_body(this);
	}
};

Query_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitQuery_body(this);
	}
};




CSharpParser.Query_bodyContext = Query_bodyContext;

CSharpParser.prototype.query_body = function() {

    var localctx = new Query_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CSharpParser.RULE_query_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1421;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CSharpParser.FROM - 47)) | (1 << (CSharpParser.JOIN - 47)) | (1 << (CSharpParser.LET - 47)) | (1 << (CSharpParser.ORDERBY - 47)))) !== 0) || _la===CSharpParser.WHERE) {
            this.state = 1418;
            this.query_body_clause();
            this.state = 1423;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1424;
        this.select_or_group_clause();
        this.state = 1426;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        if(la_===1) {
            this.state = 1425;
            this.query_continuation();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_body_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_query_body_clause;
    return this;
}

Query_body_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_body_clauseContext.prototype.constructor = Query_body_clauseContext;

Query_body_clauseContext.prototype.from_clause = function() {
    return this.getTypedRuleContext(From_clauseContext,0);
};

Query_body_clauseContext.prototype.let_clause = function() {
    return this.getTypedRuleContext(Let_clauseContext,0);
};

Query_body_clauseContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Query_body_clauseContext.prototype.combined_join_clause = function() {
    return this.getTypedRuleContext(Combined_join_clauseContext,0);
};

Query_body_clauseContext.prototype.orderby_clause = function() {
    return this.getTypedRuleContext(Orderby_clauseContext,0);
};

Query_body_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterQuery_body_clause(this);
	}
};

Query_body_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitQuery_body_clause(this);
	}
};




CSharpParser.Query_body_clauseContext = Query_body_clauseContext;

CSharpParser.prototype.query_body_clause = function() {

    var localctx = new Query_body_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CSharpParser.RULE_query_body_clause);
    try {
        this.state = 1433;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.FROM:
            this.enterOuterAlt(localctx, 1);
            this.state = 1428;
            this.from_clause();
            break;
        case CSharpParser.LET:
            this.enterOuterAlt(localctx, 2);
            this.state = 1429;
            this.let_clause();
            break;
        case CSharpParser.WHERE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1430;
            this.where_clause();
            break;
        case CSharpParser.JOIN:
            this.enterOuterAlt(localctx, 4);
            this.state = 1431;
            this.combined_join_clause();
            break;
        case CSharpParser.ORDERBY:
            this.enterOuterAlt(localctx, 5);
            this.state = 1432;
            this.orderby_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Let_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_let_clause;
    return this;
}

Let_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Let_clauseContext.prototype.constructor = Let_clauseContext;

Let_clauseContext.prototype.LET = function() {
    return this.getToken(CSharpParser.LET, 0);
};

Let_clauseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Let_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Let_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLet_clause(this);
	}
};

Let_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLet_clause(this);
	}
};




CSharpParser.Let_clauseContext = Let_clauseContext;

CSharpParser.prototype.let_clause = function() {

    var localctx = new Let_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CSharpParser.RULE_let_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1435;
        this.match(CSharpParser.LET);
        this.state = 1436;
        this.identifier();
        this.state = 1437;
        this.match(CSharpParser.ASSIGNMENT);
        this.state = 1438;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Where_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_where_clause;
    return this;
}

Where_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Where_clauseContext.prototype.constructor = Where_clauseContext;

Where_clauseContext.prototype.WHERE = function() {
    return this.getToken(CSharpParser.WHERE, 0);
};

Where_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Where_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterWhere_clause(this);
	}
};

Where_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitWhere_clause(this);
	}
};




CSharpParser.Where_clauseContext = Where_clauseContext;

CSharpParser.prototype.where_clause = function() {

    var localctx = new Where_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CSharpParser.RULE_where_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1440;
        this.match(CSharpParser.WHERE);
        this.state = 1441;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Combined_join_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_combined_join_clause;
    return this;
}

Combined_join_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Combined_join_clauseContext.prototype.constructor = Combined_join_clauseContext;

Combined_join_clauseContext.prototype.JOIN = function() {
    return this.getToken(CSharpParser.JOIN, 0);
};

Combined_join_clauseContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Combined_join_clauseContext.prototype.IN = function() {
    return this.getToken(CSharpParser.IN, 0);
};

Combined_join_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Combined_join_clauseContext.prototype.ON = function() {
    return this.getToken(CSharpParser.ON, 0);
};

Combined_join_clauseContext.prototype.EQUALS = function() {
    return this.getToken(CSharpParser.EQUALS, 0);
};

Combined_join_clauseContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Combined_join_clauseContext.prototype.INTO = function() {
    return this.getToken(CSharpParser.INTO, 0);
};

Combined_join_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCombined_join_clause(this);
	}
};

Combined_join_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCombined_join_clause(this);
	}
};




CSharpParser.Combined_join_clauseContext = Combined_join_clauseContext;

CSharpParser.prototype.combined_join_clause = function() {

    var localctx = new Combined_join_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CSharpParser.RULE_combined_join_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1443;
        this.match(CSharpParser.JOIN);
        this.state = 1445;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        if(la_===1) {
            this.state = 1444;
            this.var_type();

        }
        this.state = 1447;
        this.identifier();
        this.state = 1448;
        this.match(CSharpParser.IN);
        this.state = 1449;
        this.expression();
        this.state = 1450;
        this.match(CSharpParser.ON);
        this.state = 1451;
        this.expression();
        this.state = 1452;
        this.match(CSharpParser.EQUALS);
        this.state = 1453;
        this.expression();
        this.state = 1456;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.INTO) {
            this.state = 1454;
            this.match(CSharpParser.INTO);
            this.state = 1455;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Orderby_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_orderby_clause;
    return this;
}

Orderby_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Orderby_clauseContext.prototype.constructor = Orderby_clauseContext;

Orderby_clauseContext.prototype.ORDERBY = function() {
    return this.getToken(CSharpParser.ORDERBY, 0);
};

Orderby_clauseContext.prototype.ordering = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderingContext);
    } else {
        return this.getTypedRuleContext(OrderingContext,i);
    }
};

Orderby_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterOrderby_clause(this);
	}
};

Orderby_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitOrderby_clause(this);
	}
};




CSharpParser.Orderby_clauseContext = Orderby_clauseContext;

CSharpParser.prototype.orderby_clause = function() {

    var localctx = new Orderby_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CSharpParser.RULE_orderby_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1458;
        this.match(CSharpParser.ORDERBY);
        this.state = 1459;
        this.ordering();
        this.state = 1464;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 1460;
            this.match(CSharpParser.COMMA);
            this.state = 1461;
            this.ordering();
            this.state = 1466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_ordering;
    this.dir = null; // Token
    return this;
}

OrderingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderingContext.prototype.constructor = OrderingContext;

OrderingContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

OrderingContext.prototype.ASCENDING = function() {
    return this.getToken(CSharpParser.ASCENDING, 0);
};

OrderingContext.prototype.DESCENDING = function() {
    return this.getToken(CSharpParser.DESCENDING, 0);
};

OrderingContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterOrdering(this);
	}
};

OrderingContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitOrdering(this);
	}
};




CSharpParser.OrderingContext = OrderingContext;

CSharpParser.prototype.ordering = function() {

    var localctx = new OrderingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CSharpParser.RULE_ordering);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1467;
        this.expression();
        this.state = 1469;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.ASCENDING || _la===CSharpParser.DESCENDING) {
            this.state = 1468;
            localctx.dir = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===CSharpParser.ASCENDING || _la===CSharpParser.DESCENDING)) {
                localctx.dir = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_or_group_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_select_or_group_clause;
    return this;
}

Select_or_group_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_or_group_clauseContext.prototype.constructor = Select_or_group_clauseContext;

Select_or_group_clauseContext.prototype.SELECT = function() {
    return this.getToken(CSharpParser.SELECT, 0);
};

Select_or_group_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Select_or_group_clauseContext.prototype.GROUP = function() {
    return this.getToken(CSharpParser.GROUP, 0);
};

Select_or_group_clauseContext.prototype.BY = function() {
    return this.getToken(CSharpParser.BY, 0);
};

Select_or_group_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSelect_or_group_clause(this);
	}
};

Select_or_group_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSelect_or_group_clause(this);
	}
};




CSharpParser.Select_or_group_clauseContext = Select_or_group_clauseContext;

CSharpParser.prototype.select_or_group_clause = function() {

    var localctx = new Select_or_group_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CSharpParser.RULE_select_or_group_clause);
    try {
        this.state = 1478;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.SELECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1471;
            this.match(CSharpParser.SELECT);
            this.state = 1472;
            this.expression();
            break;
        case CSharpParser.GROUP:
            this.enterOuterAlt(localctx, 2);
            this.state = 1473;
            this.match(CSharpParser.GROUP);
            this.state = 1474;
            this.expression();
            this.state = 1475;
            this.match(CSharpParser.BY);
            this.state = 1476;
            this.expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_continuationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_query_continuation;
    return this;
}

Query_continuationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_continuationContext.prototype.constructor = Query_continuationContext;

Query_continuationContext.prototype.INTO = function() {
    return this.getToken(CSharpParser.INTO, 0);
};

Query_continuationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Query_continuationContext.prototype.query_body = function() {
    return this.getTypedRuleContext(Query_bodyContext,0);
};

Query_continuationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterQuery_continuation(this);
	}
};

Query_continuationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitQuery_continuation(this);
	}
};




CSharpParser.Query_continuationContext = Query_continuationContext;

CSharpParser.prototype.query_continuation = function() {

    var localctx = new Query_continuationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CSharpParser.RULE_query_continuation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1480;
        this.match(CSharpParser.INTO);
        this.state = 1481;
        this.identifier();
        this.state = 1482;
        this.query_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;


 
StatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DeclarationStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DeclarationStatementContext.prototype = Object.create(StatementContext.prototype);
DeclarationStatementContext.prototype.constructor = DeclarationStatementContext;

CSharpParser.DeclarationStatementContext = DeclarationStatementContext;

DeclarationStatementContext.prototype.local_variable_declaration = function() {
    return this.getTypedRuleContext(Local_variable_declarationContext,0);
};

DeclarationStatementContext.prototype.local_constant_declaration = function() {
    return this.getTypedRuleContext(Local_constant_declarationContext,0);
};
DeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterDeclarationStatement(this);
	}
};

DeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitDeclarationStatement(this);
	}
};


function EmbeddedStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EmbeddedStatementContext.prototype = Object.create(StatementContext.prototype);
EmbeddedStatementContext.prototype.constructor = EmbeddedStatementContext;

CSharpParser.EmbeddedStatementContext = EmbeddedStatementContext;

EmbeddedStatementContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};
EmbeddedStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEmbeddedStatement(this);
	}
};

EmbeddedStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEmbeddedStatement(this);
	}
};


function LabeledStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LabeledStatementContext.prototype = Object.create(StatementContext.prototype);
LabeledStatementContext.prototype.constructor = LabeledStatementContext;

CSharpParser.LabeledStatementContext = LabeledStatementContext;

LabeledStatementContext.prototype.labeled_Statement = function() {
    return this.getTypedRuleContext(Labeled_StatementContext,0);
};
LabeledStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLabeledStatement(this);
	}
};

LabeledStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLabeledStatement(this);
	}
};



CSharpParser.StatementContext = StatementContext;

CSharpParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CSharpParser.RULE_statement);
    try {
        this.state = 1492;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LabeledStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1484;
            this.labeled_Statement();
            break;

        case 2:
            localctx = new DeclarationStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1487;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.ADD:
            case CSharpParser.ALIAS:
            case CSharpParser.ARGLIST:
            case CSharpParser.ASCENDING:
            case CSharpParser.ASYNC:
            case CSharpParser.AWAIT:
            case CSharpParser.BOOL:
            case CSharpParser.BY:
            case CSharpParser.BYTE:
            case CSharpParser.CHAR:
            case CSharpParser.DECIMAL:
            case CSharpParser.DESCENDING:
            case CSharpParser.DOUBLE:
            case CSharpParser.DYNAMIC:
            case CSharpParser.EQUALS:
            case CSharpParser.FLOAT:
            case CSharpParser.FROM:
            case CSharpParser.GET:
            case CSharpParser.GROUP:
            case CSharpParser.INT:
            case CSharpParser.INTO:
            case CSharpParser.JOIN:
            case CSharpParser.LET:
            case CSharpParser.LONG:
            case CSharpParser.NAMEOF:
            case CSharpParser.OBJECT:
            case CSharpParser.ON:
            case CSharpParser.ORDERBY:
            case CSharpParser.PARTIAL:
            case CSharpParser.REMOVE:
            case CSharpParser.SBYTE:
            case CSharpParser.SELECT:
            case CSharpParser.SET:
            case CSharpParser.SHORT:
            case CSharpParser.STRING:
            case CSharpParser.UINT:
            case CSharpParser.ULONG:
            case CSharpParser.USHORT:
            case CSharpParser.VAR:
            case CSharpParser.VOID:
            case CSharpParser.WHEN:
            case CSharpParser.WHERE:
            case CSharpParser.YIELD:
            case CSharpParser.IDENTIFIER:
                this.state = 1485;
                this.local_variable_declaration();
                break;
            case CSharpParser.CONST:
                this.state = 1486;
                this.local_constant_declaration();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1489;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 3:
            localctx = new EmbeddedStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1491;
            this.embedded_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Labeled_StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_labeled_Statement;
    return this;
}

Labeled_StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Labeled_StatementContext.prototype.constructor = Labeled_StatementContext;

Labeled_StatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Labeled_StatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

Labeled_StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLabeled_Statement(this);
	}
};

Labeled_StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLabeled_Statement(this);
	}
};




CSharpParser.Labeled_StatementContext = Labeled_StatementContext;

CSharpParser.prototype.labeled_Statement = function() {

    var localctx = new Labeled_StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CSharpParser.RULE_labeled_Statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1494;
        this.identifier();
        this.state = 1495;
        this.match(CSharpParser.COLON);
        this.state = 1496;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Embedded_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_embedded_statement;
    return this;
}

Embedded_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Embedded_statementContext.prototype.constructor = Embedded_statementContext;

Embedded_statementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Embedded_statementContext.prototype.simple_embedded_statement = function() {
    return this.getTypedRuleContext(Simple_embedded_statementContext,0);
};

Embedded_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEmbedded_statement(this);
	}
};

Embedded_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEmbedded_statement(this);
	}
};




CSharpParser.Embedded_statementContext = Embedded_statementContext;

CSharpParser.prototype.embedded_statement = function() {

    var localctx = new Embedded_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CSharpParser.RULE_embedded_statement);
    try {
        this.state = 1500;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1498;
            this.block();
            break;
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BREAK:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.CONTINUE:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DO:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FIXED:
        case CSharpParser.FLOAT:
        case CSharpParser.FOR:
        case CSharpParser.FOREACH:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GOTO:
        case CSharpParser.GROUP:
        case CSharpParser.IF:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LOCK:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.RETURN:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.SWITCH:
        case CSharpParser.THIS:
        case CSharpParser.THROW:
        case CSharpParser.TRUE:
        case CSharpParser.TRY:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.UNSAFE:
        case CSharpParser.USHORT:
        case CSharpParser.USING:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.WHILE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.SEMICOLON:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 2);
            this.state = 1499;
            this.simple_embedded_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_embedded_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_simple_embedded_statement;
    return this;
}

Simple_embedded_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_embedded_statementContext.prototype.constructor = Simple_embedded_statementContext;


 
Simple_embedded_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function EmptyStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EmptyStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

CSharpParser.EmptyStatementContext = EmptyStatementContext;

EmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEmptyStatement(this);
	}
};


function TryStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TryStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

CSharpParser.TryStatementContext = TryStatementContext;

TryStatementContext.prototype.TRY = function() {
    return this.getToken(CSharpParser.TRY, 0);
};

TryStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TryStatementContext.prototype.catch_clauses = function() {
    return this.getTypedRuleContext(Catch_clausesContext,0);
};

TryStatementContext.prototype.finally_clause = function() {
    return this.getTypedRuleContext(Finally_clauseContext,0);
};
TryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterTryStatement(this);
	}
};

TryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitTryStatement(this);
	}
};


function CheckedStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CheckedStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
CheckedStatementContext.prototype.constructor = CheckedStatementContext;

CSharpParser.CheckedStatementContext = CheckedStatementContext;

CheckedStatementContext.prototype.CHECKED = function() {
    return this.getToken(CSharpParser.CHECKED, 0);
};

CheckedStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};
CheckedStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCheckedStatement(this);
	}
};

CheckedStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCheckedStatement(this);
	}
};


function ThrowStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThrowStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

CSharpParser.ThrowStatementContext = ThrowStatementContext;

ThrowStatementContext.prototype.THROW = function() {
    return this.getToken(CSharpParser.THROW, 0);
};

ThrowStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ThrowStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterThrowStatement(this);
	}
};

ThrowStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitThrowStatement(this);
	}
};


function UnsafeStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnsafeStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
UnsafeStatementContext.prototype.constructor = UnsafeStatementContext;

CSharpParser.UnsafeStatementContext = UnsafeStatementContext;

UnsafeStatementContext.prototype.UNSAFE = function() {
    return this.getToken(CSharpParser.UNSAFE, 0);
};

UnsafeStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};
UnsafeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUnsafeStatement(this);
	}
};

UnsafeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUnsafeStatement(this);
	}
};


function ForStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

CSharpParser.ForStatementContext = ForStatementContext;

ForStatementContext.prototype.FOR = function() {
    return this.getToken(CSharpParser.FOR, 0);
};

ForStatementContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

ForStatementContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

ForStatementContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};

ForStatementContext.prototype.for_initializer = function() {
    return this.getTypedRuleContext(For_initializerContext,0);
};

ForStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForStatementContext.prototype.for_iterator = function() {
    return this.getTypedRuleContext(For_iteratorContext,0);
};
ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitForStatement(this);
	}
};


function BreakStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BreakStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

CSharpParser.BreakStatementContext = BreakStatementContext;

BreakStatementContext.prototype.BREAK = function() {
    return this.getToken(CSharpParser.BREAK, 0);
};
BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBreakStatement(this);
	}
};


function IfStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

CSharpParser.IfStatementContext = IfStatementContext;

IfStatementContext.prototype.IF = function() {
    return this.getToken(CSharpParser.IF, 0);
};

IfStatementContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

IfStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfStatementContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

IfStatementContext.prototype.if_body = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(If_bodyContext);
    } else {
        return this.getTypedRuleContext(If_bodyContext,i);
    }
};

IfStatementContext.prototype.ELSE = function() {
    return this.getToken(CSharpParser.ELSE, 0);
};
IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIfStatement(this);
	}
};


function ReturnStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReturnStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

CSharpParser.ReturnStatementContext = ReturnStatementContext;

ReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(CSharpParser.RETURN, 0);
};

ReturnStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitReturnStatement(this);
	}
};


function GotoStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GotoStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
GotoStatementContext.prototype.constructor = GotoStatementContext;

CSharpParser.GotoStatementContext = GotoStatementContext;

GotoStatementContext.prototype.GOTO = function() {
    return this.getToken(CSharpParser.GOTO, 0);
};

GotoStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GotoStatementContext.prototype.CASE = function() {
    return this.getToken(CSharpParser.CASE, 0);
};

GotoStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

GotoStatementContext.prototype.DEFAULT = function() {
    return this.getToken(CSharpParser.DEFAULT, 0);
};
GotoStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterGotoStatement(this);
	}
};

GotoStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitGotoStatement(this);
	}
};


function SwitchStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SwitchStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

CSharpParser.SwitchStatementContext = SwitchStatementContext;

SwitchStatementContext.prototype.SWITCH = function() {
    return this.getToken(CSharpParser.SWITCH, 0);
};

SwitchStatementContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

SwitchStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SwitchStatementContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

SwitchStatementContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

SwitchStatementContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

SwitchStatementContext.prototype.switch_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Switch_sectionContext);
    } else {
        return this.getTypedRuleContext(Switch_sectionContext,i);
    }
};
SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSwitchStatement(this);
	}
};


function FixedStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FixedStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
FixedStatementContext.prototype.constructor = FixedStatementContext;

CSharpParser.FixedStatementContext = FixedStatementContext;

FixedStatementContext.prototype.FIXED = function() {
    return this.getToken(CSharpParser.FIXED, 0);
};

FixedStatementContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

FixedStatementContext.prototype.pointer_type = function() {
    return this.getTypedRuleContext(Pointer_typeContext,0);
};

FixedStatementContext.prototype.fixed_pointer_declarators = function() {
    return this.getTypedRuleContext(Fixed_pointer_declaratorsContext,0);
};

FixedStatementContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

FixedStatementContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};
FixedStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixedStatement(this);
	}
};

FixedStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixedStatement(this);
	}
};


function WhileStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WhileStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

CSharpParser.WhileStatementContext = WhileStatementContext;

WhileStatementContext.prototype.WHILE = function() {
    return this.getToken(CSharpParser.WHILE, 0);
};

WhileStatementContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

WhileStatementContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};
WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitWhileStatement(this);
	}
};


function DoStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
DoStatementContext.prototype.constructor = DoStatementContext;

CSharpParser.DoStatementContext = DoStatementContext;

DoStatementContext.prototype.DO = function() {
    return this.getToken(CSharpParser.DO, 0);
};

DoStatementContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};

DoStatementContext.prototype.WHILE = function() {
    return this.getToken(CSharpParser.WHILE, 0);
};

DoStatementContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

DoStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DoStatementContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
DoStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterDoStatement(this);
	}
};

DoStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitDoStatement(this);
	}
};


function ForeachStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForeachStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
ForeachStatementContext.prototype.constructor = ForeachStatementContext;

CSharpParser.ForeachStatementContext = ForeachStatementContext;

ForeachStatementContext.prototype.FOREACH = function() {
    return this.getToken(CSharpParser.FOREACH, 0);
};

ForeachStatementContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

ForeachStatementContext.prototype.local_variable_type = function() {
    return this.getTypedRuleContext(Local_variable_typeContext,0);
};

ForeachStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ForeachStatementContext.prototype.IN = function() {
    return this.getToken(CSharpParser.IN, 0);
};

ForeachStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForeachStatementContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

ForeachStatementContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};
ForeachStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterForeachStatement(this);
	}
};

ForeachStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitForeachStatement(this);
	}
};


function UncheckedStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UncheckedStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
UncheckedStatementContext.prototype.constructor = UncheckedStatementContext;

CSharpParser.UncheckedStatementContext = UncheckedStatementContext;

UncheckedStatementContext.prototype.UNCHECKED = function() {
    return this.getToken(CSharpParser.UNCHECKED, 0);
};

UncheckedStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};
UncheckedStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUncheckedStatement(this);
	}
};

UncheckedStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUncheckedStatement(this);
	}
};


function ExpressionStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExpressionStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

CSharpParser.ExpressionStatementContext = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExpressionStatement(this);
	}
};


function ContinueStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContinueStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

CSharpParser.ContinueStatementContext = ContinueStatementContext;

ContinueStatementContext.prototype.CONTINUE = function() {
    return this.getToken(CSharpParser.CONTINUE, 0);
};
ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitContinueStatement(this);
	}
};


function UsingStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UsingStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
UsingStatementContext.prototype.constructor = UsingStatementContext;

CSharpParser.UsingStatementContext = UsingStatementContext;

UsingStatementContext.prototype.USING = function() {
    return this.getToken(CSharpParser.USING, 0);
};

UsingStatementContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

UsingStatementContext.prototype.resource_acquisition = function() {
    return this.getTypedRuleContext(Resource_acquisitionContext,0);
};

UsingStatementContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

UsingStatementContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};
UsingStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUsingStatement(this);
	}
};

UsingStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUsingStatement(this);
	}
};


function LockStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LockStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
LockStatementContext.prototype.constructor = LockStatementContext;

CSharpParser.LockStatementContext = LockStatementContext;

LockStatementContext.prototype.LOCK = function() {
    return this.getToken(CSharpParser.LOCK, 0);
};

LockStatementContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

LockStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LockStatementContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

LockStatementContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};
LockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLockStatement(this);
	}
};

LockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLockStatement(this);
	}
};


function YieldStatementContext(parser, ctx) {
	Simple_embedded_statementContext.call(this, parser);
    Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

YieldStatementContext.prototype = Object.create(Simple_embedded_statementContext.prototype);
YieldStatementContext.prototype.constructor = YieldStatementContext;

CSharpParser.YieldStatementContext = YieldStatementContext;

YieldStatementContext.prototype.YIELD = function() {
    return this.getToken(CSharpParser.YIELD, 0);
};

YieldStatementContext.prototype.RETURN = function() {
    return this.getToken(CSharpParser.RETURN, 0);
};

YieldStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

YieldStatementContext.prototype.BREAK = function() {
    return this.getToken(CSharpParser.BREAK, 0);
};
YieldStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterYieldStatement(this);
	}
};

YieldStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitYieldStatement(this);
	}
};



CSharpParser.Simple_embedded_statementContext = Simple_embedded_statementContext;

CSharpParser.prototype.simple_embedded_statement = function() {

    var localctx = new Simple_embedded_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CSharpParser.RULE_simple_embedded_statement);
    var _la = 0; // Token type
    try {
        this.state = 1629;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        switch(la_) {
        case 1:
            localctx = new EmptyStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1502;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 2:
            localctx = new ExpressionStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1503;
            this.expression();
            this.state = 1504;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 3:
            localctx = new IfStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1506;
            this.match(CSharpParser.IF);
            this.state = 1507;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1508;
            this.expression();
            this.state = 1509;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 1510;
            this.if_body();
            this.state = 1513;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
            if(la_===1) {
                this.state = 1511;
                this.match(CSharpParser.ELSE);
                this.state = 1512;
                this.if_body();

            }
            break;

        case 4:
            localctx = new SwitchStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1515;
            this.match(CSharpParser.SWITCH);
            this.state = 1516;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1517;
            this.expression();
            this.state = 1518;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 1519;
            this.match(CSharpParser.OPEN_BRACE);
            this.state = 1523;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CSharpParser.CASE || _la===CSharpParser.DEFAULT) {
                this.state = 1520;
                this.switch_section();
                this.state = 1525;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1526;
            this.match(CSharpParser.CLOSE_BRACE);
            break;

        case 5:
            localctx = new WhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1528;
            this.match(CSharpParser.WHILE);
            this.state = 1529;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1530;
            this.expression();
            this.state = 1531;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 1532;
            this.embedded_statement();
            break;

        case 6:
            localctx = new DoStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1534;
            this.match(CSharpParser.DO);
            this.state = 1535;
            this.embedded_statement();
            this.state = 1536;
            this.match(CSharpParser.WHILE);
            this.state = 1537;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1538;
            this.expression();
            this.state = 1539;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 1540;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 7:
            localctx = new ForStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1542;
            this.match(CSharpParser.FOR);
            this.state = 1543;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1545;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.VOID - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
                this.state = 1544;
                this.for_initializer();
            }

            this.state = 1547;
            this.match(CSharpParser.SEMICOLON);
            this.state = 1549;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
                this.state = 1548;
                this.expression();
            }

            this.state = 1551;
            this.match(CSharpParser.SEMICOLON);
            this.state = 1553;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
                this.state = 1552;
                this.for_iterator();
            }

            this.state = 1555;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 1556;
            this.embedded_statement();
            break;

        case 8:
            localctx = new ForeachStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1557;
            this.match(CSharpParser.FOREACH);
            this.state = 1558;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1559;
            this.local_variable_type();
            this.state = 1560;
            this.identifier();
            this.state = 1561;
            this.match(CSharpParser.IN);
            this.state = 1562;
            this.expression();
            this.state = 1563;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 1564;
            this.embedded_statement();
            break;

        case 9:
            localctx = new BreakStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1566;
            this.match(CSharpParser.BREAK);
            this.state = 1567;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 10:
            localctx = new ContinueStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1568;
            this.match(CSharpParser.CONTINUE);
            this.state = 1569;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 11:
            localctx = new GotoStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1570;
            this.match(CSharpParser.GOTO);
            this.state = 1575;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.ADD:
            case CSharpParser.ALIAS:
            case CSharpParser.ARGLIST:
            case CSharpParser.ASCENDING:
            case CSharpParser.ASYNC:
            case CSharpParser.AWAIT:
            case CSharpParser.BY:
            case CSharpParser.DESCENDING:
            case CSharpParser.DYNAMIC:
            case CSharpParser.EQUALS:
            case CSharpParser.FROM:
            case CSharpParser.GET:
            case CSharpParser.GROUP:
            case CSharpParser.INTO:
            case CSharpParser.JOIN:
            case CSharpParser.LET:
            case CSharpParser.NAMEOF:
            case CSharpParser.ON:
            case CSharpParser.ORDERBY:
            case CSharpParser.PARTIAL:
            case CSharpParser.REMOVE:
            case CSharpParser.SELECT:
            case CSharpParser.SET:
            case CSharpParser.VAR:
            case CSharpParser.WHEN:
            case CSharpParser.WHERE:
            case CSharpParser.YIELD:
            case CSharpParser.IDENTIFIER:
                this.state = 1571;
                this.identifier();
                break;
            case CSharpParser.CASE:
                this.state = 1572;
                this.match(CSharpParser.CASE);
                this.state = 1573;
                this.expression();
                break;
            case CSharpParser.DEFAULT:
                this.state = 1574;
                this.match(CSharpParser.DEFAULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1577;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 12:
            localctx = new ReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1578;
            this.match(CSharpParser.RETURN);
            this.state = 1580;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
                this.state = 1579;
                this.expression();
            }

            this.state = 1582;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 13:
            localctx = new ThrowStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 1583;
            this.match(CSharpParser.THROW);
            this.state = 1585;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
                this.state = 1584;
                this.expression();
            }

            this.state = 1587;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 14:
            localctx = new TryStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 1588;
            this.match(CSharpParser.TRY);
            this.state = 1589;
            this.block();
            this.state = 1595;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.CATCH:
                this.state = 1590;
                this.catch_clauses();
                this.state = 1592;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CSharpParser.FINALLY) {
                    this.state = 1591;
                    this.finally_clause();
                }

                break;
            case CSharpParser.FINALLY:
                this.state = 1594;
                this.finally_clause();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 15:
            localctx = new CheckedStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 1597;
            this.match(CSharpParser.CHECKED);
            this.state = 1598;
            this.block();
            break;

        case 16:
            localctx = new UncheckedStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 1599;
            this.match(CSharpParser.UNCHECKED);
            this.state = 1600;
            this.block();
            break;

        case 17:
            localctx = new LockStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 1601;
            this.match(CSharpParser.LOCK);
            this.state = 1602;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1603;
            this.expression();
            this.state = 1604;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 1605;
            this.embedded_statement();
            break;

        case 18:
            localctx = new UsingStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 1607;
            this.match(CSharpParser.USING);
            this.state = 1608;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1609;
            this.resource_acquisition();
            this.state = 1610;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 1611;
            this.embedded_statement();
            break;

        case 19:
            localctx = new YieldStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 1613;
            this.match(CSharpParser.YIELD);
            this.state = 1617;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.RETURN:
                this.state = 1614;
                this.match(CSharpParser.RETURN);
                this.state = 1615;
                this.expression();
                break;
            case CSharpParser.BREAK:
                this.state = 1616;
                this.match(CSharpParser.BREAK);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1619;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 20:
            localctx = new UnsafeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 1620;
            this.match(CSharpParser.UNSAFE);
            this.state = 1621;
            this.block();
            break;

        case 21:
            localctx = new FixedStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 1622;
            this.match(CSharpParser.FIXED);
            this.state = 1623;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1624;
            this.pointer_type();
            this.state = 1625;
            this.fixed_pointer_declarators();
            this.state = 1626;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 1627;
            this.embedded_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

BlockContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

BlockContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBlock(this);
	}
};




CSharpParser.BlockContext = BlockContext;

CSharpParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CSharpParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1631;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 1633;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BREAK) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.CONST) | (1 << CSharpParser.CONTINUE) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DO - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FALSE - 32)) | (1 << (CSharpParser.FIXED - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FOR - 32)) | (1 << (CSharpParser.FOREACH - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GOTO - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.IF - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LOCK - 32)) | (1 << (CSharpParser.LONG - 32)) | (1 << (CSharpParser.NAMEOF - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.RETURN - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.SWITCH - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.THROW - 65)) | (1 << (CSharpParser.TRUE - 65)) | (1 << (CSharpParser.TRY - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.UNSAFE - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.USING - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.VOID - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.WHILE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_BRACE - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (CSharpParser.SEMICOLON - 131)) | (1 << (CSharpParser.PLUS - 131)) | (1 << (CSharpParser.MINUS - 131)) | (1 << (CSharpParser.STAR - 131)) | (1 << (CSharpParser.AMP - 131)) | (1 << (CSharpParser.BANG - 131)) | (1 << (CSharpParser.TILDE - 131)) | (1 << (CSharpParser.OP_INC - 131)) | (1 << (CSharpParser.OP_DEC - 131)))) !== 0)) {
            this.state = 1632;
            this.statement_list();
        }

        this.state = 1635;
        this.match(CSharpParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_variable_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_local_variable_declaration;
    return this;
}

Local_variable_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_variable_declarationContext.prototype.constructor = Local_variable_declarationContext;

Local_variable_declarationContext.prototype.local_variable_type = function() {
    return this.getTypedRuleContext(Local_variable_typeContext,0);
};

Local_variable_declarationContext.prototype.local_variable_declarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Local_variable_declaratorContext);
    } else {
        return this.getTypedRuleContext(Local_variable_declaratorContext,i);
    }
};

Local_variable_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLocal_variable_declaration(this);
	}
};

Local_variable_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLocal_variable_declaration(this);
	}
};




CSharpParser.Local_variable_declarationContext = Local_variable_declarationContext;

CSharpParser.prototype.local_variable_declaration = function() {

    var localctx = new Local_variable_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CSharpParser.RULE_local_variable_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1637;
        this.local_variable_type();
        this.state = 1638;
        this.local_variable_declarator();
        this.state = 1643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 1639;
            this.match(CSharpParser.COMMA);
            this.state = 1640;
            this.local_variable_declarator();
            this.state = 1645;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_variable_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_local_variable_type;
    return this;
}

Local_variable_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_variable_typeContext.prototype.constructor = Local_variable_typeContext;

Local_variable_typeContext.prototype.VAR = function() {
    return this.getToken(CSharpParser.VAR, 0);
};

Local_variable_typeContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Local_variable_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLocal_variable_type(this);
	}
};

Local_variable_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLocal_variable_type(this);
	}
};




CSharpParser.Local_variable_typeContext = Local_variable_typeContext;

CSharpParser.prototype.local_variable_type = function() {

    var localctx = new Local_variable_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CSharpParser.RULE_local_variable_type);
    try {
        this.state = 1648;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1646;
            this.match(CSharpParser.VAR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1647;
            this.var_type();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_variable_declaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_local_variable_declarator;
    return this;
}

Local_variable_declaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_variable_declaratorContext.prototype.constructor = Local_variable_declaratorContext;

Local_variable_declaratorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Local_variable_declaratorContext.prototype.local_variable_initializer = function() {
    return this.getTypedRuleContext(Local_variable_initializerContext,0);
};

Local_variable_declaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLocal_variable_declarator(this);
	}
};

Local_variable_declaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLocal_variable_declarator(this);
	}
};




CSharpParser.Local_variable_declaratorContext = Local_variable_declaratorContext;

CSharpParser.prototype.local_variable_declarator = function() {

    var localctx = new Local_variable_declaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CSharpParser.RULE_local_variable_declarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1650;
        this.identifier();
        this.state = 1653;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.ASSIGNMENT) {
            this.state = 1651;
            this.match(CSharpParser.ASSIGNMENT);
            this.state = 1652;
            this.local_variable_initializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_variable_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_local_variable_initializer;
    return this;
}

Local_variable_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_variable_initializerContext.prototype.constructor = Local_variable_initializerContext;

Local_variable_initializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Local_variable_initializerContext.prototype.array_initializer = function() {
    return this.getTypedRuleContext(Array_initializerContext,0);
};

Local_variable_initializerContext.prototype.local_variable_initializer_unsafe = function() {
    return this.getTypedRuleContext(Local_variable_initializer_unsafeContext,0);
};

Local_variable_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLocal_variable_initializer(this);
	}
};

Local_variable_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLocal_variable_initializer(this);
	}
};




CSharpParser.Local_variable_initializerContext = Local_variable_initializerContext;

CSharpParser.prototype.local_variable_initializer = function() {

    var localctx = new Local_variable_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CSharpParser.RULE_local_variable_initializer);
    try {
        this.state = 1658;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 1655;
            this.expression();
            break;
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1656;
            this.array_initializer();
            break;
        case CSharpParser.STACKALLOC:
            this.enterOuterAlt(localctx, 3);
            this.state = 1657;
            this.local_variable_initializer_unsafe();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_constant_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_local_constant_declaration;
    return this;
}

Local_constant_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_constant_declarationContext.prototype.constructor = Local_constant_declarationContext;

Local_constant_declarationContext.prototype.CONST = function() {
    return this.getToken(CSharpParser.CONST, 0);
};

Local_constant_declarationContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Local_constant_declarationContext.prototype.constant_declarators = function() {
    return this.getTypedRuleContext(Constant_declaratorsContext,0);
};

Local_constant_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLocal_constant_declaration(this);
	}
};

Local_constant_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLocal_constant_declaration(this);
	}
};




CSharpParser.Local_constant_declarationContext = Local_constant_declarationContext;

CSharpParser.prototype.local_constant_declaration = function() {

    var localctx = new Local_constant_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CSharpParser.RULE_local_constant_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1660;
        this.match(CSharpParser.CONST);
        this.state = 1661;
        this.var_type();
        this.state = 1662;
        this.constant_declarators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_if_body;
    return this;
}

If_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_bodyContext.prototype.constructor = If_bodyContext;

If_bodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

If_bodyContext.prototype.simple_embedded_statement = function() {
    return this.getTypedRuleContext(Simple_embedded_statementContext,0);
};

If_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIf_body(this);
	}
};

If_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIf_body(this);
	}
};




CSharpParser.If_bodyContext = If_bodyContext;

CSharpParser.prototype.if_body = function() {

    var localctx = new If_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CSharpParser.RULE_if_body);
    try {
        this.state = 1666;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1664;
            this.block();
            break;
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BREAK:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.CONTINUE:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DO:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FIXED:
        case CSharpParser.FLOAT:
        case CSharpParser.FOR:
        case CSharpParser.FOREACH:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GOTO:
        case CSharpParser.GROUP:
        case CSharpParser.IF:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LOCK:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.RETURN:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.SWITCH:
        case CSharpParser.THIS:
        case CSharpParser.THROW:
        case CSharpParser.TRUE:
        case CSharpParser.TRY:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.UNSAFE:
        case CSharpParser.USHORT:
        case CSharpParser.USING:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.WHILE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.SEMICOLON:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 2);
            this.state = 1665;
            this.simple_embedded_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_sectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_switch_section;
    return this;
}

Switch_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_sectionContext.prototype.constructor = Switch_sectionContext;

Switch_sectionContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Switch_sectionContext.prototype.switch_label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Switch_labelContext);
    } else {
        return this.getTypedRuleContext(Switch_labelContext,i);
    }
};

Switch_sectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSwitch_section(this);
	}
};

Switch_sectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSwitch_section(this);
	}
};




CSharpParser.Switch_sectionContext = Switch_sectionContext;

CSharpParser.prototype.switch_section = function() {

    var localctx = new Switch_sectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CSharpParser.RULE_switch_section);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1669; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1668;
        		this.switch_label();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1671; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,120, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1673;
        this.statement_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_labelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_switch_label;
    return this;
}

Switch_labelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_labelContext.prototype.constructor = Switch_labelContext;

Switch_labelContext.prototype.CASE = function() {
    return this.getToken(CSharpParser.CASE, 0);
};

Switch_labelContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Switch_labelContext.prototype.DEFAULT = function() {
    return this.getToken(CSharpParser.DEFAULT, 0);
};

Switch_labelContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSwitch_label(this);
	}
};

Switch_labelContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSwitch_label(this);
	}
};




CSharpParser.Switch_labelContext = Switch_labelContext;

CSharpParser.prototype.switch_label = function() {

    var localctx = new Switch_labelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CSharpParser.RULE_switch_label);
    try {
        this.state = 1681;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.CASE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1675;
            this.match(CSharpParser.CASE);
            this.state = 1676;
            this.expression();
            this.state = 1677;
            this.match(CSharpParser.COLON);
            break;
        case CSharpParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1679;
            this.match(CSharpParser.DEFAULT);
            this.state = 1680;
            this.match(CSharpParser.COLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_statement_list;
    return this;
}

Statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_listContext.prototype.constructor = Statement_listContext;

Statement_listContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

Statement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterStatement_list(this);
	}
};

Statement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitStatement_list(this);
	}
};




CSharpParser.Statement_listContext = Statement_listContext;

CSharpParser.prototype.statement_list = function() {

    var localctx = new Statement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CSharpParser.RULE_statement_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1684; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1683;
        		this.statement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1686; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,122, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_for_initializer;
    return this;
}

For_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_initializerContext.prototype.constructor = For_initializerContext;

For_initializerContext.prototype.local_variable_declaration = function() {
    return this.getTypedRuleContext(Local_variable_declarationContext,0);
};

For_initializerContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

For_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFor_initializer(this);
	}
};

For_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFor_initializer(this);
	}
};




CSharpParser.For_initializerContext = For_initializerContext;

CSharpParser.prototype.for_initializer = function() {

    var localctx = new For_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CSharpParser.RULE_for_initializer);
    var _la = 0; // Token type
    try {
        this.state = 1697;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1688;
            this.local_variable_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1689;
            this.expression();
            this.state = 1694;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CSharpParser.COMMA) {
                this.state = 1690;
                this.match(CSharpParser.COMMA);
                this.state = 1691;
                this.expression();
                this.state = 1696;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_iteratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_for_iterator;
    return this;
}

For_iteratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_iteratorContext.prototype.constructor = For_iteratorContext;

For_iteratorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

For_iteratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFor_iterator(this);
	}
};

For_iteratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFor_iterator(this);
	}
};




CSharpParser.For_iteratorContext = For_iteratorContext;

CSharpParser.prototype.for_iterator = function() {

    var localctx = new For_iteratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CSharpParser.RULE_for_iterator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1699;
        this.expression();
        this.state = 1704;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 1700;
            this.match(CSharpParser.COMMA);
            this.state = 1701;
            this.expression();
            this.state = 1706;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Catch_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_catch_clauses;
    return this;
}

Catch_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_clausesContext.prototype.constructor = Catch_clausesContext;

Catch_clausesContext.prototype.specific_catch_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Specific_catch_clauseContext);
    } else {
        return this.getTypedRuleContext(Specific_catch_clauseContext,i);
    }
};

Catch_clausesContext.prototype.general_catch_clause = function() {
    return this.getTypedRuleContext(General_catch_clauseContext,0);
};

Catch_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCatch_clauses(this);
	}
};

Catch_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCatch_clauses(this);
	}
};




CSharpParser.Catch_clausesContext = Catch_clausesContext;

CSharpParser.prototype.catch_clauses = function() {

    var localctx = new Catch_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CSharpParser.RULE_catch_clauses);
    var _la = 0; // Token type
    try {
        this.state = 1718;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1707;
            this.specific_catch_clause();
            this.state = 1711;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,126,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1708;
                    this.specific_catch_clause(); 
                }
                this.state = 1713;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,126,this._ctx);
            }

            this.state = 1715;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.CATCH) {
                this.state = 1714;
                this.general_catch_clause();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1717;
            this.general_catch_clause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Specific_catch_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_specific_catch_clause;
    return this;
}

Specific_catch_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Specific_catch_clauseContext.prototype.constructor = Specific_catch_clauseContext;

Specific_catch_clauseContext.prototype.CATCH = function() {
    return this.getToken(CSharpParser.CATCH, 0);
};

Specific_catch_clauseContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Specific_catch_clauseContext.prototype.class_type = function() {
    return this.getTypedRuleContext(Class_typeContext,0);
};

Specific_catch_clauseContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Specific_catch_clauseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Specific_catch_clauseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Specific_catch_clauseContext.prototype.exception_filter = function() {
    return this.getTypedRuleContext(Exception_filterContext,0);
};

Specific_catch_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSpecific_catch_clause(this);
	}
};

Specific_catch_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSpecific_catch_clause(this);
	}
};




CSharpParser.Specific_catch_clauseContext = Specific_catch_clauseContext;

CSharpParser.prototype.specific_catch_clause = function() {

    var localctx = new Specific_catch_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CSharpParser.RULE_specific_catch_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1720;
        this.match(CSharpParser.CATCH);
        this.state = 1721;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1722;
        this.class_type();
        this.state = 1724;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CSharpParser.DYNAMIC - 34)) | (1 << (CSharpParser.EQUALS - 34)) | (1 << (CSharpParser.FROM - 34)) | (1 << (CSharpParser.GET - 34)) | (1 << (CSharpParser.GROUP - 34)) | (1 << (CSharpParser.INTO - 34)) | (1 << (CSharpParser.JOIN - 34)) | (1 << (CSharpParser.LET - 34)) | (1 << (CSharpParser.NAMEOF - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CSharpParser.ON - 68)) | (1 << (CSharpParser.ORDERBY - 68)) | (1 << (CSharpParser.PARTIAL - 68)) | (1 << (CSharpParser.REMOVE - 68)) | (1 << (CSharpParser.SELECT - 68)) | (1 << (CSharpParser.SET - 68)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (CSharpParser.VAR - 104)) | (1 << (CSharpParser.WHEN - 104)) | (1 << (CSharpParser.WHERE - 104)) | (1 << (CSharpParser.YIELD - 104)) | (1 << (CSharpParser.IDENTIFIER - 104)))) !== 0)) {
            this.state = 1723;
            this.identifier();
        }

        this.state = 1726;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 1728;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHEN) {
            this.state = 1727;
            this.exception_filter();
        }

        this.state = 1730;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_catch_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_general_catch_clause;
    return this;
}

General_catch_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_catch_clauseContext.prototype.constructor = General_catch_clauseContext;

General_catch_clauseContext.prototype.CATCH = function() {
    return this.getToken(CSharpParser.CATCH, 0);
};

General_catch_clauseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

General_catch_clauseContext.prototype.exception_filter = function() {
    return this.getTypedRuleContext(Exception_filterContext,0);
};

General_catch_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterGeneral_catch_clause(this);
	}
};

General_catch_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitGeneral_catch_clause(this);
	}
};




CSharpParser.General_catch_clauseContext = General_catch_clauseContext;

CSharpParser.prototype.general_catch_clause = function() {

    var localctx = new General_catch_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CSharpParser.RULE_general_catch_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1732;
        this.match(CSharpParser.CATCH);
        this.state = 1734;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHEN) {
            this.state = 1733;
            this.exception_filter();
        }

        this.state = 1736;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exception_filterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_exception_filter;
    return this;
}

Exception_filterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exception_filterContext.prototype.constructor = Exception_filterContext;

Exception_filterContext.prototype.WHEN = function() {
    return this.getToken(CSharpParser.WHEN, 0);
};

Exception_filterContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Exception_filterContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Exception_filterContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Exception_filterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterException_filter(this);
	}
};

Exception_filterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitException_filter(this);
	}
};




CSharpParser.Exception_filterContext = Exception_filterContext;

CSharpParser.prototype.exception_filter = function() {

    var localctx = new Exception_filterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CSharpParser.RULE_exception_filter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1738;
        this.match(CSharpParser.WHEN);
        this.state = 1739;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1740;
        this.expression();
        this.state = 1741;
        this.match(CSharpParser.CLOSE_PARENS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Finally_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_finally_clause;
    return this;
}

Finally_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Finally_clauseContext.prototype.constructor = Finally_clauseContext;

Finally_clauseContext.prototype.FINALLY = function() {
    return this.getToken(CSharpParser.FINALLY, 0);
};

Finally_clauseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Finally_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFinally_clause(this);
	}
};

Finally_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFinally_clause(this);
	}
};




CSharpParser.Finally_clauseContext = Finally_clauseContext;

CSharpParser.prototype.finally_clause = function() {

    var localctx = new Finally_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CSharpParser.RULE_finally_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1743;
        this.match(CSharpParser.FINALLY);
        this.state = 1744;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Resource_acquisitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_resource_acquisition;
    return this;
}

Resource_acquisitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_acquisitionContext.prototype.constructor = Resource_acquisitionContext;

Resource_acquisitionContext.prototype.local_variable_declaration = function() {
    return this.getTypedRuleContext(Local_variable_declarationContext,0);
};

Resource_acquisitionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Resource_acquisitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterResource_acquisition(this);
	}
};

Resource_acquisitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitResource_acquisition(this);
	}
};




CSharpParser.Resource_acquisitionContext = Resource_acquisitionContext;

CSharpParser.prototype.resource_acquisition = function() {

    var localctx = new Resource_acquisitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CSharpParser.RULE_resource_acquisition);
    try {
        this.state = 1748;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1746;
            this.local_variable_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1747;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Namespace_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_namespace_declaration;
    this.qi = null; // Qualified_identifierContext
    return this;
}

Namespace_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Namespace_declarationContext.prototype.constructor = Namespace_declarationContext;

Namespace_declarationContext.prototype.NAMESPACE = function() {
    return this.getToken(CSharpParser.NAMESPACE, 0);
};

Namespace_declarationContext.prototype.namespace_body = function() {
    return this.getTypedRuleContext(Namespace_bodyContext,0);
};

Namespace_declarationContext.prototype.qualified_identifier = function() {
    return this.getTypedRuleContext(Qualified_identifierContext,0);
};

Namespace_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNamespace_declaration(this);
	}
};

Namespace_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNamespace_declaration(this);
	}
};




CSharpParser.Namespace_declarationContext = Namespace_declarationContext;

CSharpParser.prototype.namespace_declaration = function() {

    var localctx = new Namespace_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CSharpParser.RULE_namespace_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1750;
        this.match(CSharpParser.NAMESPACE);
        this.state = 1751;
        localctx.qi = this.qualified_identifier();
        this.state = 1752;
        this.namespace_body();
        this.state = 1754;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.SEMICOLON) {
            this.state = 1753;
            this.match(CSharpParser.SEMICOLON);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Qualified_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_qualified_identifier;
    return this;
}

Qualified_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Qualified_identifierContext.prototype.constructor = Qualified_identifierContext;

Qualified_identifierContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Qualified_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterQualified_identifier(this);
	}
};

Qualified_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitQualified_identifier(this);
	}
};




CSharpParser.Qualified_identifierContext = Qualified_identifierContext;

CSharpParser.prototype.qualified_identifier = function() {

    var localctx = new Qualified_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CSharpParser.RULE_qualified_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1756;
        this.identifier();
        this.state = 1761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.DOT) {
            this.state = 1757;
            this.match(CSharpParser.DOT);
            this.state = 1758;
            this.identifier();
            this.state = 1763;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Namespace_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_namespace_body;
    return this;
}

Namespace_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Namespace_bodyContext.prototype.constructor = Namespace_bodyContext;

Namespace_bodyContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Namespace_bodyContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Namespace_bodyContext.prototype.extern_alias_directives = function() {
    return this.getTypedRuleContext(Extern_alias_directivesContext,0);
};

Namespace_bodyContext.prototype.using_directives = function() {
    return this.getTypedRuleContext(Using_directivesContext,0);
};

Namespace_bodyContext.prototype.namespace_member_declarations = function() {
    return this.getTypedRuleContext(Namespace_member_declarationsContext,0);
};

Namespace_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNamespace_body(this);
	}
};

Namespace_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNamespace_body(this);
	}
};




CSharpParser.Namespace_bodyContext = Namespace_bodyContext;

CSharpParser.prototype.namespace_body = function() {

    var localctx = new Namespace_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CSharpParser.RULE_namespace_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1764;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 1766;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        if(la_===1) {
            this.state = 1765;
            this.extern_alias_directives();

        }
        this.state = 1769;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.USING) {
            this.state = 1768;
            this.using_directives();
        }

        this.state = 1772;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CSharpParser.ENUM - 36)) | (1 << (CSharpParser.EXTERN - 36)) | (1 << (CSharpParser.INTERFACE - 36)) | (1 << (CSharpParser.INTERNAL - 36)) | (1 << (CSharpParser.NAMESPACE - 36)) | (1 << (CSharpParser.NEW - 36)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CSharpParser.OVERRIDE - 72)) | (1 << (CSharpParser.PARTIAL - 72)) | (1 << (CSharpParser.PRIVATE - 72)) | (1 << (CSharpParser.PROTECTED - 72)) | (1 << (CSharpParser.PUBLIC - 72)) | (1 << (CSharpParser.READONLY - 72)) | (1 << (CSharpParser.SEALED - 72)) | (1 << (CSharpParser.STATIC - 72)) | (1 << (CSharpParser.STRUCT - 72)) | (1 << (CSharpParser.UNSAFE - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CSharpParser.VIRTUAL - 105)) | (1 << (CSharpParser.VOLATILE - 105)) | (1 << (CSharpParser.OPEN_BRACKET - 105)))) !== 0)) {
            this.state = 1771;
            this.namespace_member_declarations();
        }

        this.state = 1774;
        this.match(CSharpParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Extern_alias_directivesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_extern_alias_directives;
    return this;
}

Extern_alias_directivesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extern_alias_directivesContext.prototype.constructor = Extern_alias_directivesContext;

Extern_alias_directivesContext.prototype.extern_alias_directive = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Extern_alias_directiveContext);
    } else {
        return this.getTypedRuleContext(Extern_alias_directiveContext,i);
    }
};

Extern_alias_directivesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExtern_alias_directives(this);
	}
};

Extern_alias_directivesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExtern_alias_directives(this);
	}
};




CSharpParser.Extern_alias_directivesContext = Extern_alias_directivesContext;

CSharpParser.prototype.extern_alias_directives = function() {

    var localctx = new Extern_alias_directivesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CSharpParser.RULE_extern_alias_directives);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1777; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1776;
        		this.extern_alias_directive();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1779; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,138, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Extern_alias_directiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_extern_alias_directive;
    return this;
}

Extern_alias_directiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extern_alias_directiveContext.prototype.constructor = Extern_alias_directiveContext;

Extern_alias_directiveContext.prototype.EXTERN = function() {
    return this.getToken(CSharpParser.EXTERN, 0);
};

Extern_alias_directiveContext.prototype.ALIAS = function() {
    return this.getToken(CSharpParser.ALIAS, 0);
};

Extern_alias_directiveContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Extern_alias_directiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExtern_alias_directive(this);
	}
};

Extern_alias_directiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExtern_alias_directive(this);
	}
};




CSharpParser.Extern_alias_directiveContext = Extern_alias_directiveContext;

CSharpParser.prototype.extern_alias_directive = function() {

    var localctx = new Extern_alias_directiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CSharpParser.RULE_extern_alias_directive);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1781;
        this.match(CSharpParser.EXTERN);
        this.state = 1782;
        this.match(CSharpParser.ALIAS);
        this.state = 1783;
        this.identifier();
        this.state = 1784;
        this.match(CSharpParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Using_directivesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_using_directives;
    return this;
}

Using_directivesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Using_directivesContext.prototype.constructor = Using_directivesContext;

Using_directivesContext.prototype.using_directive = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Using_directiveContext);
    } else {
        return this.getTypedRuleContext(Using_directiveContext,i);
    }
};

Using_directivesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUsing_directives(this);
	}
};

Using_directivesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUsing_directives(this);
	}
};




CSharpParser.Using_directivesContext = Using_directivesContext;

CSharpParser.prototype.using_directives = function() {

    var localctx = new Using_directivesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CSharpParser.RULE_using_directives);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1787; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1786;
            this.using_directive();
            this.state = 1789; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===CSharpParser.USING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Using_directiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_using_directive;
    return this;
}

Using_directiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Using_directiveContext.prototype.constructor = Using_directiveContext;


 
Using_directiveContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function UsingAliasDirectiveContext(parser, ctx) {
	Using_directiveContext.call(this, parser);
    Using_directiveContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UsingAliasDirectiveContext.prototype = Object.create(Using_directiveContext.prototype);
UsingAliasDirectiveContext.prototype.constructor = UsingAliasDirectiveContext;

CSharpParser.UsingAliasDirectiveContext = UsingAliasDirectiveContext;

UsingAliasDirectiveContext.prototype.USING = function() {
    return this.getToken(CSharpParser.USING, 0);
};

UsingAliasDirectiveContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

UsingAliasDirectiveContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};
UsingAliasDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUsingAliasDirective(this);
	}
};

UsingAliasDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUsingAliasDirective(this);
	}
};


function UsingNamespaceDirectiveContext(parser, ctx) {
	Using_directiveContext.call(this, parser);
    Using_directiveContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UsingNamespaceDirectiveContext.prototype = Object.create(Using_directiveContext.prototype);
UsingNamespaceDirectiveContext.prototype.constructor = UsingNamespaceDirectiveContext;

CSharpParser.UsingNamespaceDirectiveContext = UsingNamespaceDirectiveContext;

UsingNamespaceDirectiveContext.prototype.USING = function() {
    return this.getToken(CSharpParser.USING, 0);
};

UsingNamespaceDirectiveContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};
UsingNamespaceDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUsingNamespaceDirective(this);
	}
};

UsingNamespaceDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUsingNamespaceDirective(this);
	}
};


function UsingStaticDirectiveContext(parser, ctx) {
	Using_directiveContext.call(this, parser);
    Using_directiveContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UsingStaticDirectiveContext.prototype = Object.create(Using_directiveContext.prototype);
UsingStaticDirectiveContext.prototype.constructor = UsingStaticDirectiveContext;

CSharpParser.UsingStaticDirectiveContext = UsingStaticDirectiveContext;

UsingStaticDirectiveContext.prototype.USING = function() {
    return this.getToken(CSharpParser.USING, 0);
};

UsingStaticDirectiveContext.prototype.STATIC = function() {
    return this.getToken(CSharpParser.STATIC, 0);
};

UsingStaticDirectiveContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};
UsingStaticDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUsingStaticDirective(this);
	}
};

UsingStaticDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUsingStaticDirective(this);
	}
};



CSharpParser.Using_directiveContext = Using_directiveContext;

CSharpParser.prototype.using_directive = function() {

    var localctx = new Using_directiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CSharpParser.RULE_using_directive);
    try {
        this.state = 1806;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UsingAliasDirectiveContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1791;
            this.match(CSharpParser.USING);
            this.state = 1792;
            this.identifier();
            this.state = 1793;
            this.match(CSharpParser.ASSIGNMENT);
            this.state = 1794;
            this.namespace_or_type_name();
            this.state = 1795;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 2:
            localctx = new UsingNamespaceDirectiveContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1797;
            this.match(CSharpParser.USING);
            this.state = 1798;
            this.namespace_or_type_name();
            this.state = 1799;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 3:
            localctx = new UsingStaticDirectiveContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1801;
            this.match(CSharpParser.USING);
            this.state = 1802;
            this.match(CSharpParser.STATIC);
            this.state = 1803;
            this.namespace_or_type_name();
            this.state = 1804;
            this.match(CSharpParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Namespace_member_declarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_namespace_member_declarations;
    return this;
}

Namespace_member_declarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Namespace_member_declarationsContext.prototype.constructor = Namespace_member_declarationsContext;

Namespace_member_declarationsContext.prototype.namespace_member_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Namespace_member_declarationContext);
    } else {
        return this.getTypedRuleContext(Namespace_member_declarationContext,i);
    }
};

Namespace_member_declarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNamespace_member_declarations(this);
	}
};

Namespace_member_declarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNamespace_member_declarations(this);
	}
};




CSharpParser.Namespace_member_declarationsContext = Namespace_member_declarationsContext;

CSharpParser.prototype.namespace_member_declarations = function() {

    var localctx = new Namespace_member_declarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CSharpParser.RULE_namespace_member_declarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1809; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1808;
            this.namespace_member_declaration();
            this.state = 1811; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CSharpParser.ENUM - 36)) | (1 << (CSharpParser.EXTERN - 36)) | (1 << (CSharpParser.INTERFACE - 36)) | (1 << (CSharpParser.INTERNAL - 36)) | (1 << (CSharpParser.NAMESPACE - 36)) | (1 << (CSharpParser.NEW - 36)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CSharpParser.OVERRIDE - 72)) | (1 << (CSharpParser.PARTIAL - 72)) | (1 << (CSharpParser.PRIVATE - 72)) | (1 << (CSharpParser.PROTECTED - 72)) | (1 << (CSharpParser.PUBLIC - 72)) | (1 << (CSharpParser.READONLY - 72)) | (1 << (CSharpParser.SEALED - 72)) | (1 << (CSharpParser.STATIC - 72)) | (1 << (CSharpParser.STRUCT - 72)) | (1 << (CSharpParser.UNSAFE - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CSharpParser.VIRTUAL - 105)) | (1 << (CSharpParser.VOLATILE - 105)) | (1 << (CSharpParser.OPEN_BRACKET - 105)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Namespace_member_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_namespace_member_declaration;
    return this;
}

Namespace_member_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Namespace_member_declarationContext.prototype.constructor = Namespace_member_declarationContext;

Namespace_member_declarationContext.prototype.namespace_declaration = function() {
    return this.getTypedRuleContext(Namespace_declarationContext,0);
};

Namespace_member_declarationContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Namespace_member_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNamespace_member_declaration(this);
	}
};

Namespace_member_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNamespace_member_declaration(this);
	}
};




CSharpParser.Namespace_member_declarationContext = Namespace_member_declarationContext;

CSharpParser.prototype.namespace_member_declaration = function() {

    var localctx = new Namespace_member_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CSharpParser.RULE_namespace_member_declaration);
    try {
        this.state = 1815;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.NAMESPACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1813;
            this.namespace_declaration();
            break;
        case CSharpParser.ABSTRACT:
        case CSharpParser.ASYNC:
        case CSharpParser.CLASS:
        case CSharpParser.DELEGATE:
        case CSharpParser.ENUM:
        case CSharpParser.EXTERN:
        case CSharpParser.INTERFACE:
        case CSharpParser.INTERNAL:
        case CSharpParser.NEW:
        case CSharpParser.OVERRIDE:
        case CSharpParser.PARTIAL:
        case CSharpParser.PRIVATE:
        case CSharpParser.PROTECTED:
        case CSharpParser.PUBLIC:
        case CSharpParser.READONLY:
        case CSharpParser.SEALED:
        case CSharpParser.STATIC:
        case CSharpParser.STRUCT:
        case CSharpParser.UNSAFE:
        case CSharpParser.VIRTUAL:
        case CSharpParser.VOLATILE:
        case CSharpParser.OPEN_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 1814;
            this.type_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_declaration;
    return this;
}

Type_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_declarationContext.prototype.constructor = Type_declarationContext;

Type_declarationContext.prototype.class_definition = function() {
    return this.getTypedRuleContext(Class_definitionContext,0);
};

Type_declarationContext.prototype.struct_definition = function() {
    return this.getTypedRuleContext(Struct_definitionContext,0);
};

Type_declarationContext.prototype.interface_definition = function() {
    return this.getTypedRuleContext(Interface_definitionContext,0);
};

Type_declarationContext.prototype.enum_definition = function() {
    return this.getTypedRuleContext(Enum_definitionContext,0);
};

Type_declarationContext.prototype.delegate_definition = function() {
    return this.getTypedRuleContext(Delegate_definitionContext,0);
};

Type_declarationContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Type_declarationContext.prototype.all_member_modifiers = function() {
    return this.getTypedRuleContext(All_member_modifiersContext,0);
};

Type_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_declaration(this);
	}
};

Type_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_declaration(this);
	}
};




CSharpParser.Type_declarationContext = Type_declarationContext;

CSharpParser.prototype.type_declaration = function() {

    var localctx = new Type_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CSharpParser.RULE_type_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1818;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 1817;
            this.attributes();
        }

        this.state = 1821;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.ABSTRACT || _la===CSharpParser.ASYNC || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (CSharpParser.EXTERN - 40)) | (1 << (CSharpParser.INTERNAL - 40)) | (1 << (CSharpParser.NEW - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CSharpParser.OVERRIDE - 72)) | (1 << (CSharpParser.PARTIAL - 72)) | (1 << (CSharpParser.PRIVATE - 72)) | (1 << (CSharpParser.PROTECTED - 72)) | (1 << (CSharpParser.PUBLIC - 72)) | (1 << (CSharpParser.READONLY - 72)) | (1 << (CSharpParser.SEALED - 72)) | (1 << (CSharpParser.STATIC - 72)) | (1 << (CSharpParser.UNSAFE - 72)))) !== 0) || _la===CSharpParser.VIRTUAL || _la===CSharpParser.VOLATILE) {
            this.state = 1820;
            this.all_member_modifiers();
        }

        this.state = 1828;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.CLASS:
            this.state = 1823;
            this.class_definition();
            break;
        case CSharpParser.STRUCT:
            this.state = 1824;
            this.struct_definition();
            break;
        case CSharpParser.INTERFACE:
            this.state = 1825;
            this.interface_definition();
            break;
        case CSharpParser.ENUM:
            this.state = 1826;
            this.enum_definition();
            break;
        case CSharpParser.DELEGATE:
            this.state = 1827;
            this.delegate_definition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Qualified_alias_memberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_qualified_alias_member;
    return this;
}

Qualified_alias_memberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Qualified_alias_memberContext.prototype.constructor = Qualified_alias_memberContext;

Qualified_alias_memberContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Qualified_alias_memberContext.prototype.type_argument_list = function() {
    return this.getTypedRuleContext(Type_argument_listContext,0);
};

Qualified_alias_memberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterQualified_alias_member(this);
	}
};

Qualified_alias_memberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitQualified_alias_member(this);
	}
};




CSharpParser.Qualified_alias_memberContext = Qualified_alias_memberContext;

CSharpParser.prototype.qualified_alias_member = function() {

    var localctx = new Qualified_alias_memberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CSharpParser.RULE_qualified_alias_member);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1830;
        this.identifier();
        this.state = 1831;
        this.match(CSharpParser.DOUBLE_COLON);
        this.state = 1832;
        this.identifier();
        this.state = 1834;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        if(la_===1) {
            this.state = 1833;
            this.type_argument_list();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_parameter_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_parameter_list;
    return this;
}

Type_parameter_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_parameter_listContext.prototype.constructor = Type_parameter_listContext;

Type_parameter_listContext.prototype.type_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_parameterContext,i);
    }
};

Type_parameter_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_parameter_list(this);
	}
};

Type_parameter_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_parameter_list(this);
	}
};




CSharpParser.Type_parameter_listContext = Type_parameter_listContext;

CSharpParser.prototype.type_parameter_list = function() {

    var localctx = new Type_parameter_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CSharpParser.RULE_type_parameter_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1836;
        this.match(CSharpParser.LT);
        this.state = 1837;
        this.type_parameter();
        this.state = 1842;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 1838;
            this.match(CSharpParser.COMMA);
            this.state = 1839;
            this.type_parameter();
            this.state = 1844;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1845;
        this.match(CSharpParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_parameter;
    return this;
}

Type_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_parameterContext.prototype.constructor = Type_parameterContext;

Type_parameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Type_parameterContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Type_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_parameter(this);
	}
};

Type_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_parameter(this);
	}
};




CSharpParser.Type_parameterContext = Type_parameterContext;

CSharpParser.prototype.type_parameter = function() {

    var localctx = new Type_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CSharpParser.RULE_type_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1848;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 1847;
            this.attributes();
        }

        this.state = 1850;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_baseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_class_base;
    return this;
}

Class_baseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_baseContext.prototype.constructor = Class_baseContext;

Class_baseContext.prototype.class_type = function() {
    return this.getTypedRuleContext(Class_typeContext,0);
};

Class_baseContext.prototype.namespace_or_type_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Namespace_or_type_nameContext);
    } else {
        return this.getTypedRuleContext(Namespace_or_type_nameContext,i);
    }
};

Class_baseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterClass_base(this);
	}
};

Class_baseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitClass_base(this);
	}
};




CSharpParser.Class_baseContext = Class_baseContext;

CSharpParser.prototype.class_base = function() {

    var localctx = new Class_baseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CSharpParser.RULE_class_base);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1852;
        this.match(CSharpParser.COLON);
        this.state = 1853;
        this.class_type();
        this.state = 1858;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 1854;
            this.match(CSharpParser.COMMA);
            this.state = 1855;
            this.namespace_or_type_name();
            this.state = 1860;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_type_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interface_type_list;
    return this;
}

Interface_type_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_type_listContext.prototype.constructor = Interface_type_listContext;

Interface_type_listContext.prototype.namespace_or_type_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Namespace_or_type_nameContext);
    } else {
        return this.getTypedRuleContext(Namespace_or_type_nameContext,i);
    }
};

Interface_type_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterface_type_list(this);
	}
};

Interface_type_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterface_type_list(this);
	}
};




CSharpParser.Interface_type_listContext = Interface_type_listContext;

CSharpParser.prototype.interface_type_list = function() {

    var localctx = new Interface_type_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, CSharpParser.RULE_interface_type_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1861;
        this.namespace_or_type_name();
        this.state = 1866;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 1862;
            this.match(CSharpParser.COMMA);
            this.state = 1863;
            this.namespace_or_type_name();
            this.state = 1868;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_parameter_constraints_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_parameter_constraints_clauses;
    return this;
}

Type_parameter_constraints_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_parameter_constraints_clausesContext.prototype.constructor = Type_parameter_constraints_clausesContext;

Type_parameter_constraints_clausesContext.prototype.type_parameter_constraints_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_parameter_constraints_clauseContext);
    } else {
        return this.getTypedRuleContext(Type_parameter_constraints_clauseContext,i);
    }
};

Type_parameter_constraints_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_parameter_constraints_clauses(this);
	}
};

Type_parameter_constraints_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_parameter_constraints_clauses(this);
	}
};




CSharpParser.Type_parameter_constraints_clausesContext = Type_parameter_constraints_clausesContext;

CSharpParser.prototype.type_parameter_constraints_clauses = function() {

    var localctx = new Type_parameter_constraints_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, CSharpParser.RULE_type_parameter_constraints_clauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1870; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1869;
            this.type_parameter_constraints_clause();
            this.state = 1872; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===CSharpParser.WHERE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_parameter_constraints_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_parameter_constraints_clause;
    return this;
}

Type_parameter_constraints_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_parameter_constraints_clauseContext.prototype.constructor = Type_parameter_constraints_clauseContext;

Type_parameter_constraints_clauseContext.prototype.WHERE = function() {
    return this.getToken(CSharpParser.WHERE, 0);
};

Type_parameter_constraints_clauseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Type_parameter_constraints_clauseContext.prototype.type_parameter_constraints = function() {
    return this.getTypedRuleContext(Type_parameter_constraintsContext,0);
};

Type_parameter_constraints_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_parameter_constraints_clause(this);
	}
};

Type_parameter_constraints_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_parameter_constraints_clause(this);
	}
};




CSharpParser.Type_parameter_constraints_clauseContext = Type_parameter_constraints_clauseContext;

CSharpParser.prototype.type_parameter_constraints_clause = function() {

    var localctx = new Type_parameter_constraints_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, CSharpParser.RULE_type_parameter_constraints_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1874;
        this.match(CSharpParser.WHERE);
        this.state = 1875;
        this.identifier();
        this.state = 1876;
        this.match(CSharpParser.COLON);
        this.state = 1877;
        this.type_parameter_constraints();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_parameter_constraintsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_parameter_constraints;
    return this;
}

Type_parameter_constraintsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_parameter_constraintsContext.prototype.constructor = Type_parameter_constraintsContext;

Type_parameter_constraintsContext.prototype.constructor_constraint = function() {
    return this.getTypedRuleContext(Constructor_constraintContext,0);
};

Type_parameter_constraintsContext.prototype.primary_constraint = function() {
    return this.getTypedRuleContext(Primary_constraintContext,0);
};

Type_parameter_constraintsContext.prototype.secondary_constraints = function() {
    return this.getTypedRuleContext(Secondary_constraintsContext,0);
};

Type_parameter_constraintsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_parameter_constraints(this);
	}
};

Type_parameter_constraintsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_parameter_constraints(this);
	}
};




CSharpParser.Type_parameter_constraintsContext = Type_parameter_constraintsContext;

CSharpParser.prototype.type_parameter_constraints = function() {

    var localctx = new Type_parameter_constraintsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, CSharpParser.RULE_type_parameter_constraints);
    var _la = 0; // Token type
    try {
        this.state = 1889;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.NEW:
            this.enterOuterAlt(localctx, 1);
            this.state = 1879;
            this.constructor_constraint();
            break;
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BY:
        case CSharpParser.CLASS:
        case CSharpParser.DESCENDING:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.NAMEOF:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.STRING:
        case CSharpParser.STRUCT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1880;
            this.primary_constraint();
            this.state = 1883;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
            if(la_===1) {
                this.state = 1881;
                this.match(CSharpParser.COMMA);
                this.state = 1882;
                this.secondary_constraints();

            }
            this.state = 1887;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.COMMA) {
                this.state = 1885;
                this.match(CSharpParser.COMMA);
                this.state = 1886;
                this.constructor_constraint();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Primary_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_primary_constraint;
    return this;
}

Primary_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_constraintContext.prototype.constructor = Primary_constraintContext;

Primary_constraintContext.prototype.class_type = function() {
    return this.getTypedRuleContext(Class_typeContext,0);
};

Primary_constraintContext.prototype.CLASS = function() {
    return this.getToken(CSharpParser.CLASS, 0);
};

Primary_constraintContext.prototype.STRUCT = function() {
    return this.getToken(CSharpParser.STRUCT, 0);
};

Primary_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterPrimary_constraint(this);
	}
};

Primary_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitPrimary_constraint(this);
	}
};




CSharpParser.Primary_constraintContext = Primary_constraintContext;

CSharpParser.prototype.primary_constraint = function() {

    var localctx = new Primary_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, CSharpParser.RULE_primary_constraint);
    try {
        this.state = 1894;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BY:
        case CSharpParser.DESCENDING:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.NAMEOF:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.STRING:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1891;
            this.class_type();
            break;
        case CSharpParser.CLASS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1892;
            this.match(CSharpParser.CLASS);
            break;
        case CSharpParser.STRUCT:
            this.enterOuterAlt(localctx, 3);
            this.state = 1893;
            this.match(CSharpParser.STRUCT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Secondary_constraintsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_secondary_constraints;
    return this;
}

Secondary_constraintsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Secondary_constraintsContext.prototype.constructor = Secondary_constraintsContext;

Secondary_constraintsContext.prototype.namespace_or_type_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Namespace_or_type_nameContext);
    } else {
        return this.getTypedRuleContext(Namespace_or_type_nameContext,i);
    }
};

Secondary_constraintsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSecondary_constraints(this);
	}
};

Secondary_constraintsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSecondary_constraints(this);
	}
};




CSharpParser.Secondary_constraintsContext = Secondary_constraintsContext;

CSharpParser.prototype.secondary_constraints = function() {

    var localctx = new Secondary_constraintsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, CSharpParser.RULE_secondary_constraints);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1896;
        this.namespace_or_type_name();
        this.state = 1901;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,156,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1897;
                this.match(CSharpParser.COMMA);
                this.state = 1898;
                this.namespace_or_type_name(); 
            }
            this.state = 1903;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,156,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_constructor_constraint;
    return this;
}

Constructor_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_constraintContext.prototype.constructor = Constructor_constraintContext;

Constructor_constraintContext.prototype.NEW = function() {
    return this.getToken(CSharpParser.NEW, 0);
};

Constructor_constraintContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Constructor_constraintContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Constructor_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConstructor_constraint(this);
	}
};

Constructor_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConstructor_constraint(this);
	}
};




CSharpParser.Constructor_constraintContext = Constructor_constraintContext;

CSharpParser.prototype.constructor_constraint = function() {

    var localctx = new Constructor_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, CSharpParser.RULE_constructor_constraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1904;
        this.match(CSharpParser.NEW);
        this.state = 1905;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1906;
        this.match(CSharpParser.CLOSE_PARENS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_class_body;
    return this;
}

Class_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_bodyContext.prototype.constructor = Class_bodyContext;

Class_bodyContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Class_bodyContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Class_bodyContext.prototype.class_member_declarations = function() {
    return this.getTypedRuleContext(Class_member_declarationsContext,0);
};

Class_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterClass_body(this);
	}
};

Class_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitClass_body(this);
	}
};




CSharpParser.Class_bodyContext = Class_bodyContext;

CSharpParser.prototype.class_body = function() {

    var localctx = new Class_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, CSharpParser.RULE_class_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1908;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 1910;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.CONST) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.ENUM - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.EVENT - 33)) | (1 << (CSharpParser.EXPLICIT - 33)) | (1 << (CSharpParser.EXTERN - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.IMPLICIT - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTERFACE - 33)) | (1 << (CSharpParser.INTERNAL - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.OVERRIDE - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.PRIVATE - 65)) | (1 << (CSharpParser.PROTECTED - 65)) | (1 << (CSharpParser.PUBLIC - 65)) | (1 << (CSharpParser.READONLY - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SEALED - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.STATIC - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.STRUCT - 65)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CSharpParser.UINT - 98)) | (1 << (CSharpParser.ULONG - 98)) | (1 << (CSharpParser.UNSAFE - 98)) | (1 << (CSharpParser.USHORT - 98)) | (1 << (CSharpParser.VAR - 98)) | (1 << (CSharpParser.VIRTUAL - 98)) | (1 << (CSharpParser.VOID - 98)) | (1 << (CSharpParser.VOLATILE - 98)) | (1 << (CSharpParser.WHEN - 98)) | (1 << (CSharpParser.WHERE - 98)) | (1 << (CSharpParser.YIELD - 98)) | (1 << (CSharpParser.IDENTIFIER - 98)) | (1 << (CSharpParser.OPEN_BRACKET - 98)))) !== 0) || _la===CSharpParser.TILDE) {
            this.state = 1909;
            this.class_member_declarations();
        }

        this.state = 1912;
        this.match(CSharpParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_member_declarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_class_member_declarations;
    return this;
}

Class_member_declarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_member_declarationsContext.prototype.constructor = Class_member_declarationsContext;

Class_member_declarationsContext.prototype.class_member_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Class_member_declarationContext);
    } else {
        return this.getTypedRuleContext(Class_member_declarationContext,i);
    }
};

Class_member_declarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterClass_member_declarations(this);
	}
};

Class_member_declarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitClass_member_declarations(this);
	}
};




CSharpParser.Class_member_declarationsContext = Class_member_declarationsContext;

CSharpParser.prototype.class_member_declarations = function() {

    var localctx = new Class_member_declarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, CSharpParser.RULE_class_member_declarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1915; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1914;
            this.class_member_declaration();
            this.state = 1917; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.CONST) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.ENUM - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.EVENT - 33)) | (1 << (CSharpParser.EXPLICIT - 33)) | (1 << (CSharpParser.EXTERN - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.IMPLICIT - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTERFACE - 33)) | (1 << (CSharpParser.INTERNAL - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.OVERRIDE - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.PRIVATE - 65)) | (1 << (CSharpParser.PROTECTED - 65)) | (1 << (CSharpParser.PUBLIC - 65)) | (1 << (CSharpParser.READONLY - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SEALED - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.STATIC - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.STRUCT - 65)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CSharpParser.UINT - 98)) | (1 << (CSharpParser.ULONG - 98)) | (1 << (CSharpParser.UNSAFE - 98)) | (1 << (CSharpParser.USHORT - 98)) | (1 << (CSharpParser.VAR - 98)) | (1 << (CSharpParser.VIRTUAL - 98)) | (1 << (CSharpParser.VOID - 98)) | (1 << (CSharpParser.VOLATILE - 98)) | (1 << (CSharpParser.WHEN - 98)) | (1 << (CSharpParser.WHERE - 98)) | (1 << (CSharpParser.YIELD - 98)) | (1 << (CSharpParser.IDENTIFIER - 98)) | (1 << (CSharpParser.OPEN_BRACKET - 98)))) !== 0) || _la===CSharpParser.TILDE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_member_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_class_member_declaration;
    return this;
}

Class_member_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_member_declarationContext.prototype.constructor = Class_member_declarationContext;

Class_member_declarationContext.prototype.common_member_declaration = function() {
    return this.getTypedRuleContext(Common_member_declarationContext,0);
};

Class_member_declarationContext.prototype.destructor_definition = function() {
    return this.getTypedRuleContext(Destructor_definitionContext,0);
};

Class_member_declarationContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Class_member_declarationContext.prototype.all_member_modifiers = function() {
    return this.getTypedRuleContext(All_member_modifiersContext,0);
};

Class_member_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterClass_member_declaration(this);
	}
};

Class_member_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitClass_member_declaration(this);
	}
};




CSharpParser.Class_member_declarationContext = Class_member_declarationContext;

CSharpParser.prototype.class_member_declaration = function() {

    var localctx = new Class_member_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, CSharpParser.RULE_class_member_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1920;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 1919;
            this.attributes();
        }

        this.state = 1923;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
        if(la_===1) {
            this.state = 1922;
            this.all_member_modifiers();

        }
        this.state = 1927;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CLASS:
        case CSharpParser.CONST:
        case CSharpParser.DECIMAL:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.ENUM:
        case CSharpParser.EQUALS:
        case CSharpParser.EVENT:
        case CSharpParser.EXPLICIT:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.IMPLICIT:
        case CSharpParser.INT:
        case CSharpParser.INTERFACE:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.STRING:
        case CSharpParser.STRUCT:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.VOID:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.state = 1925;
            this.common_member_declaration();
            break;
        case CSharpParser.TILDE:
            this.state = 1926;
            this.destructor_definition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function All_member_modifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_all_member_modifiers;
    return this;
}

All_member_modifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
All_member_modifiersContext.prototype.constructor = All_member_modifiersContext;

All_member_modifiersContext.prototype.all_member_modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(All_member_modifierContext);
    } else {
        return this.getTypedRuleContext(All_member_modifierContext,i);
    }
};

All_member_modifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAll_member_modifiers(this);
	}
};

All_member_modifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAll_member_modifiers(this);
	}
};




CSharpParser.All_member_modifiersContext = All_member_modifiersContext;

CSharpParser.prototype.all_member_modifiers = function() {

    var localctx = new All_member_modifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, CSharpParser.RULE_all_member_modifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1930; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1929;
        		this.all_member_modifier();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1932; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,162, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function All_member_modifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_all_member_modifier;
    return this;
}

All_member_modifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
All_member_modifierContext.prototype.constructor = All_member_modifierContext;

All_member_modifierContext.prototype.NEW = function() {
    return this.getToken(CSharpParser.NEW, 0);
};

All_member_modifierContext.prototype.PUBLIC = function() {
    return this.getToken(CSharpParser.PUBLIC, 0);
};

All_member_modifierContext.prototype.PROTECTED = function() {
    return this.getToken(CSharpParser.PROTECTED, 0);
};

All_member_modifierContext.prototype.INTERNAL = function() {
    return this.getToken(CSharpParser.INTERNAL, 0);
};

All_member_modifierContext.prototype.PRIVATE = function() {
    return this.getToken(CSharpParser.PRIVATE, 0);
};

All_member_modifierContext.prototype.READONLY = function() {
    return this.getToken(CSharpParser.READONLY, 0);
};

All_member_modifierContext.prototype.VOLATILE = function() {
    return this.getToken(CSharpParser.VOLATILE, 0);
};

All_member_modifierContext.prototype.VIRTUAL = function() {
    return this.getToken(CSharpParser.VIRTUAL, 0);
};

All_member_modifierContext.prototype.SEALED = function() {
    return this.getToken(CSharpParser.SEALED, 0);
};

All_member_modifierContext.prototype.OVERRIDE = function() {
    return this.getToken(CSharpParser.OVERRIDE, 0);
};

All_member_modifierContext.prototype.ABSTRACT = function() {
    return this.getToken(CSharpParser.ABSTRACT, 0);
};

All_member_modifierContext.prototype.STATIC = function() {
    return this.getToken(CSharpParser.STATIC, 0);
};

All_member_modifierContext.prototype.UNSAFE = function() {
    return this.getToken(CSharpParser.UNSAFE, 0);
};

All_member_modifierContext.prototype.EXTERN = function() {
    return this.getToken(CSharpParser.EXTERN, 0);
};

All_member_modifierContext.prototype.PARTIAL = function() {
    return this.getToken(CSharpParser.PARTIAL, 0);
};

All_member_modifierContext.prototype.ASYNC = function() {
    return this.getToken(CSharpParser.ASYNC, 0);
};

All_member_modifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAll_member_modifier(this);
	}
};

All_member_modifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAll_member_modifier(this);
	}
};




CSharpParser.All_member_modifierContext = All_member_modifierContext;

CSharpParser.prototype.all_member_modifier = function() {

    var localctx = new All_member_modifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, CSharpParser.RULE_all_member_modifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1934;
        _la = this._input.LA(1);
        if(!(_la===CSharpParser.ABSTRACT || _la===CSharpParser.ASYNC || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (CSharpParser.EXTERN - 40)) | (1 << (CSharpParser.INTERNAL - 40)) | (1 << (CSharpParser.NEW - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CSharpParser.OVERRIDE - 72)) | (1 << (CSharpParser.PARTIAL - 72)) | (1 << (CSharpParser.PRIVATE - 72)) | (1 << (CSharpParser.PROTECTED - 72)) | (1 << (CSharpParser.PUBLIC - 72)) | (1 << (CSharpParser.READONLY - 72)) | (1 << (CSharpParser.SEALED - 72)) | (1 << (CSharpParser.STATIC - 72)) | (1 << (CSharpParser.UNSAFE - 72)))) !== 0) || _la===CSharpParser.VIRTUAL || _la===CSharpParser.VOLATILE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Common_member_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_common_member_declaration;
    return this;
}

Common_member_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Common_member_declarationContext.prototype.constructor = Common_member_declarationContext;

Common_member_declarationContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Common_member_declarationContext.prototype.typed_member_declaration = function() {
    return this.getTypedRuleContext(Typed_member_declarationContext,0);
};

Common_member_declarationContext.prototype.event_declaration = function() {
    return this.getTypedRuleContext(Event_declarationContext,0);
};

Common_member_declarationContext.prototype.conversion_operator_declarator = function() {
    return this.getTypedRuleContext(Conversion_operator_declaratorContext,0);
};

Common_member_declarationContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Common_member_declarationContext.prototype.right_arrow = function() {
    return this.getTypedRuleContext(Right_arrowContext,0);
};

Common_member_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Common_member_declarationContext.prototype.constructor_declaration = function() {
    return this.getTypedRuleContext(Constructor_declarationContext,0);
};

Common_member_declarationContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};

Common_member_declarationContext.prototype.method_declaration = function() {
    return this.getTypedRuleContext(Method_declarationContext,0);
};

Common_member_declarationContext.prototype.class_definition = function() {
    return this.getTypedRuleContext(Class_definitionContext,0);
};

Common_member_declarationContext.prototype.struct_definition = function() {
    return this.getTypedRuleContext(Struct_definitionContext,0);
};

Common_member_declarationContext.prototype.interface_definition = function() {
    return this.getTypedRuleContext(Interface_definitionContext,0);
};

Common_member_declarationContext.prototype.enum_definition = function() {
    return this.getTypedRuleContext(Enum_definitionContext,0);
};

Common_member_declarationContext.prototype.delegate_definition = function() {
    return this.getTypedRuleContext(Delegate_definitionContext,0);
};

Common_member_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCommon_member_declaration(this);
	}
};

Common_member_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCommon_member_declaration(this);
	}
};




CSharpParser.Common_member_declarationContext = Common_member_declarationContext;

CSharpParser.prototype.common_member_declaration = function() {

    var localctx = new Common_member_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, CSharpParser.RULE_common_member_declaration);
    try {
        this.state = 1955;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1936;
            this.constant_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1937;
            this.typed_member_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1938;
            this.event_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1939;
            this.conversion_operator_declarator();
            this.state = 1945;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.OPEN_BRACE:
            case CSharpParser.SEMICOLON:
                this.state = 1940;
                this.body();
                break;
            case CSharpParser.ASSIGNMENT:
                this.state = 1941;
                this.right_arrow();
                this.state = 1942;
                this.expression();
                this.state = 1943;
                this.match(CSharpParser.SEMICOLON);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1947;
            this.constructor_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1948;
            this.match(CSharpParser.VOID);
            this.state = 1949;
            this.method_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1950;
            this.class_definition();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1951;
            this.struct_definition();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1952;
            this.interface_definition();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1953;
            this.enum_definition();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1954;
            this.delegate_definition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Typed_member_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_typed_member_declaration;
    return this;
}

Typed_member_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typed_member_declarationContext.prototype.constructor = Typed_member_declarationContext;

Typed_member_declarationContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Typed_member_declarationContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};

Typed_member_declarationContext.prototype.indexer_declaration = function() {
    return this.getTypedRuleContext(Indexer_declarationContext,0);
};

Typed_member_declarationContext.prototype.method_declaration = function() {
    return this.getTypedRuleContext(Method_declarationContext,0);
};

Typed_member_declarationContext.prototype.property_declaration = function() {
    return this.getTypedRuleContext(Property_declarationContext,0);
};

Typed_member_declarationContext.prototype.operator_declaration = function() {
    return this.getTypedRuleContext(Operator_declarationContext,0);
};

Typed_member_declarationContext.prototype.field_declaration = function() {
    return this.getTypedRuleContext(Field_declarationContext,0);
};

Typed_member_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterTyped_member_declaration(this);
	}
};

Typed_member_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitTyped_member_declaration(this);
	}
};




CSharpParser.Typed_member_declarationContext = Typed_member_declarationContext;

CSharpParser.prototype.typed_member_declaration = function() {

    var localctx = new Typed_member_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, CSharpParser.RULE_typed_member_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1957;
        this.var_type();
        this.state = 1967;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1958;
            this.namespace_or_type_name();
            this.state = 1959;
            this.match(CSharpParser.DOT);
            this.state = 1960;
            this.indexer_declaration();
            break;

        case 2:
            this.state = 1962;
            this.method_declaration();
            break;

        case 3:
            this.state = 1963;
            this.property_declaration();
            break;

        case 4:
            this.state = 1964;
            this.indexer_declaration();
            break;

        case 5:
            this.state = 1965;
            this.operator_declaration();
            break;

        case 6:
            this.state = 1966;
            this.field_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constant_declaratorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_constant_declarators;
    return this;
}

Constant_declaratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_declaratorsContext.prototype.constructor = Constant_declaratorsContext;

Constant_declaratorsContext.prototype.constant_declarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constant_declaratorContext);
    } else {
        return this.getTypedRuleContext(Constant_declaratorContext,i);
    }
};

Constant_declaratorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConstant_declarators(this);
	}
};

Constant_declaratorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConstant_declarators(this);
	}
};




CSharpParser.Constant_declaratorsContext = Constant_declaratorsContext;

CSharpParser.prototype.constant_declarators = function() {

    var localctx = new Constant_declaratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, CSharpParser.RULE_constant_declarators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1969;
        this.constant_declarator();
        this.state = 1974;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 1970;
            this.match(CSharpParser.COMMA);
            this.state = 1971;
            this.constant_declarator();
            this.state = 1976;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constant_declaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_constant_declarator;
    return this;
}

Constant_declaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_declaratorContext.prototype.constructor = Constant_declaratorContext;

Constant_declaratorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Constant_declaratorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Constant_declaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConstant_declarator(this);
	}
};

Constant_declaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConstant_declarator(this);
	}
};




CSharpParser.Constant_declaratorContext = Constant_declaratorContext;

CSharpParser.prototype.constant_declarator = function() {

    var localctx = new Constant_declaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, CSharpParser.RULE_constant_declarator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1977;
        this.identifier();
        this.state = 1978;
        this.match(CSharpParser.ASSIGNMENT);
        this.state = 1979;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_declaratorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_variable_declarators;
    return this;
}

Variable_declaratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declaratorsContext.prototype.constructor = Variable_declaratorsContext;

Variable_declaratorsContext.prototype.variable_declarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_declaratorContext);
    } else {
        return this.getTypedRuleContext(Variable_declaratorContext,i);
    }
};

Variable_declaratorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVariable_declarators(this);
	}
};

Variable_declaratorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVariable_declarators(this);
	}
};




CSharpParser.Variable_declaratorsContext = Variable_declaratorsContext;

CSharpParser.prototype.variable_declarators = function() {

    var localctx = new Variable_declaratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, CSharpParser.RULE_variable_declarators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1981;
        this.variable_declarator();
        this.state = 1986;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 1982;
            this.match(CSharpParser.COMMA);
            this.state = 1983;
            this.variable_declarator();
            this.state = 1988;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_declaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_variable_declarator;
    return this;
}

Variable_declaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declaratorContext.prototype.constructor = Variable_declaratorContext;

Variable_declaratorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Variable_declaratorContext.prototype.variable_initializer = function() {
    return this.getTypedRuleContext(Variable_initializerContext,0);
};

Variable_declaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVariable_declarator(this);
	}
};

Variable_declaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVariable_declarator(this);
	}
};




CSharpParser.Variable_declaratorContext = Variable_declaratorContext;

CSharpParser.prototype.variable_declarator = function() {

    var localctx = new Variable_declaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, CSharpParser.RULE_variable_declarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1989;
        this.identifier();
        this.state = 1992;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.ASSIGNMENT) {
            this.state = 1990;
            this.match(CSharpParser.ASSIGNMENT);
            this.state = 1991;
            this.variable_initializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_variable_initializer;
    return this;
}

Variable_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_initializerContext.prototype.constructor = Variable_initializerContext;

Variable_initializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Variable_initializerContext.prototype.array_initializer = function() {
    return this.getTypedRuleContext(Array_initializerContext,0);
};

Variable_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVariable_initializer(this);
	}
};

Variable_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVariable_initializer(this);
	}
};




CSharpParser.Variable_initializerContext = Variable_initializerContext;

CSharpParser.prototype.variable_initializer = function() {

    var localctx = new Variable_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, CSharpParser.RULE_variable_initializer);
    try {
        this.state = 1996;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 1994;
            this.expression();
            break;
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1995;
            this.array_initializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_return_type;
    return this;
}

Return_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_typeContext.prototype.constructor = Return_typeContext;

Return_typeContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Return_typeContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};

Return_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterReturn_type(this);
	}
};

Return_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitReturn_type(this);
	}
};




CSharpParser.Return_typeContext = Return_typeContext;

CSharpParser.prototype.return_type = function() {

    var localctx = new Return_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, CSharpParser.RULE_return_type);
    try {
        this.state = 2000;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1998;
            this.var_type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1999;
            this.match(CSharpParser.VOID);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_member_name;
    return this;
}

Member_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_nameContext.prototype.constructor = Member_nameContext;

Member_nameContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};

Member_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMember_name(this);
	}
};

Member_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMember_name(this);
	}
};




CSharpParser.Member_nameContext = Member_nameContext;

CSharpParser.prototype.member_name = function() {

    var localctx = new Member_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, CSharpParser.RULE_member_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2002;
        this.namespace_or_type_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_method_body;
    return this;
}

Method_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_bodyContext.prototype.constructor = Method_bodyContext;

Method_bodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Method_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMethod_body(this);
	}
};

Method_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMethod_body(this);
	}
};




CSharpParser.Method_bodyContext = Method_bodyContext;

CSharpParser.prototype.method_body = function() {

    var localctx = new Method_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, CSharpParser.RULE_method_body);
    try {
        this.state = 2006;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2004;
            this.block();
            break;
        case CSharpParser.SEMICOLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 2005;
            this.match(CSharpParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Formal_parameter_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_formal_parameter_list;
    return this;
}

Formal_parameter_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Formal_parameter_listContext.prototype.constructor = Formal_parameter_listContext;

Formal_parameter_listContext.prototype.parameter_array = function() {
    return this.getTypedRuleContext(Parameter_arrayContext,0);
};

Formal_parameter_listContext.prototype.fixed_parameters = function() {
    return this.getTypedRuleContext(Fixed_parametersContext,0);
};

Formal_parameter_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFormal_parameter_list(this);
	}
};

Formal_parameter_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFormal_parameter_list(this);
	}
};




CSharpParser.Formal_parameter_listContext = Formal_parameter_listContext;

CSharpParser.prototype.formal_parameter_list = function() {

    var localctx = new Formal_parameter_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, CSharpParser.RULE_formal_parameter_list);
    var _la = 0; // Token type
    try {
        this.state = 2014;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2008;
            this.parameter_array();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2009;
            this.fixed_parameters();
            this.state = 2012;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.COMMA) {
                this.state = 2010;
                this.match(CSharpParser.COMMA);
                this.state = 2011;
                this.parameter_array();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fixed_parametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_fixed_parameters;
    return this;
}

Fixed_parametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fixed_parametersContext.prototype.constructor = Fixed_parametersContext;

Fixed_parametersContext.prototype.fixed_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Fixed_parameterContext);
    } else {
        return this.getTypedRuleContext(Fixed_parameterContext,i);
    }
};

Fixed_parametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixed_parameters(this);
	}
};

Fixed_parametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixed_parameters(this);
	}
};




CSharpParser.Fixed_parametersContext = Fixed_parametersContext;

CSharpParser.prototype.fixed_parameters = function() {

    var localctx = new Fixed_parametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, CSharpParser.RULE_fixed_parameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2016;
        this.fixed_parameter();
        this.state = 2021;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,174,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2017;
                this.match(CSharpParser.COMMA);
                this.state = 2018;
                this.fixed_parameter(); 
            }
            this.state = 2023;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,174,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fixed_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_fixed_parameter;
    return this;
}

Fixed_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fixed_parameterContext.prototype.constructor = Fixed_parameterContext;

Fixed_parameterContext.prototype.arg_declaration = function() {
    return this.getTypedRuleContext(Arg_declarationContext,0);
};

Fixed_parameterContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Fixed_parameterContext.prototype.parameter_modifier = function() {
    return this.getTypedRuleContext(Parameter_modifierContext,0);
};

Fixed_parameterContext.prototype.ARGLIST = function() {
    return this.getToken(CSharpParser.ARGLIST, 0);
};

Fixed_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixed_parameter(this);
	}
};

Fixed_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixed_parameter(this);
	}
};




CSharpParser.Fixed_parameterContext = Fixed_parameterContext;

CSharpParser.prototype.fixed_parameter = function() {

    var localctx = new Fixed_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, CSharpParser.RULE_fixed_parameter);
    var _la = 0; // Token type
    try {
        this.state = 2032;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2025;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.OPEN_BRACKET) {
                this.state = 2024;
                this.attributes();
            }

            this.state = 2028;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CSharpParser.OUT - 71)) | (1 << (CSharpParser.REF - 71)) | (1 << (CSharpParser.THIS - 71)))) !== 0)) {
                this.state = 2027;
                this.parameter_modifier();
            }

            this.state = 2030;
            this.arg_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2031;
            this.match(CSharpParser.ARGLIST);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parameter_modifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_parameter_modifier;
    return this;
}

Parameter_modifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_modifierContext.prototype.constructor = Parameter_modifierContext;

Parameter_modifierContext.prototype.REF = function() {
    return this.getToken(CSharpParser.REF, 0);
};

Parameter_modifierContext.prototype.OUT = function() {
    return this.getToken(CSharpParser.OUT, 0);
};

Parameter_modifierContext.prototype.THIS = function() {
    return this.getToken(CSharpParser.THIS, 0);
};

Parameter_modifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterParameter_modifier(this);
	}
};

Parameter_modifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitParameter_modifier(this);
	}
};




CSharpParser.Parameter_modifierContext = Parameter_modifierContext;

CSharpParser.prototype.parameter_modifier = function() {

    var localctx = new Parameter_modifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, CSharpParser.RULE_parameter_modifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2034;
        _la = this._input.LA(1);
        if(!(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CSharpParser.OUT - 71)) | (1 << (CSharpParser.REF - 71)) | (1 << (CSharpParser.THIS - 71)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parameter_arrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_parameter_array;
    return this;
}

Parameter_arrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_arrayContext.prototype.constructor = Parameter_arrayContext;

Parameter_arrayContext.prototype.PARAMS = function() {
    return this.getToken(CSharpParser.PARAMS, 0);
};

Parameter_arrayContext.prototype.array_type = function() {
    return this.getTypedRuleContext(Array_typeContext,0);
};

Parameter_arrayContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Parameter_arrayContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Parameter_arrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterParameter_array(this);
	}
};

Parameter_arrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitParameter_array(this);
	}
};




CSharpParser.Parameter_arrayContext = Parameter_arrayContext;

CSharpParser.prototype.parameter_array = function() {

    var localctx = new Parameter_arrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, CSharpParser.RULE_parameter_array);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2037;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 2036;
            this.attributes();
        }

        this.state = 2039;
        this.match(CSharpParser.PARAMS);
        this.state = 2040;
        this.array_type();
        this.state = 2041;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Accessor_declarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_accessor_declarations;
    this.attrs = null; // AttributesContext
    this.mods = null; // Accessor_modifierContext
    return this;
}

Accessor_declarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Accessor_declarationsContext.prototype.constructor = Accessor_declarationsContext;

Accessor_declarationsContext.prototype.GET = function() {
    return this.getToken(CSharpParser.GET, 0);
};

Accessor_declarationsContext.prototype.accessor_body = function() {
    return this.getTypedRuleContext(Accessor_bodyContext,0);
};

Accessor_declarationsContext.prototype.SET = function() {
    return this.getToken(CSharpParser.SET, 0);
};

Accessor_declarationsContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Accessor_declarationsContext.prototype.accessor_modifier = function() {
    return this.getTypedRuleContext(Accessor_modifierContext,0);
};

Accessor_declarationsContext.prototype.set_accessor_declaration = function() {
    return this.getTypedRuleContext(Set_accessor_declarationContext,0);
};

Accessor_declarationsContext.prototype.get_accessor_declaration = function() {
    return this.getTypedRuleContext(Get_accessor_declarationContext,0);
};

Accessor_declarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAccessor_declarations(this);
	}
};

Accessor_declarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAccessor_declarations(this);
	}
};




CSharpParser.Accessor_declarationsContext = Accessor_declarationsContext;

CSharpParser.prototype.accessor_declarations = function() {

    var localctx = new Accessor_declarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, CSharpParser.RULE_accessor_declarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2044;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 2043;
            localctx.attrs = this.attributes();
        }

        this.state = 2047;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (CSharpParser.INTERNAL - 56)) | (1 << (CSharpParser.PRIVATE - 56)) | (1 << (CSharpParser.PROTECTED - 56)))) !== 0)) {
            this.state = 2046;
            localctx.mods = this.accessor_modifier();
        }

        this.state = 2059;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.GET:
            this.state = 2049;
            this.match(CSharpParser.GET);
            this.state = 2050;
            this.accessor_body();
            this.state = 2052;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (CSharpParser.INTERNAL - 56)) | (1 << (CSharpParser.PRIVATE - 56)) | (1 << (CSharpParser.PROTECTED - 56)) | (1 << (CSharpParser.SET - 56)))) !== 0) || _la===CSharpParser.OPEN_BRACKET) {
                this.state = 2051;
                this.set_accessor_declaration();
            }

            break;
        case CSharpParser.SET:
            this.state = 2054;
            this.match(CSharpParser.SET);
            this.state = 2055;
            this.accessor_body();
            this.state = 2057;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (CSharpParser.GET - 48)) | (1 << (CSharpParser.INTERNAL - 48)) | (1 << (CSharpParser.PRIVATE - 48)) | (1 << (CSharpParser.PROTECTED - 48)))) !== 0) || _la===CSharpParser.OPEN_BRACKET) {
                this.state = 2056;
                this.get_accessor_declaration();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Get_accessor_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_get_accessor_declaration;
    return this;
}

Get_accessor_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Get_accessor_declarationContext.prototype.constructor = Get_accessor_declarationContext;

Get_accessor_declarationContext.prototype.GET = function() {
    return this.getToken(CSharpParser.GET, 0);
};

Get_accessor_declarationContext.prototype.accessor_body = function() {
    return this.getTypedRuleContext(Accessor_bodyContext,0);
};

Get_accessor_declarationContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Get_accessor_declarationContext.prototype.accessor_modifier = function() {
    return this.getTypedRuleContext(Accessor_modifierContext,0);
};

Get_accessor_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterGet_accessor_declaration(this);
	}
};

Get_accessor_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitGet_accessor_declaration(this);
	}
};




CSharpParser.Get_accessor_declarationContext = Get_accessor_declarationContext;

CSharpParser.prototype.get_accessor_declaration = function() {

    var localctx = new Get_accessor_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, CSharpParser.RULE_get_accessor_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2062;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 2061;
            this.attributes();
        }

        this.state = 2065;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (CSharpParser.INTERNAL - 56)) | (1 << (CSharpParser.PRIVATE - 56)) | (1 << (CSharpParser.PROTECTED - 56)))) !== 0)) {
            this.state = 2064;
            this.accessor_modifier();
        }

        this.state = 2067;
        this.match(CSharpParser.GET);
        this.state = 2068;
        this.accessor_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_accessor_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_set_accessor_declaration;
    return this;
}

Set_accessor_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_accessor_declarationContext.prototype.constructor = Set_accessor_declarationContext;

Set_accessor_declarationContext.prototype.SET = function() {
    return this.getToken(CSharpParser.SET, 0);
};

Set_accessor_declarationContext.prototype.accessor_body = function() {
    return this.getTypedRuleContext(Accessor_bodyContext,0);
};

Set_accessor_declarationContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Set_accessor_declarationContext.prototype.accessor_modifier = function() {
    return this.getTypedRuleContext(Accessor_modifierContext,0);
};

Set_accessor_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSet_accessor_declaration(this);
	}
};

Set_accessor_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSet_accessor_declaration(this);
	}
};




CSharpParser.Set_accessor_declarationContext = Set_accessor_declarationContext;

CSharpParser.prototype.set_accessor_declaration = function() {

    var localctx = new Set_accessor_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, CSharpParser.RULE_set_accessor_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2071;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 2070;
            this.attributes();
        }

        this.state = 2074;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (CSharpParser.INTERNAL - 56)) | (1 << (CSharpParser.PRIVATE - 56)) | (1 << (CSharpParser.PROTECTED - 56)))) !== 0)) {
            this.state = 2073;
            this.accessor_modifier();
        }

        this.state = 2076;
        this.match(CSharpParser.SET);
        this.state = 2077;
        this.accessor_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Accessor_modifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_accessor_modifier;
    return this;
}

Accessor_modifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Accessor_modifierContext.prototype.constructor = Accessor_modifierContext;

Accessor_modifierContext.prototype.PROTECTED = function() {
    return this.getToken(CSharpParser.PROTECTED, 0);
};

Accessor_modifierContext.prototype.INTERNAL = function() {
    return this.getToken(CSharpParser.INTERNAL, 0);
};

Accessor_modifierContext.prototype.PRIVATE = function() {
    return this.getToken(CSharpParser.PRIVATE, 0);
};

Accessor_modifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAccessor_modifier(this);
	}
};

Accessor_modifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAccessor_modifier(this);
	}
};




CSharpParser.Accessor_modifierContext = Accessor_modifierContext;

CSharpParser.prototype.accessor_modifier = function() {

    var localctx = new Accessor_modifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, CSharpParser.RULE_accessor_modifier);
    try {
        this.state = 2086;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2079;
            this.match(CSharpParser.PROTECTED);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2080;
            this.match(CSharpParser.INTERNAL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2081;
            this.match(CSharpParser.PRIVATE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2082;
            this.match(CSharpParser.PROTECTED);
            this.state = 2083;
            this.match(CSharpParser.INTERNAL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2084;
            this.match(CSharpParser.INTERNAL);
            this.state = 2085;
            this.match(CSharpParser.PROTECTED);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Accessor_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_accessor_body;
    return this;
}

Accessor_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Accessor_bodyContext.prototype.constructor = Accessor_bodyContext;

Accessor_bodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Accessor_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAccessor_body(this);
	}
};

Accessor_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAccessor_body(this);
	}
};




CSharpParser.Accessor_bodyContext = Accessor_bodyContext;

CSharpParser.prototype.accessor_body = function() {

    var localctx = new Accessor_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, CSharpParser.RULE_accessor_body);
    try {
        this.state = 2090;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2088;
            this.block();
            break;
        case CSharpParser.SEMICOLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 2089;
            this.match(CSharpParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Event_accessor_declarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_event_accessor_declarations;
    return this;
}

Event_accessor_declarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_accessor_declarationsContext.prototype.constructor = Event_accessor_declarationsContext;

Event_accessor_declarationsContext.prototype.ADD = function() {
    return this.getToken(CSharpParser.ADD, 0);
};

Event_accessor_declarationsContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Event_accessor_declarationsContext.prototype.remove_accessor_declaration = function() {
    return this.getTypedRuleContext(Remove_accessor_declarationContext,0);
};

Event_accessor_declarationsContext.prototype.REMOVE = function() {
    return this.getToken(CSharpParser.REMOVE, 0);
};

Event_accessor_declarationsContext.prototype.add_accessor_declaration = function() {
    return this.getTypedRuleContext(Add_accessor_declarationContext,0);
};

Event_accessor_declarationsContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Event_accessor_declarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEvent_accessor_declarations(this);
	}
};

Event_accessor_declarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEvent_accessor_declarations(this);
	}
};




CSharpParser.Event_accessor_declarationsContext = Event_accessor_declarationsContext;

CSharpParser.prototype.event_accessor_declarations = function() {

    var localctx = new Event_accessor_declarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, CSharpParser.RULE_event_accessor_declarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2093;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 2092;
            this.attributes();
        }

        this.state = 2103;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
            this.state = 2095;
            this.match(CSharpParser.ADD);
            this.state = 2096;
            this.block();
            this.state = 2097;
            this.remove_accessor_declaration();
            break;
        case CSharpParser.REMOVE:
            this.state = 2099;
            this.match(CSharpParser.REMOVE);
            this.state = 2100;
            this.block();
            this.state = 2101;
            this.add_accessor_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Add_accessor_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_add_accessor_declaration;
    return this;
}

Add_accessor_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Add_accessor_declarationContext.prototype.constructor = Add_accessor_declarationContext;

Add_accessor_declarationContext.prototype.ADD = function() {
    return this.getToken(CSharpParser.ADD, 0);
};

Add_accessor_declarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Add_accessor_declarationContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Add_accessor_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAdd_accessor_declaration(this);
	}
};

Add_accessor_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAdd_accessor_declaration(this);
	}
};




CSharpParser.Add_accessor_declarationContext = Add_accessor_declarationContext;

CSharpParser.prototype.add_accessor_declaration = function() {

    var localctx = new Add_accessor_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, CSharpParser.RULE_add_accessor_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2106;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 2105;
            this.attributes();
        }

        this.state = 2108;
        this.match(CSharpParser.ADD);
        this.state = 2109;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Remove_accessor_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_remove_accessor_declaration;
    return this;
}

Remove_accessor_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Remove_accessor_declarationContext.prototype.constructor = Remove_accessor_declarationContext;

Remove_accessor_declarationContext.prototype.REMOVE = function() {
    return this.getToken(CSharpParser.REMOVE, 0);
};

Remove_accessor_declarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Remove_accessor_declarationContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Remove_accessor_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterRemove_accessor_declaration(this);
	}
};

Remove_accessor_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitRemove_accessor_declaration(this);
	}
};




CSharpParser.Remove_accessor_declarationContext = Remove_accessor_declarationContext;

CSharpParser.prototype.remove_accessor_declaration = function() {

    var localctx = new Remove_accessor_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, CSharpParser.RULE_remove_accessor_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2112;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 2111;
            this.attributes();
        }

        this.state = 2114;
        this.match(CSharpParser.REMOVE);
        this.state = 2115;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Overloadable_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_overloadable_operator;
    return this;
}

Overloadable_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Overloadable_operatorContext.prototype.constructor = Overloadable_operatorContext;

Overloadable_operatorContext.prototype.BANG = function() {
    return this.getToken(CSharpParser.BANG, 0);
};

Overloadable_operatorContext.prototype.TRUE = function() {
    return this.getToken(CSharpParser.TRUE, 0);
};

Overloadable_operatorContext.prototype.FALSE = function() {
    return this.getToken(CSharpParser.FALSE, 0);
};

Overloadable_operatorContext.prototype.right_shift = function() {
    return this.getTypedRuleContext(Right_shiftContext,0);
};

Overloadable_operatorContext.prototype.OP_EQ = function() {
    return this.getToken(CSharpParser.OP_EQ, 0);
};

Overloadable_operatorContext.prototype.OP_NE = function() {
    return this.getToken(CSharpParser.OP_NE, 0);
};

Overloadable_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterOverloadable_operator(this);
	}
};

Overloadable_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitOverloadable_operator(this);
	}
};




CSharpParser.Overloadable_operatorContext = Overloadable_operatorContext;

CSharpParser.prototype.overloadable_operator = function() {

    var localctx = new Overloadable_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, CSharpParser.RULE_overloadable_operator);
    try {
        this.state = 2139;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2117;
            this.match(CSharpParser.PLUS);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2118;
            this.match(CSharpParser.MINUS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2119;
            this.match(CSharpParser.BANG);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2120;
            this.match(CSharpParser.TILDE);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2121;
            this.match(CSharpParser.OP_INC);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2122;
            this.match(CSharpParser.OP_DEC);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2123;
            this.match(CSharpParser.TRUE);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2124;
            this.match(CSharpParser.FALSE);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2125;
            this.match(CSharpParser.STAR);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2126;
            this.match(CSharpParser.DIV);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2127;
            this.match(CSharpParser.PERCENT);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2128;
            this.match(CSharpParser.AMP);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2129;
            this.match(CSharpParser.BITWISE_OR);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2130;
            this.match(CSharpParser.CARET);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2131;
            this.match(CSharpParser.OP_LEFT_SHIFT);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2132;
            this.right_shift();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2133;
            this.match(CSharpParser.OP_EQ);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2134;
            this.match(CSharpParser.OP_NE);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 2135;
            this.match(CSharpParser.GT);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 2136;
            this.match(CSharpParser.LT);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 2137;
            this.match(CSharpParser.OP_GE);
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 2138;
            this.match(CSharpParser.OP_LE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conversion_operator_declaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_conversion_operator_declarator;
    return this;
}

Conversion_operator_declaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conversion_operator_declaratorContext.prototype.constructor = Conversion_operator_declaratorContext;

Conversion_operator_declaratorContext.prototype.OPERATOR = function() {
    return this.getToken(CSharpParser.OPERATOR, 0);
};

Conversion_operator_declaratorContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Conversion_operator_declaratorContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Conversion_operator_declaratorContext.prototype.arg_declaration = function() {
    return this.getTypedRuleContext(Arg_declarationContext,0);
};

Conversion_operator_declaratorContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Conversion_operator_declaratorContext.prototype.IMPLICIT = function() {
    return this.getToken(CSharpParser.IMPLICIT, 0);
};

Conversion_operator_declaratorContext.prototype.EXPLICIT = function() {
    return this.getToken(CSharpParser.EXPLICIT, 0);
};

Conversion_operator_declaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConversion_operator_declarator(this);
	}
};

Conversion_operator_declaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConversion_operator_declarator(this);
	}
};




CSharpParser.Conversion_operator_declaratorContext = Conversion_operator_declaratorContext;

CSharpParser.prototype.conversion_operator_declarator = function() {

    var localctx = new Conversion_operator_declaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, CSharpParser.RULE_conversion_operator_declarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2141;
        _la = this._input.LA(1);
        if(!(_la===CSharpParser.EXPLICIT || _la===CSharpParser.IMPLICIT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2142;
        this.match(CSharpParser.OPERATOR);
        this.state = 2143;
        this.var_type();
        this.state = 2144;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 2145;
        this.arg_declaration();
        this.state = 2146;
        this.match(CSharpParser.CLOSE_PARENS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_constructor_initializer;
    return this;
}

Constructor_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_initializerContext.prototype.constructor = Constructor_initializerContext;

Constructor_initializerContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Constructor_initializerContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Constructor_initializerContext.prototype.BASE = function() {
    return this.getToken(CSharpParser.BASE, 0);
};

Constructor_initializerContext.prototype.THIS = function() {
    return this.getToken(CSharpParser.THIS, 0);
};

Constructor_initializerContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Constructor_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConstructor_initializer(this);
	}
};

Constructor_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConstructor_initializer(this);
	}
};




CSharpParser.Constructor_initializerContext = Constructor_initializerContext;

CSharpParser.prototype.constructor_initializer = function() {

    var localctx = new Constructor_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, CSharpParser.RULE_constructor_initializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2148;
        this.match(CSharpParser.COLON);
        this.state = 2149;
        _la = this._input.LA(1);
        if(!(_la===CSharpParser.BASE || _la===CSharpParser.THIS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2150;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 2152;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.OUT - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REF - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.VOID - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
            this.state = 2151;
            this.argument_list();
        }

        this.state = 2154;
        this.match(CSharpParser.CLOSE_PARENS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_body;
    return this;
}

BodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BodyContext.prototype.constructor = BodyContext;

BodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

BodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBody(this);
	}
};

BodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBody(this);
	}
};




CSharpParser.BodyContext = BodyContext;

CSharpParser.prototype.body = function() {

    var localctx = new BodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, CSharpParser.RULE_body);
    try {
        this.state = 2158;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2156;
            this.block();
            break;
        case CSharpParser.SEMICOLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 2157;
            this.match(CSharpParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Struct_interfacesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_struct_interfaces;
    return this;
}

Struct_interfacesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_interfacesContext.prototype.constructor = Struct_interfacesContext;

Struct_interfacesContext.prototype.interface_type_list = function() {
    return this.getTypedRuleContext(Interface_type_listContext,0);
};

Struct_interfacesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterStruct_interfaces(this);
	}
};

Struct_interfacesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitStruct_interfaces(this);
	}
};




CSharpParser.Struct_interfacesContext = Struct_interfacesContext;

CSharpParser.prototype.struct_interfaces = function() {

    var localctx = new Struct_interfacesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, CSharpParser.RULE_struct_interfaces);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2160;
        this.match(CSharpParser.COLON);
        this.state = 2161;
        this.interface_type_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Struct_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_struct_body;
    return this;
}

Struct_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_bodyContext.prototype.constructor = Struct_bodyContext;

Struct_bodyContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Struct_bodyContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Struct_bodyContext.prototype.struct_member_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Struct_member_declarationContext);
    } else {
        return this.getTypedRuleContext(Struct_member_declarationContext,i);
    }
};

Struct_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterStruct_body(this);
	}
};

Struct_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitStruct_body(this);
	}
};




CSharpParser.Struct_bodyContext = Struct_bodyContext;

CSharpParser.prototype.struct_body = function() {

    var localctx = new Struct_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, CSharpParser.RULE_struct_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2163;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 2167;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.CONST) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.ENUM - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.EVENT - 33)) | (1 << (CSharpParser.EXPLICIT - 33)) | (1 << (CSharpParser.EXTERN - 33)) | (1 << (CSharpParser.FIXED - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.IMPLICIT - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTERFACE - 33)) | (1 << (CSharpParser.INTERNAL - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.OVERRIDE - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.PRIVATE - 65)) | (1 << (CSharpParser.PROTECTED - 65)) | (1 << (CSharpParser.PUBLIC - 65)) | (1 << (CSharpParser.READONLY - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SEALED - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.STATIC - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.STRUCT - 65)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CSharpParser.UINT - 98)) | (1 << (CSharpParser.ULONG - 98)) | (1 << (CSharpParser.UNSAFE - 98)) | (1 << (CSharpParser.USHORT - 98)) | (1 << (CSharpParser.VAR - 98)) | (1 << (CSharpParser.VIRTUAL - 98)) | (1 << (CSharpParser.VOID - 98)) | (1 << (CSharpParser.VOLATILE - 98)) | (1 << (CSharpParser.WHEN - 98)) | (1 << (CSharpParser.WHERE - 98)) | (1 << (CSharpParser.YIELD - 98)) | (1 << (CSharpParser.IDENTIFIER - 98)) | (1 << (CSharpParser.OPEN_BRACKET - 98)))) !== 0)) {
            this.state = 2164;
            this.struct_member_declaration();
            this.state = 2169;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2170;
        this.match(CSharpParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Struct_member_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_struct_member_declaration;
    return this;
}

Struct_member_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_member_declarationContext.prototype.constructor = Struct_member_declarationContext;

Struct_member_declarationContext.prototype.common_member_declaration = function() {
    return this.getTypedRuleContext(Common_member_declarationContext,0);
};

Struct_member_declarationContext.prototype.FIXED = function() {
    return this.getToken(CSharpParser.FIXED, 0);
};

Struct_member_declarationContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Struct_member_declarationContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Struct_member_declarationContext.prototype.all_member_modifiers = function() {
    return this.getTypedRuleContext(All_member_modifiersContext,0);
};

Struct_member_declarationContext.prototype.fixed_size_buffer_declarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Fixed_size_buffer_declaratorContext);
    } else {
        return this.getTypedRuleContext(Fixed_size_buffer_declaratorContext,i);
    }
};

Struct_member_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterStruct_member_declaration(this);
	}
};

Struct_member_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitStruct_member_declaration(this);
	}
};




CSharpParser.Struct_member_declarationContext = Struct_member_declarationContext;

CSharpParser.prototype.struct_member_declaration = function() {

    var localctx = new Struct_member_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, CSharpParser.RULE_struct_member_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2173;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 2172;
            this.attributes();
        }

        this.state = 2176;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
        if(la_===1) {
            this.state = 2175;
            this.all_member_modifiers();

        }
        this.state = 2188;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CLASS:
        case CSharpParser.CONST:
        case CSharpParser.DECIMAL:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.ENUM:
        case CSharpParser.EQUALS:
        case CSharpParser.EVENT:
        case CSharpParser.EXPLICIT:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.IMPLICIT:
        case CSharpParser.INT:
        case CSharpParser.INTERFACE:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.STRING:
        case CSharpParser.STRUCT:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.VOID:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.state = 2178;
            this.common_member_declaration();
            break;
        case CSharpParser.FIXED:
            this.state = 2179;
            this.match(CSharpParser.FIXED);
            this.state = 2180;
            this.var_type();
            this.state = 2182; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2181;
                this.fixed_size_buffer_declarator();
                this.state = 2184; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CSharpParser.DYNAMIC - 34)) | (1 << (CSharpParser.EQUALS - 34)) | (1 << (CSharpParser.FROM - 34)) | (1 << (CSharpParser.GET - 34)) | (1 << (CSharpParser.GROUP - 34)) | (1 << (CSharpParser.INTO - 34)) | (1 << (CSharpParser.JOIN - 34)) | (1 << (CSharpParser.LET - 34)) | (1 << (CSharpParser.NAMEOF - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CSharpParser.ON - 68)) | (1 << (CSharpParser.ORDERBY - 68)) | (1 << (CSharpParser.PARTIAL - 68)) | (1 << (CSharpParser.REMOVE - 68)) | (1 << (CSharpParser.SELECT - 68)) | (1 << (CSharpParser.SET - 68)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (CSharpParser.VAR - 104)) | (1 << (CSharpParser.WHEN - 104)) | (1 << (CSharpParser.WHERE - 104)) | (1 << (CSharpParser.YIELD - 104)) | (1 << (CSharpParser.IDENTIFIER - 104)))) !== 0));
            this.state = 2186;
            this.match(CSharpParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Array_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_array_type;
    return this;
}

Array_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_typeContext.prototype.constructor = Array_typeContext;

Array_typeContext.prototype.base_type = function() {
    return this.getTypedRuleContext(Base_typeContext,0);
};

Array_typeContext.prototype.rank_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rank_specifierContext);
    } else {
        return this.getTypedRuleContext(Rank_specifierContext,i);
    }
};

Array_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterArray_type(this);
	}
};

Array_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitArray_type(this);
	}
};




CSharpParser.Array_typeContext = Array_typeContext;

CSharpParser.prototype.array_type = function() {

    var localctx = new Array_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, CSharpParser.RULE_array_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2190;
        this.base_type();
        this.state = 2198; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2194;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CSharpParser.STAR || _la===CSharpParser.INTERR) {
                this.state = 2191;
                _la = this._input.LA(1);
                if(!(_la===CSharpParser.STAR || _la===CSharpParser.INTERR)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2196;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2197;
            this.rank_specifier();
            this.state = 2200; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (CSharpParser.OPEN_BRACKET - 124)) | (1 << (CSharpParser.STAR - 124)) | (1 << (CSharpParser.INTERR - 124)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rank_specifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_rank_specifier;
    return this;
}

Rank_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rank_specifierContext.prototype.constructor = Rank_specifierContext;


Rank_specifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterRank_specifier(this);
	}
};

Rank_specifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitRank_specifier(this);
	}
};




CSharpParser.Rank_specifierContext = Rank_specifierContext;

CSharpParser.prototype.rank_specifier = function() {

    var localctx = new Rank_specifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, CSharpParser.RULE_rank_specifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2202;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 2206;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 2203;
            this.match(CSharpParser.COMMA);
            this.state = 2208;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2209;
        this.match(CSharpParser.CLOSE_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Array_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_array_initializer;
    return this;
}

Array_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_initializerContext.prototype.constructor = Array_initializerContext;

Array_initializerContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Array_initializerContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Array_initializerContext.prototype.variable_initializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_initializerContext);
    } else {
        return this.getTypedRuleContext(Variable_initializerContext,i);
    }
};

Array_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterArray_initializer(this);
	}
};

Array_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitArray_initializer(this);
	}
};




CSharpParser.Array_initializerContext = Array_initializerContext;

CSharpParser.prototype.array_initializer = function() {

    var localctx = new Array_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, CSharpParser.RULE_array_initializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2211;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 2223;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_BRACE - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
            this.state = 2212;
            this.variable_initializer();
            this.state = 2217;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,205,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2213;
                    this.match(CSharpParser.COMMA);
                    this.state = 2214;
                    this.variable_initializer(); 
                }
                this.state = 2219;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,205,this._ctx);
            }

            this.state = 2221;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.COMMA) {
                this.state = 2220;
                this.match(CSharpParser.COMMA);
            }

        }

        this.state = 2225;
        this.match(CSharpParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variant_type_parameter_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_variant_type_parameter_list;
    return this;
}

Variant_type_parameter_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variant_type_parameter_listContext.prototype.constructor = Variant_type_parameter_listContext;

Variant_type_parameter_listContext.prototype.variant_type_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variant_type_parameterContext);
    } else {
        return this.getTypedRuleContext(Variant_type_parameterContext,i);
    }
};

Variant_type_parameter_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVariant_type_parameter_list(this);
	}
};

Variant_type_parameter_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVariant_type_parameter_list(this);
	}
};




CSharpParser.Variant_type_parameter_listContext = Variant_type_parameter_listContext;

CSharpParser.prototype.variant_type_parameter_list = function() {

    var localctx = new Variant_type_parameter_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, CSharpParser.RULE_variant_type_parameter_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2227;
        this.match(CSharpParser.LT);
        this.state = 2228;
        this.variant_type_parameter();
        this.state = 2233;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 2229;
            this.match(CSharpParser.COMMA);
            this.state = 2230;
            this.variant_type_parameter();
            this.state = 2235;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2236;
        this.match(CSharpParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variant_type_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_variant_type_parameter;
    return this;
}

Variant_type_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variant_type_parameterContext.prototype.constructor = Variant_type_parameterContext;

Variant_type_parameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Variant_type_parameterContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Variant_type_parameterContext.prototype.variance_annotation = function() {
    return this.getTypedRuleContext(Variance_annotationContext,0);
};

Variant_type_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVariant_type_parameter(this);
	}
};

Variant_type_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVariant_type_parameter(this);
	}
};




CSharpParser.Variant_type_parameterContext = Variant_type_parameterContext;

CSharpParser.prototype.variant_type_parameter = function() {

    var localctx = new Variant_type_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, CSharpParser.RULE_variant_type_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2239;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 2238;
            this.attributes();
        }

        this.state = 2242;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.IN || _la===CSharpParser.OUT) {
            this.state = 2241;
            this.variance_annotation();
        }

        this.state = 2244;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variance_annotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_variance_annotation;
    return this;
}

Variance_annotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variance_annotationContext.prototype.constructor = Variance_annotationContext;

Variance_annotationContext.prototype.IN = function() {
    return this.getToken(CSharpParser.IN, 0);
};

Variance_annotationContext.prototype.OUT = function() {
    return this.getToken(CSharpParser.OUT, 0);
};

Variance_annotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVariance_annotation(this);
	}
};

Variance_annotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVariance_annotation(this);
	}
};




CSharpParser.Variance_annotationContext = Variance_annotationContext;

CSharpParser.prototype.variance_annotation = function() {

    var localctx = new Variance_annotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, CSharpParser.RULE_variance_annotation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2246;
        _la = this._input.LA(1);
        if(!(_la===CSharpParser.IN || _la===CSharpParser.OUT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_baseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interface_base;
    return this;
}

Interface_baseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_baseContext.prototype.constructor = Interface_baseContext;

Interface_baseContext.prototype.interface_type_list = function() {
    return this.getTypedRuleContext(Interface_type_listContext,0);
};

Interface_baseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterface_base(this);
	}
};

Interface_baseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterface_base(this);
	}
};




CSharpParser.Interface_baseContext = Interface_baseContext;

CSharpParser.prototype.interface_base = function() {

    var localctx = new Interface_baseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, CSharpParser.RULE_interface_base);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2248;
        this.match(CSharpParser.COLON);
        this.state = 2249;
        this.interface_type_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interface_body;
    return this;
}

Interface_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_bodyContext.prototype.constructor = Interface_bodyContext;

Interface_bodyContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Interface_bodyContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Interface_bodyContext.prototype.interface_member_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interface_member_declarationContext);
    } else {
        return this.getTypedRuleContext(Interface_member_declarationContext,i);
    }
};

Interface_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterface_body(this);
	}
};

Interface_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterface_body(this);
	}
};




CSharpParser.Interface_bodyContext = Interface_bodyContext;

CSharpParser.prototype.interface_body = function() {

    var localctx = new Interface_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, CSharpParser.RULE_interface_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2251;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 2255;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.EVENT - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.STRING - 65)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CSharpParser.UINT - 98)) | (1 << (CSharpParser.ULONG - 98)) | (1 << (CSharpParser.UNSAFE - 98)) | (1 << (CSharpParser.USHORT - 98)) | (1 << (CSharpParser.VAR - 98)) | (1 << (CSharpParser.VOID - 98)) | (1 << (CSharpParser.WHEN - 98)) | (1 << (CSharpParser.WHERE - 98)) | (1 << (CSharpParser.YIELD - 98)) | (1 << (CSharpParser.IDENTIFIER - 98)) | (1 << (CSharpParser.OPEN_BRACKET - 98)))) !== 0)) {
            this.state = 2252;
            this.interface_member_declaration();
            this.state = 2257;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2258;
        this.match(CSharpParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_member_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interface_member_declaration;
    return this;
}

Interface_member_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_member_declarationContext.prototype.constructor = Interface_member_declarationContext;

Interface_member_declarationContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Interface_member_declarationContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};

Interface_member_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Interface_member_declarationContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Interface_member_declarationContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Interface_member_declarationContext.prototype.EVENT = function() {
    return this.getToken(CSharpParser.EVENT, 0);
};

Interface_member_declarationContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Interface_member_declarationContext.prototype.NEW = function() {
    return this.getToken(CSharpParser.NEW, 0);
};

Interface_member_declarationContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Interface_member_declarationContext.prototype.interface_accessors = function() {
    return this.getTypedRuleContext(Interface_accessorsContext,0);
};

Interface_member_declarationContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Interface_member_declarationContext.prototype.THIS = function() {
    return this.getToken(CSharpParser.THIS, 0);
};

Interface_member_declarationContext.prototype.formal_parameter_list = function() {
    return this.getTypedRuleContext(Formal_parameter_listContext,0);
};

Interface_member_declarationContext.prototype.UNSAFE = function() {
    return this.getToken(CSharpParser.UNSAFE, 0);
};

Interface_member_declarationContext.prototype.type_parameter_list = function() {
    return this.getTypedRuleContext(Type_parameter_listContext,0);
};

Interface_member_declarationContext.prototype.type_parameter_constraints_clauses = function() {
    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
};

Interface_member_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterface_member_declaration(this);
	}
};

Interface_member_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterface_member_declaration(this);
	}
};




CSharpParser.Interface_member_declarationContext = Interface_member_declarationContext;

CSharpParser.prototype.interface_member_declaration = function() {

    var localctx = new Interface_member_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, CSharpParser.RULE_interface_member_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2261;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 2260;
            this.attributes();
        }

        this.state = 2264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.NEW) {
            this.state = 2263;
            this.match(CSharpParser.NEW);
        }

        this.state = 2322;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2267;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.UNSAFE) {
                this.state = 2266;
                this.match(CSharpParser.UNSAFE);
            }

            this.state = 2269;
            this.var_type();
            this.state = 2297;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2270;
                this.identifier();
                this.state = 2272;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CSharpParser.LT) {
                    this.state = 2271;
                    this.type_parameter_list();
                }

                this.state = 2274;
                this.match(CSharpParser.OPEN_PARENS);
                this.state = 2276;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CSharpParser.OBJECT - 67)) | (1 << (CSharpParser.ON - 67)) | (1 << (CSharpParser.ORDERBY - 67)) | (1 << (CSharpParser.OUT - 67)) | (1 << (CSharpParser.PARAMS - 67)) | (1 << (CSharpParser.PARTIAL - 67)) | (1 << (CSharpParser.REF - 67)) | (1 << (CSharpParser.REMOVE - 67)) | (1 << (CSharpParser.SBYTE - 67)) | (1 << (CSharpParser.SELECT - 67)) | (1 << (CSharpParser.SET - 67)) | (1 << (CSharpParser.SHORT - 67)) | (1 << (CSharpParser.STRING - 67)) | (1 << (CSharpParser.THIS - 67)) | (1 << (CSharpParser.UINT - 67)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)))) !== 0)) {
                    this.state = 2275;
                    this.formal_parameter_list();
                }

                this.state = 2278;
                this.match(CSharpParser.CLOSE_PARENS);
                this.state = 2280;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CSharpParser.WHERE) {
                    this.state = 2279;
                    this.type_parameter_constraints_clauses();
                }

                this.state = 2282;
                this.match(CSharpParser.SEMICOLON);
                break;

            case 2:
                this.state = 2284;
                this.identifier();
                this.state = 2285;
                this.match(CSharpParser.OPEN_BRACE);
                this.state = 2286;
                this.interface_accessors();
                this.state = 2287;
                this.match(CSharpParser.CLOSE_BRACE);
                break;

            case 3:
                this.state = 2289;
                this.match(CSharpParser.THIS);
                this.state = 2290;
                this.match(CSharpParser.OPEN_BRACKET);
                this.state = 2291;
                this.formal_parameter_list();
                this.state = 2292;
                this.match(CSharpParser.CLOSE_BRACKET);
                this.state = 2293;
                this.match(CSharpParser.OPEN_BRACE);
                this.state = 2294;
                this.interface_accessors();
                this.state = 2295;
                this.match(CSharpParser.CLOSE_BRACE);
                break;

            }
            break;

        case 2:
            this.state = 2300;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.UNSAFE) {
                this.state = 2299;
                this.match(CSharpParser.UNSAFE);
            }

            this.state = 2302;
            this.match(CSharpParser.VOID);
            this.state = 2303;
            this.identifier();
            this.state = 2305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.LT) {
                this.state = 2304;
                this.type_parameter_list();
            }

            this.state = 2307;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 2309;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CSharpParser.OBJECT - 67)) | (1 << (CSharpParser.ON - 67)) | (1 << (CSharpParser.ORDERBY - 67)) | (1 << (CSharpParser.OUT - 67)) | (1 << (CSharpParser.PARAMS - 67)) | (1 << (CSharpParser.PARTIAL - 67)) | (1 << (CSharpParser.REF - 67)) | (1 << (CSharpParser.REMOVE - 67)) | (1 << (CSharpParser.SBYTE - 67)) | (1 << (CSharpParser.SELECT - 67)) | (1 << (CSharpParser.SET - 67)) | (1 << (CSharpParser.SHORT - 67)) | (1 << (CSharpParser.STRING - 67)) | (1 << (CSharpParser.THIS - 67)) | (1 << (CSharpParser.UINT - 67)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)))) !== 0)) {
                this.state = 2308;
                this.formal_parameter_list();
            }

            this.state = 2311;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 2313;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.WHERE) {
                this.state = 2312;
                this.type_parameter_constraints_clauses();
            }

            this.state = 2315;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 3:
            this.state = 2317;
            this.match(CSharpParser.EVENT);
            this.state = 2318;
            this.var_type();
            this.state = 2319;
            this.identifier();
            this.state = 2320;
            this.match(CSharpParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_accessorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interface_accessors;
    return this;
}

Interface_accessorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_accessorsContext.prototype.constructor = Interface_accessorsContext;

Interface_accessorsContext.prototype.GET = function() {
    return this.getToken(CSharpParser.GET, 0);
};

Interface_accessorsContext.prototype.SET = function() {
    return this.getToken(CSharpParser.SET, 0);
};

Interface_accessorsContext.prototype.attributes = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributesContext);
    } else {
        return this.getTypedRuleContext(AttributesContext,i);
    }
};

Interface_accessorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterface_accessors(this);
	}
};

Interface_accessorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterface_accessors(this);
	}
};




CSharpParser.Interface_accessorsContext = Interface_accessorsContext;

CSharpParser.prototype.interface_accessors = function() {

    var localctx = new Interface_accessorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, CSharpParser.RULE_interface_accessors);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2325;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 2324;
            this.attributes();
        }

        this.state = 2345;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.GET:
            this.state = 2327;
            this.match(CSharpParser.GET);
            this.state = 2328;
            this.match(CSharpParser.SEMICOLON);
            this.state = 2334;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.SET || _la===CSharpParser.OPEN_BRACKET) {
                this.state = 2330;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CSharpParser.OPEN_BRACKET) {
                    this.state = 2329;
                    this.attributes();
                }

                this.state = 2332;
                this.match(CSharpParser.SET);
                this.state = 2333;
                this.match(CSharpParser.SEMICOLON);
            }

            break;
        case CSharpParser.SET:
            this.state = 2336;
            this.match(CSharpParser.SET);
            this.state = 2337;
            this.match(CSharpParser.SEMICOLON);
            this.state = 2343;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.GET || _la===CSharpParser.OPEN_BRACKET) {
                this.state = 2339;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CSharpParser.OPEN_BRACKET) {
                    this.state = 2338;
                    this.attributes();
                }

                this.state = 2341;
                this.match(CSharpParser.GET);
                this.state = 2342;
                this.match(CSharpParser.SEMICOLON);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_baseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_enum_base;
    return this;
}

Enum_baseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_baseContext.prototype.constructor = Enum_baseContext;

Enum_baseContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Enum_baseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEnum_base(this);
	}
};

Enum_baseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEnum_base(this);
	}
};




CSharpParser.Enum_baseContext = Enum_baseContext;

CSharpParser.prototype.enum_base = function() {

    var localctx = new Enum_baseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, CSharpParser.RULE_enum_base);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2347;
        this.match(CSharpParser.COLON);
        this.state = 2348;
        this.var_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_enum_body;
    return this;
}

Enum_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_bodyContext.prototype.constructor = Enum_bodyContext;

Enum_bodyContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Enum_bodyContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Enum_bodyContext.prototype.enum_member_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Enum_member_declarationContext);
    } else {
        return this.getTypedRuleContext(Enum_member_declarationContext,i);
    }
};

Enum_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEnum_body(this);
	}
};

Enum_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEnum_body(this);
	}
};




CSharpParser.Enum_bodyContext = Enum_bodyContext;

CSharpParser.prototype.enum_body = function() {

    var localctx = new Enum_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, CSharpParser.RULE_enum_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2350;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 2362;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CSharpParser.DYNAMIC - 34)) | (1 << (CSharpParser.EQUALS - 34)) | (1 << (CSharpParser.FROM - 34)) | (1 << (CSharpParser.GET - 34)) | (1 << (CSharpParser.GROUP - 34)) | (1 << (CSharpParser.INTO - 34)) | (1 << (CSharpParser.JOIN - 34)) | (1 << (CSharpParser.LET - 34)) | (1 << (CSharpParser.NAMEOF - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CSharpParser.ON - 68)) | (1 << (CSharpParser.ORDERBY - 68)) | (1 << (CSharpParser.PARTIAL - 68)) | (1 << (CSharpParser.REMOVE - 68)) | (1 << (CSharpParser.SELECT - 68)) | (1 << (CSharpParser.SET - 68)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (CSharpParser.VAR - 104)) | (1 << (CSharpParser.WHEN - 104)) | (1 << (CSharpParser.WHERE - 104)) | (1 << (CSharpParser.YIELD - 104)) | (1 << (CSharpParser.IDENTIFIER - 104)) | (1 << (CSharpParser.OPEN_BRACKET - 104)))) !== 0)) {
            this.state = 2351;
            this.enum_member_declaration();
            this.state = 2356;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,230,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2352;
                    this.match(CSharpParser.COMMA);
                    this.state = 2353;
                    this.enum_member_declaration(); 
                }
                this.state = 2358;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,230,this._ctx);
            }

            this.state = 2360;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.COMMA) {
                this.state = 2359;
                this.match(CSharpParser.COMMA);
            }

        }

        this.state = 2364;
        this.match(CSharpParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_member_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_enum_member_declaration;
    return this;
}

Enum_member_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_member_declarationContext.prototype.constructor = Enum_member_declarationContext;

Enum_member_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Enum_member_declarationContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Enum_member_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Enum_member_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEnum_member_declaration(this);
	}
};

Enum_member_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEnum_member_declaration(this);
	}
};




CSharpParser.Enum_member_declarationContext = Enum_member_declarationContext;

CSharpParser.prototype.enum_member_declaration = function() {

    var localctx = new Enum_member_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, CSharpParser.RULE_enum_member_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2367;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 2366;
            this.attributes();
        }

        this.state = 2369;
        this.identifier();
        this.state = 2372;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.ASSIGNMENT) {
            this.state = 2370;
            this.match(CSharpParser.ASSIGNMENT);
            this.state = 2371;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Global_attribute_sectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_global_attribute_section;
    return this;
}

Global_attribute_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_attribute_sectionContext.prototype.constructor = Global_attribute_sectionContext;

Global_attribute_sectionContext.prototype.global_attribute_target = function() {
    return this.getTypedRuleContext(Global_attribute_targetContext,0);
};

Global_attribute_sectionContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Global_attribute_sectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterGlobal_attribute_section(this);
	}
};

Global_attribute_sectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitGlobal_attribute_section(this);
	}
};




CSharpParser.Global_attribute_sectionContext = Global_attribute_sectionContext;

CSharpParser.prototype.global_attribute_section = function() {

    var localctx = new Global_attribute_sectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, CSharpParser.RULE_global_attribute_section);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2374;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 2375;
        this.global_attribute_target();
        this.state = 2376;
        this.match(CSharpParser.COLON);
        this.state = 2377;
        this.attribute_list();
        this.state = 2379;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COMMA) {
            this.state = 2378;
            this.match(CSharpParser.COMMA);
        }

        this.state = 2381;
        this.match(CSharpParser.CLOSE_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Global_attribute_targetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_global_attribute_target;
    return this;
}

Global_attribute_targetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_attribute_targetContext.prototype.constructor = Global_attribute_targetContext;

Global_attribute_targetContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

Global_attribute_targetContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Global_attribute_targetContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterGlobal_attribute_target(this);
	}
};

Global_attribute_targetContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitGlobal_attribute_target(this);
	}
};




CSharpParser.Global_attribute_targetContext = Global_attribute_targetContext;

CSharpParser.prototype.global_attribute_target = function() {

    var localctx = new Global_attribute_targetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, CSharpParser.RULE_global_attribute_target);
    try {
        this.state = 2385;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ABSTRACT:
        case CSharpParser.AS:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BREAK:
        case CSharpParser.BYTE:
        case CSharpParser.CASE:
        case CSharpParser.CATCH:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.CLASS:
        case CSharpParser.CONST:
        case CSharpParser.CONTINUE:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DO:
        case CSharpParser.DOUBLE:
        case CSharpParser.ELSE:
        case CSharpParser.ENUM:
        case CSharpParser.EVENT:
        case CSharpParser.EXPLICIT:
        case CSharpParser.EXTERN:
        case CSharpParser.FALSE:
        case CSharpParser.FINALLY:
        case CSharpParser.FIXED:
        case CSharpParser.FLOAT:
        case CSharpParser.FOR:
        case CSharpParser.FOREACH:
        case CSharpParser.GOTO:
        case CSharpParser.IF:
        case CSharpParser.IMPLICIT:
        case CSharpParser.IN:
        case CSharpParser.INT:
        case CSharpParser.INTERFACE:
        case CSharpParser.INTERNAL:
        case CSharpParser.IS:
        case CSharpParser.LOCK:
        case CSharpParser.LONG:
        case CSharpParser.NAMESPACE:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.OPERATOR:
        case CSharpParser.OUT:
        case CSharpParser.OVERRIDE:
        case CSharpParser.PARAMS:
        case CSharpParser.PRIVATE:
        case CSharpParser.PROTECTED:
        case CSharpParser.PUBLIC:
        case CSharpParser.READONLY:
        case CSharpParser.REF:
        case CSharpParser.RETURN:
        case CSharpParser.SBYTE:
        case CSharpParser.SEALED:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STACKALLOC:
        case CSharpParser.STATIC:
        case CSharpParser.STRING:
        case CSharpParser.STRUCT:
        case CSharpParser.SWITCH:
        case CSharpParser.THIS:
        case CSharpParser.THROW:
        case CSharpParser.TRUE:
        case CSharpParser.TRY:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.UNSAFE:
        case CSharpParser.USHORT:
        case CSharpParser.USING:
        case CSharpParser.VIRTUAL:
        case CSharpParser.VOID:
        case CSharpParser.VOLATILE:
        case CSharpParser.WHILE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2383;
            this.keyword();
            break;
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BY:
        case CSharpParser.DESCENDING:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.NAMEOF:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 2384;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_attributes;
    return this;
}

AttributesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributesContext.prototype.constructor = AttributesContext;

AttributesContext.prototype.attribute_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_sectionContext);
    } else {
        return this.getTypedRuleContext(Attribute_sectionContext,i);
    }
};

AttributesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAttributes(this);
	}
};

AttributesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAttributes(this);
	}
};




CSharpParser.AttributesContext = AttributesContext;

CSharpParser.prototype.attributes = function() {

    var localctx = new AttributesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, CSharpParser.RULE_attributes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2388; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2387;
            this.attribute_section();
            this.state = 2390; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===CSharpParser.OPEN_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_sectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_attribute_section;
    return this;
}

Attribute_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_sectionContext.prototype.constructor = Attribute_sectionContext;

Attribute_sectionContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Attribute_sectionContext.prototype.attribute_target = function() {
    return this.getTypedRuleContext(Attribute_targetContext,0);
};

Attribute_sectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAttribute_section(this);
	}
};

Attribute_sectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAttribute_section(this);
	}
};




CSharpParser.Attribute_sectionContext = Attribute_sectionContext;

CSharpParser.prototype.attribute_section = function() {

    var localctx = new Attribute_sectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, CSharpParser.RULE_attribute_section);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2392;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 2396;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
        if(la_===1) {
            this.state = 2393;
            this.attribute_target();
            this.state = 2394;
            this.match(CSharpParser.COLON);

        }
        this.state = 2398;
        this.attribute_list();
        this.state = 2400;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COMMA) {
            this.state = 2399;
            this.match(CSharpParser.COMMA);
        }

        this.state = 2402;
        this.match(CSharpParser.CLOSE_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_targetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_attribute_target;
    return this;
}

Attribute_targetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_targetContext.prototype.constructor = Attribute_targetContext;

Attribute_targetContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

Attribute_targetContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Attribute_targetContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAttribute_target(this);
	}
};

Attribute_targetContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAttribute_target(this);
	}
};




CSharpParser.Attribute_targetContext = Attribute_targetContext;

CSharpParser.prototype.attribute_target = function() {

    var localctx = new Attribute_targetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, CSharpParser.RULE_attribute_target);
    try {
        this.state = 2406;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ABSTRACT:
        case CSharpParser.AS:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BREAK:
        case CSharpParser.BYTE:
        case CSharpParser.CASE:
        case CSharpParser.CATCH:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.CLASS:
        case CSharpParser.CONST:
        case CSharpParser.CONTINUE:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DO:
        case CSharpParser.DOUBLE:
        case CSharpParser.ELSE:
        case CSharpParser.ENUM:
        case CSharpParser.EVENT:
        case CSharpParser.EXPLICIT:
        case CSharpParser.EXTERN:
        case CSharpParser.FALSE:
        case CSharpParser.FINALLY:
        case CSharpParser.FIXED:
        case CSharpParser.FLOAT:
        case CSharpParser.FOR:
        case CSharpParser.FOREACH:
        case CSharpParser.GOTO:
        case CSharpParser.IF:
        case CSharpParser.IMPLICIT:
        case CSharpParser.IN:
        case CSharpParser.INT:
        case CSharpParser.INTERFACE:
        case CSharpParser.INTERNAL:
        case CSharpParser.IS:
        case CSharpParser.LOCK:
        case CSharpParser.LONG:
        case CSharpParser.NAMESPACE:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.OPERATOR:
        case CSharpParser.OUT:
        case CSharpParser.OVERRIDE:
        case CSharpParser.PARAMS:
        case CSharpParser.PRIVATE:
        case CSharpParser.PROTECTED:
        case CSharpParser.PUBLIC:
        case CSharpParser.READONLY:
        case CSharpParser.REF:
        case CSharpParser.RETURN:
        case CSharpParser.SBYTE:
        case CSharpParser.SEALED:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STACKALLOC:
        case CSharpParser.STATIC:
        case CSharpParser.STRING:
        case CSharpParser.STRUCT:
        case CSharpParser.SWITCH:
        case CSharpParser.THIS:
        case CSharpParser.THROW:
        case CSharpParser.TRUE:
        case CSharpParser.TRY:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.UNSAFE:
        case CSharpParser.USHORT:
        case CSharpParser.USING:
        case CSharpParser.VIRTUAL:
        case CSharpParser.VOID:
        case CSharpParser.VOLATILE:
        case CSharpParser.WHILE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2404;
            this.keyword();
            break;
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BY:
        case CSharpParser.DESCENDING:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.NAMEOF:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 2405;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_attribute_list;
    return this;
}

Attribute_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_listContext.prototype.constructor = Attribute_listContext;

Attribute_listContext.prototype.attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeContext);
    } else {
        return this.getTypedRuleContext(AttributeContext,i);
    }
};

Attribute_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAttribute_list(this);
	}
};

Attribute_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAttribute_list(this);
	}
};




CSharpParser.Attribute_listContext = Attribute_listContext;

CSharpParser.prototype.attribute_list = function() {

    var localctx = new Attribute_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, CSharpParser.RULE_attribute_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2408;
        this.attribute();
        this.state = 2413;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,241,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2409;
                this.match(CSharpParser.COMMA);
                this.state = 2410;
                this.attribute(); 
            }
            this.state = 2415;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,241,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_attribute;
    return this;
}

AttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeContext.prototype.constructor = AttributeContext;

AttributeContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};

AttributeContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

AttributeContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

AttributeContext.prototype.attribute_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_argumentContext);
    } else {
        return this.getTypedRuleContext(Attribute_argumentContext,i);
    }
};

AttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAttribute(this);
	}
};

AttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAttribute(this);
	}
};




CSharpParser.AttributeContext = AttributeContext;

CSharpParser.prototype.attribute = function() {

    var localctx = new AttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, CSharpParser.RULE_attribute);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2416;
        this.namespace_or_type_name();
        this.state = 2429;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_PARENS) {
            this.state = 2417;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 2426;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
                this.state = 2418;
                this.attribute_argument();
                this.state = 2423;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===CSharpParser.COMMA) {
                    this.state = 2419;
                    this.match(CSharpParser.COMMA);
                    this.state = 2420;
                    this.attribute_argument();
                    this.state = 2425;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 2428;
            this.match(CSharpParser.CLOSE_PARENS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_attribute_argument;
    return this;
}

Attribute_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_argumentContext.prototype.constructor = Attribute_argumentContext;

Attribute_argumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Attribute_argumentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Attribute_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAttribute_argument(this);
	}
};

Attribute_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAttribute_argument(this);
	}
};




CSharpParser.Attribute_argumentContext = Attribute_argumentContext;

CSharpParser.prototype.attribute_argument = function() {

    var localctx = new Attribute_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, CSharpParser.RULE_attribute_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2434;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
        if(la_===1) {
            this.state = 2431;
            this.identifier();
            this.state = 2432;
            this.match(CSharpParser.COLON);

        }
        this.state = 2436;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pointer_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_pointer_type;
    return this;
}

Pointer_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pointer_typeContext.prototype.constructor = Pointer_typeContext;

Pointer_typeContext.prototype.simple_type = function() {
    return this.getTypedRuleContext(Simple_typeContext,0);
};

Pointer_typeContext.prototype.class_type = function() {
    return this.getTypedRuleContext(Class_typeContext,0);
};

Pointer_typeContext.prototype.rank_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rank_specifierContext);
    } else {
        return this.getTypedRuleContext(Rank_specifierContext,i);
    }
};

Pointer_typeContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};

Pointer_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterPointer_type(this);
	}
};

Pointer_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitPointer_type(this);
	}
};




CSharpParser.Pointer_typeContext = Pointer_typeContext;

CSharpParser.prototype.pointer_type = function() {

    var localctx = new Pointer_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, CSharpParser.RULE_pointer_type);
    var _la = 0; // Token type
    try {
        this.state = 2453;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.DECIMAL:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.STRING:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 2440;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.BOOL:
            case CSharpParser.BYTE:
            case CSharpParser.CHAR:
            case CSharpParser.DECIMAL:
            case CSharpParser.DOUBLE:
            case CSharpParser.FLOAT:
            case CSharpParser.INT:
            case CSharpParser.LONG:
            case CSharpParser.SBYTE:
            case CSharpParser.SHORT:
            case CSharpParser.UINT:
            case CSharpParser.ULONG:
            case CSharpParser.USHORT:
                this.state = 2438;
                this.simple_type();
                break;
            case CSharpParser.ADD:
            case CSharpParser.ALIAS:
            case CSharpParser.ARGLIST:
            case CSharpParser.ASCENDING:
            case CSharpParser.ASYNC:
            case CSharpParser.AWAIT:
            case CSharpParser.BY:
            case CSharpParser.DESCENDING:
            case CSharpParser.DYNAMIC:
            case CSharpParser.EQUALS:
            case CSharpParser.FROM:
            case CSharpParser.GET:
            case CSharpParser.GROUP:
            case CSharpParser.INTO:
            case CSharpParser.JOIN:
            case CSharpParser.LET:
            case CSharpParser.NAMEOF:
            case CSharpParser.OBJECT:
            case CSharpParser.ON:
            case CSharpParser.ORDERBY:
            case CSharpParser.PARTIAL:
            case CSharpParser.REMOVE:
            case CSharpParser.SELECT:
            case CSharpParser.SET:
            case CSharpParser.STRING:
            case CSharpParser.VAR:
            case CSharpParser.WHEN:
            case CSharpParser.WHERE:
            case CSharpParser.YIELD:
            case CSharpParser.IDENTIFIER:
                this.state = 2439;
                this.class_type();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2446;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CSharpParser.OPEN_BRACKET || _la===CSharpParser.INTERR) {
                this.state = 2444;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CSharpParser.OPEN_BRACKET:
                    this.state = 2442;
                    this.rank_specifier();
                    break;
                case CSharpParser.INTERR:
                    this.state = 2443;
                    this.match(CSharpParser.INTERR);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2448;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2449;
            this.match(CSharpParser.STAR);
            break;
        case CSharpParser.VOID:
            this.enterOuterAlt(localctx, 2);
            this.state = 2451;
            this.match(CSharpParser.VOID);
            this.state = 2452;
            this.match(CSharpParser.STAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fixed_pointer_declaratorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_fixed_pointer_declarators;
    return this;
}

Fixed_pointer_declaratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fixed_pointer_declaratorsContext.prototype.constructor = Fixed_pointer_declaratorsContext;

Fixed_pointer_declaratorsContext.prototype.fixed_pointer_declarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Fixed_pointer_declaratorContext);
    } else {
        return this.getTypedRuleContext(Fixed_pointer_declaratorContext,i);
    }
};

Fixed_pointer_declaratorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixed_pointer_declarators(this);
	}
};

Fixed_pointer_declaratorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixed_pointer_declarators(this);
	}
};




CSharpParser.Fixed_pointer_declaratorsContext = Fixed_pointer_declaratorsContext;

CSharpParser.prototype.fixed_pointer_declarators = function() {

    var localctx = new Fixed_pointer_declaratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, CSharpParser.RULE_fixed_pointer_declarators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2455;
        this.fixed_pointer_declarator();
        this.state = 2460;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 2456;
            this.match(CSharpParser.COMMA);
            this.state = 2457;
            this.fixed_pointer_declarator();
            this.state = 2462;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fixed_pointer_declaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_fixed_pointer_declarator;
    return this;
}

Fixed_pointer_declaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fixed_pointer_declaratorContext.prototype.constructor = Fixed_pointer_declaratorContext;

Fixed_pointer_declaratorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Fixed_pointer_declaratorContext.prototype.fixed_pointer_initializer = function() {
    return this.getTypedRuleContext(Fixed_pointer_initializerContext,0);
};

Fixed_pointer_declaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixed_pointer_declarator(this);
	}
};

Fixed_pointer_declaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixed_pointer_declarator(this);
	}
};




CSharpParser.Fixed_pointer_declaratorContext = Fixed_pointer_declaratorContext;

CSharpParser.prototype.fixed_pointer_declarator = function() {

    var localctx = new Fixed_pointer_declaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, CSharpParser.RULE_fixed_pointer_declarator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2463;
        this.identifier();
        this.state = 2464;
        this.match(CSharpParser.ASSIGNMENT);
        this.state = 2465;
        this.fixed_pointer_initializer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fixed_pointer_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_fixed_pointer_initializer;
    return this;
}

Fixed_pointer_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fixed_pointer_initializerContext.prototype.constructor = Fixed_pointer_initializerContext;

Fixed_pointer_initializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Fixed_pointer_initializerContext.prototype.local_variable_initializer_unsafe = function() {
    return this.getTypedRuleContext(Local_variable_initializer_unsafeContext,0);
};

Fixed_pointer_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixed_pointer_initializer(this);
	}
};

Fixed_pointer_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixed_pointer_initializer(this);
	}
};




CSharpParser.Fixed_pointer_initializerContext = Fixed_pointer_initializerContext;

CSharpParser.prototype.fixed_pointer_initializer = function() {

    var localctx = new Fixed_pointer_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, CSharpParser.RULE_fixed_pointer_initializer);
    try {
        this.state = 2472;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 2468;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
            if(la_===1) {
                this.state = 2467;
                this.match(CSharpParser.AMP);

            }
            this.state = 2470;
            this.expression();
            break;
        case CSharpParser.STACKALLOC:
            this.enterOuterAlt(localctx, 2);
            this.state = 2471;
            this.local_variable_initializer_unsafe();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fixed_size_buffer_declaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_fixed_size_buffer_declarator;
    return this;
}

Fixed_size_buffer_declaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fixed_size_buffer_declaratorContext.prototype.constructor = Fixed_size_buffer_declaratorContext;

Fixed_size_buffer_declaratorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Fixed_size_buffer_declaratorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Fixed_size_buffer_declaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixed_size_buffer_declarator(this);
	}
};

Fixed_size_buffer_declaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixed_size_buffer_declarator(this);
	}
};




CSharpParser.Fixed_size_buffer_declaratorContext = Fixed_size_buffer_declaratorContext;

CSharpParser.prototype.fixed_size_buffer_declarator = function() {

    var localctx = new Fixed_size_buffer_declaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, CSharpParser.RULE_fixed_size_buffer_declarator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2474;
        this.identifier();
        this.state = 2475;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 2476;
        this.expression();
        this.state = 2477;
        this.match(CSharpParser.CLOSE_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_variable_initializer_unsafeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_local_variable_initializer_unsafe;
    return this;
}

Local_variable_initializer_unsafeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_variable_initializer_unsafeContext.prototype.constructor = Local_variable_initializer_unsafeContext;

Local_variable_initializer_unsafeContext.prototype.STACKALLOC = function() {
    return this.getToken(CSharpParser.STACKALLOC, 0);
};

Local_variable_initializer_unsafeContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Local_variable_initializer_unsafeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Local_variable_initializer_unsafeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLocal_variable_initializer_unsafe(this);
	}
};

Local_variable_initializer_unsafeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLocal_variable_initializer_unsafe(this);
	}
};




CSharpParser.Local_variable_initializer_unsafeContext = Local_variable_initializer_unsafeContext;

CSharpParser.prototype.local_variable_initializer_unsafe = function() {

    var localctx = new Local_variable_initializer_unsafeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, CSharpParser.RULE_local_variable_initializer_unsafe);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2479;
        this.match(CSharpParser.STACKALLOC);
        this.state = 2480;
        this.var_type();
        this.state = 2481;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 2482;
        this.expression();
        this.state = 2483;
        this.match(CSharpParser.CLOSE_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Right_arrowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_right_arrow;
    this.first = null; // Token
    this.second = null; // Token
    return this;
}

Right_arrowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Right_arrowContext.prototype.constructor = Right_arrowContext;


Right_arrowContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterRight_arrow(this);
	}
};

Right_arrowContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitRight_arrow(this);
	}
};




CSharpParser.Right_arrowContext = Right_arrowContext;

CSharpParser.prototype.right_arrow = function() {

    var localctx = new Right_arrowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, CSharpParser.RULE_right_arrow);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2485;
        localctx.first = this.match(CSharpParser.ASSIGNMENT);
        this.state = 2486;
        localctx.second = this.match(CSharpParser.GT);
        this.state = 2487;
        if (!( (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex))) {
            throw new antlr4.error.FailedPredicateException(this, "$first.index + 1 == $second.index");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Right_shiftContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_right_shift;
    this.first = null; // Token
    this.second = null; // Token
    return this;
}

Right_shiftContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Right_shiftContext.prototype.constructor = Right_shiftContext;


Right_shiftContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterRight_shift(this);
	}
};

Right_shiftContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitRight_shift(this);
	}
};




CSharpParser.Right_shiftContext = Right_shiftContext;

CSharpParser.prototype.right_shift = function() {

    var localctx = new Right_shiftContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, CSharpParser.RULE_right_shift);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2489;
        localctx.first = this.match(CSharpParser.GT);
        this.state = 2490;
        localctx.second = this.match(CSharpParser.GT);
        this.state = 2491;
        if (!( (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex))) {
            throw new antlr4.error.FailedPredicateException(this, "$first.index + 1 == $second.index");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Right_shift_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_right_shift_assignment;
    this.first = null; // Token
    this.second = null; // Token
    return this;
}

Right_shift_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Right_shift_assignmentContext.prototype.constructor = Right_shift_assignmentContext;


Right_shift_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterRight_shift_assignment(this);
	}
};

Right_shift_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitRight_shift_assignment(this);
	}
};




CSharpParser.Right_shift_assignmentContext = Right_shift_assignmentContext;

CSharpParser.prototype.right_shift_assignment = function() {

    var localctx = new Right_shift_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, CSharpParser.RULE_right_shift_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2493;
        localctx.first = this.match(CSharpParser.GT);
        this.state = 2494;
        localctx.second = this.match(CSharpParser.OP_GE);
        this.state = 2495;
        if (!( (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex))) {
            throw new antlr4.error.FailedPredicateException(this, "$first.index + 1 == $second.index");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.boolean_literal = function() {
    return this.getTypedRuleContext(Boolean_literalContext,0);
};

LiteralContext.prototype.string_literal = function() {
    return this.getTypedRuleContext(String_literalContext,0);
};

LiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(CSharpParser.INTEGER_LITERAL, 0);
};

LiteralContext.prototype.HEX_INTEGER_LITERAL = function() {
    return this.getToken(CSharpParser.HEX_INTEGER_LITERAL, 0);
};

LiteralContext.prototype.REAL_LITERAL = function() {
    return this.getToken(CSharpParser.REAL_LITERAL, 0);
};

LiteralContext.prototype.CHARACTER_LITERAL = function() {
    return this.getToken(CSharpParser.CHARACTER_LITERAL, 0);
};

LiteralContext.prototype.NULL = function() {
    return this.getToken(CSharpParser.NULL, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLiteral(this);
	}
};




CSharpParser.LiteralContext = LiteralContext;

CSharpParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, CSharpParser.RULE_literal);
    try {
        this.state = 2504;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.FALSE:
        case CSharpParser.TRUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2497;
            this.boolean_literal();
            break;
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
            this.enterOuterAlt(localctx, 2);
            this.state = 2498;
            this.string_literal();
            break;
        case CSharpParser.INTEGER_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 2499;
            this.match(CSharpParser.INTEGER_LITERAL);
            break;
        case CSharpParser.HEX_INTEGER_LITERAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 2500;
            this.match(CSharpParser.HEX_INTEGER_LITERAL);
            break;
        case CSharpParser.REAL_LITERAL:
            this.enterOuterAlt(localctx, 5);
            this.state = 2501;
            this.match(CSharpParser.REAL_LITERAL);
            break;
        case CSharpParser.CHARACTER_LITERAL:
            this.enterOuterAlt(localctx, 6);
            this.state = 2502;
            this.match(CSharpParser.CHARACTER_LITERAL);
            break;
        case CSharpParser.NULL:
            this.enterOuterAlt(localctx, 7);
            this.state = 2503;
            this.match(CSharpParser.NULL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_boolean_literal;
    return this;
}

Boolean_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_literalContext.prototype.constructor = Boolean_literalContext;

Boolean_literalContext.prototype.TRUE = function() {
    return this.getToken(CSharpParser.TRUE, 0);
};

Boolean_literalContext.prototype.FALSE = function() {
    return this.getToken(CSharpParser.FALSE, 0);
};

Boolean_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBoolean_literal(this);
	}
};

Boolean_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBoolean_literal(this);
	}
};




CSharpParser.Boolean_literalContext = Boolean_literalContext;

CSharpParser.prototype.boolean_literal = function() {

    var localctx = new Boolean_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, CSharpParser.RULE_boolean_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2506;
        _la = this._input.LA(1);
        if(!(_la===CSharpParser.FALSE || _la===CSharpParser.TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function String_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_string_literal;
    return this;
}

String_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_literalContext.prototype.constructor = String_literalContext;

String_literalContext.prototype.interpolated_regular_string = function() {
    return this.getTypedRuleContext(Interpolated_regular_stringContext,0);
};

String_literalContext.prototype.interpolated_verbatium_string = function() {
    return this.getTypedRuleContext(Interpolated_verbatium_stringContext,0);
};

String_literalContext.prototype.REGULAR_STRING = function() {
    return this.getToken(CSharpParser.REGULAR_STRING, 0);
};

String_literalContext.prototype.VERBATIUM_STRING = function() {
    return this.getToken(CSharpParser.VERBATIUM_STRING, 0);
};

String_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterString_literal(this);
	}
};

String_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitString_literal(this);
	}
};




CSharpParser.String_literalContext = String_literalContext;

CSharpParser.prototype.string_literal = function() {

    var localctx = new String_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, CSharpParser.RULE_string_literal);
    try {
        this.state = 2512;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
            this.enterOuterAlt(localctx, 1);
            this.state = 2508;
            this.interpolated_regular_string();
            break;
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
            this.enterOuterAlt(localctx, 2);
            this.state = 2509;
            this.interpolated_verbatium_string();
            break;
        case CSharpParser.REGULAR_STRING:
            this.enterOuterAlt(localctx, 3);
            this.state = 2510;
            this.match(CSharpParser.REGULAR_STRING);
            break;
        case CSharpParser.VERBATIUM_STRING:
            this.enterOuterAlt(localctx, 4);
            this.state = 2511;
            this.match(CSharpParser.VERBATIUM_STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interpolated_regular_stringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interpolated_regular_string;
    return this;
}

Interpolated_regular_stringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interpolated_regular_stringContext.prototype.constructor = Interpolated_regular_stringContext;

Interpolated_regular_stringContext.prototype.INTERPOLATED_REGULAR_STRING_START = function() {
    return this.getToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0);
};

Interpolated_regular_stringContext.prototype.DOUBLE_QUOTE_INSIDE = function() {
    return this.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0);
};

Interpolated_regular_stringContext.prototype.interpolated_regular_string_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interpolated_regular_string_partContext);
    } else {
        return this.getTypedRuleContext(Interpolated_regular_string_partContext,i);
    }
};

Interpolated_regular_stringContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterpolated_regular_string(this);
	}
};

Interpolated_regular_stringContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterpolated_regular_string(this);
	}
};




CSharpParser.Interpolated_regular_stringContext = Interpolated_regular_stringContext;

CSharpParser.prototype.interpolated_regular_string = function() {

    var localctx = new Interpolated_regular_stringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, CSharpParser.RULE_interpolated_regular_string);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2514;
        this.match(CSharpParser.INTERPOLATED_REGULAR_STRING_START);
        this.state = 2518;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (CSharpParser.DOUBLE_CURLY_INSIDE - 167)) | (1 << (CSharpParser.REGULAR_CHAR_INSIDE - 167)) | (1 << (CSharpParser.REGULAR_STRING_INSIDE - 167)))) !== 0)) {
            this.state = 2515;
            this.interpolated_regular_string_part();
            this.state = 2520;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2521;
        this.match(CSharpParser.DOUBLE_QUOTE_INSIDE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interpolated_verbatium_stringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interpolated_verbatium_string;
    return this;
}

Interpolated_verbatium_stringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interpolated_verbatium_stringContext.prototype.constructor = Interpolated_verbatium_stringContext;

Interpolated_verbatium_stringContext.prototype.INTERPOLATED_VERBATIUM_STRING_START = function() {
    return this.getToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0);
};

Interpolated_verbatium_stringContext.prototype.DOUBLE_QUOTE_INSIDE = function() {
    return this.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0);
};

Interpolated_verbatium_stringContext.prototype.interpolated_verbatium_string_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interpolated_verbatium_string_partContext);
    } else {
        return this.getTypedRuleContext(Interpolated_verbatium_string_partContext,i);
    }
};

Interpolated_verbatium_stringContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterpolated_verbatium_string(this);
	}
};

Interpolated_verbatium_stringContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterpolated_verbatium_string(this);
	}
};




CSharpParser.Interpolated_verbatium_stringContext = Interpolated_verbatium_stringContext;

CSharpParser.prototype.interpolated_verbatium_string = function() {

    var localctx = new Interpolated_verbatium_stringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, CSharpParser.RULE_interpolated_verbatium_string);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2523;
        this.match(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START);
        this.state = 2527;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (CSharpParser.DOUBLE_CURLY_INSIDE - 167)) | (1 << (CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE - 167)) | (1 << (CSharpParser.VERBATIUM_INSIDE_STRING - 167)))) !== 0)) {
            this.state = 2524;
            this.interpolated_verbatium_string_part();
            this.state = 2529;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2530;
        this.match(CSharpParser.DOUBLE_QUOTE_INSIDE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interpolated_regular_string_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interpolated_regular_string_part;
    return this;
}

Interpolated_regular_string_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interpolated_regular_string_partContext.prototype.constructor = Interpolated_regular_string_partContext;

Interpolated_regular_string_partContext.prototype.interpolated_string_expression = function() {
    return this.getTypedRuleContext(Interpolated_string_expressionContext,0);
};

Interpolated_regular_string_partContext.prototype.DOUBLE_CURLY_INSIDE = function() {
    return this.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0);
};

Interpolated_regular_string_partContext.prototype.REGULAR_CHAR_INSIDE = function() {
    return this.getToken(CSharpParser.REGULAR_CHAR_INSIDE, 0);
};

Interpolated_regular_string_partContext.prototype.REGULAR_STRING_INSIDE = function() {
    return this.getToken(CSharpParser.REGULAR_STRING_INSIDE, 0);
};

Interpolated_regular_string_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterpolated_regular_string_part(this);
	}
};

Interpolated_regular_string_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterpolated_regular_string_part(this);
	}
};




CSharpParser.Interpolated_regular_string_partContext = Interpolated_regular_string_partContext;

CSharpParser.prototype.interpolated_regular_string_part = function() {

    var localctx = new Interpolated_regular_string_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, CSharpParser.RULE_interpolated_regular_string_part);
    try {
        this.state = 2536;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 2532;
            this.interpolated_string_expression();
            break;
        case CSharpParser.DOUBLE_CURLY_INSIDE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2533;
            this.match(CSharpParser.DOUBLE_CURLY_INSIDE);
            break;
        case CSharpParser.REGULAR_CHAR_INSIDE:
            this.enterOuterAlt(localctx, 3);
            this.state = 2534;
            this.match(CSharpParser.REGULAR_CHAR_INSIDE);
            break;
        case CSharpParser.REGULAR_STRING_INSIDE:
            this.enterOuterAlt(localctx, 4);
            this.state = 2535;
            this.match(CSharpParser.REGULAR_STRING_INSIDE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interpolated_verbatium_string_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interpolated_verbatium_string_part;
    return this;
}

Interpolated_verbatium_string_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interpolated_verbatium_string_partContext.prototype.constructor = Interpolated_verbatium_string_partContext;

Interpolated_verbatium_string_partContext.prototype.interpolated_string_expression = function() {
    return this.getTypedRuleContext(Interpolated_string_expressionContext,0);
};

Interpolated_verbatium_string_partContext.prototype.DOUBLE_CURLY_INSIDE = function() {
    return this.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0);
};

Interpolated_verbatium_string_partContext.prototype.VERBATIUM_DOUBLE_QUOTE_INSIDE = function() {
    return this.getToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0);
};

Interpolated_verbatium_string_partContext.prototype.VERBATIUM_INSIDE_STRING = function() {
    return this.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0);
};

Interpolated_verbatium_string_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterpolated_verbatium_string_part(this);
	}
};

Interpolated_verbatium_string_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterpolated_verbatium_string_part(this);
	}
};




CSharpParser.Interpolated_verbatium_string_partContext = Interpolated_verbatium_string_partContext;

CSharpParser.prototype.interpolated_verbatium_string_part = function() {

    var localctx = new Interpolated_verbatium_string_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, CSharpParser.RULE_interpolated_verbatium_string_part);
    try {
        this.state = 2542;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 2538;
            this.interpolated_string_expression();
            break;
        case CSharpParser.DOUBLE_CURLY_INSIDE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2539;
            this.match(CSharpParser.DOUBLE_CURLY_INSIDE);
            break;
        case CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE:
            this.enterOuterAlt(localctx, 3);
            this.state = 2540;
            this.match(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE);
            break;
        case CSharpParser.VERBATIUM_INSIDE_STRING:
            this.enterOuterAlt(localctx, 4);
            this.state = 2541;
            this.match(CSharpParser.VERBATIUM_INSIDE_STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interpolated_string_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interpolated_string_expression;
    return this;
}

Interpolated_string_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interpolated_string_expressionContext.prototype.constructor = Interpolated_string_expressionContext;

Interpolated_string_expressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Interpolated_string_expressionContext.prototype.FORMAT_STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.FORMAT_STRING);
    } else {
        return this.getToken(CSharpParser.FORMAT_STRING, i);
    }
};


Interpolated_string_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterpolated_string_expression(this);
	}
};

Interpolated_string_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterpolated_string_expression(this);
	}
};




CSharpParser.Interpolated_string_expressionContext = Interpolated_string_expressionContext;

CSharpParser.prototype.interpolated_string_expression = function() {

    var localctx = new Interpolated_string_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, CSharpParser.RULE_interpolated_string_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2544;
        this.expression();
        this.state = 2549;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 2545;
            this.match(CSharpParser.COMMA);
            this.state = 2546;
            this.expression();
            this.state = 2551;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COLON) {
            this.state = 2552;
            this.match(CSharpParser.COLON);
            this.state = 2554; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2553;
                this.match(CSharpParser.FORMAT_STRING);
                this.state = 2556; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===CSharpParser.FORMAT_STRING);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.ABSTRACT = function() {
    return this.getToken(CSharpParser.ABSTRACT, 0);
};

KeywordContext.prototype.AS = function() {
    return this.getToken(CSharpParser.AS, 0);
};

KeywordContext.prototype.BASE = function() {
    return this.getToken(CSharpParser.BASE, 0);
};

KeywordContext.prototype.BOOL = function() {
    return this.getToken(CSharpParser.BOOL, 0);
};

KeywordContext.prototype.BREAK = function() {
    return this.getToken(CSharpParser.BREAK, 0);
};

KeywordContext.prototype.BYTE = function() {
    return this.getToken(CSharpParser.BYTE, 0);
};

KeywordContext.prototype.CASE = function() {
    return this.getToken(CSharpParser.CASE, 0);
};

KeywordContext.prototype.CATCH = function() {
    return this.getToken(CSharpParser.CATCH, 0);
};

KeywordContext.prototype.CHAR = function() {
    return this.getToken(CSharpParser.CHAR, 0);
};

KeywordContext.prototype.CHECKED = function() {
    return this.getToken(CSharpParser.CHECKED, 0);
};

KeywordContext.prototype.CLASS = function() {
    return this.getToken(CSharpParser.CLASS, 0);
};

KeywordContext.prototype.CONST = function() {
    return this.getToken(CSharpParser.CONST, 0);
};

KeywordContext.prototype.CONTINUE = function() {
    return this.getToken(CSharpParser.CONTINUE, 0);
};

KeywordContext.prototype.DECIMAL = function() {
    return this.getToken(CSharpParser.DECIMAL, 0);
};

KeywordContext.prototype.DEFAULT = function() {
    return this.getToken(CSharpParser.DEFAULT, 0);
};

KeywordContext.prototype.DELEGATE = function() {
    return this.getToken(CSharpParser.DELEGATE, 0);
};

KeywordContext.prototype.DO = function() {
    return this.getToken(CSharpParser.DO, 0);
};

KeywordContext.prototype.DOUBLE = function() {
    return this.getToken(CSharpParser.DOUBLE, 0);
};

KeywordContext.prototype.ELSE = function() {
    return this.getToken(CSharpParser.ELSE, 0);
};

KeywordContext.prototype.ENUM = function() {
    return this.getToken(CSharpParser.ENUM, 0);
};

KeywordContext.prototype.EVENT = function() {
    return this.getToken(CSharpParser.EVENT, 0);
};

KeywordContext.prototype.EXPLICIT = function() {
    return this.getToken(CSharpParser.EXPLICIT, 0);
};

KeywordContext.prototype.EXTERN = function() {
    return this.getToken(CSharpParser.EXTERN, 0);
};

KeywordContext.prototype.FALSE = function() {
    return this.getToken(CSharpParser.FALSE, 0);
};

KeywordContext.prototype.FINALLY = function() {
    return this.getToken(CSharpParser.FINALLY, 0);
};

KeywordContext.prototype.FIXED = function() {
    return this.getToken(CSharpParser.FIXED, 0);
};

KeywordContext.prototype.FLOAT = function() {
    return this.getToken(CSharpParser.FLOAT, 0);
};

KeywordContext.prototype.FOR = function() {
    return this.getToken(CSharpParser.FOR, 0);
};

KeywordContext.prototype.FOREACH = function() {
    return this.getToken(CSharpParser.FOREACH, 0);
};

KeywordContext.prototype.GOTO = function() {
    return this.getToken(CSharpParser.GOTO, 0);
};

KeywordContext.prototype.IF = function() {
    return this.getToken(CSharpParser.IF, 0);
};

KeywordContext.prototype.IMPLICIT = function() {
    return this.getToken(CSharpParser.IMPLICIT, 0);
};

KeywordContext.prototype.IN = function() {
    return this.getToken(CSharpParser.IN, 0);
};

KeywordContext.prototype.INT = function() {
    return this.getToken(CSharpParser.INT, 0);
};

KeywordContext.prototype.INTERFACE = function() {
    return this.getToken(CSharpParser.INTERFACE, 0);
};

KeywordContext.prototype.INTERNAL = function() {
    return this.getToken(CSharpParser.INTERNAL, 0);
};

KeywordContext.prototype.IS = function() {
    return this.getToken(CSharpParser.IS, 0);
};

KeywordContext.prototype.LOCK = function() {
    return this.getToken(CSharpParser.LOCK, 0);
};

KeywordContext.prototype.LONG = function() {
    return this.getToken(CSharpParser.LONG, 0);
};

KeywordContext.prototype.NAMESPACE = function() {
    return this.getToken(CSharpParser.NAMESPACE, 0);
};

KeywordContext.prototype.NEW = function() {
    return this.getToken(CSharpParser.NEW, 0);
};

KeywordContext.prototype.NULL = function() {
    return this.getToken(CSharpParser.NULL, 0);
};

KeywordContext.prototype.OBJECT = function() {
    return this.getToken(CSharpParser.OBJECT, 0);
};

KeywordContext.prototype.OPERATOR = function() {
    return this.getToken(CSharpParser.OPERATOR, 0);
};

KeywordContext.prototype.OUT = function() {
    return this.getToken(CSharpParser.OUT, 0);
};

KeywordContext.prototype.OVERRIDE = function() {
    return this.getToken(CSharpParser.OVERRIDE, 0);
};

KeywordContext.prototype.PARAMS = function() {
    return this.getToken(CSharpParser.PARAMS, 0);
};

KeywordContext.prototype.PRIVATE = function() {
    return this.getToken(CSharpParser.PRIVATE, 0);
};

KeywordContext.prototype.PROTECTED = function() {
    return this.getToken(CSharpParser.PROTECTED, 0);
};

KeywordContext.prototype.PUBLIC = function() {
    return this.getToken(CSharpParser.PUBLIC, 0);
};

KeywordContext.prototype.READONLY = function() {
    return this.getToken(CSharpParser.READONLY, 0);
};

KeywordContext.prototype.REF = function() {
    return this.getToken(CSharpParser.REF, 0);
};

KeywordContext.prototype.RETURN = function() {
    return this.getToken(CSharpParser.RETURN, 0);
};

KeywordContext.prototype.SBYTE = function() {
    return this.getToken(CSharpParser.SBYTE, 0);
};

KeywordContext.prototype.SEALED = function() {
    return this.getToken(CSharpParser.SEALED, 0);
};

KeywordContext.prototype.SHORT = function() {
    return this.getToken(CSharpParser.SHORT, 0);
};

KeywordContext.prototype.SIZEOF = function() {
    return this.getToken(CSharpParser.SIZEOF, 0);
};

KeywordContext.prototype.STACKALLOC = function() {
    return this.getToken(CSharpParser.STACKALLOC, 0);
};

KeywordContext.prototype.STATIC = function() {
    return this.getToken(CSharpParser.STATIC, 0);
};

KeywordContext.prototype.STRING = function() {
    return this.getToken(CSharpParser.STRING, 0);
};

KeywordContext.prototype.STRUCT = function() {
    return this.getToken(CSharpParser.STRUCT, 0);
};

KeywordContext.prototype.SWITCH = function() {
    return this.getToken(CSharpParser.SWITCH, 0);
};

KeywordContext.prototype.THIS = function() {
    return this.getToken(CSharpParser.THIS, 0);
};

KeywordContext.prototype.THROW = function() {
    return this.getToken(CSharpParser.THROW, 0);
};

KeywordContext.prototype.TRUE = function() {
    return this.getToken(CSharpParser.TRUE, 0);
};

KeywordContext.prototype.TRY = function() {
    return this.getToken(CSharpParser.TRY, 0);
};

KeywordContext.prototype.TYPEOF = function() {
    return this.getToken(CSharpParser.TYPEOF, 0);
};

KeywordContext.prototype.UINT = function() {
    return this.getToken(CSharpParser.UINT, 0);
};

KeywordContext.prototype.ULONG = function() {
    return this.getToken(CSharpParser.ULONG, 0);
};

KeywordContext.prototype.UNCHECKED = function() {
    return this.getToken(CSharpParser.UNCHECKED, 0);
};

KeywordContext.prototype.UNSAFE = function() {
    return this.getToken(CSharpParser.UNSAFE, 0);
};

KeywordContext.prototype.USHORT = function() {
    return this.getToken(CSharpParser.USHORT, 0);
};

KeywordContext.prototype.USING = function() {
    return this.getToken(CSharpParser.USING, 0);
};

KeywordContext.prototype.VIRTUAL = function() {
    return this.getToken(CSharpParser.VIRTUAL, 0);
};

KeywordContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};

KeywordContext.prototype.VOLATILE = function() {
    return this.getToken(CSharpParser.VOLATILE, 0);
};

KeywordContext.prototype.WHILE = function() {
    return this.getToken(CSharpParser.WHILE, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitKeyword(this);
	}
};




CSharpParser.KeywordContext = KeywordContext;

CSharpParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, CSharpParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2560;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.AS) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BREAK) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CASE) | (1 << CSharpParser.CATCH) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.CONST) | (1 << CSharpParser.CONTINUE) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DO - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.ELSE - 32)) | (1 << (CSharpParser.ENUM - 32)) | (1 << (CSharpParser.EVENT - 32)) | (1 << (CSharpParser.EXPLICIT - 32)) | (1 << (CSharpParser.EXTERN - 32)) | (1 << (CSharpParser.FALSE - 32)) | (1 << (CSharpParser.FINALLY - 32)) | (1 << (CSharpParser.FIXED - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FOR - 32)) | (1 << (CSharpParser.FOREACH - 32)) | (1 << (CSharpParser.GOTO - 32)) | (1 << (CSharpParser.IF - 32)) | (1 << (CSharpParser.IMPLICIT - 32)) | (1 << (CSharpParser.IN - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTERFACE - 32)) | (1 << (CSharpParser.INTERNAL - 32)) | (1 << (CSharpParser.IS - 32)) | (1 << (CSharpParser.LOCK - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMESPACE - 64)) | (1 << (CSharpParser.NEW - 64)) | (1 << (CSharpParser.NULL - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.OPERATOR - 64)) | (1 << (CSharpParser.OUT - 64)) | (1 << (CSharpParser.OVERRIDE - 64)) | (1 << (CSharpParser.PARAMS - 64)) | (1 << (CSharpParser.PRIVATE - 64)) | (1 << (CSharpParser.PROTECTED - 64)) | (1 << (CSharpParser.PUBLIC - 64)) | (1 << (CSharpParser.READONLY - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.RETURN - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SEALED - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.SIZEOF - 64)) | (1 << (CSharpParser.STACKALLOC - 64)) | (1 << (CSharpParser.STATIC - 64)) | (1 << (CSharpParser.STRING - 64)) | (1 << (CSharpParser.STRUCT - 64)) | (1 << (CSharpParser.SWITCH - 64)) | (1 << (CSharpParser.THIS - 64)) | (1 << (CSharpParser.THROW - 64)) | (1 << (CSharpParser.TRUE - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CSharpParser.TRY - 96)) | (1 << (CSharpParser.TYPEOF - 96)) | (1 << (CSharpParser.UINT - 96)) | (1 << (CSharpParser.ULONG - 96)) | (1 << (CSharpParser.UNCHECKED - 96)) | (1 << (CSharpParser.UNSAFE - 96)) | (1 << (CSharpParser.USHORT - 96)) | (1 << (CSharpParser.USING - 96)) | (1 << (CSharpParser.VIRTUAL - 96)) | (1 << (CSharpParser.VOID - 96)) | (1 << (CSharpParser.VOLATILE - 96)) | (1 << (CSharpParser.WHILE - 96)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_class_definition;
    return this;
}

Class_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_definitionContext.prototype.constructor = Class_definitionContext;

Class_definitionContext.prototype.CLASS = function() {
    return this.getToken(CSharpParser.CLASS, 0);
};

Class_definitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Class_definitionContext.prototype.class_body = function() {
    return this.getTypedRuleContext(Class_bodyContext,0);
};

Class_definitionContext.prototype.type_parameter_list = function() {
    return this.getTypedRuleContext(Type_parameter_listContext,0);
};

Class_definitionContext.prototype.class_base = function() {
    return this.getTypedRuleContext(Class_baseContext,0);
};

Class_definitionContext.prototype.type_parameter_constraints_clauses = function() {
    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
};

Class_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterClass_definition(this);
	}
};

Class_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitClass_definition(this);
	}
};




CSharpParser.Class_definitionContext = Class_definitionContext;

CSharpParser.prototype.class_definition = function() {

    var localctx = new Class_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, CSharpParser.RULE_class_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2562;
        this.match(CSharpParser.CLASS);
        this.state = 2563;
        this.identifier();
        this.state = 2565;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.LT) {
            this.state = 2564;
            this.type_parameter_list();
        }

        this.state = 2568;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COLON) {
            this.state = 2567;
            this.class_base();
        }

        this.state = 2571;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHERE) {
            this.state = 2570;
            this.type_parameter_constraints_clauses();
        }

        this.state = 2573;
        this.class_body();
        this.state = 2575;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.SEMICOLON) {
            this.state = 2574;
            this.match(CSharpParser.SEMICOLON);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Struct_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_struct_definition;
    return this;
}

Struct_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_definitionContext.prototype.constructor = Struct_definitionContext;

Struct_definitionContext.prototype.STRUCT = function() {
    return this.getToken(CSharpParser.STRUCT, 0);
};

Struct_definitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Struct_definitionContext.prototype.struct_body = function() {
    return this.getTypedRuleContext(Struct_bodyContext,0);
};

Struct_definitionContext.prototype.type_parameter_list = function() {
    return this.getTypedRuleContext(Type_parameter_listContext,0);
};

Struct_definitionContext.prototype.struct_interfaces = function() {
    return this.getTypedRuleContext(Struct_interfacesContext,0);
};

Struct_definitionContext.prototype.type_parameter_constraints_clauses = function() {
    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
};

Struct_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterStruct_definition(this);
	}
};

Struct_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitStruct_definition(this);
	}
};




CSharpParser.Struct_definitionContext = Struct_definitionContext;

CSharpParser.prototype.struct_definition = function() {

    var localctx = new Struct_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, CSharpParser.RULE_struct_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2577;
        this.match(CSharpParser.STRUCT);
        this.state = 2578;
        this.identifier();
        this.state = 2580;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.LT) {
            this.state = 2579;
            this.type_parameter_list();
        }

        this.state = 2583;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COLON) {
            this.state = 2582;
            this.struct_interfaces();
        }

        this.state = 2586;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHERE) {
            this.state = 2585;
            this.type_parameter_constraints_clauses();
        }

        this.state = 2588;
        this.struct_body();
        this.state = 2590;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.SEMICOLON) {
            this.state = 2589;
            this.match(CSharpParser.SEMICOLON);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interface_definition;
    return this;
}

Interface_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_definitionContext.prototype.constructor = Interface_definitionContext;

Interface_definitionContext.prototype.INTERFACE = function() {
    return this.getToken(CSharpParser.INTERFACE, 0);
};

Interface_definitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Interface_definitionContext.prototype.interface_body = function() {
    return this.getTypedRuleContext(Interface_bodyContext,0);
};

Interface_definitionContext.prototype.variant_type_parameter_list = function() {
    return this.getTypedRuleContext(Variant_type_parameter_listContext,0);
};

Interface_definitionContext.prototype.interface_base = function() {
    return this.getTypedRuleContext(Interface_baseContext,0);
};

Interface_definitionContext.prototype.type_parameter_constraints_clauses = function() {
    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
};

Interface_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterface_definition(this);
	}
};

Interface_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterface_definition(this);
	}
};




CSharpParser.Interface_definitionContext = Interface_definitionContext;

CSharpParser.prototype.interface_definition = function() {

    var localctx = new Interface_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, CSharpParser.RULE_interface_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2592;
        this.match(CSharpParser.INTERFACE);
        this.state = 2593;
        this.identifier();
        this.state = 2595;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.LT) {
            this.state = 2594;
            this.variant_type_parameter_list();
        }

        this.state = 2598;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COLON) {
            this.state = 2597;
            this.interface_base();
        }

        this.state = 2601;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHERE) {
            this.state = 2600;
            this.type_parameter_constraints_clauses();
        }

        this.state = 2603;
        this.interface_body();
        this.state = 2605;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.SEMICOLON) {
            this.state = 2604;
            this.match(CSharpParser.SEMICOLON);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_enum_definition;
    return this;
}

Enum_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_definitionContext.prototype.constructor = Enum_definitionContext;

Enum_definitionContext.prototype.ENUM = function() {
    return this.getToken(CSharpParser.ENUM, 0);
};

Enum_definitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Enum_definitionContext.prototype.enum_body = function() {
    return this.getTypedRuleContext(Enum_bodyContext,0);
};

Enum_definitionContext.prototype.enum_base = function() {
    return this.getTypedRuleContext(Enum_baseContext,0);
};

Enum_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEnum_definition(this);
	}
};

Enum_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEnum_definition(this);
	}
};




CSharpParser.Enum_definitionContext = Enum_definitionContext;

CSharpParser.prototype.enum_definition = function() {

    var localctx = new Enum_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, CSharpParser.RULE_enum_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2607;
        this.match(CSharpParser.ENUM);
        this.state = 2608;
        this.identifier();
        this.state = 2610;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COLON) {
            this.state = 2609;
            this.enum_base();
        }

        this.state = 2612;
        this.enum_body();
        this.state = 2614;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.SEMICOLON) {
            this.state = 2613;
            this.match(CSharpParser.SEMICOLON);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Delegate_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_delegate_definition;
    return this;
}

Delegate_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delegate_definitionContext.prototype.constructor = Delegate_definitionContext;

Delegate_definitionContext.prototype.DELEGATE = function() {
    return this.getToken(CSharpParser.DELEGATE, 0);
};

Delegate_definitionContext.prototype.return_type = function() {
    return this.getTypedRuleContext(Return_typeContext,0);
};

Delegate_definitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Delegate_definitionContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Delegate_definitionContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Delegate_definitionContext.prototype.variant_type_parameter_list = function() {
    return this.getTypedRuleContext(Variant_type_parameter_listContext,0);
};

Delegate_definitionContext.prototype.formal_parameter_list = function() {
    return this.getTypedRuleContext(Formal_parameter_listContext,0);
};

Delegate_definitionContext.prototype.type_parameter_constraints_clauses = function() {
    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
};

Delegate_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterDelegate_definition(this);
	}
};

Delegate_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitDelegate_definition(this);
	}
};




CSharpParser.Delegate_definitionContext = Delegate_definitionContext;

CSharpParser.prototype.delegate_definition = function() {

    var localctx = new Delegate_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, CSharpParser.RULE_delegate_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2616;
        this.match(CSharpParser.DELEGATE);
        this.state = 2617;
        this.return_type();
        this.state = 2618;
        this.identifier();
        this.state = 2620;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.LT) {
            this.state = 2619;
            this.variant_type_parameter_list();
        }

        this.state = 2622;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 2624;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CSharpParser.OBJECT - 67)) | (1 << (CSharpParser.ON - 67)) | (1 << (CSharpParser.ORDERBY - 67)) | (1 << (CSharpParser.OUT - 67)) | (1 << (CSharpParser.PARAMS - 67)) | (1 << (CSharpParser.PARTIAL - 67)) | (1 << (CSharpParser.REF - 67)) | (1 << (CSharpParser.REMOVE - 67)) | (1 << (CSharpParser.SBYTE - 67)) | (1 << (CSharpParser.SELECT - 67)) | (1 << (CSharpParser.SET - 67)) | (1 << (CSharpParser.SHORT - 67)) | (1 << (CSharpParser.STRING - 67)) | (1 << (CSharpParser.THIS - 67)) | (1 << (CSharpParser.UINT - 67)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)))) !== 0)) {
            this.state = 2623;
            this.formal_parameter_list();
        }

        this.state = 2626;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 2628;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHERE) {
            this.state = 2627;
            this.type_parameter_constraints_clauses();
        }

        this.state = 2630;
        this.match(CSharpParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Event_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_event_declaration;
    return this;
}

Event_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_declarationContext.prototype.constructor = Event_declarationContext;

Event_declarationContext.prototype.EVENT = function() {
    return this.getToken(CSharpParser.EVENT, 0);
};

Event_declarationContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Event_declarationContext.prototype.variable_declarators = function() {
    return this.getTypedRuleContext(Variable_declaratorsContext,0);
};

Event_declarationContext.prototype.member_name = function() {
    return this.getTypedRuleContext(Member_nameContext,0);
};

Event_declarationContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Event_declarationContext.prototype.event_accessor_declarations = function() {
    return this.getTypedRuleContext(Event_accessor_declarationsContext,0);
};

Event_declarationContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Event_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEvent_declaration(this);
	}
};

Event_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEvent_declaration(this);
	}
};




CSharpParser.Event_declarationContext = Event_declarationContext;

CSharpParser.prototype.event_declaration = function() {

    var localctx = new Event_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, CSharpParser.RULE_event_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2632;
        this.match(CSharpParser.EVENT);
        this.state = 2633;
        this.var_type();
        this.state = 2642;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2634;
            this.variable_declarators();
            this.state = 2635;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 2:
            this.state = 2637;
            this.member_name();
            this.state = 2638;
            this.match(CSharpParser.OPEN_BRACE);
            this.state = 2639;
            this.event_accessor_declarations();
            this.state = 2640;
            this.match(CSharpParser.CLOSE_BRACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_field_declaration;
    return this;
}

Field_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_declarationContext.prototype.constructor = Field_declarationContext;

Field_declarationContext.prototype.variable_declarators = function() {
    return this.getTypedRuleContext(Variable_declaratorsContext,0);
};

Field_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterField_declaration(this);
	}
};

Field_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitField_declaration(this);
	}
};




CSharpParser.Field_declarationContext = Field_declarationContext;

CSharpParser.prototype.field_declaration = function() {

    var localctx = new Field_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, CSharpParser.RULE_field_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2644;
        this.variable_declarators();
        this.state = 2645;
        this.match(CSharpParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Property_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_property_declaration;
    return this;
}

Property_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Property_declarationContext.prototype.constructor = Property_declarationContext;

Property_declarationContext.prototype.member_name = function() {
    return this.getTypedRuleContext(Member_nameContext,0);
};

Property_declarationContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Property_declarationContext.prototype.accessor_declarations = function() {
    return this.getTypedRuleContext(Accessor_declarationsContext,0);
};

Property_declarationContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Property_declarationContext.prototype.right_arrow = function() {
    return this.getTypedRuleContext(Right_arrowContext,0);
};

Property_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Property_declarationContext.prototype.variable_initializer = function() {
    return this.getTypedRuleContext(Variable_initializerContext,0);
};

Property_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterProperty_declaration(this);
	}
};

Property_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitProperty_declaration(this);
	}
};




CSharpParser.Property_declarationContext = Property_declarationContext;

CSharpParser.prototype.property_declaration = function() {

    var localctx = new Property_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, CSharpParser.RULE_property_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2647;
        this.member_name();
        this.state = 2661;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.state = 2648;
            this.match(CSharpParser.OPEN_BRACE);
            this.state = 2649;
            this.accessor_declarations();
            this.state = 2650;
            this.match(CSharpParser.CLOSE_BRACE);
            this.state = 2655;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.ASSIGNMENT) {
                this.state = 2651;
                this.match(CSharpParser.ASSIGNMENT);
                this.state = 2652;
                this.variable_initializer();
                this.state = 2653;
                this.match(CSharpParser.SEMICOLON);
            }

            break;
        case CSharpParser.ASSIGNMENT:
            this.state = 2657;
            this.right_arrow();
            this.state = 2658;
            this.expression();
            this.state = 2659;
            this.match(CSharpParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constant_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_constant_declaration;
    return this;
}

Constant_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_declarationContext.prototype.constructor = Constant_declarationContext;

Constant_declarationContext.prototype.CONST = function() {
    return this.getToken(CSharpParser.CONST, 0);
};

Constant_declarationContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Constant_declarationContext.prototype.constant_declarators = function() {
    return this.getTypedRuleContext(Constant_declaratorsContext,0);
};

Constant_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConstant_declaration(this);
	}
};

Constant_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConstant_declaration(this);
	}
};




CSharpParser.Constant_declarationContext = Constant_declarationContext;

CSharpParser.prototype.constant_declaration = function() {

    var localctx = new Constant_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, CSharpParser.RULE_constant_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2663;
        this.match(CSharpParser.CONST);
        this.state = 2664;
        this.var_type();
        this.state = 2665;
        this.constant_declarators();
        this.state = 2666;
        this.match(CSharpParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Indexer_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_indexer_declaration;
    return this;
}

Indexer_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Indexer_declarationContext.prototype.constructor = Indexer_declarationContext;

Indexer_declarationContext.prototype.THIS = function() {
    return this.getToken(CSharpParser.THIS, 0);
};

Indexer_declarationContext.prototype.formal_parameter_list = function() {
    return this.getTypedRuleContext(Formal_parameter_listContext,0);
};

Indexer_declarationContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Indexer_declarationContext.prototype.accessor_declarations = function() {
    return this.getTypedRuleContext(Accessor_declarationsContext,0);
};

Indexer_declarationContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Indexer_declarationContext.prototype.right_arrow = function() {
    return this.getTypedRuleContext(Right_arrowContext,0);
};

Indexer_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Indexer_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIndexer_declaration(this);
	}
};

Indexer_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIndexer_declaration(this);
	}
};




CSharpParser.Indexer_declarationContext = Indexer_declarationContext;

CSharpParser.prototype.indexer_declaration = function() {

    var localctx = new Indexer_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, CSharpParser.RULE_indexer_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2668;
        this.match(CSharpParser.THIS);
        this.state = 2669;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 2670;
        this.formal_parameter_list();
        this.state = 2671;
        this.match(CSharpParser.CLOSE_BRACKET);
        this.state = 2680;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.state = 2672;
            this.match(CSharpParser.OPEN_BRACE);
            this.state = 2673;
            this.accessor_declarations();
            this.state = 2674;
            this.match(CSharpParser.CLOSE_BRACE);
            break;
        case CSharpParser.ASSIGNMENT:
            this.state = 2676;
            this.right_arrow();
            this.state = 2677;
            this.expression();
            this.state = 2678;
            this.match(CSharpParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Destructor_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_destructor_definition;
    return this;
}

Destructor_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Destructor_definitionContext.prototype.constructor = Destructor_definitionContext;

Destructor_definitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Destructor_definitionContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Destructor_definitionContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Destructor_definitionContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Destructor_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterDestructor_definition(this);
	}
};

Destructor_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitDestructor_definition(this);
	}
};




CSharpParser.Destructor_definitionContext = Destructor_definitionContext;

CSharpParser.prototype.destructor_definition = function() {

    var localctx = new Destructor_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, CSharpParser.RULE_destructor_definition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2682;
        this.match(CSharpParser.TILDE);
        this.state = 2683;
        this.identifier();
        this.state = 2684;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 2685;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 2686;
        this.body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_constructor_declaration;
    return this;
}

Constructor_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_declarationContext.prototype.constructor = Constructor_declarationContext;

Constructor_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Constructor_declarationContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Constructor_declarationContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Constructor_declarationContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Constructor_declarationContext.prototype.formal_parameter_list = function() {
    return this.getTypedRuleContext(Formal_parameter_listContext,0);
};

Constructor_declarationContext.prototype.constructor_initializer = function() {
    return this.getTypedRuleContext(Constructor_initializerContext,0);
};

Constructor_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConstructor_declaration(this);
	}
};

Constructor_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConstructor_declaration(this);
	}
};




CSharpParser.Constructor_declarationContext = Constructor_declarationContext;

CSharpParser.prototype.constructor_declaration = function() {

    var localctx = new Constructor_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, CSharpParser.RULE_constructor_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2688;
        this.identifier();
        this.state = 2689;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 2691;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CSharpParser.OBJECT - 67)) | (1 << (CSharpParser.ON - 67)) | (1 << (CSharpParser.ORDERBY - 67)) | (1 << (CSharpParser.OUT - 67)) | (1 << (CSharpParser.PARAMS - 67)) | (1 << (CSharpParser.PARTIAL - 67)) | (1 << (CSharpParser.REF - 67)) | (1 << (CSharpParser.REMOVE - 67)) | (1 << (CSharpParser.SBYTE - 67)) | (1 << (CSharpParser.SELECT - 67)) | (1 << (CSharpParser.SET - 67)) | (1 << (CSharpParser.SHORT - 67)) | (1 << (CSharpParser.STRING - 67)) | (1 << (CSharpParser.THIS - 67)) | (1 << (CSharpParser.UINT - 67)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)))) !== 0)) {
            this.state = 2690;
            this.formal_parameter_list();
        }

        this.state = 2693;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 2695;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COLON) {
            this.state = 2694;
            this.constructor_initializer();
        }

        this.state = 2697;
        this.body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_method_declaration;
    return this;
}

Method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_declarationContext.prototype.constructor = Method_declarationContext;

Method_declarationContext.prototype.method_member_name = function() {
    return this.getTypedRuleContext(Method_member_nameContext,0);
};

Method_declarationContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Method_declarationContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Method_declarationContext.prototype.method_body = function() {
    return this.getTypedRuleContext(Method_bodyContext,0);
};

Method_declarationContext.prototype.right_arrow = function() {
    return this.getTypedRuleContext(Right_arrowContext,0);
};

Method_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Method_declarationContext.prototype.type_parameter_list = function() {
    return this.getTypedRuleContext(Type_parameter_listContext,0);
};

Method_declarationContext.prototype.formal_parameter_list = function() {
    return this.getTypedRuleContext(Formal_parameter_listContext,0);
};

Method_declarationContext.prototype.type_parameter_constraints_clauses = function() {
    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
};

Method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMethod_declaration(this);
	}
};

Method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMethod_declaration(this);
	}
};




CSharpParser.Method_declarationContext = Method_declarationContext;

CSharpParser.prototype.method_declaration = function() {

    var localctx = new Method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, CSharpParser.RULE_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2699;
        this.method_member_name();
        this.state = 2701;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.LT) {
            this.state = 2700;
            this.type_parameter_list();
        }

        this.state = 2703;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 2705;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CSharpParser.OBJECT - 67)) | (1 << (CSharpParser.ON - 67)) | (1 << (CSharpParser.ORDERBY - 67)) | (1 << (CSharpParser.OUT - 67)) | (1 << (CSharpParser.PARAMS - 67)) | (1 << (CSharpParser.PARTIAL - 67)) | (1 << (CSharpParser.REF - 67)) | (1 << (CSharpParser.REMOVE - 67)) | (1 << (CSharpParser.SBYTE - 67)) | (1 << (CSharpParser.SELECT - 67)) | (1 << (CSharpParser.SET - 67)) | (1 << (CSharpParser.SHORT - 67)) | (1 << (CSharpParser.STRING - 67)) | (1 << (CSharpParser.THIS - 67)) | (1 << (CSharpParser.UINT - 67)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)))) !== 0)) {
            this.state = 2704;
            this.formal_parameter_list();
        }

        this.state = 2707;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 2709;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHERE) {
            this.state = 2708;
            this.type_parameter_constraints_clauses();
        }

        this.state = 2716;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
        case CSharpParser.SEMICOLON:
            this.state = 2711;
            this.method_body();
            break;
        case CSharpParser.ASSIGNMENT:
            this.state = 2712;
            this.right_arrow();
            this.state = 2713;
            this.expression();
            this.state = 2714;
            this.match(CSharpParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_member_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_method_member_name;
    return this;
}

Method_member_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_member_nameContext.prototype.constructor = Method_member_nameContext;

Method_member_nameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Method_member_nameContext.prototype.type_argument_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_argument_listContext);
    } else {
        return this.getTypedRuleContext(Type_argument_listContext,i);
    }
};

Method_member_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMethod_member_name(this);
	}
};

Method_member_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMethod_member_name(this);
	}
};




CSharpParser.Method_member_nameContext = Method_member_nameContext;

CSharpParser.prototype.method_member_name = function() {

    var localctx = new Method_member_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, CSharpParser.RULE_method_member_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2723;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2718;
            this.identifier();
            break;

        case 2:
            this.state = 2719;
            this.identifier();
            this.state = 2720;
            this.match(CSharpParser.DOUBLE_COLON);
            this.state = 2721;
            this.identifier();
            break;

        }
        this.state = 2732;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,291,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2726;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CSharpParser.LT) {
                    this.state = 2725;
                    this.type_argument_list();
                }

                this.state = 2728;
                this.match(CSharpParser.DOT);
                this.state = 2729;
                this.identifier(); 
            }
            this.state = 2734;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,291,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operator_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_operator_declaration;
    return this;
}

Operator_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_declarationContext.prototype.constructor = Operator_declarationContext;

Operator_declarationContext.prototype.OPERATOR = function() {
    return this.getToken(CSharpParser.OPERATOR, 0);
};

Operator_declarationContext.prototype.overloadable_operator = function() {
    return this.getTypedRuleContext(Overloadable_operatorContext,0);
};

Operator_declarationContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Operator_declarationContext.prototype.arg_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Arg_declarationContext);
    } else {
        return this.getTypedRuleContext(Arg_declarationContext,i);
    }
};

Operator_declarationContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Operator_declarationContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Operator_declarationContext.prototype.right_arrow = function() {
    return this.getTypedRuleContext(Right_arrowContext,0);
};

Operator_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Operator_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterOperator_declaration(this);
	}
};

Operator_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitOperator_declaration(this);
	}
};




CSharpParser.Operator_declarationContext = Operator_declarationContext;

CSharpParser.prototype.operator_declaration = function() {

    var localctx = new Operator_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, CSharpParser.RULE_operator_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2735;
        this.match(CSharpParser.OPERATOR);
        this.state = 2736;
        this.overloadable_operator();
        this.state = 2737;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 2738;
        this.arg_declaration();
        this.state = 2741;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COMMA) {
            this.state = 2739;
            this.match(CSharpParser.COMMA);
            this.state = 2740;
            this.arg_declaration();
        }

        this.state = 2743;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 2749;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
        case CSharpParser.SEMICOLON:
            this.state = 2744;
            this.body();
            break;
        case CSharpParser.ASSIGNMENT:
            this.state = 2745;
            this.right_arrow();
            this.state = 2746;
            this.expression();
            this.state = 2747;
            this.match(CSharpParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Arg_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_arg_declaration;
    return this;
}

Arg_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arg_declarationContext.prototype.constructor = Arg_declarationContext;

Arg_declarationContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Arg_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Arg_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Arg_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterArg_declaration(this);
	}
};

Arg_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitArg_declaration(this);
	}
};




CSharpParser.Arg_declarationContext = Arg_declarationContext;

CSharpParser.prototype.arg_declaration = function() {

    var localctx = new Arg_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, CSharpParser.RULE_arg_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2751;
        this.var_type();
        this.state = 2752;
        this.identifier();
        this.state = 2755;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.ASSIGNMENT) {
            this.state = 2753;
            this.match(CSharpParser.ASSIGNMENT);
            this.state = 2754;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_invocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_method_invocation;
    return this;
}

Method_invocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_invocationContext.prototype.constructor = Method_invocationContext;

Method_invocationContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Method_invocationContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Method_invocationContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Method_invocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMethod_invocation(this);
	}
};

Method_invocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMethod_invocation(this);
	}
};




CSharpParser.Method_invocationContext = Method_invocationContext;

CSharpParser.prototype.method_invocation = function() {

    var localctx = new Method_invocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, CSharpParser.RULE_method_invocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2757;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 2759;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.OUT - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REF - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.VOID - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
            this.state = 2758;
            this.argument_list();
        }

        this.state = 2761;
        this.match(CSharpParser.CLOSE_PARENS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_creation_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_object_creation_expression;
    return this;
}

Object_creation_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_creation_expressionContext.prototype.constructor = Object_creation_expressionContext;

Object_creation_expressionContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Object_creation_expressionContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Object_creation_expressionContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Object_creation_expressionContext.prototype.object_or_collection_initializer = function() {
    return this.getTypedRuleContext(Object_or_collection_initializerContext,0);
};

Object_creation_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterObject_creation_expression(this);
	}
};

Object_creation_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitObject_creation_expression(this);
	}
};




CSharpParser.Object_creation_expressionContext = Object_creation_expressionContext;

CSharpParser.prototype.object_creation_expression = function() {

    var localctx = new Object_creation_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, CSharpParser.RULE_object_creation_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2763;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 2765;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.OUT - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REF - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.VOID - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
            this.state = 2764;
            this.argument_list();
        }

        this.state = 2767;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 2769;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACE) {
            this.state = 2768;
            this.object_or_collection_initializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(CSharpParser.IDENTIFIER, 0);
};

IdentifierContext.prototype.ADD = function() {
    return this.getToken(CSharpParser.ADD, 0);
};

IdentifierContext.prototype.ALIAS = function() {
    return this.getToken(CSharpParser.ALIAS, 0);
};

IdentifierContext.prototype.ARGLIST = function() {
    return this.getToken(CSharpParser.ARGLIST, 0);
};

IdentifierContext.prototype.ASCENDING = function() {
    return this.getToken(CSharpParser.ASCENDING, 0);
};

IdentifierContext.prototype.ASYNC = function() {
    return this.getToken(CSharpParser.ASYNC, 0);
};

IdentifierContext.prototype.AWAIT = function() {
    return this.getToken(CSharpParser.AWAIT, 0);
};

IdentifierContext.prototype.BY = function() {
    return this.getToken(CSharpParser.BY, 0);
};

IdentifierContext.prototype.DESCENDING = function() {
    return this.getToken(CSharpParser.DESCENDING, 0);
};

IdentifierContext.prototype.DYNAMIC = function() {
    return this.getToken(CSharpParser.DYNAMIC, 0);
};

IdentifierContext.prototype.EQUALS = function() {
    return this.getToken(CSharpParser.EQUALS, 0);
};

IdentifierContext.prototype.FROM = function() {
    return this.getToken(CSharpParser.FROM, 0);
};

IdentifierContext.prototype.GET = function() {
    return this.getToken(CSharpParser.GET, 0);
};

IdentifierContext.prototype.GROUP = function() {
    return this.getToken(CSharpParser.GROUP, 0);
};

IdentifierContext.prototype.INTO = function() {
    return this.getToken(CSharpParser.INTO, 0);
};

IdentifierContext.prototype.JOIN = function() {
    return this.getToken(CSharpParser.JOIN, 0);
};

IdentifierContext.prototype.LET = function() {
    return this.getToken(CSharpParser.LET, 0);
};

IdentifierContext.prototype.NAMEOF = function() {
    return this.getToken(CSharpParser.NAMEOF, 0);
};

IdentifierContext.prototype.ON = function() {
    return this.getToken(CSharpParser.ON, 0);
};

IdentifierContext.prototype.ORDERBY = function() {
    return this.getToken(CSharpParser.ORDERBY, 0);
};

IdentifierContext.prototype.PARTIAL = function() {
    return this.getToken(CSharpParser.PARTIAL, 0);
};

IdentifierContext.prototype.REMOVE = function() {
    return this.getToken(CSharpParser.REMOVE, 0);
};

IdentifierContext.prototype.SELECT = function() {
    return this.getToken(CSharpParser.SELECT, 0);
};

IdentifierContext.prototype.SET = function() {
    return this.getToken(CSharpParser.SET, 0);
};

IdentifierContext.prototype.VAR = function() {
    return this.getToken(CSharpParser.VAR, 0);
};

IdentifierContext.prototype.WHEN = function() {
    return this.getToken(CSharpParser.WHEN, 0);
};

IdentifierContext.prototype.WHERE = function() {
    return this.getToken(CSharpParser.WHERE, 0);
};

IdentifierContext.prototype.YIELD = function() {
    return this.getToken(CSharpParser.YIELD, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIdentifier(this);
	}
};




CSharpParser.IdentifierContext = IdentifierContext;

CSharpParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, CSharpParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2771;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CSharpParser.DYNAMIC - 34)) | (1 << (CSharpParser.EQUALS - 34)) | (1 << (CSharpParser.FROM - 34)) | (1 << (CSharpParser.GET - 34)) | (1 << (CSharpParser.GROUP - 34)) | (1 << (CSharpParser.INTO - 34)) | (1 << (CSharpParser.JOIN - 34)) | (1 << (CSharpParser.LET - 34)) | (1 << (CSharpParser.NAMEOF - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CSharpParser.ON - 68)) | (1 << (CSharpParser.ORDERBY - 68)) | (1 << (CSharpParser.PARTIAL - 68)) | (1 << (CSharpParser.REMOVE - 68)) | (1 << (CSharpParser.SELECT - 68)) | (1 << (CSharpParser.SET - 68)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (CSharpParser.VAR - 104)) | (1 << (CSharpParser.WHEN - 104)) | (1 << (CSharpParser.WHERE - 104)) | (1 << (CSharpParser.YIELD - 104)) | (1 << (CSharpParser.IDENTIFIER - 104)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CompilationUnit_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_compilationUnit_DropletFile;
    return this;
}

CompilationUnit_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompilationUnit_DropletFileContext.prototype.constructor = CompilationUnit_DropletFileContext;

CompilationUnit_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

CompilationUnit_DropletFileContext.prototype.BYTE_ORDER_MARK = function() {
    return this.getToken(CSharpParser.BYTE_ORDER_MARK, 0);
};

CompilationUnit_DropletFileContext.prototype.extern_alias_directives = function() {
    return this.getTypedRuleContext(Extern_alias_directivesContext,0);
};

CompilationUnit_DropletFileContext.prototype.using_directives = function() {
    return this.getTypedRuleContext(Using_directivesContext,0);
};

CompilationUnit_DropletFileContext.prototype.global_attribute_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Global_attribute_sectionContext);
    } else {
        return this.getTypedRuleContext(Global_attribute_sectionContext,i);
    }
};

CompilationUnit_DropletFileContext.prototype.namespace_member_declarations = function() {
    return this.getTypedRuleContext(Namespace_member_declarationsContext,0);
};

CompilationUnit_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCompilationUnit_DropletFile(this);
	}
};

CompilationUnit_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCompilationUnit_DropletFile(this);
	}
};




CSharpParser.CompilationUnit_DropletFileContext = CompilationUnit_DropletFileContext;

CSharpParser.prototype.compilationUnit_DropletFile = function() {

    var localctx = new CompilationUnit_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, CSharpParser.RULE_compilationUnit_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2774;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.BYTE_ORDER_MARK) {
            this.state = 2773;
            this.match(CSharpParser.BYTE_ORDER_MARK);
        }

        this.state = 2777;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
        if(la_===1) {
            this.state = 2776;
            this.extern_alias_directives();

        }
        this.state = 2780;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.USING) {
            this.state = 2779;
            this.using_directives();
        }

        this.state = 2785;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,301,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2782;
                this.global_attribute_section(); 
            }
            this.state = 2787;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,301,this._ctx);
        }

        this.state = 2789;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CSharpParser.ENUM - 36)) | (1 << (CSharpParser.EXTERN - 36)) | (1 << (CSharpParser.INTERFACE - 36)) | (1 << (CSharpParser.INTERNAL - 36)) | (1 << (CSharpParser.NAMESPACE - 36)) | (1 << (CSharpParser.NEW - 36)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CSharpParser.OVERRIDE - 72)) | (1 << (CSharpParser.PARTIAL - 72)) | (1 << (CSharpParser.PRIVATE - 72)) | (1 << (CSharpParser.PROTECTED - 72)) | (1 << (CSharpParser.PUBLIC - 72)) | (1 << (CSharpParser.READONLY - 72)) | (1 << (CSharpParser.SEALED - 72)) | (1 << (CSharpParser.STATIC - 72)) | (1 << (CSharpParser.STRUCT - 72)) | (1 << (CSharpParser.UNSAFE - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CSharpParser.VIRTUAL - 105)) | (1 << (CSharpParser.VOLATILE - 105)) | (1 << (CSharpParser.OPEN_BRACKET - 105)))) !== 0)) {
            this.state = 2788;
            this.namespace_member_declarations();
        }

        this.state = 2791;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Namespace_or_type_name_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_namespace_or_type_name_DropletFile;
    return this;
}

Namespace_or_type_name_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Namespace_or_type_name_DropletFileContext.prototype.constructor = Namespace_or_type_name_DropletFileContext;

Namespace_or_type_name_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Namespace_or_type_name_DropletFileContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Namespace_or_type_name_DropletFileContext.prototype.qualified_alias_member = function() {
    return this.getTypedRuleContext(Qualified_alias_memberContext,0);
};

Namespace_or_type_name_DropletFileContext.prototype.type_argument_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_argument_listContext);
    } else {
        return this.getTypedRuleContext(Type_argument_listContext,i);
    }
};

Namespace_or_type_name_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNamespace_or_type_name_DropletFile(this);
	}
};

Namespace_or_type_name_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNamespace_or_type_name_DropletFile(this);
	}
};




CSharpParser.Namespace_or_type_name_DropletFileContext = Namespace_or_type_name_DropletFileContext;

CSharpParser.prototype.namespace_or_type_name_DropletFile = function() {

    var localctx = new Namespace_or_type_name_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, CSharpParser.RULE_namespace_or_type_name_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2798;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2793;
            this.identifier();
            this.state = 2795;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.LT) {
                this.state = 2794;
                this.type_argument_list();
            }

            break;

        case 2:
            this.state = 2797;
            this.qualified_alias_member();
            break;

        }
        this.state = 2807;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.DOT) {
            this.state = 2800;
            this.match(CSharpParser.DOT);
            this.state = 2801;
            this.identifier();
            this.state = 2803;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.LT) {
                this.state = 2802;
                this.type_argument_list();
            }

            this.state = 2809;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2810;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Var_type_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_var_type_DropletFile;
    return this;
}

Var_type_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var_type_DropletFileContext.prototype.constructor = Var_type_DropletFileContext;

Var_type_DropletFileContext.prototype.base_type = function() {
    return this.getTypedRuleContext(Base_typeContext,0);
};

Var_type_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Var_type_DropletFileContext.prototype.rank_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rank_specifierContext);
    } else {
        return this.getTypedRuleContext(Rank_specifierContext,i);
    }
};

Var_type_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVar_type_DropletFile(this);
	}
};

Var_type_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVar_type_DropletFile(this);
	}
};




CSharpParser.Var_type_DropletFileContext = Var_type_DropletFileContext;

CSharpParser.prototype.var_type_DropletFile = function() {

    var localctx = new Var_type_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, CSharpParser.RULE_var_type_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2812;
        this.base_type();
        this.state = 2818;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (CSharpParser.OPEN_BRACKET - 124)) | (1 << (CSharpParser.STAR - 124)) | (1 << (CSharpParser.INTERR - 124)))) !== 0)) {
            this.state = 2816;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.INTERR:
                this.state = 2813;
                this.match(CSharpParser.INTERR);
                break;
            case CSharpParser.OPEN_BRACKET:
                this.state = 2814;
                this.rank_specifier();
                break;
            case CSharpParser.STAR:
                this.state = 2815;
                this.match(CSharpParser.STAR);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2820;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2821;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Base_type_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_base_type_DropletFile;
    return this;
}

Base_type_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Base_type_DropletFileContext.prototype.constructor = Base_type_DropletFileContext;

Base_type_DropletFileContext.prototype.simple_type = function() {
    return this.getTypedRuleContext(Simple_typeContext,0);
};

Base_type_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Base_type_DropletFileContext.prototype.class_type = function() {
    return this.getTypedRuleContext(Class_typeContext,0);
};

Base_type_DropletFileContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};

Base_type_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBase_type_DropletFile(this);
	}
};

Base_type_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBase_type_DropletFile(this);
	}
};




CSharpParser.Base_type_DropletFileContext = Base_type_DropletFileContext;

CSharpParser.prototype.base_type_DropletFile = function() {

    var localctx = new Base_type_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, CSharpParser.RULE_base_type_DropletFile);
    try {
        this.state = 2832;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.BOOL:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.DECIMAL:
        case CSharpParser.DOUBLE:
        case CSharpParser.FLOAT:
        case CSharpParser.INT:
        case CSharpParser.LONG:
        case CSharpParser.SBYTE:
        case CSharpParser.SHORT:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.USHORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2823;
            this.simple_type();
            this.state = 2824;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BY:
        case CSharpParser.DESCENDING:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.NAMEOF:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.STRING:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 2826;
            this.class_type();
            this.state = 2827;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.VOID:
            this.enterOuterAlt(localctx, 3);
            this.state = 2829;
            this.match(CSharpParser.VOID);
            this.state = 2830;
            this.match(CSharpParser.STAR);
            this.state = 2831;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_type_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_simple_type_DropletFile;
    return this;
}

Simple_type_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_type_DropletFileContext.prototype.constructor = Simple_type_DropletFileContext;

Simple_type_DropletFileContext.prototype.numeric_type = function() {
    return this.getTypedRuleContext(Numeric_typeContext,0);
};

Simple_type_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Simple_type_DropletFileContext.prototype.BOOL = function() {
    return this.getToken(CSharpParser.BOOL, 0);
};

Simple_type_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSimple_type_DropletFile(this);
	}
};

Simple_type_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSimple_type_DropletFile(this);
	}
};




CSharpParser.Simple_type_DropletFileContext = Simple_type_DropletFileContext;

CSharpParser.prototype.simple_type_DropletFile = function() {

    var localctx = new Simple_type_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, CSharpParser.RULE_simple_type_DropletFile);
    try {
        this.state = 2839;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.DECIMAL:
        case CSharpParser.DOUBLE:
        case CSharpParser.FLOAT:
        case CSharpParser.INT:
        case CSharpParser.LONG:
        case CSharpParser.SBYTE:
        case CSharpParser.SHORT:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.USHORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2834;
            this.numeric_type();
            this.state = 2835;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.BOOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2837;
            this.match(CSharpParser.BOOL);
            this.state = 2838;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_type_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_numeric_type_DropletFile;
    return this;
}

Numeric_type_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_type_DropletFileContext.prototype.constructor = Numeric_type_DropletFileContext;

Numeric_type_DropletFileContext.prototype.integral_type = function() {
    return this.getTypedRuleContext(Integral_typeContext,0);
};

Numeric_type_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Numeric_type_DropletFileContext.prototype.floating_point_type = function() {
    return this.getTypedRuleContext(Floating_point_typeContext,0);
};

Numeric_type_DropletFileContext.prototype.DECIMAL = function() {
    return this.getToken(CSharpParser.DECIMAL, 0);
};

Numeric_type_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNumeric_type_DropletFile(this);
	}
};

Numeric_type_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNumeric_type_DropletFile(this);
	}
};




CSharpParser.Numeric_type_DropletFileContext = Numeric_type_DropletFileContext;

CSharpParser.prototype.numeric_type_DropletFile = function() {

    var localctx = new Numeric_type_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, CSharpParser.RULE_numeric_type_DropletFile);
    try {
        this.state = 2849;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.INT:
        case CSharpParser.LONG:
        case CSharpParser.SBYTE:
        case CSharpParser.SHORT:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.USHORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2841;
            this.integral_type();
            this.state = 2842;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DOUBLE:
        case CSharpParser.FLOAT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2844;
            this.floating_point_type();
            this.state = 2845;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DECIMAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 2847;
            this.match(CSharpParser.DECIMAL);
            this.state = 2848;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Integral_type_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_integral_type_DropletFile;
    return this;
}

Integral_type_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Integral_type_DropletFileContext.prototype.constructor = Integral_type_DropletFileContext;

Integral_type_DropletFileContext.prototype.SBYTE = function() {
    return this.getToken(CSharpParser.SBYTE, 0);
};

Integral_type_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Integral_type_DropletFileContext.prototype.BYTE = function() {
    return this.getToken(CSharpParser.BYTE, 0);
};

Integral_type_DropletFileContext.prototype.SHORT = function() {
    return this.getToken(CSharpParser.SHORT, 0);
};

Integral_type_DropletFileContext.prototype.USHORT = function() {
    return this.getToken(CSharpParser.USHORT, 0);
};

Integral_type_DropletFileContext.prototype.INT = function() {
    return this.getToken(CSharpParser.INT, 0);
};

Integral_type_DropletFileContext.prototype.UINT = function() {
    return this.getToken(CSharpParser.UINT, 0);
};

Integral_type_DropletFileContext.prototype.LONG = function() {
    return this.getToken(CSharpParser.LONG, 0);
};

Integral_type_DropletFileContext.prototype.ULONG = function() {
    return this.getToken(CSharpParser.ULONG, 0);
};

Integral_type_DropletFileContext.prototype.CHAR = function() {
    return this.getToken(CSharpParser.CHAR, 0);
};

Integral_type_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIntegral_type_DropletFile(this);
	}
};

Integral_type_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIntegral_type_DropletFile(this);
	}
};




CSharpParser.Integral_type_DropletFileContext = Integral_type_DropletFileContext;

CSharpParser.prototype.integral_type_DropletFile = function() {

    var localctx = new Integral_type_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, CSharpParser.RULE_integral_type_DropletFile);
    try {
        this.state = 2869;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.SBYTE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2851;
            this.match(CSharpParser.SBYTE);
            this.state = 2852;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.BYTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2853;
            this.match(CSharpParser.BYTE);
            this.state = 2854;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SHORT:
            this.enterOuterAlt(localctx, 3);
            this.state = 2855;
            this.match(CSharpParser.SHORT);
            this.state = 2856;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.USHORT:
            this.enterOuterAlt(localctx, 4);
            this.state = 2857;
            this.match(CSharpParser.USHORT);
            this.state = 2858;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.INT:
            this.enterOuterAlt(localctx, 5);
            this.state = 2859;
            this.match(CSharpParser.INT);
            this.state = 2860;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.UINT:
            this.enterOuterAlt(localctx, 6);
            this.state = 2861;
            this.match(CSharpParser.UINT);
            this.state = 2862;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.LONG:
            this.enterOuterAlt(localctx, 7);
            this.state = 2863;
            this.match(CSharpParser.LONG);
            this.state = 2864;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ULONG:
            this.enterOuterAlt(localctx, 8);
            this.state = 2865;
            this.match(CSharpParser.ULONG);
            this.state = 2866;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.CHAR:
            this.enterOuterAlt(localctx, 9);
            this.state = 2867;
            this.match(CSharpParser.CHAR);
            this.state = 2868;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Floating_point_type_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_floating_point_type_DropletFile;
    return this;
}

Floating_point_type_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Floating_point_type_DropletFileContext.prototype.constructor = Floating_point_type_DropletFileContext;

Floating_point_type_DropletFileContext.prototype.FLOAT = function() {
    return this.getToken(CSharpParser.FLOAT, 0);
};

Floating_point_type_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Floating_point_type_DropletFileContext.prototype.DOUBLE = function() {
    return this.getToken(CSharpParser.DOUBLE, 0);
};

Floating_point_type_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFloating_point_type_DropletFile(this);
	}
};

Floating_point_type_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFloating_point_type_DropletFile(this);
	}
};




CSharpParser.Floating_point_type_DropletFileContext = Floating_point_type_DropletFileContext;

CSharpParser.prototype.floating_point_type_DropletFile = function() {

    var localctx = new Floating_point_type_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, CSharpParser.RULE_floating_point_type_DropletFile);
    try {
        this.state = 2875;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.FLOAT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2871;
            this.match(CSharpParser.FLOAT);
            this.state = 2872;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DOUBLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2873;
            this.match(CSharpParser.DOUBLE);
            this.state = 2874;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_type_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_class_type_DropletFile;
    return this;
}

Class_type_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_type_DropletFileContext.prototype.constructor = Class_type_DropletFileContext;

Class_type_DropletFileContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};

Class_type_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Class_type_DropletFileContext.prototype.OBJECT = function() {
    return this.getToken(CSharpParser.OBJECT, 0);
};

Class_type_DropletFileContext.prototype.DYNAMIC = function() {
    return this.getToken(CSharpParser.DYNAMIC, 0);
};

Class_type_DropletFileContext.prototype.STRING = function() {
    return this.getToken(CSharpParser.STRING, 0);
};

Class_type_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterClass_type_DropletFile(this);
	}
};

Class_type_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitClass_type_DropletFile(this);
	}
};




CSharpParser.Class_type_DropletFileContext = Class_type_DropletFileContext;

CSharpParser.prototype.class_type_DropletFile = function() {

    var localctx = new Class_type_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, CSharpParser.RULE_class_type_DropletFile);
    try {
        this.state = 2886;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2877;
            this.namespace_or_type_name();
            this.state = 2878;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2880;
            this.match(CSharpParser.OBJECT);
            this.state = 2881;
            this.match(CSharpParser.EOF);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2882;
            this.match(CSharpParser.DYNAMIC);
            this.state = 2883;
            this.match(CSharpParser.EOF);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2884;
            this.match(CSharpParser.STRING);
            this.state = 2885;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_argument_list_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_argument_list_DropletFile;
    return this;
}

Type_argument_list_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_argument_list_DropletFileContext.prototype.constructor = Type_argument_list_DropletFileContext;

Type_argument_list_DropletFileContext.prototype.var_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Var_typeContext);
    } else {
        return this.getTypedRuleContext(Var_typeContext,i);
    }
};

Type_argument_list_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Type_argument_list_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_argument_list_DropletFile(this);
	}
};

Type_argument_list_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_argument_list_DropletFile(this);
	}
};




CSharpParser.Type_argument_list_DropletFileContext = Type_argument_list_DropletFileContext;

CSharpParser.prototype.type_argument_list_DropletFile = function() {

    var localctx = new Type_argument_list_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, CSharpParser.RULE_type_argument_list_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2888;
        this.match(CSharpParser.LT);
        this.state = 2889;
        this.var_type();
        this.state = 2894;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 2890;
            this.match(CSharpParser.COMMA);
            this.state = 2891;
            this.var_type();
            this.state = 2896;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2897;
        this.match(CSharpParser.GT);
        this.state = 2898;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Argument_list_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_argument_list_DropletFile;
    return this;
}

Argument_list_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_list_DropletFileContext.prototype.constructor = Argument_list_DropletFileContext;

Argument_list_DropletFileContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

Argument_list_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Argument_list_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterArgument_list_DropletFile(this);
	}
};

Argument_list_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitArgument_list_DropletFile(this);
	}
};




CSharpParser.Argument_list_DropletFileContext = Argument_list_DropletFileContext;

CSharpParser.prototype.argument_list_DropletFile = function() {

    var localctx = new Argument_list_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, CSharpParser.RULE_argument_list_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2900;
        this.argument();
        this.state = 2905;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 2901;
            this.match(CSharpParser.COMMA);
            this.state = 2902;
            this.argument();
            this.state = 2907;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2908;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Argument_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_argument_DropletFile;
    this.refout = null; // Token
    return this;
}

Argument_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_DropletFileContext.prototype.constructor = Argument_DropletFileContext;

Argument_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Argument_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Argument_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Argument_DropletFileContext.prototype.VAR = function() {
    return this.getToken(CSharpParser.VAR, 0);
};

Argument_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Argument_DropletFileContext.prototype.REF = function() {
    return this.getToken(CSharpParser.REF, 0);
};

Argument_DropletFileContext.prototype.OUT = function() {
    return this.getToken(CSharpParser.OUT, 0);
};

Argument_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterArgument_DropletFile(this);
	}
};

Argument_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitArgument_DropletFile(this);
	}
};




CSharpParser.Argument_DropletFileContext = Argument_DropletFileContext;

CSharpParser.prototype.argument_DropletFile = function() {

    var localctx = new Argument_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, CSharpParser.RULE_argument_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2913;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,317,this._ctx);
        if(la_===1) {
            this.state = 2910;
            this.identifier();
            this.state = 2911;
            this.match(CSharpParser.COLON);

        }
        this.state = 2916;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OUT || _la===CSharpParser.REF) {
            this.state = 2915;
            localctx.refout = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===CSharpParser.OUT || _la===CSharpParser.REF)) {
                localctx.refout = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2920;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,319,this._ctx);
        if(la_===1) {
            this.state = 2918;
            this.match(CSharpParser.VAR);

        } else if(la_===2) {
            this.state = 2919;
            this.var_type();

        }
        this.state = 2922;
        this.expression();
        this.state = 2923;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_expression_DropletFile;
    return this;
}

Expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_DropletFileContext.prototype.constructor = Expression_DropletFileContext;

Expression_DropletFileContext.prototype.assignment = function() {
    return this.getTypedRuleContext(AssignmentContext,0);
};

Expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Expression_DropletFileContext.prototype.non_assignment_expression = function() {
    return this.getTypedRuleContext(Non_assignment_expressionContext,0);
};

Expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExpression_DropletFile(this);
	}
};

Expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExpression_DropletFile(this);
	}
};




CSharpParser.Expression_DropletFileContext = Expression_DropletFileContext;

CSharpParser.prototype.expression_DropletFile = function() {

    var localctx = new Expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, CSharpParser.RULE_expression_DropletFile);
    try {
        this.state = 2931;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,320,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2925;
            this.assignment();
            this.state = 2926;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2928;
            this.non_assignment_expression();
            this.state = 2929;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_assignment_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_non_assignment_expression_DropletFile;
    return this;
}

Non_assignment_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_assignment_expression_DropletFileContext.prototype.constructor = Non_assignment_expression_DropletFileContext;

Non_assignment_expression_DropletFileContext.prototype.lambda_expression = function() {
    return this.getTypedRuleContext(Lambda_expressionContext,0);
};

Non_assignment_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Non_assignment_expression_DropletFileContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

Non_assignment_expression_DropletFileContext.prototype.conditional_expression = function() {
    return this.getTypedRuleContext(Conditional_expressionContext,0);
};

Non_assignment_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNon_assignment_expression_DropletFile(this);
	}
};

Non_assignment_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNon_assignment_expression_DropletFile(this);
	}
};




CSharpParser.Non_assignment_expression_DropletFileContext = Non_assignment_expression_DropletFileContext;

CSharpParser.prototype.non_assignment_expression_DropletFile = function() {

    var localctx = new Non_assignment_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, CSharpParser.RULE_non_assignment_expression_DropletFile);
    try {
        this.state = 2942;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2933;
            this.lambda_expression();
            this.state = 2934;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2936;
            this.query_expression();
            this.state = 2937;
            this.match(CSharpParser.EOF);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2939;
            this.conditional_expression();
            this.state = 2940;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assignment_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_assignment_DropletFile;
    return this;
}

Assignment_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignment_DropletFileContext.prototype.constructor = Assignment_DropletFileContext;

Assignment_DropletFileContext.prototype.unary_expression = function() {
    return this.getTypedRuleContext(Unary_expressionContext,0);
};

Assignment_DropletFileContext.prototype.assignment_operator = function() {
    return this.getTypedRuleContext(Assignment_operatorContext,0);
};

Assignment_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assignment_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Assignment_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAssignment_DropletFile(this);
	}
};

Assignment_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAssignment_DropletFile(this);
	}
};




CSharpParser.Assignment_DropletFileContext = Assignment_DropletFileContext;

CSharpParser.prototype.assignment_DropletFile = function() {

    var localctx = new Assignment_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, CSharpParser.RULE_assignment_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2944;
        this.unary_expression();
        this.state = 2945;
        this.assignment_operator();
        this.state = 2946;
        this.expression();
        this.state = 2947;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assignment_operator_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_assignment_operator_DropletFile;
    return this;
}

Assignment_operator_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignment_operator_DropletFileContext.prototype.constructor = Assignment_operator_DropletFileContext;

Assignment_operator_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Assignment_operator_DropletFileContext.prototype.right_shift_assignment = function() {
    return this.getTypedRuleContext(Right_shift_assignmentContext,0);
};

Assignment_operator_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAssignment_operator_DropletFile(this);
	}
};

Assignment_operator_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAssignment_operator_DropletFile(this);
	}
};




CSharpParser.Assignment_operator_DropletFileContext = Assignment_operator_DropletFileContext;

CSharpParser.prototype.assignment_operator_DropletFile = function() {

    var localctx = new Assignment_operator_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, CSharpParser.RULE_assignment_operator_DropletFile);
    try {
        this.state = 2972;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ASSIGNMENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2949;
            this.match(CSharpParser.ASSIGNMENT);
            this.state = 2950;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OP_ADD_ASSIGNMENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2951;
            this.match(CSharpParser.OP_ADD_ASSIGNMENT);
            this.state = 2952;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OP_SUB_ASSIGNMENT:
            this.enterOuterAlt(localctx, 3);
            this.state = 2953;
            this.match(CSharpParser.OP_SUB_ASSIGNMENT);
            this.state = 2954;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OP_MULT_ASSIGNMENT:
            this.enterOuterAlt(localctx, 4);
            this.state = 2955;
            this.match(CSharpParser.OP_MULT_ASSIGNMENT);
            this.state = 2956;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OP_DIV_ASSIGNMENT:
            this.enterOuterAlt(localctx, 5);
            this.state = 2957;
            this.match(CSharpParser.OP_DIV_ASSIGNMENT);
            this.state = 2958;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OP_MOD_ASSIGNMENT:
            this.enterOuterAlt(localctx, 6);
            this.state = 2959;
            this.match(CSharpParser.OP_MOD_ASSIGNMENT);
            this.state = 2960;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OP_AND_ASSIGNMENT:
            this.enterOuterAlt(localctx, 7);
            this.state = 2961;
            this.match(CSharpParser.OP_AND_ASSIGNMENT);
            this.state = 2962;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OP_OR_ASSIGNMENT:
            this.enterOuterAlt(localctx, 8);
            this.state = 2963;
            this.match(CSharpParser.OP_OR_ASSIGNMENT);
            this.state = 2964;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OP_XOR_ASSIGNMENT:
            this.enterOuterAlt(localctx, 9);
            this.state = 2965;
            this.match(CSharpParser.OP_XOR_ASSIGNMENT);
            this.state = 2966;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT:
            this.enterOuterAlt(localctx, 10);
            this.state = 2967;
            this.match(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT);
            this.state = 2968;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.GT:
            this.enterOuterAlt(localctx, 11);
            this.state = 2969;
            this.right_shift_assignment();
            this.state = 2970;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_conditional_expression_DropletFile;
    return this;
}

Conditional_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_expression_DropletFileContext.prototype.constructor = Conditional_expression_DropletFileContext;

Conditional_expression_DropletFileContext.prototype.null_coalescing_expression = function() {
    return this.getTypedRuleContext(Null_coalescing_expressionContext,0);
};

Conditional_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Conditional_expression_DropletFileContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Conditional_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConditional_expression_DropletFile(this);
	}
};

Conditional_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConditional_expression_DropletFile(this);
	}
};




CSharpParser.Conditional_expression_DropletFileContext = Conditional_expression_DropletFileContext;

CSharpParser.prototype.conditional_expression_DropletFile = function() {

    var localctx = new Conditional_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, CSharpParser.RULE_conditional_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2974;
        this.null_coalescing_expression();
        this.state = 2980;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.INTERR) {
            this.state = 2975;
            this.match(CSharpParser.INTERR);
            this.state = 2976;
            this.expression();
            this.state = 2977;
            this.match(CSharpParser.COLON);
            this.state = 2978;
            this.expression();
        }

        this.state = 2982;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_coalescing_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_null_coalescing_expression_DropletFile;
    return this;
}

Null_coalescing_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_coalescing_expression_DropletFileContext.prototype.constructor = Null_coalescing_expression_DropletFileContext;

Null_coalescing_expression_DropletFileContext.prototype.conditional_or_expression = function() {
    return this.getTypedRuleContext(Conditional_or_expressionContext,0);
};

Null_coalescing_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Null_coalescing_expression_DropletFileContext.prototype.null_coalescing_expression = function() {
    return this.getTypedRuleContext(Null_coalescing_expressionContext,0);
};

Null_coalescing_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNull_coalescing_expression_DropletFile(this);
	}
};

Null_coalescing_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNull_coalescing_expression_DropletFile(this);
	}
};




CSharpParser.Null_coalescing_expression_DropletFileContext = Null_coalescing_expression_DropletFileContext;

CSharpParser.prototype.null_coalescing_expression_DropletFile = function() {

    var localctx = new Null_coalescing_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, CSharpParser.RULE_null_coalescing_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2984;
        this.conditional_or_expression();
        this.state = 2987;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OP_COALESCING) {
            this.state = 2985;
            this.match(CSharpParser.OP_COALESCING);
            this.state = 2986;
            this.null_coalescing_expression();
        }

        this.state = 2989;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_or_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_conditional_or_expression_DropletFile;
    return this;
}

Conditional_or_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_or_expression_DropletFileContext.prototype.constructor = Conditional_or_expression_DropletFileContext;

Conditional_or_expression_DropletFileContext.prototype.conditional_and_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Conditional_and_expressionContext);
    } else {
        return this.getTypedRuleContext(Conditional_and_expressionContext,i);
    }
};

Conditional_or_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Conditional_or_expression_DropletFileContext.prototype.OP_OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.OP_OR);
    } else {
        return this.getToken(CSharpParser.OP_OR, i);
    }
};


Conditional_or_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConditional_or_expression_DropletFile(this);
	}
};

Conditional_or_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConditional_or_expression_DropletFile(this);
	}
};




CSharpParser.Conditional_or_expression_DropletFileContext = Conditional_or_expression_DropletFileContext;

CSharpParser.prototype.conditional_or_expression_DropletFile = function() {

    var localctx = new Conditional_or_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, CSharpParser.RULE_conditional_or_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2991;
        this.conditional_and_expression();
        this.state = 2996;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.OP_OR) {
            this.state = 2992;
            this.match(CSharpParser.OP_OR);
            this.state = 2993;
            this.conditional_and_expression();
            this.state = 2998;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2999;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_and_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_conditional_and_expression_DropletFile;
    return this;
}

Conditional_and_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_and_expression_DropletFileContext.prototype.constructor = Conditional_and_expression_DropletFileContext;

Conditional_and_expression_DropletFileContext.prototype.inclusive_or_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Inclusive_or_expressionContext);
    } else {
        return this.getTypedRuleContext(Inclusive_or_expressionContext,i);
    }
};

Conditional_and_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Conditional_and_expression_DropletFileContext.prototype.OP_AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.OP_AND);
    } else {
        return this.getToken(CSharpParser.OP_AND, i);
    }
};


Conditional_and_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConditional_and_expression_DropletFile(this);
	}
};

Conditional_and_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConditional_and_expression_DropletFile(this);
	}
};




CSharpParser.Conditional_and_expression_DropletFileContext = Conditional_and_expression_DropletFileContext;

CSharpParser.prototype.conditional_and_expression_DropletFile = function() {

    var localctx = new Conditional_and_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, CSharpParser.RULE_conditional_and_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3001;
        this.inclusive_or_expression();
        this.state = 3006;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.OP_AND) {
            this.state = 3002;
            this.match(CSharpParser.OP_AND);
            this.state = 3003;
            this.inclusive_or_expression();
            this.state = 3008;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3009;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Inclusive_or_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_inclusive_or_expression_DropletFile;
    return this;
}

Inclusive_or_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Inclusive_or_expression_DropletFileContext.prototype.constructor = Inclusive_or_expression_DropletFileContext;

Inclusive_or_expression_DropletFileContext.prototype.exclusive_or_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Exclusive_or_expressionContext);
    } else {
        return this.getTypedRuleContext(Exclusive_or_expressionContext,i);
    }
};

Inclusive_or_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Inclusive_or_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInclusive_or_expression_DropletFile(this);
	}
};

Inclusive_or_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInclusive_or_expression_DropletFile(this);
	}
};




CSharpParser.Inclusive_or_expression_DropletFileContext = Inclusive_or_expression_DropletFileContext;

CSharpParser.prototype.inclusive_or_expression_DropletFile = function() {

    var localctx = new Inclusive_or_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, CSharpParser.RULE_inclusive_or_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3011;
        this.exclusive_or_expression();
        this.state = 3016;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.BITWISE_OR) {
            this.state = 3012;
            this.match(CSharpParser.BITWISE_OR);
            this.state = 3013;
            this.exclusive_or_expression();
            this.state = 3018;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3019;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exclusive_or_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_exclusive_or_expression_DropletFile;
    return this;
}

Exclusive_or_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exclusive_or_expression_DropletFileContext.prototype.constructor = Exclusive_or_expression_DropletFileContext;

Exclusive_or_expression_DropletFileContext.prototype.and_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(And_expressionContext);
    } else {
        return this.getTypedRuleContext(And_expressionContext,i);
    }
};

Exclusive_or_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Exclusive_or_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExclusive_or_expression_DropletFile(this);
	}
};

Exclusive_or_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExclusive_or_expression_DropletFile(this);
	}
};




CSharpParser.Exclusive_or_expression_DropletFileContext = Exclusive_or_expression_DropletFileContext;

CSharpParser.prototype.exclusive_or_expression_DropletFile = function() {

    var localctx = new Exclusive_or_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, CSharpParser.RULE_exclusive_or_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3021;
        this.and_expression();
        this.state = 3026;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.CARET) {
            this.state = 3022;
            this.match(CSharpParser.CARET);
            this.state = 3023;
            this.and_expression();
            this.state = 3028;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3029;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function And_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_and_expression_DropletFile;
    return this;
}

And_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_expression_DropletFileContext.prototype.constructor = And_expression_DropletFileContext;

And_expression_DropletFileContext.prototype.equality_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Equality_expressionContext);
    } else {
        return this.getTypedRuleContext(Equality_expressionContext,i);
    }
};

And_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

And_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAnd_expression_DropletFile(this);
	}
};

And_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAnd_expression_DropletFile(this);
	}
};




CSharpParser.And_expression_DropletFileContext = And_expression_DropletFileContext;

CSharpParser.prototype.and_expression_DropletFile = function() {

    var localctx = new And_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, CSharpParser.RULE_and_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3031;
        this.equality_expression();
        this.state = 3036;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.AMP) {
            this.state = 3032;
            this.match(CSharpParser.AMP);
            this.state = 3033;
            this.equality_expression();
            this.state = 3038;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3039;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Equality_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_equality_expression_DropletFile;
    return this;
}

Equality_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Equality_expression_DropletFileContext.prototype.constructor = Equality_expression_DropletFileContext;

Equality_expression_DropletFileContext.prototype.relational_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Relational_expressionContext);
    } else {
        return this.getTypedRuleContext(Relational_expressionContext,i);
    }
};

Equality_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Equality_expression_DropletFileContext.prototype.OP_EQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.OP_EQ);
    } else {
        return this.getToken(CSharpParser.OP_EQ, i);
    }
};


Equality_expression_DropletFileContext.prototype.OP_NE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.OP_NE);
    } else {
        return this.getToken(CSharpParser.OP_NE, i);
    }
};


Equality_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEquality_expression_DropletFile(this);
	}
};

Equality_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEquality_expression_DropletFile(this);
	}
};




CSharpParser.Equality_expression_DropletFileContext = Equality_expression_DropletFileContext;

CSharpParser.prototype.equality_expression_DropletFile = function() {

    var localctx = new Equality_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, CSharpParser.RULE_equality_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3041;
        this.relational_expression();
        this.state = 3046;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.OP_EQ || _la===CSharpParser.OP_NE) {
            this.state = 3042;
            _la = this._input.LA(1);
            if(!(_la===CSharpParser.OP_EQ || _la===CSharpParser.OP_NE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3043;
            this.relational_expression();
            this.state = 3048;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3049;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relational_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_relational_expression_DropletFile;
    return this;
}

Relational_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relational_expression_DropletFileContext.prototype.constructor = Relational_expression_DropletFileContext;

Relational_expression_DropletFileContext.prototype.shift_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Shift_expressionContext);
    } else {
        return this.getTypedRuleContext(Shift_expressionContext,i);
    }
};

Relational_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Relational_expression_DropletFileContext.prototype.IS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.IS);
    } else {
        return this.getToken(CSharpParser.IS, i);
    }
};


Relational_expression_DropletFileContext.prototype.isType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IsTypeContext);
    } else {
        return this.getTypedRuleContext(IsTypeContext,i);
    }
};

Relational_expression_DropletFileContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.AS);
    } else {
        return this.getToken(CSharpParser.AS, i);
    }
};


Relational_expression_DropletFileContext.prototype.var_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Var_typeContext);
    } else {
        return this.getTypedRuleContext(Var_typeContext,i);
    }
};

Relational_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterRelational_expression_DropletFile(this);
	}
};

Relational_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitRelational_expression_DropletFile(this);
	}
};




CSharpParser.Relational_expression_DropletFileContext = Relational_expression_DropletFileContext;

CSharpParser.prototype.relational_expression_DropletFile = function() {

    var localctx = new Relational_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, CSharpParser.RULE_relational_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3051;
        this.shift_expression();
        this.state = 3060;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.AS || _la===CSharpParser.IS || ((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (CSharpParser.LT - 143)) | (1 << (CSharpParser.GT - 143)) | (1 << (CSharpParser.OP_LE - 143)) | (1 << (CSharpParser.OP_GE - 143)))) !== 0)) {
            this.state = 3058;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.LT:
            case CSharpParser.GT:
            case CSharpParser.OP_LE:
            case CSharpParser.OP_GE:
                this.state = 3052;
                _la = this._input.LA(1);
                if(!(((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (CSharpParser.LT - 143)) | (1 << (CSharpParser.GT - 143)) | (1 << (CSharpParser.OP_LE - 143)) | (1 << (CSharpParser.OP_GE - 143)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3053;
                this.shift_expression();
                break;
            case CSharpParser.IS:
                this.state = 3054;
                this.match(CSharpParser.IS);
                this.state = 3055;
                this.isType();
                break;
            case CSharpParser.AS:
                this.state = 3056;
                this.match(CSharpParser.AS);
                this.state = 3057;
                this.var_type();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3062;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3063;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Shift_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_shift_expression_DropletFile;
    return this;
}

Shift_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Shift_expression_DropletFileContext.prototype.constructor = Shift_expression_DropletFileContext;

Shift_expression_DropletFileContext.prototype.additive_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Additive_expressionContext);
    } else {
        return this.getTypedRuleContext(Additive_expressionContext,i);
    }
};

Shift_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Shift_expression_DropletFileContext.prototype.right_shift = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Right_shiftContext);
    } else {
        return this.getTypedRuleContext(Right_shiftContext,i);
    }
};

Shift_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterShift_expression_DropletFile(this);
	}
};

Shift_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitShift_expression_DropletFile(this);
	}
};




CSharpParser.Shift_expression_DropletFileContext = Shift_expression_DropletFileContext;

CSharpParser.prototype.shift_expression_DropletFile = function() {

    var localctx = new Shift_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, CSharpParser.RULE_shift_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3065;
        this.additive_expression();
        this.state = 3073;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.GT || _la===CSharpParser.OP_LEFT_SHIFT) {
            this.state = 3068;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.OP_LEFT_SHIFT:
                this.state = 3066;
                this.match(CSharpParser.OP_LEFT_SHIFT);
                break;
            case CSharpParser.GT:
                this.state = 3067;
                this.right_shift();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3070;
            this.additive_expression();
            this.state = 3075;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3076;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Additive_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_additive_expression_DropletFile;
    return this;
}

Additive_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Additive_expression_DropletFileContext.prototype.constructor = Additive_expression_DropletFileContext;

Additive_expression_DropletFileContext.prototype.multiplicative_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Multiplicative_expressionContext);
    } else {
        return this.getTypedRuleContext(Multiplicative_expressionContext,i);
    }
};

Additive_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Additive_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAdditive_expression_DropletFile(this);
	}
};

Additive_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAdditive_expression_DropletFile(this);
	}
};




CSharpParser.Additive_expression_DropletFileContext = Additive_expression_DropletFileContext;

CSharpParser.prototype.additive_expression_DropletFile = function() {

    var localctx = new Additive_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, CSharpParser.RULE_additive_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3078;
        this.multiplicative_expression();
        this.state = 3083;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.PLUS || _la===CSharpParser.MINUS) {
            this.state = 3079;
            _la = this._input.LA(1);
            if(!(_la===CSharpParser.PLUS || _la===CSharpParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3080;
            this.multiplicative_expression();
            this.state = 3085;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3086;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiplicative_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_multiplicative_expression_DropletFile;
    return this;
}

Multiplicative_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiplicative_expression_DropletFileContext.prototype.constructor = Multiplicative_expression_DropletFileContext;

Multiplicative_expression_DropletFileContext.prototype.unary_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Unary_expressionContext);
    } else {
        return this.getTypedRuleContext(Unary_expressionContext,i);
    }
};

Multiplicative_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Multiplicative_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMultiplicative_expression_DropletFile(this);
	}
};

Multiplicative_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMultiplicative_expression_DropletFile(this);
	}
};




CSharpParser.Multiplicative_expression_DropletFileContext = Multiplicative_expression_DropletFileContext;

CSharpParser.prototype.multiplicative_expression_DropletFile = function() {

    var localctx = new Multiplicative_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, CSharpParser.RULE_multiplicative_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3088;
        this.unary_expression();
        this.state = 3093;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (CSharpParser.STAR - 134)) | (1 << (CSharpParser.DIV - 134)) | (1 << (CSharpParser.PERCENT - 134)))) !== 0)) {
            this.state = 3089;
            _la = this._input.LA(1);
            if(!(((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (CSharpParser.STAR - 134)) | (1 << (CSharpParser.DIV - 134)) | (1 << (CSharpParser.PERCENT - 134)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3090;
            this.unary_expression();
            this.state = 3095;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3096;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unary_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_unary_expression_DropletFile;
    return this;
}

Unary_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unary_expression_DropletFileContext.prototype.constructor = Unary_expression_DropletFileContext;

Unary_expression_DropletFileContext.prototype.primary_expression = function() {
    return this.getTypedRuleContext(Primary_expressionContext,0);
};

Unary_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Unary_expression_DropletFileContext.prototype.unary_expression = function() {
    return this.getTypedRuleContext(Unary_expressionContext,0);
};

Unary_expression_DropletFileContext.prototype.BANG = function() {
    return this.getToken(CSharpParser.BANG, 0);
};

Unary_expression_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Unary_expression_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Unary_expression_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Unary_expression_DropletFileContext.prototype.AWAIT = function() {
    return this.getToken(CSharpParser.AWAIT, 0);
};

Unary_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUnary_expression_DropletFile(this);
	}
};

Unary_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUnary_expression_DropletFile(this);
	}
};




CSharpParser.Unary_expression_DropletFileContext = Unary_expression_DropletFileContext;

CSharpParser.prototype.unary_expression_DropletFile = function() {

    var localctx = new Unary_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, CSharpParser.RULE_unary_expression_DropletFile);
    try {
        this.state = 3143;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3098;
            this.primary_expression();
            this.state = 3099;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3101;
            this.match(CSharpParser.PLUS);
            this.state = 3102;
            this.unary_expression();
            this.state = 3103;
            this.match(CSharpParser.EOF);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3105;
            this.match(CSharpParser.MINUS);
            this.state = 3106;
            this.unary_expression();
            this.state = 3107;
            this.match(CSharpParser.EOF);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3109;
            this.match(CSharpParser.BANG);
            this.state = 3110;
            this.unary_expression();
            this.state = 3111;
            this.match(CSharpParser.EOF);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3113;
            this.match(CSharpParser.TILDE);
            this.state = 3114;
            this.unary_expression();
            this.state = 3115;
            this.match(CSharpParser.EOF);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 3117;
            this.match(CSharpParser.OP_INC);
            this.state = 3118;
            this.unary_expression();
            this.state = 3119;
            this.match(CSharpParser.EOF);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 3121;
            this.match(CSharpParser.OP_DEC);
            this.state = 3122;
            this.unary_expression();
            this.state = 3123;
            this.match(CSharpParser.EOF);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 3125;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3126;
            this.var_type();
            this.state = 3127;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3128;
            this.unary_expression();
            this.state = 3129;
            this.match(CSharpParser.EOF);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 3131;
            this.match(CSharpParser.AWAIT);
            this.state = 3132;
            this.unary_expression();
            this.state = 3133;
            this.match(CSharpParser.EOF);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 3135;
            this.match(CSharpParser.AMP);
            this.state = 3136;
            this.unary_expression();
            this.state = 3137;
            this.match(CSharpParser.EOF);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 3139;
            this.match(CSharpParser.STAR);
            this.state = 3140;
            this.unary_expression();
            this.state = 3141;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Primary_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_primary_expression_DropletFile;
    this.pe = null; // Primary_expression_startContext
    return this;
}

Primary_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_expression_DropletFileContext.prototype.constructor = Primary_expression_DropletFileContext;

Primary_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Primary_expression_DropletFileContext.prototype.primary_expression_start = function() {
    return this.getTypedRuleContext(Primary_expression_startContext,0);
};

Primary_expression_DropletFileContext.prototype.bracket_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bracket_expressionContext);
    } else {
        return this.getTypedRuleContext(Bracket_expressionContext,i);
    }
};

Primary_expression_DropletFileContext.prototype.member_access = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Member_accessContext);
    } else {
        return this.getTypedRuleContext(Member_accessContext,i);
    }
};

Primary_expression_DropletFileContext.prototype.method_invocation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Method_invocationContext);
    } else {
        return this.getTypedRuleContext(Method_invocationContext,i);
    }
};

Primary_expression_DropletFileContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Primary_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterPrimary_expression_DropletFile(this);
	}
};

Primary_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitPrimary_expression_DropletFile(this);
	}
};




CSharpParser.Primary_expression_DropletFileContext = Primary_expression_DropletFileContext;

CSharpParser.prototype.primary_expression_DropletFile = function() {

    var localctx = new Primary_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, CSharpParser.RULE_primary_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3145;
        localctx.pe = this.primary_expression_start();
        this.state = 3149;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,338,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3146;
                this.bracket_expression(); 
            }
            this.state = 3151;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,338,this._ctx);
        }

        this.state = 3168;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (CSharpParser.OPEN_PARENS - 126)) | (1 << (CSharpParser.DOT - 126)) | (1 << (CSharpParser.INTERR - 126)) | (1 << (CSharpParser.OP_INC - 126)) | (1 << (CSharpParser.OP_DEC - 126)) | (1 << (CSharpParser.OP_PTR - 126)))) !== 0)) {
            this.state = 3158;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.DOT:
            case CSharpParser.INTERR:
                this.state = 3152;
                this.member_access();
                break;
            case CSharpParser.OPEN_PARENS:
                this.state = 3153;
                this.method_invocation();
                break;
            case CSharpParser.OP_INC:
                this.state = 3154;
                this.match(CSharpParser.OP_INC);
                break;
            case CSharpParser.OP_DEC:
                this.state = 3155;
                this.match(CSharpParser.OP_DEC);
                break;
            case CSharpParser.OP_PTR:
                this.state = 3156;
                this.match(CSharpParser.OP_PTR);
                this.state = 3157;
                this.identifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3163;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,340,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3160;
                    this.bracket_expression(); 
                }
                this.state = 3165;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,340,this._ctx);
            }

            this.state = 3170;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3171;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Primary_expression_start_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_primary_expression_start_DropletFile;
    return this;
}

Primary_expression_start_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_expression_start_DropletFileContext.prototype.constructor = Primary_expression_start_DropletFileContext;


 
Primary_expression_start_DropletFileContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SimpleNameExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleNameExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
SimpleNameExpression_DropletFileContext.prototype.constructor = SimpleNameExpression_DropletFileContext;

CSharpParser.SimpleNameExpression_DropletFileContext = SimpleNameExpression_DropletFileContext;

SimpleNameExpression_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SimpleNameExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

SimpleNameExpression_DropletFileContext.prototype.type_argument_list = function() {
    return this.getTypedRuleContext(Type_argument_listContext,0);
};
SimpleNameExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSimpleNameExpression_DropletFile(this);
	}
};

SimpleNameExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSimpleNameExpression_DropletFile(this);
	}
};


function ParenthesisExpressions_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesisExpressions_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
ParenthesisExpressions_DropletFileContext.prototype.constructor = ParenthesisExpressions_DropletFileContext;

CSharpParser.ParenthesisExpressions_DropletFileContext = ParenthesisExpressions_DropletFileContext;

ParenthesisExpressions_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

ParenthesisExpressions_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParenthesisExpressions_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

ParenthesisExpressions_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
ParenthesisExpressions_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterParenthesisExpressions_DropletFile(this);
	}
};

ParenthesisExpressions_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitParenthesisExpressions_DropletFile(this);
	}
};


function BaseAccessExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BaseAccessExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
BaseAccessExpression_DropletFileContext.prototype.constructor = BaseAccessExpression_DropletFileContext;

CSharpParser.BaseAccessExpression_DropletFileContext = BaseAccessExpression_DropletFileContext;

BaseAccessExpression_DropletFileContext.prototype.BASE = function() {
    return this.getToken(CSharpParser.BASE, 0);
};

BaseAccessExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

BaseAccessExpression_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BaseAccessExpression_DropletFileContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

BaseAccessExpression_DropletFileContext.prototype.type_argument_list = function() {
    return this.getTypedRuleContext(Type_argument_listContext,0);
};
BaseAccessExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBaseAccessExpression_DropletFile(this);
	}
};

BaseAccessExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBaseAccessExpression_DropletFile(this);
	}
};


function NameofExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NameofExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
NameofExpression_DropletFileContext.prototype.constructor = NameofExpression_DropletFileContext;

CSharpParser.NameofExpression_DropletFileContext = NameofExpression_DropletFileContext;

NameofExpression_DropletFileContext.prototype.NAMEOF = function() {
    return this.getToken(CSharpParser.NAMEOF, 0);
};

NameofExpression_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

NameofExpression_DropletFileContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

NameofExpression_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

NameofExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
NameofExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNameofExpression_DropletFile(this);
	}
};

NameofExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNameofExpression_DropletFile(this);
	}
};


function UncheckedExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UncheckedExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
UncheckedExpression_DropletFileContext.prototype.constructor = UncheckedExpression_DropletFileContext;

CSharpParser.UncheckedExpression_DropletFileContext = UncheckedExpression_DropletFileContext;

UncheckedExpression_DropletFileContext.prototype.UNCHECKED = function() {
    return this.getToken(CSharpParser.UNCHECKED, 0);
};

UncheckedExpression_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

UncheckedExpression_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UncheckedExpression_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

UncheckedExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
UncheckedExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUncheckedExpression_DropletFile(this);
	}
};

UncheckedExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUncheckedExpression_DropletFile(this);
	}
};


function ObjectCreationExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ObjectCreationExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
ObjectCreationExpression_DropletFileContext.prototype.constructor = ObjectCreationExpression_DropletFileContext;

CSharpParser.ObjectCreationExpression_DropletFileContext = ObjectCreationExpression_DropletFileContext;

ObjectCreationExpression_DropletFileContext.prototype.NEW = function() {
    return this.getToken(CSharpParser.NEW, 0);
};

ObjectCreationExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

ObjectCreationExpression_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

ObjectCreationExpression_DropletFileContext.prototype.anonymous_object_initializer = function() {
    return this.getTypedRuleContext(Anonymous_object_initializerContext,0);
};

ObjectCreationExpression_DropletFileContext.prototype.rank_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rank_specifierContext);
    } else {
        return this.getTypedRuleContext(Rank_specifierContext,i);
    }
};

ObjectCreationExpression_DropletFileContext.prototype.array_initializer = function() {
    return this.getTypedRuleContext(Array_initializerContext,0);
};

ObjectCreationExpression_DropletFileContext.prototype.object_creation_expression = function() {
    return this.getTypedRuleContext(Object_creation_expressionContext,0);
};

ObjectCreationExpression_DropletFileContext.prototype.object_or_collection_initializer = function() {
    return this.getTypedRuleContext(Object_or_collection_initializerContext,0);
};

ObjectCreationExpression_DropletFileContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};
ObjectCreationExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterObjectCreationExpression_DropletFile(this);
	}
};

ObjectCreationExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitObjectCreationExpression_DropletFile(this);
	}
};


function DefaultValueExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefaultValueExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
DefaultValueExpression_DropletFileContext.prototype.constructor = DefaultValueExpression_DropletFileContext;

CSharpParser.DefaultValueExpression_DropletFileContext = DefaultValueExpression_DropletFileContext;

DefaultValueExpression_DropletFileContext.prototype.DEFAULT = function() {
    return this.getToken(CSharpParser.DEFAULT, 0);
};

DefaultValueExpression_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

DefaultValueExpression_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

DefaultValueExpression_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

DefaultValueExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
DefaultValueExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterDefaultValueExpression_DropletFile(this);
	}
};

DefaultValueExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitDefaultValueExpression_DropletFile(this);
	}
};


function MemberAccessExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberAccessExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
MemberAccessExpression_DropletFileContext.prototype.constructor = MemberAccessExpression_DropletFileContext;

CSharpParser.MemberAccessExpression_DropletFileContext = MemberAccessExpression_DropletFileContext;

MemberAccessExpression_DropletFileContext.prototype.predefined_type = function() {
    return this.getTypedRuleContext(Predefined_typeContext,0);
};

MemberAccessExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

MemberAccessExpression_DropletFileContext.prototype.qualified_alias_member = function() {
    return this.getTypedRuleContext(Qualified_alias_memberContext,0);
};
MemberAccessExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMemberAccessExpression_DropletFile(this);
	}
};

MemberAccessExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMemberAccessExpression_DropletFile(this);
	}
};


function CheckedExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CheckedExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
CheckedExpression_DropletFileContext.prototype.constructor = CheckedExpression_DropletFileContext;

CSharpParser.CheckedExpression_DropletFileContext = CheckedExpression_DropletFileContext;

CheckedExpression_DropletFileContext.prototype.CHECKED = function() {
    return this.getToken(CSharpParser.CHECKED, 0);
};

CheckedExpression_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

CheckedExpression_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CheckedExpression_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

CheckedExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
CheckedExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCheckedExpression_DropletFile(this);
	}
};

CheckedExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCheckedExpression_DropletFile(this);
	}
};


function SizeofExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SizeofExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
SizeofExpression_DropletFileContext.prototype.constructor = SizeofExpression_DropletFileContext;

CSharpParser.SizeofExpression_DropletFileContext = SizeofExpression_DropletFileContext;

SizeofExpression_DropletFileContext.prototype.SIZEOF = function() {
    return this.getToken(CSharpParser.SIZEOF, 0);
};

SizeofExpression_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

SizeofExpression_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

SizeofExpression_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

SizeofExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
SizeofExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSizeofExpression_DropletFile(this);
	}
};

SizeofExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSizeofExpression_DropletFile(this);
	}
};


function LiteralExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
LiteralExpression_DropletFileContext.prototype.constructor = LiteralExpression_DropletFileContext;

CSharpParser.LiteralExpression_DropletFileContext = LiteralExpression_DropletFileContext;

LiteralExpression_DropletFileContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

LiteralExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
LiteralExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLiteralExpression_DropletFile(this);
	}
};

LiteralExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLiteralExpression_DropletFile(this);
	}
};


function LiteralAccessExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralAccessExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
LiteralAccessExpression_DropletFileContext.prototype.constructor = LiteralAccessExpression_DropletFileContext;

CSharpParser.LiteralAccessExpression_DropletFileContext = LiteralAccessExpression_DropletFileContext;

LiteralAccessExpression_DropletFileContext.prototype.LITERAL_ACCESS = function() {
    return this.getToken(CSharpParser.LITERAL_ACCESS, 0);
};

LiteralAccessExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
LiteralAccessExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLiteralAccessExpression_DropletFile(this);
	}
};

LiteralAccessExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLiteralAccessExpression_DropletFile(this);
	}
};


function ThisReferenceExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisReferenceExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
ThisReferenceExpression_DropletFileContext.prototype.constructor = ThisReferenceExpression_DropletFileContext;

CSharpParser.ThisReferenceExpression_DropletFileContext = ThisReferenceExpression_DropletFileContext;

ThisReferenceExpression_DropletFileContext.prototype.THIS = function() {
    return this.getToken(CSharpParser.THIS, 0);
};

ThisReferenceExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
ThisReferenceExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterThisReferenceExpression_DropletFile(this);
	}
};

ThisReferenceExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitThisReferenceExpression_DropletFile(this);
	}
};


function AnonymousMethodExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnonymousMethodExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
AnonymousMethodExpression_DropletFileContext.prototype.constructor = AnonymousMethodExpression_DropletFileContext;

CSharpParser.AnonymousMethodExpression_DropletFileContext = AnonymousMethodExpression_DropletFileContext;

AnonymousMethodExpression_DropletFileContext.prototype.DELEGATE = function() {
    return this.getToken(CSharpParser.DELEGATE, 0);
};

AnonymousMethodExpression_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

AnonymousMethodExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

AnonymousMethodExpression_DropletFileContext.prototype.ASYNC = function() {
    return this.getToken(CSharpParser.ASYNC, 0);
};

AnonymousMethodExpression_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

AnonymousMethodExpression_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

AnonymousMethodExpression_DropletFileContext.prototype.explicit_anonymous_function_parameter_list = function() {
    return this.getTypedRuleContext(Explicit_anonymous_function_parameter_listContext,0);
};
AnonymousMethodExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAnonymousMethodExpression_DropletFile(this);
	}
};

AnonymousMethodExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAnonymousMethodExpression_DropletFile(this);
	}
};


function TypeofExpression_DropletFileContext(parser, ctx) {
	Primary_expression_start_DropletFileContext.call(this, parser);
    Primary_expression_start_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeofExpression_DropletFileContext.prototype = Object.create(Primary_expression_start_DropletFileContext.prototype);
TypeofExpression_DropletFileContext.prototype.constructor = TypeofExpression_DropletFileContext;

CSharpParser.TypeofExpression_DropletFileContext = TypeofExpression_DropletFileContext;

TypeofExpression_DropletFileContext.prototype.TYPEOF = function() {
    return this.getToken(CSharpParser.TYPEOF, 0);
};

TypeofExpression_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

TypeofExpression_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

TypeofExpression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

TypeofExpression_DropletFileContext.prototype.unbound_type_name = function() {
    return this.getTypedRuleContext(Unbound_type_nameContext,0);
};

TypeofExpression_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

TypeofExpression_DropletFileContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};
TypeofExpression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterTypeofExpression_DropletFile(this);
	}
};

TypeofExpression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitTypeofExpression_DropletFile(this);
	}
};



CSharpParser.Primary_expression_start_DropletFileContext = Primary_expression_start_DropletFileContext;

CSharpParser.prototype.primary_expression_start_DropletFile = function() {

    var localctx = new Primary_expression_start_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, CSharpParser.RULE_primary_expression_start_DropletFile);
    var _la = 0; // Token type
    try {
        this.state = 3305;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LiteralExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 3173;
            this.literal();
            this.state = 3174;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            localctx = new SimpleNameExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 3176;
            this.identifier();
            this.state = 3178;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.LT) {
                this.state = 3177;
                this.type_argument_list();
            }

            this.state = 3180;
            this.match(CSharpParser.EOF);
            break;

        case 3:
            localctx = new ParenthesisExpressions_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 3182;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3183;
            this.expression();
            this.state = 3184;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3185;
            this.match(CSharpParser.EOF);
            break;

        case 4:
            localctx = new MemberAccessExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 3187;
            this.predefined_type();
            this.state = 3188;
            this.match(CSharpParser.EOF);
            break;

        case 5:
            localctx = new MemberAccessExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 3190;
            this.qualified_alias_member();
            this.state = 3191;
            this.match(CSharpParser.EOF);
            break;

        case 6:
            localctx = new LiteralAccessExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 3193;
            this.match(CSharpParser.LITERAL_ACCESS);
            this.state = 3194;
            this.match(CSharpParser.EOF);
            break;

        case 7:
            localctx = new ThisReferenceExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 3195;
            this.match(CSharpParser.THIS);
            this.state = 3196;
            this.match(CSharpParser.EOF);
            break;

        case 8:
            localctx = new BaseAccessExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 3197;
            this.match(CSharpParser.BASE);
            this.state = 3207;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.DOT:
                this.state = 3198;
                this.match(CSharpParser.DOT);
                this.state = 3199;
                this.identifier();
                this.state = 3201;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CSharpParser.LT) {
                    this.state = 3200;
                    this.type_argument_list();
                }

                break;
            case CSharpParser.OPEN_BRACKET:
                this.state = 3203;
                this.match(CSharpParser.OPEN_BRACKET);
                this.state = 3204;
                this.expression_list();
                this.state = 3205;
                this.match(CSharpParser.CLOSE_BRACKET);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3209;
            this.match(CSharpParser.EOF);
            break;

        case 9:
            localctx = new ObjectCreationExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 3211;
            this.match(CSharpParser.NEW);
            this.state = 3240;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.ADD:
            case CSharpParser.ALIAS:
            case CSharpParser.ARGLIST:
            case CSharpParser.ASCENDING:
            case CSharpParser.ASYNC:
            case CSharpParser.AWAIT:
            case CSharpParser.BOOL:
            case CSharpParser.BY:
            case CSharpParser.BYTE:
            case CSharpParser.CHAR:
            case CSharpParser.DECIMAL:
            case CSharpParser.DESCENDING:
            case CSharpParser.DOUBLE:
            case CSharpParser.DYNAMIC:
            case CSharpParser.EQUALS:
            case CSharpParser.FLOAT:
            case CSharpParser.FROM:
            case CSharpParser.GET:
            case CSharpParser.GROUP:
            case CSharpParser.INT:
            case CSharpParser.INTO:
            case CSharpParser.JOIN:
            case CSharpParser.LET:
            case CSharpParser.LONG:
            case CSharpParser.NAMEOF:
            case CSharpParser.OBJECT:
            case CSharpParser.ON:
            case CSharpParser.ORDERBY:
            case CSharpParser.PARTIAL:
            case CSharpParser.REMOVE:
            case CSharpParser.SBYTE:
            case CSharpParser.SELECT:
            case CSharpParser.SET:
            case CSharpParser.SHORT:
            case CSharpParser.STRING:
            case CSharpParser.UINT:
            case CSharpParser.ULONG:
            case CSharpParser.USHORT:
            case CSharpParser.VAR:
            case CSharpParser.VOID:
            case CSharpParser.WHEN:
            case CSharpParser.WHERE:
            case CSharpParser.YIELD:
            case CSharpParser.IDENTIFIER:
                this.state = 3212;
                this.var_type();
                this.state = 3234;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 3213;
                    this.object_creation_expression();
                    break;

                case 2:
                    this.state = 3214;
                    this.object_or_collection_initializer();
                    break;

                case 3:
                    this.state = 3215;
                    this.match(CSharpParser.OPEN_BRACKET);
                    this.state = 3216;
                    this.expression_list();
                    this.state = 3217;
                    this.match(CSharpParser.CLOSE_BRACKET);
                    this.state = 3221;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===CSharpParser.OPEN_BRACKET) {
                        this.state = 3218;
                        this.rank_specifier();
                        this.state = 3223;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3225;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CSharpParser.OPEN_BRACE) {
                        this.state = 3224;
                        this.array_initializer();
                    }

                    break;

                case 4:
                    this.state = 3228; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 3227;
                        this.rank_specifier();
                        this.state = 3230; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===CSharpParser.OPEN_BRACKET);
                    this.state = 3232;
                    this.array_initializer();
                    break;

                }
                break;
            case CSharpParser.OPEN_BRACE:
                this.state = 3236;
                this.anonymous_object_initializer();
                break;
            case CSharpParser.OPEN_BRACKET:
                this.state = 3237;
                this.rank_specifier();
                this.state = 3238;
                this.array_initializer();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3242;
            this.match(CSharpParser.EOF);
            break;

        case 10:
            localctx = new TypeofExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 3244;
            this.match(CSharpParser.TYPEOF);
            this.state = 3245;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3249;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
            switch(la_) {
            case 1:
                this.state = 3246;
                this.unbound_type_name();
                break;

            case 2:
                this.state = 3247;
                this.var_type();
                break;

            case 3:
                this.state = 3248;
                this.match(CSharpParser.VOID);
                break;

            }
            this.state = 3251;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3252;
            this.match(CSharpParser.EOF);
            break;

        case 11:
            localctx = new CheckedExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 3253;
            this.match(CSharpParser.CHECKED);
            this.state = 3254;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3255;
            this.expression();
            this.state = 3256;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3257;
            this.match(CSharpParser.EOF);
            break;

        case 12:
            localctx = new UncheckedExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 3259;
            this.match(CSharpParser.UNCHECKED);
            this.state = 3260;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3261;
            this.expression();
            this.state = 3262;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3263;
            this.match(CSharpParser.EOF);
            break;

        case 13:
            localctx = new DefaultValueExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 3265;
            this.match(CSharpParser.DEFAULT);
            this.state = 3266;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3267;
            this.var_type();
            this.state = 3268;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3269;
            this.match(CSharpParser.EOF);
            break;

        case 14:
            localctx = new AnonymousMethodExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 3272;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.ASYNC) {
                this.state = 3271;
                this.match(CSharpParser.ASYNC);
            }

            this.state = 3274;
            this.match(CSharpParser.DELEGATE);
            this.state = 3280;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.OPEN_PARENS) {
                this.state = 3275;
                this.match(CSharpParser.OPEN_PARENS);
                this.state = 3277;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CSharpParser.OBJECT - 67)) | (1 << (CSharpParser.ON - 67)) | (1 << (CSharpParser.ORDERBY - 67)) | (1 << (CSharpParser.OUT - 67)) | (1 << (CSharpParser.PARTIAL - 67)) | (1 << (CSharpParser.REF - 67)) | (1 << (CSharpParser.REMOVE - 67)) | (1 << (CSharpParser.SBYTE - 67)) | (1 << (CSharpParser.SELECT - 67)) | (1 << (CSharpParser.SET - 67)) | (1 << (CSharpParser.SHORT - 67)) | (1 << (CSharpParser.STRING - 67)) | (1 << (CSharpParser.UINT - 67)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)))) !== 0)) {
                    this.state = 3276;
                    this.explicit_anonymous_function_parameter_list();
                }

                this.state = 3279;
                this.match(CSharpParser.CLOSE_PARENS);
            }

            this.state = 3282;
            this.block();
            this.state = 3283;
            this.match(CSharpParser.EOF);
            break;

        case 15:
            localctx = new SizeofExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 3285;
            this.match(CSharpParser.SIZEOF);
            this.state = 3286;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3287;
            this.var_type();
            this.state = 3288;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3289;
            this.match(CSharpParser.EOF);
            break;

        case 16:
            localctx = new NameofExpression_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 3291;
            this.match(CSharpParser.NAMEOF);
            this.state = 3292;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3298;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,354,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3293;
                    this.identifier();
                    this.state = 3294;
                    this.match(CSharpParser.DOT); 
                }
                this.state = 3300;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,354,this._ctx);
            }

            this.state = 3301;
            this.identifier();
            this.state = 3302;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3303;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_access_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_member_access_DropletFile;
    return this;
}

Member_access_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_access_DropletFileContext.prototype.constructor = Member_access_DropletFileContext;

Member_access_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Member_access_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Member_access_DropletFileContext.prototype.type_argument_list = function() {
    return this.getTypedRuleContext(Type_argument_listContext,0);
};

Member_access_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMember_access_DropletFile(this);
	}
};

Member_access_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMember_access_DropletFile(this);
	}
};




CSharpParser.Member_access_DropletFileContext = Member_access_DropletFileContext;

CSharpParser.prototype.member_access_DropletFile = function() {

    var localctx = new Member_access_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, CSharpParser.RULE_member_access_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3308;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.INTERR) {
            this.state = 3307;
            this.match(CSharpParser.INTERR);
        }

        this.state = 3310;
        this.match(CSharpParser.DOT);
        this.state = 3311;
        this.identifier();
        this.state = 3313;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.LT) {
            this.state = 3312;
            this.type_argument_list();
        }

        this.state = 3315;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bracket_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_bracket_expression_DropletFile;
    return this;
}

Bracket_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bracket_expression_DropletFileContext.prototype.constructor = Bracket_expression_DropletFileContext;

Bracket_expression_DropletFileContext.prototype.indexer_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Indexer_argumentContext);
    } else {
        return this.getTypedRuleContext(Indexer_argumentContext,i);
    }
};

Bracket_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Bracket_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBracket_expression_DropletFile(this);
	}
};

Bracket_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBracket_expression_DropletFile(this);
	}
};




CSharpParser.Bracket_expression_DropletFileContext = Bracket_expression_DropletFileContext;

CSharpParser.prototype.bracket_expression_DropletFile = function() {

    var localctx = new Bracket_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, CSharpParser.RULE_bracket_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3318;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.INTERR) {
            this.state = 3317;
            this.match(CSharpParser.INTERR);
        }

        this.state = 3320;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 3321;
        this.indexer_argument();
        this.state = 3326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 3322;
            this.match(CSharpParser.COMMA);
            this.state = 3323;
            this.indexer_argument();
            this.state = 3328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3329;
        this.match(CSharpParser.CLOSE_BRACKET);
        this.state = 3330;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Indexer_argument_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_indexer_argument_DropletFile;
    return this;
}

Indexer_argument_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Indexer_argument_DropletFileContext.prototype.constructor = Indexer_argument_DropletFileContext;

Indexer_argument_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Indexer_argument_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Indexer_argument_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Indexer_argument_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIndexer_argument_DropletFile(this);
	}
};

Indexer_argument_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIndexer_argument_DropletFile(this);
	}
};




CSharpParser.Indexer_argument_DropletFileContext = Indexer_argument_DropletFileContext;

CSharpParser.prototype.indexer_argument_DropletFile = function() {

    var localctx = new Indexer_argument_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, CSharpParser.RULE_indexer_argument_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3335;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,360,this._ctx);
        if(la_===1) {
            this.state = 3332;
            this.identifier();
            this.state = 3333;
            this.match(CSharpParser.COLON);

        }
        this.state = 3337;
        this.expression();
        this.state = 3338;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Predefined_type_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_predefined_type_DropletFile;
    return this;
}

Predefined_type_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Predefined_type_DropletFileContext.prototype.constructor = Predefined_type_DropletFileContext;

Predefined_type_DropletFileContext.prototype.BOOL = function() {
    return this.getToken(CSharpParser.BOOL, 0);
};

Predefined_type_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Predefined_type_DropletFileContext.prototype.BYTE = function() {
    return this.getToken(CSharpParser.BYTE, 0);
};

Predefined_type_DropletFileContext.prototype.CHAR = function() {
    return this.getToken(CSharpParser.CHAR, 0);
};

Predefined_type_DropletFileContext.prototype.DECIMAL = function() {
    return this.getToken(CSharpParser.DECIMAL, 0);
};

Predefined_type_DropletFileContext.prototype.DOUBLE = function() {
    return this.getToken(CSharpParser.DOUBLE, 0);
};

Predefined_type_DropletFileContext.prototype.FLOAT = function() {
    return this.getToken(CSharpParser.FLOAT, 0);
};

Predefined_type_DropletFileContext.prototype.INT = function() {
    return this.getToken(CSharpParser.INT, 0);
};

Predefined_type_DropletFileContext.prototype.LONG = function() {
    return this.getToken(CSharpParser.LONG, 0);
};

Predefined_type_DropletFileContext.prototype.OBJECT = function() {
    return this.getToken(CSharpParser.OBJECT, 0);
};

Predefined_type_DropletFileContext.prototype.SBYTE = function() {
    return this.getToken(CSharpParser.SBYTE, 0);
};

Predefined_type_DropletFileContext.prototype.SHORT = function() {
    return this.getToken(CSharpParser.SHORT, 0);
};

Predefined_type_DropletFileContext.prototype.STRING = function() {
    return this.getToken(CSharpParser.STRING, 0);
};

Predefined_type_DropletFileContext.prototype.UINT = function() {
    return this.getToken(CSharpParser.UINT, 0);
};

Predefined_type_DropletFileContext.prototype.ULONG = function() {
    return this.getToken(CSharpParser.ULONG, 0);
};

Predefined_type_DropletFileContext.prototype.USHORT = function() {
    return this.getToken(CSharpParser.USHORT, 0);
};

Predefined_type_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterPredefined_type_DropletFile(this);
	}
};

Predefined_type_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitPredefined_type_DropletFile(this);
	}
};




CSharpParser.Predefined_type_DropletFileContext = Predefined_type_DropletFileContext;

CSharpParser.prototype.predefined_type_DropletFile = function() {

    var localctx = new Predefined_type_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, CSharpParser.RULE_predefined_type_DropletFile);
    try {
        this.state = 3370;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.BOOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3340;
            this.match(CSharpParser.BOOL);
            this.state = 3341;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.BYTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 3342;
            this.match(CSharpParser.BYTE);
            this.state = 3343;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.CHAR:
            this.enterOuterAlt(localctx, 3);
            this.state = 3344;
            this.match(CSharpParser.CHAR);
            this.state = 3345;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DECIMAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 3346;
            this.match(CSharpParser.DECIMAL);
            this.state = 3347;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DOUBLE:
            this.enterOuterAlt(localctx, 5);
            this.state = 3348;
            this.match(CSharpParser.DOUBLE);
            this.state = 3349;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.FLOAT:
            this.enterOuterAlt(localctx, 6);
            this.state = 3350;
            this.match(CSharpParser.FLOAT);
            this.state = 3351;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.INT:
            this.enterOuterAlt(localctx, 7);
            this.state = 3352;
            this.match(CSharpParser.INT);
            this.state = 3353;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.LONG:
            this.enterOuterAlt(localctx, 8);
            this.state = 3354;
            this.match(CSharpParser.LONG);
            this.state = 3355;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OBJECT:
            this.enterOuterAlt(localctx, 9);
            this.state = 3356;
            this.match(CSharpParser.OBJECT);
            this.state = 3357;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SBYTE:
            this.enterOuterAlt(localctx, 10);
            this.state = 3358;
            this.match(CSharpParser.SBYTE);
            this.state = 3359;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SHORT:
            this.enterOuterAlt(localctx, 11);
            this.state = 3360;
            this.match(CSharpParser.SHORT);
            this.state = 3361;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.STRING:
            this.enterOuterAlt(localctx, 12);
            this.state = 3362;
            this.match(CSharpParser.STRING);
            this.state = 3363;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.UINT:
            this.enterOuterAlt(localctx, 13);
            this.state = 3364;
            this.match(CSharpParser.UINT);
            this.state = 3365;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ULONG:
            this.enterOuterAlt(localctx, 14);
            this.state = 3366;
            this.match(CSharpParser.ULONG);
            this.state = 3367;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.USHORT:
            this.enterOuterAlt(localctx, 15);
            this.state = 3368;
            this.match(CSharpParser.USHORT);
            this.state = 3369;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_list_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_expression_list_DropletFile;
    return this;
}

Expression_list_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_list_DropletFileContext.prototype.constructor = Expression_list_DropletFileContext;

Expression_list_DropletFileContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_list_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Expression_list_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExpression_list_DropletFile(this);
	}
};

Expression_list_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExpression_list_DropletFile(this);
	}
};




CSharpParser.Expression_list_DropletFileContext = Expression_list_DropletFileContext;

CSharpParser.prototype.expression_list_DropletFile = function() {

    var localctx = new Expression_list_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, CSharpParser.RULE_expression_list_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3372;
        this.expression();
        this.state = 3377;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 3373;
            this.match(CSharpParser.COMMA);
            this.state = 3374;
            this.expression();
            this.state = 3379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3380;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_or_collection_initializer_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_object_or_collection_initializer_DropletFile;
    return this;
}

Object_or_collection_initializer_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_or_collection_initializer_DropletFileContext.prototype.constructor = Object_or_collection_initializer_DropletFileContext;

Object_or_collection_initializer_DropletFileContext.prototype.object_initializer = function() {
    return this.getTypedRuleContext(Object_initializerContext,0);
};

Object_or_collection_initializer_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Object_or_collection_initializer_DropletFileContext.prototype.collection_initializer = function() {
    return this.getTypedRuleContext(Collection_initializerContext,0);
};

Object_or_collection_initializer_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterObject_or_collection_initializer_DropletFile(this);
	}
};

Object_or_collection_initializer_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitObject_or_collection_initializer_DropletFile(this);
	}
};




CSharpParser.Object_or_collection_initializer_DropletFileContext = Object_or_collection_initializer_DropletFileContext;

CSharpParser.prototype.object_or_collection_initializer_DropletFile = function() {

    var localctx = new Object_or_collection_initializer_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, CSharpParser.RULE_object_or_collection_initializer_DropletFile);
    try {
        this.state = 3388;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,363,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3382;
            this.object_initializer();
            this.state = 3383;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3385;
            this.collection_initializer();
            this.state = 3386;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_initializer_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_object_initializer_DropletFile;
    return this;
}

Object_initializer_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_initializer_DropletFileContext.prototype.constructor = Object_initializer_DropletFileContext;

Object_initializer_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Object_initializer_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Object_initializer_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Object_initializer_DropletFileContext.prototype.member_initializer_list = function() {
    return this.getTypedRuleContext(Member_initializer_listContext,0);
};

Object_initializer_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterObject_initializer_DropletFile(this);
	}
};

Object_initializer_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitObject_initializer_DropletFile(this);
	}
};




CSharpParser.Object_initializer_DropletFileContext = Object_initializer_DropletFileContext;

CSharpParser.prototype.object_initializer_DropletFile = function() {

    var localctx = new Object_initializer_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, CSharpParser.RULE_object_initializer_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3390;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 3395;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CSharpParser.DYNAMIC - 34)) | (1 << (CSharpParser.EQUALS - 34)) | (1 << (CSharpParser.FROM - 34)) | (1 << (CSharpParser.GET - 34)) | (1 << (CSharpParser.GROUP - 34)) | (1 << (CSharpParser.INTO - 34)) | (1 << (CSharpParser.JOIN - 34)) | (1 << (CSharpParser.LET - 34)) | (1 << (CSharpParser.NAMEOF - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CSharpParser.ON - 68)) | (1 << (CSharpParser.ORDERBY - 68)) | (1 << (CSharpParser.PARTIAL - 68)) | (1 << (CSharpParser.REMOVE - 68)) | (1 << (CSharpParser.SELECT - 68)) | (1 << (CSharpParser.SET - 68)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (CSharpParser.VAR - 104)) | (1 << (CSharpParser.WHEN - 104)) | (1 << (CSharpParser.WHERE - 104)) | (1 << (CSharpParser.YIELD - 104)) | (1 << (CSharpParser.IDENTIFIER - 104)) | (1 << (CSharpParser.OPEN_BRACKET - 104)))) !== 0)) {
            this.state = 3391;
            this.member_initializer_list();
            this.state = 3393;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.COMMA) {
                this.state = 3392;
                this.match(CSharpParser.COMMA);
            }

        }

        this.state = 3397;
        this.match(CSharpParser.CLOSE_BRACE);
        this.state = 3398;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_initializer_list_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_member_initializer_list_DropletFile;
    return this;
}

Member_initializer_list_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_initializer_list_DropletFileContext.prototype.constructor = Member_initializer_list_DropletFileContext;

Member_initializer_list_DropletFileContext.prototype.member_initializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Member_initializerContext);
    } else {
        return this.getTypedRuleContext(Member_initializerContext,i);
    }
};

Member_initializer_list_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Member_initializer_list_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMember_initializer_list_DropletFile(this);
	}
};

Member_initializer_list_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMember_initializer_list_DropletFile(this);
	}
};




CSharpParser.Member_initializer_list_DropletFileContext = Member_initializer_list_DropletFileContext;

CSharpParser.prototype.member_initializer_list_DropletFile = function() {

    var localctx = new Member_initializer_list_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, CSharpParser.RULE_member_initializer_list_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3400;
        this.member_initializer();
        this.state = 3405;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 3401;
            this.match(CSharpParser.COMMA);
            this.state = 3402;
            this.member_initializer();
            this.state = 3407;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3408;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_initializer_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_member_initializer_DropletFile;
    return this;
}

Member_initializer_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_initializer_DropletFileContext.prototype.constructor = Member_initializer_DropletFileContext;

Member_initializer_DropletFileContext.prototype.initializer_value = function() {
    return this.getTypedRuleContext(Initializer_valueContext,0);
};

Member_initializer_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Member_initializer_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Member_initializer_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Member_initializer_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMember_initializer_DropletFile(this);
	}
};

Member_initializer_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMember_initializer_DropletFile(this);
	}
};




CSharpParser.Member_initializer_DropletFileContext = Member_initializer_DropletFileContext;

CSharpParser.prototype.member_initializer_DropletFile = function() {

    var localctx = new Member_initializer_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, CSharpParser.RULE_member_initializer_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3415;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BY:
        case CSharpParser.DESCENDING:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.NAMEOF:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.state = 3410;
            this.identifier();
            break;
        case CSharpParser.OPEN_BRACKET:
            this.state = 3411;
            this.match(CSharpParser.OPEN_BRACKET);
            this.state = 3412;
            this.expression();
            this.state = 3413;
            this.match(CSharpParser.CLOSE_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3417;
        this.match(CSharpParser.ASSIGNMENT);
        this.state = 3418;
        this.initializer_value();
        this.state = 3419;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Initializer_value_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_initializer_value_DropletFile;
    return this;
}

Initializer_value_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_value_DropletFileContext.prototype.constructor = Initializer_value_DropletFileContext;

Initializer_value_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Initializer_value_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Initializer_value_DropletFileContext.prototype.object_or_collection_initializer = function() {
    return this.getTypedRuleContext(Object_or_collection_initializerContext,0);
};

Initializer_value_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInitializer_value_DropletFile(this);
	}
};

Initializer_value_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInitializer_value_DropletFile(this);
	}
};




CSharpParser.Initializer_value_DropletFileContext = Initializer_value_DropletFileContext;

CSharpParser.prototype.initializer_value_DropletFile = function() {

    var localctx = new Initializer_value_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, CSharpParser.RULE_initializer_value_DropletFile);
    try {
        this.state = 3427;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 3421;
            this.expression();
            this.state = 3422;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 3424;
            this.object_or_collection_initializer();
            this.state = 3425;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collection_initializer_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_collection_initializer_DropletFile;
    return this;
}

Collection_initializer_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collection_initializer_DropletFileContext.prototype.constructor = Collection_initializer_DropletFileContext;

Collection_initializer_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Collection_initializer_DropletFileContext.prototype.element_initializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Element_initializerContext);
    } else {
        return this.getTypedRuleContext(Element_initializerContext,i);
    }
};

Collection_initializer_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Collection_initializer_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Collection_initializer_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCollection_initializer_DropletFile(this);
	}
};

Collection_initializer_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCollection_initializer_DropletFile(this);
	}
};




CSharpParser.Collection_initializer_DropletFileContext = Collection_initializer_DropletFileContext;

CSharpParser.prototype.collection_initializer_DropletFile = function() {

    var localctx = new Collection_initializer_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, CSharpParser.RULE_collection_initializer_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3429;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 3430;
        this.element_initializer();
        this.state = 3435;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,369,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3431;
                this.match(CSharpParser.COMMA);
                this.state = 3432;
                this.element_initializer(); 
            }
            this.state = 3437;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,369,this._ctx);
        }

        this.state = 3439;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COMMA) {
            this.state = 3438;
            this.match(CSharpParser.COMMA);
        }

        this.state = 3441;
        this.match(CSharpParser.CLOSE_BRACE);
        this.state = 3442;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Element_initializer_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_element_initializer_DropletFile;
    return this;
}

Element_initializer_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Element_initializer_DropletFileContext.prototype.constructor = Element_initializer_DropletFileContext;

Element_initializer_DropletFileContext.prototype.non_assignment_expression = function() {
    return this.getTypedRuleContext(Non_assignment_expressionContext,0);
};

Element_initializer_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Element_initializer_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Element_initializer_DropletFileContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Element_initializer_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Element_initializer_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterElement_initializer_DropletFile(this);
	}
};

Element_initializer_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitElement_initializer_DropletFile(this);
	}
};




CSharpParser.Element_initializer_DropletFileContext = Element_initializer_DropletFileContext;

CSharpParser.prototype.element_initializer_DropletFile = function() {

    var localctx = new Element_initializer_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 488, CSharpParser.RULE_element_initializer_DropletFile);
    try {
        this.state = 3452;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 3444;
            this.non_assignment_expression();
            this.state = 3445;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 3447;
            this.match(CSharpParser.OPEN_BRACE);
            this.state = 3448;
            this.expression_list();
            this.state = 3449;
            this.match(CSharpParser.CLOSE_BRACE);
            this.state = 3450;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Anonymous_object_initializer_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_anonymous_object_initializer_DropletFile;
    return this;
}

Anonymous_object_initializer_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Anonymous_object_initializer_DropletFileContext.prototype.constructor = Anonymous_object_initializer_DropletFileContext;

Anonymous_object_initializer_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Anonymous_object_initializer_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Anonymous_object_initializer_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Anonymous_object_initializer_DropletFileContext.prototype.member_declarator_list = function() {
    return this.getTypedRuleContext(Member_declarator_listContext,0);
};

Anonymous_object_initializer_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAnonymous_object_initializer_DropletFile(this);
	}
};

Anonymous_object_initializer_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAnonymous_object_initializer_DropletFile(this);
	}
};




CSharpParser.Anonymous_object_initializer_DropletFileContext = Anonymous_object_initializer_DropletFileContext;

CSharpParser.prototype.anonymous_object_initializer_DropletFile = function() {

    var localctx = new Anonymous_object_initializer_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, CSharpParser.RULE_anonymous_object_initializer_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3454;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 3459;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0)) {
            this.state = 3455;
            this.member_declarator_list();
            this.state = 3457;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.COMMA) {
                this.state = 3456;
                this.match(CSharpParser.COMMA);
            }

        }

        this.state = 3461;
        this.match(CSharpParser.CLOSE_BRACE);
        this.state = 3462;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_declarator_list_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_member_declarator_list_DropletFile;
    return this;
}

Member_declarator_list_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_declarator_list_DropletFileContext.prototype.constructor = Member_declarator_list_DropletFileContext;

Member_declarator_list_DropletFileContext.prototype.member_declarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Member_declaratorContext);
    } else {
        return this.getTypedRuleContext(Member_declaratorContext,i);
    }
};

Member_declarator_list_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Member_declarator_list_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMember_declarator_list_DropletFile(this);
	}
};

Member_declarator_list_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMember_declarator_list_DropletFile(this);
	}
};




CSharpParser.Member_declarator_list_DropletFileContext = Member_declarator_list_DropletFileContext;

CSharpParser.prototype.member_declarator_list_DropletFile = function() {

    var localctx = new Member_declarator_list_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, CSharpParser.RULE_member_declarator_list_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3464;
        this.member_declarator();
        this.state = 3469;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 3465;
            this.match(CSharpParser.COMMA);
            this.state = 3466;
            this.member_declarator();
            this.state = 3471;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3472;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_declarator_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_member_declarator_DropletFile;
    return this;
}

Member_declarator_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_declarator_DropletFileContext.prototype.constructor = Member_declarator_DropletFileContext;

Member_declarator_DropletFileContext.prototype.primary_expression = function() {
    return this.getTypedRuleContext(Primary_expressionContext,0);
};

Member_declarator_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Member_declarator_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Member_declarator_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Member_declarator_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMember_declarator_DropletFile(this);
	}
};

Member_declarator_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMember_declarator_DropletFile(this);
	}
};




CSharpParser.Member_declarator_DropletFileContext = Member_declarator_DropletFileContext;

CSharpParser.prototype.member_declarator_DropletFile = function() {

    var localctx = new Member_declarator_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, CSharpParser.RULE_member_declarator_DropletFile);
    try {
        this.state = 3482;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,375,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3474;
            this.primary_expression();
            this.state = 3475;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3477;
            this.identifier();
            this.state = 3478;
            this.match(CSharpParser.ASSIGNMENT);
            this.state = 3479;
            this.expression();
            this.state = 3480;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unbound_type_name_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_unbound_type_name_DropletFile;
    return this;
}

Unbound_type_name_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unbound_type_name_DropletFileContext.prototype.constructor = Unbound_type_name_DropletFileContext;

Unbound_type_name_DropletFileContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Unbound_type_name_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Unbound_type_name_DropletFileContext.prototype.generic_dimension_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Generic_dimension_specifierContext);
    } else {
        return this.getTypedRuleContext(Generic_dimension_specifierContext,i);
    }
};

Unbound_type_name_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUnbound_type_name_DropletFile(this);
	}
};

Unbound_type_name_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUnbound_type_name_DropletFile(this);
	}
};




CSharpParser.Unbound_type_name_DropletFileContext = Unbound_type_name_DropletFileContext;

CSharpParser.prototype.unbound_type_name_DropletFile = function() {

    var localctx = new Unbound_type_name_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, CSharpParser.RULE_unbound_type_name_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3484;
        this.identifier();
        this.state = 3493;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.EOF:
        case CSharpParser.DOT:
        case CSharpParser.LT:
            this.state = 3486;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.LT) {
                this.state = 3485;
                this.generic_dimension_specifier();
            }

            break;
        case CSharpParser.DOUBLE_COLON:
            this.state = 3488;
            this.match(CSharpParser.DOUBLE_COLON);
            this.state = 3489;
            this.identifier();
            this.state = 3491;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.LT) {
                this.state = 3490;
                this.generic_dimension_specifier();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3502;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.DOT) {
            this.state = 3495;
            this.match(CSharpParser.DOT);
            this.state = 3496;
            this.identifier();
            this.state = 3498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.LT) {
                this.state = 3497;
                this.generic_dimension_specifier();
            }

            this.state = 3504;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3505;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Generic_dimension_specifier_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_generic_dimension_specifier_DropletFile;
    return this;
}

Generic_dimension_specifier_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_dimension_specifier_DropletFileContext.prototype.constructor = Generic_dimension_specifier_DropletFileContext;

Generic_dimension_specifier_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Generic_dimension_specifier_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterGeneric_dimension_specifier_DropletFile(this);
	}
};

Generic_dimension_specifier_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitGeneric_dimension_specifier_DropletFile(this);
	}
};




CSharpParser.Generic_dimension_specifier_DropletFileContext = Generic_dimension_specifier_DropletFileContext;

CSharpParser.prototype.generic_dimension_specifier_DropletFile = function() {

    var localctx = new Generic_dimension_specifier_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, CSharpParser.RULE_generic_dimension_specifier_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3507;
        this.match(CSharpParser.LT);
        this.state = 3511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 3508;
            this.match(CSharpParser.COMMA);
            this.state = 3513;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3514;
        this.match(CSharpParser.GT);
        this.state = 3515;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IsType_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_isType_DropletFile;
    return this;
}

IsType_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsType_DropletFileContext.prototype.constructor = IsType_DropletFileContext;

IsType_DropletFileContext.prototype.base_type = function() {
    return this.getTypedRuleContext(Base_typeContext,0);
};

IsType_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

IsType_DropletFileContext.prototype.rank_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rank_specifierContext);
    } else {
        return this.getTypedRuleContext(Rank_specifierContext,i);
    }
};

IsType_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIsType_DropletFile(this);
	}
};

IsType_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIsType_DropletFile(this);
	}
};




CSharpParser.IsType_DropletFileContext = IsType_DropletFileContext;

CSharpParser.prototype.isType_DropletFile = function() {

    var localctx = new IsType_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, CSharpParser.RULE_isType_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3517;
        this.base_type();
        this.state = 3522;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.OPEN_BRACKET || _la===CSharpParser.STAR) {
            this.state = 3520;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.OPEN_BRACKET:
                this.state = 3518;
                this.rank_specifier();
                break;
            case CSharpParser.STAR:
                this.state = 3519;
                this.match(CSharpParser.STAR);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3524;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3526;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.INTERR) {
            this.state = 3525;
            this.match(CSharpParser.INTERR);
        }

        this.state = 3528;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lambda_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_lambda_expression_DropletFile;
    return this;
}

Lambda_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lambda_expression_DropletFileContext.prototype.constructor = Lambda_expression_DropletFileContext;

Lambda_expression_DropletFileContext.prototype.anonymous_function_signature = function() {
    return this.getTypedRuleContext(Anonymous_function_signatureContext,0);
};

Lambda_expression_DropletFileContext.prototype.right_arrow = function() {
    return this.getTypedRuleContext(Right_arrowContext,0);
};

Lambda_expression_DropletFileContext.prototype.anonymous_function_body = function() {
    return this.getTypedRuleContext(Anonymous_function_bodyContext,0);
};

Lambda_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Lambda_expression_DropletFileContext.prototype.ASYNC = function() {
    return this.getToken(CSharpParser.ASYNC, 0);
};

Lambda_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLambda_expression_DropletFile(this);
	}
};

Lambda_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLambda_expression_DropletFile(this);
	}
};




CSharpParser.Lambda_expression_DropletFileContext = Lambda_expression_DropletFileContext;

CSharpParser.prototype.lambda_expression_DropletFile = function() {

    var localctx = new Lambda_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, CSharpParser.RULE_lambda_expression_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3531;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,385,this._ctx);
        if(la_===1) {
            this.state = 3530;
            this.match(CSharpParser.ASYNC);

        }
        this.state = 3533;
        this.anonymous_function_signature();
        this.state = 3534;
        this.right_arrow();
        this.state = 3535;
        this.anonymous_function_body();
        this.state = 3536;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Anonymous_function_signature_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_anonymous_function_signature_DropletFile;
    return this;
}

Anonymous_function_signature_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Anonymous_function_signature_DropletFileContext.prototype.constructor = Anonymous_function_signature_DropletFileContext;

Anonymous_function_signature_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Anonymous_function_signature_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Anonymous_function_signature_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Anonymous_function_signature_DropletFileContext.prototype.explicit_anonymous_function_parameter_list = function() {
    return this.getTypedRuleContext(Explicit_anonymous_function_parameter_listContext,0);
};

Anonymous_function_signature_DropletFileContext.prototype.implicit_anonymous_function_parameter_list = function() {
    return this.getTypedRuleContext(Implicit_anonymous_function_parameter_listContext,0);
};

Anonymous_function_signature_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Anonymous_function_signature_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAnonymous_function_signature_DropletFile(this);
	}
};

Anonymous_function_signature_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAnonymous_function_signature_DropletFile(this);
	}
};




CSharpParser.Anonymous_function_signature_DropletFileContext = Anonymous_function_signature_DropletFileContext;

CSharpParser.prototype.anonymous_function_signature_DropletFile = function() {

    var localctx = new Anonymous_function_signature_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, CSharpParser.RULE_anonymous_function_signature_DropletFile);
    try {
        this.state = 3554;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,386,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3538;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3539;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3540;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3541;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3542;
            this.explicit_anonymous_function_parameter_list();
            this.state = 3543;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3544;
            this.match(CSharpParser.EOF);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3546;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3547;
            this.implicit_anonymous_function_parameter_list();
            this.state = 3548;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3549;
            this.match(CSharpParser.EOF);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3551;
            this.identifier();
            this.state = 3552;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Explicit_anonymous_function_parameter_list_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_explicit_anonymous_function_parameter_list_DropletFile;
    return this;
}

Explicit_anonymous_function_parameter_list_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Explicit_anonymous_function_parameter_list_DropletFileContext.prototype.constructor = Explicit_anonymous_function_parameter_list_DropletFileContext;

Explicit_anonymous_function_parameter_list_DropletFileContext.prototype.explicit_anonymous_function_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Explicit_anonymous_function_parameterContext);
    } else {
        return this.getTypedRuleContext(Explicit_anonymous_function_parameterContext,i);
    }
};

Explicit_anonymous_function_parameter_list_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Explicit_anonymous_function_parameter_list_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExplicit_anonymous_function_parameter_list_DropletFile(this);
	}
};

Explicit_anonymous_function_parameter_list_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExplicit_anonymous_function_parameter_list_DropletFile(this);
	}
};




CSharpParser.Explicit_anonymous_function_parameter_list_DropletFileContext = Explicit_anonymous_function_parameter_list_DropletFileContext;

CSharpParser.prototype.explicit_anonymous_function_parameter_list_DropletFile = function() {

    var localctx = new Explicit_anonymous_function_parameter_list_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, CSharpParser.RULE_explicit_anonymous_function_parameter_list_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3556;
        this.explicit_anonymous_function_parameter();
        this.state = 3561;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 3557;
            this.match(CSharpParser.COMMA);
            this.state = 3558;
            this.explicit_anonymous_function_parameter();
            this.state = 3563;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3564;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Explicit_anonymous_function_parameter_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_explicit_anonymous_function_parameter_DropletFile;
    this.refout = null; // Token
    return this;
}

Explicit_anonymous_function_parameter_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Explicit_anonymous_function_parameter_DropletFileContext.prototype.constructor = Explicit_anonymous_function_parameter_DropletFileContext;

Explicit_anonymous_function_parameter_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Explicit_anonymous_function_parameter_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Explicit_anonymous_function_parameter_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Explicit_anonymous_function_parameter_DropletFileContext.prototype.REF = function() {
    return this.getToken(CSharpParser.REF, 0);
};

Explicit_anonymous_function_parameter_DropletFileContext.prototype.OUT = function() {
    return this.getToken(CSharpParser.OUT, 0);
};

Explicit_anonymous_function_parameter_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExplicit_anonymous_function_parameter_DropletFile(this);
	}
};

Explicit_anonymous_function_parameter_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExplicit_anonymous_function_parameter_DropletFile(this);
	}
};




CSharpParser.Explicit_anonymous_function_parameter_DropletFileContext = Explicit_anonymous_function_parameter_DropletFileContext;

CSharpParser.prototype.explicit_anonymous_function_parameter_DropletFile = function() {

    var localctx = new Explicit_anonymous_function_parameter_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, CSharpParser.RULE_explicit_anonymous_function_parameter_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3567;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OUT || _la===CSharpParser.REF) {
            this.state = 3566;
            localctx.refout = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===CSharpParser.OUT || _la===CSharpParser.REF)) {
                localctx.refout = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 3569;
        this.var_type();
        this.state = 3570;
        this.identifier();
        this.state = 3571;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Implicit_anonymous_function_parameter_list_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_implicit_anonymous_function_parameter_list_DropletFile;
    return this;
}

Implicit_anonymous_function_parameter_list_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Implicit_anonymous_function_parameter_list_DropletFileContext.prototype.constructor = Implicit_anonymous_function_parameter_list_DropletFileContext;

Implicit_anonymous_function_parameter_list_DropletFileContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Implicit_anonymous_function_parameter_list_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Implicit_anonymous_function_parameter_list_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterImplicit_anonymous_function_parameter_list_DropletFile(this);
	}
};

Implicit_anonymous_function_parameter_list_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitImplicit_anonymous_function_parameter_list_DropletFile(this);
	}
};




CSharpParser.Implicit_anonymous_function_parameter_list_DropletFileContext = Implicit_anonymous_function_parameter_list_DropletFileContext;

CSharpParser.prototype.implicit_anonymous_function_parameter_list_DropletFile = function() {

    var localctx = new Implicit_anonymous_function_parameter_list_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 510, CSharpParser.RULE_implicit_anonymous_function_parameter_list_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3573;
        this.identifier();
        this.state = 3578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 3574;
            this.match(CSharpParser.COMMA);
            this.state = 3575;
            this.identifier();
            this.state = 3580;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3581;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Anonymous_function_body_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_anonymous_function_body_DropletFile;
    return this;
}

Anonymous_function_body_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Anonymous_function_body_DropletFileContext.prototype.constructor = Anonymous_function_body_DropletFileContext;

Anonymous_function_body_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Anonymous_function_body_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Anonymous_function_body_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Anonymous_function_body_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAnonymous_function_body_DropletFile(this);
	}
};

Anonymous_function_body_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAnonymous_function_body_DropletFile(this);
	}
};




CSharpParser.Anonymous_function_body_DropletFileContext = Anonymous_function_body_DropletFileContext;

CSharpParser.prototype.anonymous_function_body_DropletFile = function() {

    var localctx = new Anonymous_function_body_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 512, CSharpParser.RULE_anonymous_function_body_DropletFile);
    try {
        this.state = 3589;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 3583;
            this.expression();
            this.state = 3584;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 3586;
            this.block();
            this.state = 3587;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_query_expression_DropletFile;
    return this;
}

Query_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_expression_DropletFileContext.prototype.constructor = Query_expression_DropletFileContext;

Query_expression_DropletFileContext.prototype.from_clause = function() {
    return this.getTypedRuleContext(From_clauseContext,0);
};

Query_expression_DropletFileContext.prototype.query_body = function() {
    return this.getTypedRuleContext(Query_bodyContext,0);
};

Query_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Query_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterQuery_expression_DropletFile(this);
	}
};

Query_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitQuery_expression_DropletFile(this);
	}
};




CSharpParser.Query_expression_DropletFileContext = Query_expression_DropletFileContext;

CSharpParser.prototype.query_expression_DropletFile = function() {

    var localctx = new Query_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 514, CSharpParser.RULE_query_expression_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3591;
        this.from_clause();
        this.state = 3592;
        this.query_body();
        this.state = 3593;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function From_clause_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_from_clause_DropletFile;
    return this;
}

From_clause_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
From_clause_DropletFileContext.prototype.constructor = From_clause_DropletFileContext;

From_clause_DropletFileContext.prototype.FROM = function() {
    return this.getToken(CSharpParser.FROM, 0);
};

From_clause_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

From_clause_DropletFileContext.prototype.IN = function() {
    return this.getToken(CSharpParser.IN, 0);
};

From_clause_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

From_clause_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

From_clause_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

From_clause_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFrom_clause_DropletFile(this);
	}
};

From_clause_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFrom_clause_DropletFile(this);
	}
};




CSharpParser.From_clause_DropletFileContext = From_clause_DropletFileContext;

CSharpParser.prototype.from_clause_DropletFile = function() {

    var localctx = new From_clause_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 516, CSharpParser.RULE_from_clause_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3595;
        this.match(CSharpParser.FROM);
        this.state = 3597;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,391,this._ctx);
        if(la_===1) {
            this.state = 3596;
            this.var_type();

        }
        this.state = 3599;
        this.identifier();
        this.state = 3600;
        this.match(CSharpParser.IN);
        this.state = 3601;
        this.expression();
        this.state = 3602;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_body_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_query_body_DropletFile;
    return this;
}

Query_body_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_body_DropletFileContext.prototype.constructor = Query_body_DropletFileContext;

Query_body_DropletFileContext.prototype.select_or_group_clause = function() {
    return this.getTypedRuleContext(Select_or_group_clauseContext,0);
};

Query_body_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Query_body_DropletFileContext.prototype.query_body_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Query_body_clauseContext);
    } else {
        return this.getTypedRuleContext(Query_body_clauseContext,i);
    }
};

Query_body_DropletFileContext.prototype.query_continuation = function() {
    return this.getTypedRuleContext(Query_continuationContext,0);
};

Query_body_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterQuery_body_DropletFile(this);
	}
};

Query_body_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitQuery_body_DropletFile(this);
	}
};




CSharpParser.Query_body_DropletFileContext = Query_body_DropletFileContext;

CSharpParser.prototype.query_body_DropletFile = function() {

    var localctx = new Query_body_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 518, CSharpParser.RULE_query_body_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3607;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CSharpParser.FROM - 47)) | (1 << (CSharpParser.JOIN - 47)) | (1 << (CSharpParser.LET - 47)) | (1 << (CSharpParser.ORDERBY - 47)))) !== 0) || _la===CSharpParser.WHERE) {
            this.state = 3604;
            this.query_body_clause();
            this.state = 3609;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3610;
        this.select_or_group_clause();
        this.state = 3612;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.INTO) {
            this.state = 3611;
            this.query_continuation();
        }

        this.state = 3614;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_body_clause_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_query_body_clause_DropletFile;
    return this;
}

Query_body_clause_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_body_clause_DropletFileContext.prototype.constructor = Query_body_clause_DropletFileContext;

Query_body_clause_DropletFileContext.prototype.from_clause = function() {
    return this.getTypedRuleContext(From_clauseContext,0);
};

Query_body_clause_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Query_body_clause_DropletFileContext.prototype.let_clause = function() {
    return this.getTypedRuleContext(Let_clauseContext,0);
};

Query_body_clause_DropletFileContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Query_body_clause_DropletFileContext.prototype.combined_join_clause = function() {
    return this.getTypedRuleContext(Combined_join_clauseContext,0);
};

Query_body_clause_DropletFileContext.prototype.orderby_clause = function() {
    return this.getTypedRuleContext(Orderby_clauseContext,0);
};

Query_body_clause_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterQuery_body_clause_DropletFile(this);
	}
};

Query_body_clause_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitQuery_body_clause_DropletFile(this);
	}
};




CSharpParser.Query_body_clause_DropletFileContext = Query_body_clause_DropletFileContext;

CSharpParser.prototype.query_body_clause_DropletFile = function() {

    var localctx = new Query_body_clause_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 520, CSharpParser.RULE_query_body_clause_DropletFile);
    try {
        this.state = 3631;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.FROM:
            this.enterOuterAlt(localctx, 1);
            this.state = 3616;
            this.from_clause();
            this.state = 3617;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.LET:
            this.enterOuterAlt(localctx, 2);
            this.state = 3619;
            this.let_clause();
            this.state = 3620;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.WHERE:
            this.enterOuterAlt(localctx, 3);
            this.state = 3622;
            this.where_clause();
            this.state = 3623;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.JOIN:
            this.enterOuterAlt(localctx, 4);
            this.state = 3625;
            this.combined_join_clause();
            this.state = 3626;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ORDERBY:
            this.enterOuterAlt(localctx, 5);
            this.state = 3628;
            this.orderby_clause();
            this.state = 3629;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Let_clause_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_let_clause_DropletFile;
    return this;
}

Let_clause_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Let_clause_DropletFileContext.prototype.constructor = Let_clause_DropletFileContext;

Let_clause_DropletFileContext.prototype.LET = function() {
    return this.getToken(CSharpParser.LET, 0);
};

Let_clause_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Let_clause_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Let_clause_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Let_clause_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLet_clause_DropletFile(this);
	}
};

Let_clause_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLet_clause_DropletFile(this);
	}
};




CSharpParser.Let_clause_DropletFileContext = Let_clause_DropletFileContext;

CSharpParser.prototype.let_clause_DropletFile = function() {

    var localctx = new Let_clause_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, CSharpParser.RULE_let_clause_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3633;
        this.match(CSharpParser.LET);
        this.state = 3634;
        this.identifier();
        this.state = 3635;
        this.match(CSharpParser.ASSIGNMENT);
        this.state = 3636;
        this.expression();
        this.state = 3637;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Where_clause_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_where_clause_DropletFile;
    return this;
}

Where_clause_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Where_clause_DropletFileContext.prototype.constructor = Where_clause_DropletFileContext;

Where_clause_DropletFileContext.prototype.WHERE = function() {
    return this.getToken(CSharpParser.WHERE, 0);
};

Where_clause_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Where_clause_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Where_clause_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterWhere_clause_DropletFile(this);
	}
};

Where_clause_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitWhere_clause_DropletFile(this);
	}
};




CSharpParser.Where_clause_DropletFileContext = Where_clause_DropletFileContext;

CSharpParser.prototype.where_clause_DropletFile = function() {

    var localctx = new Where_clause_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, CSharpParser.RULE_where_clause_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3639;
        this.match(CSharpParser.WHERE);
        this.state = 3640;
        this.expression();
        this.state = 3641;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Combined_join_clause_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_combined_join_clause_DropletFile;
    return this;
}

Combined_join_clause_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Combined_join_clause_DropletFileContext.prototype.constructor = Combined_join_clause_DropletFileContext;

Combined_join_clause_DropletFileContext.prototype.JOIN = function() {
    return this.getToken(CSharpParser.JOIN, 0);
};

Combined_join_clause_DropletFileContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Combined_join_clause_DropletFileContext.prototype.IN = function() {
    return this.getToken(CSharpParser.IN, 0);
};

Combined_join_clause_DropletFileContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Combined_join_clause_DropletFileContext.prototype.ON = function() {
    return this.getToken(CSharpParser.ON, 0);
};

Combined_join_clause_DropletFileContext.prototype.EQUALS = function() {
    return this.getToken(CSharpParser.EQUALS, 0);
};

Combined_join_clause_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Combined_join_clause_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Combined_join_clause_DropletFileContext.prototype.INTO = function() {
    return this.getToken(CSharpParser.INTO, 0);
};

Combined_join_clause_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCombined_join_clause_DropletFile(this);
	}
};

Combined_join_clause_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCombined_join_clause_DropletFile(this);
	}
};




CSharpParser.Combined_join_clause_DropletFileContext = Combined_join_clause_DropletFileContext;

CSharpParser.prototype.combined_join_clause_DropletFile = function() {

    var localctx = new Combined_join_clause_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 526, CSharpParser.RULE_combined_join_clause_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3643;
        this.match(CSharpParser.JOIN);
        this.state = 3645;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,395,this._ctx);
        if(la_===1) {
            this.state = 3644;
            this.var_type();

        }
        this.state = 3647;
        this.identifier();
        this.state = 3648;
        this.match(CSharpParser.IN);
        this.state = 3649;
        this.expression();
        this.state = 3650;
        this.match(CSharpParser.ON);
        this.state = 3651;
        this.expression();
        this.state = 3652;
        this.match(CSharpParser.EQUALS);
        this.state = 3653;
        this.expression();
        this.state = 3656;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.INTO) {
            this.state = 3654;
            this.match(CSharpParser.INTO);
            this.state = 3655;
            this.identifier();
        }

        this.state = 3658;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Orderby_clause_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_orderby_clause_DropletFile;
    return this;
}

Orderby_clause_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Orderby_clause_DropletFileContext.prototype.constructor = Orderby_clause_DropletFileContext;

Orderby_clause_DropletFileContext.prototype.ORDERBY = function() {
    return this.getToken(CSharpParser.ORDERBY, 0);
};

Orderby_clause_DropletFileContext.prototype.ordering = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderingContext);
    } else {
        return this.getTypedRuleContext(OrderingContext,i);
    }
};

Orderby_clause_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Orderby_clause_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterOrderby_clause_DropletFile(this);
	}
};

Orderby_clause_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitOrderby_clause_DropletFile(this);
	}
};




CSharpParser.Orderby_clause_DropletFileContext = Orderby_clause_DropletFileContext;

CSharpParser.prototype.orderby_clause_DropletFile = function() {

    var localctx = new Orderby_clause_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 528, CSharpParser.RULE_orderby_clause_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3660;
        this.match(CSharpParser.ORDERBY);
        this.state = 3661;
        this.ordering();
        this.state = 3666;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 3662;
            this.match(CSharpParser.COMMA);
            this.state = 3663;
            this.ordering();
            this.state = 3668;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3669;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ordering_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_ordering_DropletFile;
    this.dir = null; // Token
    return this;
}

Ordering_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ordering_DropletFileContext.prototype.constructor = Ordering_DropletFileContext;

Ordering_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Ordering_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Ordering_DropletFileContext.prototype.ASCENDING = function() {
    return this.getToken(CSharpParser.ASCENDING, 0);
};

Ordering_DropletFileContext.prototype.DESCENDING = function() {
    return this.getToken(CSharpParser.DESCENDING, 0);
};

Ordering_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterOrdering_DropletFile(this);
	}
};

Ordering_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitOrdering_DropletFile(this);
	}
};




CSharpParser.Ordering_DropletFileContext = Ordering_DropletFileContext;

CSharpParser.prototype.ordering_DropletFile = function() {

    var localctx = new Ordering_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, CSharpParser.RULE_ordering_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3671;
        this.expression();
        this.state = 3673;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.ASCENDING || _la===CSharpParser.DESCENDING) {
            this.state = 3672;
            localctx.dir = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===CSharpParser.ASCENDING || _la===CSharpParser.DESCENDING)) {
                localctx.dir = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 3675;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_or_group_clause_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_select_or_group_clause_DropletFile;
    return this;
}

Select_or_group_clause_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_or_group_clause_DropletFileContext.prototype.constructor = Select_or_group_clause_DropletFileContext;

Select_or_group_clause_DropletFileContext.prototype.SELECT = function() {
    return this.getToken(CSharpParser.SELECT, 0);
};

Select_or_group_clause_DropletFileContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Select_or_group_clause_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Select_or_group_clause_DropletFileContext.prototype.GROUP = function() {
    return this.getToken(CSharpParser.GROUP, 0);
};

Select_or_group_clause_DropletFileContext.prototype.BY = function() {
    return this.getToken(CSharpParser.BY, 0);
};

Select_or_group_clause_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSelect_or_group_clause_DropletFile(this);
	}
};

Select_or_group_clause_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSelect_or_group_clause_DropletFile(this);
	}
};




CSharpParser.Select_or_group_clause_DropletFileContext = Select_or_group_clause_DropletFileContext;

CSharpParser.prototype.select_or_group_clause_DropletFile = function() {

    var localctx = new Select_or_group_clause_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 532, CSharpParser.RULE_select_or_group_clause_DropletFile);
    try {
        this.state = 3687;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.SELECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 3677;
            this.match(CSharpParser.SELECT);
            this.state = 3678;
            this.expression();
            this.state = 3679;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.GROUP:
            this.enterOuterAlt(localctx, 2);
            this.state = 3681;
            this.match(CSharpParser.GROUP);
            this.state = 3682;
            this.expression();
            this.state = 3683;
            this.match(CSharpParser.BY);
            this.state = 3684;
            this.expression();
            this.state = 3685;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_continuation_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_query_continuation_DropletFile;
    return this;
}

Query_continuation_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_continuation_DropletFileContext.prototype.constructor = Query_continuation_DropletFileContext;

Query_continuation_DropletFileContext.prototype.INTO = function() {
    return this.getToken(CSharpParser.INTO, 0);
};

Query_continuation_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Query_continuation_DropletFileContext.prototype.query_body = function() {
    return this.getTypedRuleContext(Query_bodyContext,0);
};

Query_continuation_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Query_continuation_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterQuery_continuation_DropletFile(this);
	}
};

Query_continuation_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitQuery_continuation_DropletFile(this);
	}
};




CSharpParser.Query_continuation_DropletFileContext = Query_continuation_DropletFileContext;

CSharpParser.prototype.query_continuation_DropletFile = function() {

    var localctx = new Query_continuation_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, CSharpParser.RULE_query_continuation_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3689;
        this.match(CSharpParser.INTO);
        this.state = 3690;
        this.identifier();
        this.state = 3691;
        this.query_body();
        this.state = 3692;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Statement_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_statement_DropletFile;
    return this;
}

Statement_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_DropletFileContext.prototype.constructor = Statement_DropletFileContext;


 
Statement_DropletFileContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DeclarationStatement_DropletFileContext(parser, ctx) {
	Statement_DropletFileContext.call(this, parser);
    Statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DeclarationStatement_DropletFileContext.prototype = Object.create(Statement_DropletFileContext.prototype);
DeclarationStatement_DropletFileContext.prototype.constructor = DeclarationStatement_DropletFileContext;

CSharpParser.DeclarationStatement_DropletFileContext = DeclarationStatement_DropletFileContext;

DeclarationStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

DeclarationStatement_DropletFileContext.prototype.local_variable_declaration = function() {
    return this.getTypedRuleContext(Local_variable_declarationContext,0);
};

DeclarationStatement_DropletFileContext.prototype.local_constant_declaration = function() {
    return this.getTypedRuleContext(Local_constant_declarationContext,0);
};
DeclarationStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterDeclarationStatement_DropletFile(this);
	}
};

DeclarationStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitDeclarationStatement_DropletFile(this);
	}
};


function LabeledStatement_DropletFileContext(parser, ctx) {
	Statement_DropletFileContext.call(this, parser);
    Statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LabeledStatement_DropletFileContext.prototype = Object.create(Statement_DropletFileContext.prototype);
LabeledStatement_DropletFileContext.prototype.constructor = LabeledStatement_DropletFileContext;

CSharpParser.LabeledStatement_DropletFileContext = LabeledStatement_DropletFileContext;

LabeledStatement_DropletFileContext.prototype.labeled_Statement = function() {
    return this.getTypedRuleContext(Labeled_StatementContext,0);
};

LabeledStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
LabeledStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLabeledStatement_DropletFile(this);
	}
};

LabeledStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLabeledStatement_DropletFile(this);
	}
};


function EmbeddedStatement_DropletFileContext(parser, ctx) {
	Statement_DropletFileContext.call(this, parser);
    Statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EmbeddedStatement_DropletFileContext.prototype = Object.create(Statement_DropletFileContext.prototype);
EmbeddedStatement_DropletFileContext.prototype.constructor = EmbeddedStatement_DropletFileContext;

CSharpParser.EmbeddedStatement_DropletFileContext = EmbeddedStatement_DropletFileContext;

EmbeddedStatement_DropletFileContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};

EmbeddedStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
EmbeddedStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEmbeddedStatement_DropletFile(this);
	}
};

EmbeddedStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEmbeddedStatement_DropletFile(this);
	}
};



CSharpParser.Statement_DropletFileContext = Statement_DropletFileContext;

CSharpParser.prototype.statement_DropletFile = function() {

    var localctx = new Statement_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, CSharpParser.RULE_statement_DropletFile);
    try {
        this.state = 3707;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,401,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LabeledStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 3694;
            this.labeled_Statement();
            this.state = 3695;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            localctx = new DeclarationStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 3699;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.ADD:
            case CSharpParser.ALIAS:
            case CSharpParser.ARGLIST:
            case CSharpParser.ASCENDING:
            case CSharpParser.ASYNC:
            case CSharpParser.AWAIT:
            case CSharpParser.BOOL:
            case CSharpParser.BY:
            case CSharpParser.BYTE:
            case CSharpParser.CHAR:
            case CSharpParser.DECIMAL:
            case CSharpParser.DESCENDING:
            case CSharpParser.DOUBLE:
            case CSharpParser.DYNAMIC:
            case CSharpParser.EQUALS:
            case CSharpParser.FLOAT:
            case CSharpParser.FROM:
            case CSharpParser.GET:
            case CSharpParser.GROUP:
            case CSharpParser.INT:
            case CSharpParser.INTO:
            case CSharpParser.JOIN:
            case CSharpParser.LET:
            case CSharpParser.LONG:
            case CSharpParser.NAMEOF:
            case CSharpParser.OBJECT:
            case CSharpParser.ON:
            case CSharpParser.ORDERBY:
            case CSharpParser.PARTIAL:
            case CSharpParser.REMOVE:
            case CSharpParser.SBYTE:
            case CSharpParser.SELECT:
            case CSharpParser.SET:
            case CSharpParser.SHORT:
            case CSharpParser.STRING:
            case CSharpParser.UINT:
            case CSharpParser.ULONG:
            case CSharpParser.USHORT:
            case CSharpParser.VAR:
            case CSharpParser.VOID:
            case CSharpParser.WHEN:
            case CSharpParser.WHERE:
            case CSharpParser.YIELD:
            case CSharpParser.IDENTIFIER:
                this.state = 3697;
                this.local_variable_declaration();
                break;
            case CSharpParser.CONST:
                this.state = 3698;
                this.local_constant_declaration();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3701;
            this.match(CSharpParser.SEMICOLON);
            this.state = 3702;
            this.match(CSharpParser.EOF);
            break;

        case 3:
            localctx = new EmbeddedStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 3704;
            this.embedded_statement();
            this.state = 3705;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Labeled_Statement_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_labeled_Statement_DropletFile;
    return this;
}

Labeled_Statement_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Labeled_Statement_DropletFileContext.prototype.constructor = Labeled_Statement_DropletFileContext;

Labeled_Statement_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Labeled_Statement_DropletFileContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

Labeled_Statement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Labeled_Statement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLabeled_Statement_DropletFile(this);
	}
};

Labeled_Statement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLabeled_Statement_DropletFile(this);
	}
};




CSharpParser.Labeled_Statement_DropletFileContext = Labeled_Statement_DropletFileContext;

CSharpParser.prototype.labeled_Statement_DropletFile = function() {

    var localctx = new Labeled_Statement_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 538, CSharpParser.RULE_labeled_Statement_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3709;
        this.identifier();
        this.state = 3710;
        this.match(CSharpParser.COLON);
        this.state = 3711;
        this.statement();
        this.state = 3712;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Embedded_statement_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_embedded_statement_DropletFile;
    return this;
}

Embedded_statement_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Embedded_statement_DropletFileContext.prototype.constructor = Embedded_statement_DropletFileContext;

Embedded_statement_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Embedded_statement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Embedded_statement_DropletFileContext.prototype.simple_embedded_statement = function() {
    return this.getTypedRuleContext(Simple_embedded_statementContext,0);
};

Embedded_statement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEmbedded_statement_DropletFile(this);
	}
};

Embedded_statement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEmbedded_statement_DropletFile(this);
	}
};




CSharpParser.Embedded_statement_DropletFileContext = Embedded_statement_DropletFileContext;

CSharpParser.prototype.embedded_statement_DropletFile = function() {

    var localctx = new Embedded_statement_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, CSharpParser.RULE_embedded_statement_DropletFile);
    try {
        this.state = 3720;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 3714;
            this.block();
            this.state = 3715;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BREAK:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.CONTINUE:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DO:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FIXED:
        case CSharpParser.FLOAT:
        case CSharpParser.FOR:
        case CSharpParser.FOREACH:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GOTO:
        case CSharpParser.GROUP:
        case CSharpParser.IF:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LOCK:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.RETURN:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.SWITCH:
        case CSharpParser.THIS:
        case CSharpParser.THROW:
        case CSharpParser.TRUE:
        case CSharpParser.TRY:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.UNSAFE:
        case CSharpParser.USHORT:
        case CSharpParser.USING:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.WHILE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.SEMICOLON:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 2);
            this.state = 3717;
            this.simple_embedded_statement();
            this.state = 3718;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_embedded_statement_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_simple_embedded_statement_DropletFile;
    return this;
}

Simple_embedded_statement_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_embedded_statement_DropletFileContext.prototype.constructor = Simple_embedded_statement_DropletFileContext;


 
Simple_embedded_statement_DropletFileContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ForStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
ForStatement_DropletFileContext.prototype.constructor = ForStatement_DropletFileContext;

CSharpParser.ForStatement_DropletFileContext = ForStatement_DropletFileContext;

ForStatement_DropletFileContext.prototype.FOR = function() {
    return this.getToken(CSharpParser.FOR, 0);
};

ForStatement_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

ForStatement_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

ForStatement_DropletFileContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};

ForStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

ForStatement_DropletFileContext.prototype.for_initializer = function() {
    return this.getTypedRuleContext(For_initializerContext,0);
};

ForStatement_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForStatement_DropletFileContext.prototype.for_iterator = function() {
    return this.getTypedRuleContext(For_iteratorContext,0);
};
ForStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterForStatement_DropletFile(this);
	}
};

ForStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitForStatement_DropletFile(this);
	}
};


function ThrowStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThrowStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
ThrowStatement_DropletFileContext.prototype.constructor = ThrowStatement_DropletFileContext;

CSharpParser.ThrowStatement_DropletFileContext = ThrowStatement_DropletFileContext;

ThrowStatement_DropletFileContext.prototype.THROW = function() {
    return this.getToken(CSharpParser.THROW, 0);
};

ThrowStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

ThrowStatement_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ThrowStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterThrowStatement_DropletFile(this);
	}
};

ThrowStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitThrowStatement_DropletFile(this);
	}
};


function EmptyStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EmptyStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
EmptyStatement_DropletFileContext.prototype.constructor = EmptyStatement_DropletFileContext;

CSharpParser.EmptyStatement_DropletFileContext = EmptyStatement_DropletFileContext;

EmptyStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
EmptyStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEmptyStatement_DropletFile(this);
	}
};

EmptyStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEmptyStatement_DropletFile(this);
	}
};


function GotoStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GotoStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
GotoStatement_DropletFileContext.prototype.constructor = GotoStatement_DropletFileContext;

CSharpParser.GotoStatement_DropletFileContext = GotoStatement_DropletFileContext;

GotoStatement_DropletFileContext.prototype.GOTO = function() {
    return this.getToken(CSharpParser.GOTO, 0);
};

GotoStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

GotoStatement_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GotoStatement_DropletFileContext.prototype.CASE = function() {
    return this.getToken(CSharpParser.CASE, 0);
};

GotoStatement_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

GotoStatement_DropletFileContext.prototype.DEFAULT = function() {
    return this.getToken(CSharpParser.DEFAULT, 0);
};
GotoStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterGotoStatement_DropletFile(this);
	}
};

GotoStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitGotoStatement_DropletFile(this);
	}
};


function UnsafeStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnsafeStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
UnsafeStatement_DropletFileContext.prototype.constructor = UnsafeStatement_DropletFileContext;

CSharpParser.UnsafeStatement_DropletFileContext = UnsafeStatement_DropletFileContext;

UnsafeStatement_DropletFileContext.prototype.UNSAFE = function() {
    return this.getToken(CSharpParser.UNSAFE, 0);
};

UnsafeStatement_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

UnsafeStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
UnsafeStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUnsafeStatement_DropletFile(this);
	}
};

UnsafeStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUnsafeStatement_DropletFile(this);
	}
};


function UncheckedStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UncheckedStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
UncheckedStatement_DropletFileContext.prototype.constructor = UncheckedStatement_DropletFileContext;

CSharpParser.UncheckedStatement_DropletFileContext = UncheckedStatement_DropletFileContext;

UncheckedStatement_DropletFileContext.prototype.UNCHECKED = function() {
    return this.getToken(CSharpParser.UNCHECKED, 0);
};

UncheckedStatement_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

UncheckedStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
UncheckedStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUncheckedStatement_DropletFile(this);
	}
};

UncheckedStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUncheckedStatement_DropletFile(this);
	}
};


function LockStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LockStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
LockStatement_DropletFileContext.prototype.constructor = LockStatement_DropletFileContext;

CSharpParser.LockStatement_DropletFileContext = LockStatement_DropletFileContext;

LockStatement_DropletFileContext.prototype.LOCK = function() {
    return this.getToken(CSharpParser.LOCK, 0);
};

LockStatement_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

LockStatement_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LockStatement_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

LockStatement_DropletFileContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};

LockStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
LockStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLockStatement_DropletFile(this);
	}
};

LockStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLockStatement_DropletFile(this);
	}
};


function DoStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
DoStatement_DropletFileContext.prototype.constructor = DoStatement_DropletFileContext;

CSharpParser.DoStatement_DropletFileContext = DoStatement_DropletFileContext;

DoStatement_DropletFileContext.prototype.DO = function() {
    return this.getToken(CSharpParser.DO, 0);
};

DoStatement_DropletFileContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};

DoStatement_DropletFileContext.prototype.WHILE = function() {
    return this.getToken(CSharpParser.WHILE, 0);
};

DoStatement_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

DoStatement_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DoStatement_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

DoStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
DoStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterDoStatement_DropletFile(this);
	}
};

DoStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitDoStatement_DropletFile(this);
	}
};


function ForeachStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForeachStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
ForeachStatement_DropletFileContext.prototype.constructor = ForeachStatement_DropletFileContext;

CSharpParser.ForeachStatement_DropletFileContext = ForeachStatement_DropletFileContext;

ForeachStatement_DropletFileContext.prototype.FOREACH = function() {
    return this.getToken(CSharpParser.FOREACH, 0);
};

ForeachStatement_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

ForeachStatement_DropletFileContext.prototype.local_variable_type = function() {
    return this.getTypedRuleContext(Local_variable_typeContext,0);
};

ForeachStatement_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ForeachStatement_DropletFileContext.prototype.IN = function() {
    return this.getToken(CSharpParser.IN, 0);
};

ForeachStatement_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForeachStatement_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

ForeachStatement_DropletFileContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};

ForeachStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
ForeachStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterForeachStatement_DropletFile(this);
	}
};

ForeachStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitForeachStatement_DropletFile(this);
	}
};


function ContinueStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContinueStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
ContinueStatement_DropletFileContext.prototype.constructor = ContinueStatement_DropletFileContext;

CSharpParser.ContinueStatement_DropletFileContext = ContinueStatement_DropletFileContext;

ContinueStatement_DropletFileContext.prototype.CONTINUE = function() {
    return this.getToken(CSharpParser.CONTINUE, 0);
};

ContinueStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
ContinueStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterContinueStatement_DropletFile(this);
	}
};

ContinueStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitContinueStatement_DropletFile(this);
	}
};


function SwitchStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SwitchStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
SwitchStatement_DropletFileContext.prototype.constructor = SwitchStatement_DropletFileContext;

CSharpParser.SwitchStatement_DropletFileContext = SwitchStatement_DropletFileContext;

SwitchStatement_DropletFileContext.prototype.SWITCH = function() {
    return this.getToken(CSharpParser.SWITCH, 0);
};

SwitchStatement_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

SwitchStatement_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SwitchStatement_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

SwitchStatement_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

SwitchStatement_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

SwitchStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

SwitchStatement_DropletFileContext.prototype.switch_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Switch_sectionContext);
    } else {
        return this.getTypedRuleContext(Switch_sectionContext,i);
    }
};
SwitchStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSwitchStatement_DropletFile(this);
	}
};

SwitchStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSwitchStatement_DropletFile(this);
	}
};


function FixedStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FixedStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
FixedStatement_DropletFileContext.prototype.constructor = FixedStatement_DropletFileContext;

CSharpParser.FixedStatement_DropletFileContext = FixedStatement_DropletFileContext;

FixedStatement_DropletFileContext.prototype.FIXED = function() {
    return this.getToken(CSharpParser.FIXED, 0);
};

FixedStatement_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

FixedStatement_DropletFileContext.prototype.pointer_type = function() {
    return this.getTypedRuleContext(Pointer_typeContext,0);
};

FixedStatement_DropletFileContext.prototype.fixed_pointer_declarators = function() {
    return this.getTypedRuleContext(Fixed_pointer_declaratorsContext,0);
};

FixedStatement_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

FixedStatement_DropletFileContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};

FixedStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
FixedStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixedStatement_DropletFile(this);
	}
};

FixedStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixedStatement_DropletFile(this);
	}
};


function ReturnStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReturnStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
ReturnStatement_DropletFileContext.prototype.constructor = ReturnStatement_DropletFileContext;

CSharpParser.ReturnStatement_DropletFileContext = ReturnStatement_DropletFileContext;

ReturnStatement_DropletFileContext.prototype.RETURN = function() {
    return this.getToken(CSharpParser.RETURN, 0);
};

ReturnStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

ReturnStatement_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ReturnStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterReturnStatement_DropletFile(this);
	}
};

ReturnStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitReturnStatement_DropletFile(this);
	}
};


function CheckedStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CheckedStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
CheckedStatement_DropletFileContext.prototype.constructor = CheckedStatement_DropletFileContext;

CSharpParser.CheckedStatement_DropletFileContext = CheckedStatement_DropletFileContext;

CheckedStatement_DropletFileContext.prototype.CHECKED = function() {
    return this.getToken(CSharpParser.CHECKED, 0);
};

CheckedStatement_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CheckedStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
CheckedStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCheckedStatement_DropletFile(this);
	}
};

CheckedStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCheckedStatement_DropletFile(this);
	}
};


function IfStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
IfStatement_DropletFileContext.prototype.constructor = IfStatement_DropletFileContext;

CSharpParser.IfStatement_DropletFileContext = IfStatement_DropletFileContext;

IfStatement_DropletFileContext.prototype.IF = function() {
    return this.getToken(CSharpParser.IF, 0);
};

IfStatement_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

IfStatement_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfStatement_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

IfStatement_DropletFileContext.prototype.if_body = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(If_bodyContext);
    } else {
        return this.getTypedRuleContext(If_bodyContext,i);
    }
};

IfStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

IfStatement_DropletFileContext.prototype.ELSE = function() {
    return this.getToken(CSharpParser.ELSE, 0);
};
IfStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIfStatement_DropletFile(this);
	}
};

IfStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIfStatement_DropletFile(this);
	}
};


function ExpressionStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExpressionStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
ExpressionStatement_DropletFileContext.prototype.constructor = ExpressionStatement_DropletFileContext;

CSharpParser.ExpressionStatement_DropletFileContext = ExpressionStatement_DropletFileContext;

ExpressionStatement_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
ExpressionStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExpressionStatement_DropletFile(this);
	}
};

ExpressionStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExpressionStatement_DropletFile(this);
	}
};


function BreakStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BreakStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
BreakStatement_DropletFileContext.prototype.constructor = BreakStatement_DropletFileContext;

CSharpParser.BreakStatement_DropletFileContext = BreakStatement_DropletFileContext;

BreakStatement_DropletFileContext.prototype.BREAK = function() {
    return this.getToken(CSharpParser.BREAK, 0);
};

BreakStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
BreakStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBreakStatement_DropletFile(this);
	}
};

BreakStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBreakStatement_DropletFile(this);
	}
};


function YieldStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

YieldStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
YieldStatement_DropletFileContext.prototype.constructor = YieldStatement_DropletFileContext;

CSharpParser.YieldStatement_DropletFileContext = YieldStatement_DropletFileContext;

YieldStatement_DropletFileContext.prototype.YIELD = function() {
    return this.getToken(CSharpParser.YIELD, 0);
};

YieldStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

YieldStatement_DropletFileContext.prototype.RETURN = function() {
    return this.getToken(CSharpParser.RETURN, 0);
};

YieldStatement_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

YieldStatement_DropletFileContext.prototype.BREAK = function() {
    return this.getToken(CSharpParser.BREAK, 0);
};
YieldStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterYieldStatement_DropletFile(this);
	}
};

YieldStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitYieldStatement_DropletFile(this);
	}
};


function TryStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TryStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
TryStatement_DropletFileContext.prototype.constructor = TryStatement_DropletFileContext;

CSharpParser.TryStatement_DropletFileContext = TryStatement_DropletFileContext;

TryStatement_DropletFileContext.prototype.TRY = function() {
    return this.getToken(CSharpParser.TRY, 0);
};

TryStatement_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TryStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

TryStatement_DropletFileContext.prototype.catch_clauses = function() {
    return this.getTypedRuleContext(Catch_clausesContext,0);
};

TryStatement_DropletFileContext.prototype.finally_clause = function() {
    return this.getTypedRuleContext(Finally_clauseContext,0);
};
TryStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterTryStatement_DropletFile(this);
	}
};

TryStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitTryStatement_DropletFile(this);
	}
};


function UsingStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UsingStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
UsingStatement_DropletFileContext.prototype.constructor = UsingStatement_DropletFileContext;

CSharpParser.UsingStatement_DropletFileContext = UsingStatement_DropletFileContext;

UsingStatement_DropletFileContext.prototype.USING = function() {
    return this.getToken(CSharpParser.USING, 0);
};

UsingStatement_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

UsingStatement_DropletFileContext.prototype.resource_acquisition = function() {
    return this.getTypedRuleContext(Resource_acquisitionContext,0);
};

UsingStatement_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

UsingStatement_DropletFileContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};

UsingStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
UsingStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUsingStatement_DropletFile(this);
	}
};

UsingStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUsingStatement_DropletFile(this);
	}
};


function WhileStatement_DropletFileContext(parser, ctx) {
	Simple_embedded_statement_DropletFileContext.call(this, parser);
    Simple_embedded_statement_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WhileStatement_DropletFileContext.prototype = Object.create(Simple_embedded_statement_DropletFileContext.prototype);
WhileStatement_DropletFileContext.prototype.constructor = WhileStatement_DropletFileContext;

CSharpParser.WhileStatement_DropletFileContext = WhileStatement_DropletFileContext;

WhileStatement_DropletFileContext.prototype.WHILE = function() {
    return this.getToken(CSharpParser.WHILE, 0);
};

WhileStatement_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

WhileStatement_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatement_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

WhileStatement_DropletFileContext.prototype.embedded_statement = function() {
    return this.getTypedRuleContext(Embedded_statementContext,0);
};

WhileStatement_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
WhileStatement_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterWhileStatement_DropletFile(this);
	}
};

WhileStatement_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitWhileStatement_DropletFile(this);
	}
};



CSharpParser.Simple_embedded_statement_DropletFileContext = Simple_embedded_statement_DropletFileContext;

CSharpParser.prototype.simple_embedded_statement_DropletFile = function() {

    var localctx = new Simple_embedded_statement_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 542, CSharpParser.RULE_simple_embedded_statement_DropletFile);
    var _la = 0; // Token type
    try {
        this.state = 3876;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,414,this._ctx);
        switch(la_) {
        case 1:
            localctx = new EmptyStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 3722;
            this.match(CSharpParser.SEMICOLON);
            this.state = 3723;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            localctx = new ExpressionStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 3724;
            this.expression();
            this.state = 3725;
            this.match(CSharpParser.SEMICOLON);
            this.state = 3726;
            this.match(CSharpParser.EOF);
            break;

        case 3:
            localctx = new IfStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 3728;
            this.match(CSharpParser.IF);
            this.state = 3729;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3730;
            this.expression();
            this.state = 3731;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3732;
            this.if_body();
            this.state = 3735;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.ELSE) {
                this.state = 3733;
                this.match(CSharpParser.ELSE);
                this.state = 3734;
                this.if_body();
            }

            this.state = 3737;
            this.match(CSharpParser.EOF);
            break;

        case 4:
            localctx = new SwitchStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 3739;
            this.match(CSharpParser.SWITCH);
            this.state = 3740;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3741;
            this.expression();
            this.state = 3742;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3743;
            this.match(CSharpParser.OPEN_BRACE);
            this.state = 3747;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CSharpParser.CASE || _la===CSharpParser.DEFAULT) {
                this.state = 3744;
                this.switch_section();
                this.state = 3749;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3750;
            this.match(CSharpParser.CLOSE_BRACE);
            this.state = 3751;
            this.match(CSharpParser.EOF);
            break;

        case 5:
            localctx = new WhileStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 3753;
            this.match(CSharpParser.WHILE);
            this.state = 3754;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3755;
            this.expression();
            this.state = 3756;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3757;
            this.embedded_statement();
            this.state = 3758;
            this.match(CSharpParser.EOF);
            break;

        case 6:
            localctx = new DoStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 3760;
            this.match(CSharpParser.DO);
            this.state = 3761;
            this.embedded_statement();
            this.state = 3762;
            this.match(CSharpParser.WHILE);
            this.state = 3763;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3764;
            this.expression();
            this.state = 3765;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3766;
            this.match(CSharpParser.SEMICOLON);
            this.state = 3767;
            this.match(CSharpParser.EOF);
            break;

        case 7:
            localctx = new ForStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 3769;
            this.match(CSharpParser.FOR);
            this.state = 3770;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3772;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.VOID - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
                this.state = 3771;
                this.for_initializer();
            }

            this.state = 3774;
            this.match(CSharpParser.SEMICOLON);
            this.state = 3776;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
                this.state = 3775;
                this.expression();
            }

            this.state = 3778;
            this.match(CSharpParser.SEMICOLON);
            this.state = 3780;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
                this.state = 3779;
                this.for_iterator();
            }

            this.state = 3782;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3783;
            this.embedded_statement();
            this.state = 3784;
            this.match(CSharpParser.EOF);
            break;

        case 8:
            localctx = new ForeachStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 3786;
            this.match(CSharpParser.FOREACH);
            this.state = 3787;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3788;
            this.local_variable_type();
            this.state = 3789;
            this.identifier();
            this.state = 3790;
            this.match(CSharpParser.IN);
            this.state = 3791;
            this.expression();
            this.state = 3792;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3793;
            this.embedded_statement();
            this.state = 3794;
            this.match(CSharpParser.EOF);
            break;

        case 9:
            localctx = new BreakStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 3796;
            this.match(CSharpParser.BREAK);
            this.state = 3797;
            this.match(CSharpParser.SEMICOLON);
            this.state = 3798;
            this.match(CSharpParser.EOF);
            break;

        case 10:
            localctx = new ContinueStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 3799;
            this.match(CSharpParser.CONTINUE);
            this.state = 3800;
            this.match(CSharpParser.SEMICOLON);
            this.state = 3801;
            this.match(CSharpParser.EOF);
            break;

        case 11:
            localctx = new GotoStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 3802;
            this.match(CSharpParser.GOTO);
            this.state = 3807;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.ADD:
            case CSharpParser.ALIAS:
            case CSharpParser.ARGLIST:
            case CSharpParser.ASCENDING:
            case CSharpParser.ASYNC:
            case CSharpParser.AWAIT:
            case CSharpParser.BY:
            case CSharpParser.DESCENDING:
            case CSharpParser.DYNAMIC:
            case CSharpParser.EQUALS:
            case CSharpParser.FROM:
            case CSharpParser.GET:
            case CSharpParser.GROUP:
            case CSharpParser.INTO:
            case CSharpParser.JOIN:
            case CSharpParser.LET:
            case CSharpParser.NAMEOF:
            case CSharpParser.ON:
            case CSharpParser.ORDERBY:
            case CSharpParser.PARTIAL:
            case CSharpParser.REMOVE:
            case CSharpParser.SELECT:
            case CSharpParser.SET:
            case CSharpParser.VAR:
            case CSharpParser.WHEN:
            case CSharpParser.WHERE:
            case CSharpParser.YIELD:
            case CSharpParser.IDENTIFIER:
                this.state = 3803;
                this.identifier();
                break;
            case CSharpParser.CASE:
                this.state = 3804;
                this.match(CSharpParser.CASE);
                this.state = 3805;
                this.expression();
                break;
            case CSharpParser.DEFAULT:
                this.state = 3806;
                this.match(CSharpParser.DEFAULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3809;
            this.match(CSharpParser.SEMICOLON);
            this.state = 3810;
            this.match(CSharpParser.EOF);
            break;

        case 12:
            localctx = new ReturnStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 3811;
            this.match(CSharpParser.RETURN);
            this.state = 3813;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
                this.state = 3812;
                this.expression();
            }

            this.state = 3815;
            this.match(CSharpParser.SEMICOLON);
            this.state = 3816;
            this.match(CSharpParser.EOF);
            break;

        case 13:
            localctx = new ThrowStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 3817;
            this.match(CSharpParser.THROW);
            this.state = 3819;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
                this.state = 3818;
                this.expression();
            }

            this.state = 3821;
            this.match(CSharpParser.SEMICOLON);
            this.state = 3822;
            this.match(CSharpParser.EOF);
            break;

        case 14:
            localctx = new TryStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 3823;
            this.match(CSharpParser.TRY);
            this.state = 3824;
            this.block();
            this.state = 3830;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.CATCH:
                this.state = 3825;
                this.catch_clauses();
                this.state = 3827;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CSharpParser.FINALLY) {
                    this.state = 3826;
                    this.finally_clause();
                }

                break;
            case CSharpParser.FINALLY:
                this.state = 3829;
                this.finally_clause();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3832;
            this.match(CSharpParser.EOF);
            break;

        case 15:
            localctx = new CheckedStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 3834;
            this.match(CSharpParser.CHECKED);
            this.state = 3835;
            this.block();
            this.state = 3836;
            this.match(CSharpParser.EOF);
            break;

        case 16:
            localctx = new UncheckedStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 3838;
            this.match(CSharpParser.UNCHECKED);
            this.state = 3839;
            this.block();
            this.state = 3840;
            this.match(CSharpParser.EOF);
            break;

        case 17:
            localctx = new LockStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 3842;
            this.match(CSharpParser.LOCK);
            this.state = 3843;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3844;
            this.expression();
            this.state = 3845;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3846;
            this.embedded_statement();
            this.state = 3847;
            this.match(CSharpParser.EOF);
            break;

        case 18:
            localctx = new UsingStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 3849;
            this.match(CSharpParser.USING);
            this.state = 3850;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3851;
            this.resource_acquisition();
            this.state = 3852;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3853;
            this.embedded_statement();
            this.state = 3854;
            this.match(CSharpParser.EOF);
            break;

        case 19:
            localctx = new YieldStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 3856;
            this.match(CSharpParser.YIELD);
            this.state = 3860;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.RETURN:
                this.state = 3857;
                this.match(CSharpParser.RETURN);
                this.state = 3858;
                this.expression();
                break;
            case CSharpParser.BREAK:
                this.state = 3859;
                this.match(CSharpParser.BREAK);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3862;
            this.match(CSharpParser.SEMICOLON);
            this.state = 3863;
            this.match(CSharpParser.EOF);
            break;

        case 20:
            localctx = new UnsafeStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 3864;
            this.match(CSharpParser.UNSAFE);
            this.state = 3865;
            this.block();
            this.state = 3866;
            this.match(CSharpParser.EOF);
            break;

        case 21:
            localctx = new FixedStatement_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 3868;
            this.match(CSharpParser.FIXED);
            this.state = 3869;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 3870;
            this.pointer_type();
            this.state = 3871;
            this.fixed_pointer_declarators();
            this.state = 3872;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 3873;
            this.embedded_statement();
            this.state = 3874;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Block_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_block_DropletFile;
    return this;
}

Block_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_DropletFileContext.prototype.constructor = Block_DropletFileContext;

Block_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Block_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Block_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Block_DropletFileContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Block_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBlock_DropletFile(this);
	}
};

Block_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBlock_DropletFile(this);
	}
};




CSharpParser.Block_DropletFileContext = Block_DropletFileContext;

CSharpParser.prototype.block_DropletFile = function() {

    var localctx = new Block_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 544, CSharpParser.RULE_block_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3878;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 3880;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BREAK) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.CONST) | (1 << CSharpParser.CONTINUE) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DO - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FALSE - 32)) | (1 << (CSharpParser.FIXED - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FOR - 32)) | (1 << (CSharpParser.FOREACH - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GOTO - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.IF - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LOCK - 32)) | (1 << (CSharpParser.LONG - 32)) | (1 << (CSharpParser.NAMEOF - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.RETURN - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.SWITCH - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.THROW - 65)) | (1 << (CSharpParser.TRUE - 65)) | (1 << (CSharpParser.TRY - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.UNSAFE - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.USING - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.VOID - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.WHILE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_BRACE - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (CSharpParser.SEMICOLON - 131)) | (1 << (CSharpParser.PLUS - 131)) | (1 << (CSharpParser.MINUS - 131)) | (1 << (CSharpParser.STAR - 131)) | (1 << (CSharpParser.AMP - 131)) | (1 << (CSharpParser.BANG - 131)) | (1 << (CSharpParser.TILDE - 131)) | (1 << (CSharpParser.OP_INC - 131)) | (1 << (CSharpParser.OP_DEC - 131)))) !== 0)) {
            this.state = 3879;
            this.statement_list();
        }

        this.state = 3882;
        this.match(CSharpParser.CLOSE_BRACE);
        this.state = 3883;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_variable_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_local_variable_declaration_DropletFile;
    return this;
}

Local_variable_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_variable_declaration_DropletFileContext.prototype.constructor = Local_variable_declaration_DropletFileContext;

Local_variable_declaration_DropletFileContext.prototype.local_variable_type = function() {
    return this.getTypedRuleContext(Local_variable_typeContext,0);
};

Local_variable_declaration_DropletFileContext.prototype.local_variable_declarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Local_variable_declaratorContext);
    } else {
        return this.getTypedRuleContext(Local_variable_declaratorContext,i);
    }
};

Local_variable_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Local_variable_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLocal_variable_declaration_DropletFile(this);
	}
};

Local_variable_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLocal_variable_declaration_DropletFile(this);
	}
};




CSharpParser.Local_variable_declaration_DropletFileContext = Local_variable_declaration_DropletFileContext;

CSharpParser.prototype.local_variable_declaration_DropletFile = function() {

    var localctx = new Local_variable_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, CSharpParser.RULE_local_variable_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3885;
        this.local_variable_type();
        this.state = 3886;
        this.local_variable_declarator();
        this.state = 3891;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 3887;
            this.match(CSharpParser.COMMA);
            this.state = 3888;
            this.local_variable_declarator();
            this.state = 3893;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3894;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_variable_type_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_local_variable_type_DropletFile;
    return this;
}

Local_variable_type_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_variable_type_DropletFileContext.prototype.constructor = Local_variable_type_DropletFileContext;

Local_variable_type_DropletFileContext.prototype.VAR = function() {
    return this.getToken(CSharpParser.VAR, 0);
};

Local_variable_type_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Local_variable_type_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Local_variable_type_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLocal_variable_type_DropletFile(this);
	}
};

Local_variable_type_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLocal_variable_type_DropletFile(this);
	}
};




CSharpParser.Local_variable_type_DropletFileContext = Local_variable_type_DropletFileContext;

CSharpParser.prototype.local_variable_type_DropletFile = function() {

    var localctx = new Local_variable_type_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, CSharpParser.RULE_local_variable_type_DropletFile);
    try {
        this.state = 3901;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,417,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3896;
            this.match(CSharpParser.VAR);
            this.state = 3897;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3898;
            this.var_type();
            this.state = 3899;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_variable_declarator_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_local_variable_declarator_DropletFile;
    return this;
}

Local_variable_declarator_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_variable_declarator_DropletFileContext.prototype.constructor = Local_variable_declarator_DropletFileContext;

Local_variable_declarator_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Local_variable_declarator_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Local_variable_declarator_DropletFileContext.prototype.local_variable_initializer = function() {
    return this.getTypedRuleContext(Local_variable_initializerContext,0);
};

Local_variable_declarator_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLocal_variable_declarator_DropletFile(this);
	}
};

Local_variable_declarator_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLocal_variable_declarator_DropletFile(this);
	}
};




CSharpParser.Local_variable_declarator_DropletFileContext = Local_variable_declarator_DropletFileContext;

CSharpParser.prototype.local_variable_declarator_DropletFile = function() {

    var localctx = new Local_variable_declarator_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, CSharpParser.RULE_local_variable_declarator_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3903;
        this.identifier();
        this.state = 3906;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.ASSIGNMENT) {
            this.state = 3904;
            this.match(CSharpParser.ASSIGNMENT);
            this.state = 3905;
            this.local_variable_initializer();
        }

        this.state = 3908;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_variable_initializer_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_local_variable_initializer_DropletFile;
    return this;
}

Local_variable_initializer_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_variable_initializer_DropletFileContext.prototype.constructor = Local_variable_initializer_DropletFileContext;

Local_variable_initializer_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Local_variable_initializer_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Local_variable_initializer_DropletFileContext.prototype.array_initializer = function() {
    return this.getTypedRuleContext(Array_initializerContext,0);
};

Local_variable_initializer_DropletFileContext.prototype.local_variable_initializer_unsafe = function() {
    return this.getTypedRuleContext(Local_variable_initializer_unsafeContext,0);
};

Local_variable_initializer_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLocal_variable_initializer_DropletFile(this);
	}
};

Local_variable_initializer_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLocal_variable_initializer_DropletFile(this);
	}
};




CSharpParser.Local_variable_initializer_DropletFileContext = Local_variable_initializer_DropletFileContext;

CSharpParser.prototype.local_variable_initializer_DropletFile = function() {

    var localctx = new Local_variable_initializer_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 552, CSharpParser.RULE_local_variable_initializer_DropletFile);
    try {
        this.state = 3919;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 3910;
            this.expression();
            this.state = 3911;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 3913;
            this.array_initializer();
            this.state = 3914;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.STACKALLOC:
            this.enterOuterAlt(localctx, 3);
            this.state = 3916;
            this.local_variable_initializer_unsafe();
            this.state = 3917;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_constant_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_local_constant_declaration_DropletFile;
    return this;
}

Local_constant_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_constant_declaration_DropletFileContext.prototype.constructor = Local_constant_declaration_DropletFileContext;

Local_constant_declaration_DropletFileContext.prototype.CONST = function() {
    return this.getToken(CSharpParser.CONST, 0);
};

Local_constant_declaration_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Local_constant_declaration_DropletFileContext.prototype.constant_declarators = function() {
    return this.getTypedRuleContext(Constant_declaratorsContext,0);
};

Local_constant_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Local_constant_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLocal_constant_declaration_DropletFile(this);
	}
};

Local_constant_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLocal_constant_declaration_DropletFile(this);
	}
};




CSharpParser.Local_constant_declaration_DropletFileContext = Local_constant_declaration_DropletFileContext;

CSharpParser.prototype.local_constant_declaration_DropletFile = function() {

    var localctx = new Local_constant_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 554, CSharpParser.RULE_local_constant_declaration_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3921;
        this.match(CSharpParser.CONST);
        this.state = 3922;
        this.var_type();
        this.state = 3923;
        this.constant_declarators();
        this.state = 3924;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_body_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_if_body_DropletFile;
    return this;
}

If_body_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_body_DropletFileContext.prototype.constructor = If_body_DropletFileContext;

If_body_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

If_body_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

If_body_DropletFileContext.prototype.simple_embedded_statement = function() {
    return this.getTypedRuleContext(Simple_embedded_statementContext,0);
};

If_body_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIf_body_DropletFile(this);
	}
};

If_body_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIf_body_DropletFile(this);
	}
};




CSharpParser.If_body_DropletFileContext = If_body_DropletFileContext;

CSharpParser.prototype.if_body_DropletFile = function() {

    var localctx = new If_body_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, CSharpParser.RULE_if_body_DropletFile);
    try {
        this.state = 3932;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 3926;
            this.block();
            this.state = 3927;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BREAK:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.CONTINUE:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DO:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FIXED:
        case CSharpParser.FLOAT:
        case CSharpParser.FOR:
        case CSharpParser.FOREACH:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GOTO:
        case CSharpParser.GROUP:
        case CSharpParser.IF:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LOCK:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.RETURN:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.SWITCH:
        case CSharpParser.THIS:
        case CSharpParser.THROW:
        case CSharpParser.TRUE:
        case CSharpParser.TRY:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.UNSAFE:
        case CSharpParser.USHORT:
        case CSharpParser.USING:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.WHILE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.SEMICOLON:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 2);
            this.state = 3929;
            this.simple_embedded_statement();
            this.state = 3930;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_section_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_switch_section_DropletFile;
    return this;
}

Switch_section_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_section_DropletFileContext.prototype.constructor = Switch_section_DropletFileContext;

Switch_section_DropletFileContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Switch_section_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Switch_section_DropletFileContext.prototype.switch_label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Switch_labelContext);
    } else {
        return this.getTypedRuleContext(Switch_labelContext,i);
    }
};

Switch_section_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSwitch_section_DropletFile(this);
	}
};

Switch_section_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSwitch_section_DropletFile(this);
	}
};




CSharpParser.Switch_section_DropletFileContext = Switch_section_DropletFileContext;

CSharpParser.prototype.switch_section_DropletFile = function() {

    var localctx = new Switch_section_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, CSharpParser.RULE_switch_section_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3935; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 3934;
        		this.switch_label();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 3937; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,421, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 3939;
        this.statement_list();
        this.state = 3940;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_label_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_switch_label_DropletFile;
    return this;
}

Switch_label_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_label_DropletFileContext.prototype.constructor = Switch_label_DropletFileContext;

Switch_label_DropletFileContext.prototype.CASE = function() {
    return this.getToken(CSharpParser.CASE, 0);
};

Switch_label_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Switch_label_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Switch_label_DropletFileContext.prototype.DEFAULT = function() {
    return this.getToken(CSharpParser.DEFAULT, 0);
};

Switch_label_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSwitch_label_DropletFile(this);
	}
};

Switch_label_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSwitch_label_DropletFile(this);
	}
};




CSharpParser.Switch_label_DropletFileContext = Switch_label_DropletFileContext;

CSharpParser.prototype.switch_label_DropletFile = function() {

    var localctx = new Switch_label_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, CSharpParser.RULE_switch_label_DropletFile);
    try {
        this.state = 3950;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.CASE:
            this.enterOuterAlt(localctx, 1);
            this.state = 3942;
            this.match(CSharpParser.CASE);
            this.state = 3943;
            this.expression();
            this.state = 3944;
            this.match(CSharpParser.COLON);
            this.state = 3945;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3947;
            this.match(CSharpParser.DEFAULT);
            this.state = 3948;
            this.match(CSharpParser.COLON);
            this.state = 3949;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Statement_list_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_statement_list_DropletFile;
    return this;
}

Statement_list_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_list_DropletFileContext.prototype.constructor = Statement_list_DropletFileContext;

Statement_list_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Statement_list_DropletFileContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

Statement_list_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterStatement_list_DropletFile(this);
	}
};

Statement_list_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitStatement_list_DropletFile(this);
	}
};




CSharpParser.Statement_list_DropletFileContext = Statement_list_DropletFileContext;

CSharpParser.prototype.statement_list_DropletFile = function() {

    var localctx = new Statement_list_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 562, CSharpParser.RULE_statement_list_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3953; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3952;
            this.statement();
            this.state = 3955; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BREAK) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.CONST) | (1 << CSharpParser.CONTINUE) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DO - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FALSE - 32)) | (1 << (CSharpParser.FIXED - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FOR - 32)) | (1 << (CSharpParser.FOREACH - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GOTO - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.IF - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LOCK - 32)) | (1 << (CSharpParser.LONG - 32)) | (1 << (CSharpParser.NAMEOF - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.RETURN - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.SWITCH - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.THROW - 65)) | (1 << (CSharpParser.TRUE - 65)) | (1 << (CSharpParser.TRY - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.UNSAFE - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.USING - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.VOID - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.WHILE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_BRACE - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (CSharpParser.SEMICOLON - 131)) | (1 << (CSharpParser.PLUS - 131)) | (1 << (CSharpParser.MINUS - 131)) | (1 << (CSharpParser.STAR - 131)) | (1 << (CSharpParser.AMP - 131)) | (1 << (CSharpParser.BANG - 131)) | (1 << (CSharpParser.TILDE - 131)) | (1 << (CSharpParser.OP_INC - 131)) | (1 << (CSharpParser.OP_DEC - 131)))) !== 0));
        this.state = 3957;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_initializer_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_for_initializer_DropletFile;
    return this;
}

For_initializer_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_initializer_DropletFileContext.prototype.constructor = For_initializer_DropletFileContext;

For_initializer_DropletFileContext.prototype.local_variable_declaration = function() {
    return this.getTypedRuleContext(Local_variable_declarationContext,0);
};

For_initializer_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

For_initializer_DropletFileContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

For_initializer_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFor_initializer_DropletFile(this);
	}
};

For_initializer_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFor_initializer_DropletFile(this);
	}
};




CSharpParser.For_initializer_DropletFileContext = For_initializer_DropletFileContext;

CSharpParser.prototype.for_initializer_DropletFile = function() {

    var localctx = new For_initializer_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 564, CSharpParser.RULE_for_initializer_DropletFile);
    var _la = 0; // Token type
    try {
        this.state = 3972;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,425,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3959;
            this.local_variable_declaration();
            this.state = 3960;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3962;
            this.expression();
            this.state = 3967;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CSharpParser.COMMA) {
                this.state = 3963;
                this.match(CSharpParser.COMMA);
                this.state = 3964;
                this.expression();
                this.state = 3969;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3970;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_iterator_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_for_iterator_DropletFile;
    return this;
}

For_iterator_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_iterator_DropletFileContext.prototype.constructor = For_iterator_DropletFileContext;

For_iterator_DropletFileContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

For_iterator_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

For_iterator_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFor_iterator_DropletFile(this);
	}
};

For_iterator_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFor_iterator_DropletFile(this);
	}
};




CSharpParser.For_iterator_DropletFileContext = For_iterator_DropletFileContext;

CSharpParser.prototype.for_iterator_DropletFile = function() {

    var localctx = new For_iterator_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 566, CSharpParser.RULE_for_iterator_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3974;
        this.expression();
        this.state = 3979;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 3975;
            this.match(CSharpParser.COMMA);
            this.state = 3976;
            this.expression();
            this.state = 3981;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3982;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Catch_clauses_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_catch_clauses_DropletFile;
    return this;
}

Catch_clauses_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_clauses_DropletFileContext.prototype.constructor = Catch_clauses_DropletFileContext;

Catch_clauses_DropletFileContext.prototype.specific_catch_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Specific_catch_clauseContext);
    } else {
        return this.getTypedRuleContext(Specific_catch_clauseContext,i);
    }
};

Catch_clauses_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Catch_clauses_DropletFileContext.prototype.general_catch_clause = function() {
    return this.getTypedRuleContext(General_catch_clauseContext,0);
};

Catch_clauses_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCatch_clauses_DropletFile(this);
	}
};

Catch_clauses_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCatch_clauses_DropletFile(this);
	}
};




CSharpParser.Catch_clauses_DropletFileContext = Catch_clauses_DropletFileContext;

CSharpParser.prototype.catch_clauses_DropletFile = function() {

    var localctx = new Catch_clauses_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 568, CSharpParser.RULE_catch_clauses_DropletFile);
    var _la = 0; // Token type
    try {
        this.state = 3999;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,429,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3984;
            this.specific_catch_clause();
            this.state = 3988;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,427,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3985;
                    this.specific_catch_clause(); 
                }
                this.state = 3990;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,427,this._ctx);
            }

            this.state = 3992;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.CATCH) {
                this.state = 3991;
                this.general_catch_clause();
            }

            this.state = 3994;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3996;
            this.general_catch_clause();
            this.state = 3997;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Specific_catch_clause_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_specific_catch_clause_DropletFile;
    return this;
}

Specific_catch_clause_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Specific_catch_clause_DropletFileContext.prototype.constructor = Specific_catch_clause_DropletFileContext;

Specific_catch_clause_DropletFileContext.prototype.CATCH = function() {
    return this.getToken(CSharpParser.CATCH, 0);
};

Specific_catch_clause_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Specific_catch_clause_DropletFileContext.prototype.class_type = function() {
    return this.getTypedRuleContext(Class_typeContext,0);
};

Specific_catch_clause_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Specific_catch_clause_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Specific_catch_clause_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Specific_catch_clause_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Specific_catch_clause_DropletFileContext.prototype.exception_filter = function() {
    return this.getTypedRuleContext(Exception_filterContext,0);
};

Specific_catch_clause_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSpecific_catch_clause_DropletFile(this);
	}
};

Specific_catch_clause_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSpecific_catch_clause_DropletFile(this);
	}
};




CSharpParser.Specific_catch_clause_DropletFileContext = Specific_catch_clause_DropletFileContext;

CSharpParser.prototype.specific_catch_clause_DropletFile = function() {

    var localctx = new Specific_catch_clause_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 570, CSharpParser.RULE_specific_catch_clause_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4001;
        this.match(CSharpParser.CATCH);
        this.state = 4002;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 4003;
        this.class_type();
        this.state = 4005;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CSharpParser.DYNAMIC - 34)) | (1 << (CSharpParser.EQUALS - 34)) | (1 << (CSharpParser.FROM - 34)) | (1 << (CSharpParser.GET - 34)) | (1 << (CSharpParser.GROUP - 34)) | (1 << (CSharpParser.INTO - 34)) | (1 << (CSharpParser.JOIN - 34)) | (1 << (CSharpParser.LET - 34)) | (1 << (CSharpParser.NAMEOF - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CSharpParser.ON - 68)) | (1 << (CSharpParser.ORDERBY - 68)) | (1 << (CSharpParser.PARTIAL - 68)) | (1 << (CSharpParser.REMOVE - 68)) | (1 << (CSharpParser.SELECT - 68)) | (1 << (CSharpParser.SET - 68)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (CSharpParser.VAR - 104)) | (1 << (CSharpParser.WHEN - 104)) | (1 << (CSharpParser.WHERE - 104)) | (1 << (CSharpParser.YIELD - 104)) | (1 << (CSharpParser.IDENTIFIER - 104)))) !== 0)) {
            this.state = 4004;
            this.identifier();
        }

        this.state = 4007;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 4009;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHEN) {
            this.state = 4008;
            this.exception_filter();
        }

        this.state = 4011;
        this.block();
        this.state = 4012;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_catch_clause_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_general_catch_clause_DropletFile;
    return this;
}

General_catch_clause_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_catch_clause_DropletFileContext.prototype.constructor = General_catch_clause_DropletFileContext;

General_catch_clause_DropletFileContext.prototype.CATCH = function() {
    return this.getToken(CSharpParser.CATCH, 0);
};

General_catch_clause_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

General_catch_clause_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

General_catch_clause_DropletFileContext.prototype.exception_filter = function() {
    return this.getTypedRuleContext(Exception_filterContext,0);
};

General_catch_clause_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterGeneral_catch_clause_DropletFile(this);
	}
};

General_catch_clause_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitGeneral_catch_clause_DropletFile(this);
	}
};




CSharpParser.General_catch_clause_DropletFileContext = General_catch_clause_DropletFileContext;

CSharpParser.prototype.general_catch_clause_DropletFile = function() {

    var localctx = new General_catch_clause_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 572, CSharpParser.RULE_general_catch_clause_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4014;
        this.match(CSharpParser.CATCH);
        this.state = 4016;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHEN) {
            this.state = 4015;
            this.exception_filter();
        }

        this.state = 4018;
        this.block();
        this.state = 4019;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exception_filter_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_exception_filter_DropletFile;
    return this;
}

Exception_filter_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exception_filter_DropletFileContext.prototype.constructor = Exception_filter_DropletFileContext;

Exception_filter_DropletFileContext.prototype.WHEN = function() {
    return this.getToken(CSharpParser.WHEN, 0);
};

Exception_filter_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Exception_filter_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Exception_filter_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Exception_filter_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Exception_filter_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterException_filter_DropletFile(this);
	}
};

Exception_filter_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitException_filter_DropletFile(this);
	}
};




CSharpParser.Exception_filter_DropletFileContext = Exception_filter_DropletFileContext;

CSharpParser.prototype.exception_filter_DropletFile = function() {

    var localctx = new Exception_filter_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 574, CSharpParser.RULE_exception_filter_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4021;
        this.match(CSharpParser.WHEN);
        this.state = 4022;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 4023;
        this.expression();
        this.state = 4024;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 4025;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Finally_clause_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_finally_clause_DropletFile;
    return this;
}

Finally_clause_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Finally_clause_DropletFileContext.prototype.constructor = Finally_clause_DropletFileContext;

Finally_clause_DropletFileContext.prototype.FINALLY = function() {
    return this.getToken(CSharpParser.FINALLY, 0);
};

Finally_clause_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Finally_clause_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Finally_clause_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFinally_clause_DropletFile(this);
	}
};

Finally_clause_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFinally_clause_DropletFile(this);
	}
};




CSharpParser.Finally_clause_DropletFileContext = Finally_clause_DropletFileContext;

CSharpParser.prototype.finally_clause_DropletFile = function() {

    var localctx = new Finally_clause_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 576, CSharpParser.RULE_finally_clause_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4027;
        this.match(CSharpParser.FINALLY);
        this.state = 4028;
        this.block();
        this.state = 4029;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Resource_acquisition_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_resource_acquisition_DropletFile;
    return this;
}

Resource_acquisition_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_acquisition_DropletFileContext.prototype.constructor = Resource_acquisition_DropletFileContext;

Resource_acquisition_DropletFileContext.prototype.local_variable_declaration = function() {
    return this.getTypedRuleContext(Local_variable_declarationContext,0);
};

Resource_acquisition_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Resource_acquisition_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Resource_acquisition_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterResource_acquisition_DropletFile(this);
	}
};

Resource_acquisition_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitResource_acquisition_DropletFile(this);
	}
};




CSharpParser.Resource_acquisition_DropletFileContext = Resource_acquisition_DropletFileContext;

CSharpParser.prototype.resource_acquisition_DropletFile = function() {

    var localctx = new Resource_acquisition_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 578, CSharpParser.RULE_resource_acquisition_DropletFile);
    try {
        this.state = 4037;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,433,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4031;
            this.local_variable_declaration();
            this.state = 4032;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4034;
            this.expression();
            this.state = 4035;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Namespace_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_namespace_declaration_DropletFile;
    this.qi = null; // Qualified_identifierContext
    return this;
}

Namespace_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Namespace_declaration_DropletFileContext.prototype.constructor = Namespace_declaration_DropletFileContext;

Namespace_declaration_DropletFileContext.prototype.NAMESPACE = function() {
    return this.getToken(CSharpParser.NAMESPACE, 0);
};

Namespace_declaration_DropletFileContext.prototype.namespace_body = function() {
    return this.getTypedRuleContext(Namespace_bodyContext,0);
};

Namespace_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Namespace_declaration_DropletFileContext.prototype.qualified_identifier = function() {
    return this.getTypedRuleContext(Qualified_identifierContext,0);
};

Namespace_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNamespace_declaration_DropletFile(this);
	}
};

Namespace_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNamespace_declaration_DropletFile(this);
	}
};




CSharpParser.Namespace_declaration_DropletFileContext = Namespace_declaration_DropletFileContext;

CSharpParser.prototype.namespace_declaration_DropletFile = function() {

    var localctx = new Namespace_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 580, CSharpParser.RULE_namespace_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4039;
        this.match(CSharpParser.NAMESPACE);
        this.state = 4040;
        localctx.qi = this.qualified_identifier();
        this.state = 4041;
        this.namespace_body();
        this.state = 4043;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.SEMICOLON) {
            this.state = 4042;
            this.match(CSharpParser.SEMICOLON);
        }

        this.state = 4045;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Qualified_identifier_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_qualified_identifier_DropletFile;
    return this;
}

Qualified_identifier_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Qualified_identifier_DropletFileContext.prototype.constructor = Qualified_identifier_DropletFileContext;

Qualified_identifier_DropletFileContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Qualified_identifier_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Qualified_identifier_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterQualified_identifier_DropletFile(this);
	}
};

Qualified_identifier_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitQualified_identifier_DropletFile(this);
	}
};




CSharpParser.Qualified_identifier_DropletFileContext = Qualified_identifier_DropletFileContext;

CSharpParser.prototype.qualified_identifier_DropletFile = function() {

    var localctx = new Qualified_identifier_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 582, CSharpParser.RULE_qualified_identifier_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4047;
        this.identifier();
        this.state = 4052;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.DOT) {
            this.state = 4048;
            this.match(CSharpParser.DOT);
            this.state = 4049;
            this.identifier();
            this.state = 4054;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4055;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Namespace_body_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_namespace_body_DropletFile;
    return this;
}

Namespace_body_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Namespace_body_DropletFileContext.prototype.constructor = Namespace_body_DropletFileContext;

Namespace_body_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Namespace_body_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Namespace_body_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Namespace_body_DropletFileContext.prototype.extern_alias_directives = function() {
    return this.getTypedRuleContext(Extern_alias_directivesContext,0);
};

Namespace_body_DropletFileContext.prototype.using_directives = function() {
    return this.getTypedRuleContext(Using_directivesContext,0);
};

Namespace_body_DropletFileContext.prototype.namespace_member_declarations = function() {
    return this.getTypedRuleContext(Namespace_member_declarationsContext,0);
};

Namespace_body_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNamespace_body_DropletFile(this);
	}
};

Namespace_body_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNamespace_body_DropletFile(this);
	}
};




CSharpParser.Namespace_body_DropletFileContext = Namespace_body_DropletFileContext;

CSharpParser.prototype.namespace_body_DropletFile = function() {

    var localctx = new Namespace_body_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 584, CSharpParser.RULE_namespace_body_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4057;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 4059;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,436,this._ctx);
        if(la_===1) {
            this.state = 4058;
            this.extern_alias_directives();

        }
        this.state = 4062;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.USING) {
            this.state = 4061;
            this.using_directives();
        }

        this.state = 4065;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CSharpParser.ENUM - 36)) | (1 << (CSharpParser.EXTERN - 36)) | (1 << (CSharpParser.INTERFACE - 36)) | (1 << (CSharpParser.INTERNAL - 36)) | (1 << (CSharpParser.NAMESPACE - 36)) | (1 << (CSharpParser.NEW - 36)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CSharpParser.OVERRIDE - 72)) | (1 << (CSharpParser.PARTIAL - 72)) | (1 << (CSharpParser.PRIVATE - 72)) | (1 << (CSharpParser.PROTECTED - 72)) | (1 << (CSharpParser.PUBLIC - 72)) | (1 << (CSharpParser.READONLY - 72)) | (1 << (CSharpParser.SEALED - 72)) | (1 << (CSharpParser.STATIC - 72)) | (1 << (CSharpParser.STRUCT - 72)) | (1 << (CSharpParser.UNSAFE - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CSharpParser.VIRTUAL - 105)) | (1 << (CSharpParser.VOLATILE - 105)) | (1 << (CSharpParser.OPEN_BRACKET - 105)))) !== 0)) {
            this.state = 4064;
            this.namespace_member_declarations();
        }

        this.state = 4067;
        this.match(CSharpParser.CLOSE_BRACE);
        this.state = 4068;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Extern_alias_directives_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_extern_alias_directives_DropletFile;
    return this;
}

Extern_alias_directives_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extern_alias_directives_DropletFileContext.prototype.constructor = Extern_alias_directives_DropletFileContext;

Extern_alias_directives_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Extern_alias_directives_DropletFileContext.prototype.extern_alias_directive = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Extern_alias_directiveContext);
    } else {
        return this.getTypedRuleContext(Extern_alias_directiveContext,i);
    }
};

Extern_alias_directives_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExtern_alias_directives_DropletFile(this);
	}
};

Extern_alias_directives_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExtern_alias_directives_DropletFile(this);
	}
};




CSharpParser.Extern_alias_directives_DropletFileContext = Extern_alias_directives_DropletFileContext;

CSharpParser.prototype.extern_alias_directives_DropletFile = function() {

    var localctx = new Extern_alias_directives_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 586, CSharpParser.RULE_extern_alias_directives_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4071; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4070;
            this.extern_alias_directive();
            this.state = 4073; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===CSharpParser.EXTERN);
        this.state = 4075;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Extern_alias_directive_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_extern_alias_directive_DropletFile;
    return this;
}

Extern_alias_directive_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extern_alias_directive_DropletFileContext.prototype.constructor = Extern_alias_directive_DropletFileContext;

Extern_alias_directive_DropletFileContext.prototype.EXTERN = function() {
    return this.getToken(CSharpParser.EXTERN, 0);
};

Extern_alias_directive_DropletFileContext.prototype.ALIAS = function() {
    return this.getToken(CSharpParser.ALIAS, 0);
};

Extern_alias_directive_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Extern_alias_directive_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Extern_alias_directive_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterExtern_alias_directive_DropletFile(this);
	}
};

Extern_alias_directive_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitExtern_alias_directive_DropletFile(this);
	}
};




CSharpParser.Extern_alias_directive_DropletFileContext = Extern_alias_directive_DropletFileContext;

CSharpParser.prototype.extern_alias_directive_DropletFile = function() {

    var localctx = new Extern_alias_directive_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 588, CSharpParser.RULE_extern_alias_directive_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4077;
        this.match(CSharpParser.EXTERN);
        this.state = 4078;
        this.match(CSharpParser.ALIAS);
        this.state = 4079;
        this.identifier();
        this.state = 4080;
        this.match(CSharpParser.SEMICOLON);
        this.state = 4081;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Using_directives_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_using_directives_DropletFile;
    return this;
}

Using_directives_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Using_directives_DropletFileContext.prototype.constructor = Using_directives_DropletFileContext;

Using_directives_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Using_directives_DropletFileContext.prototype.using_directive = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Using_directiveContext);
    } else {
        return this.getTypedRuleContext(Using_directiveContext,i);
    }
};

Using_directives_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUsing_directives_DropletFile(this);
	}
};

Using_directives_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUsing_directives_DropletFile(this);
	}
};




CSharpParser.Using_directives_DropletFileContext = Using_directives_DropletFileContext;

CSharpParser.prototype.using_directives_DropletFile = function() {

    var localctx = new Using_directives_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 590, CSharpParser.RULE_using_directives_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4084; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4083;
            this.using_directive();
            this.state = 4086; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===CSharpParser.USING);
        this.state = 4088;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Using_directive_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_using_directive_DropletFile;
    return this;
}

Using_directive_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Using_directive_DropletFileContext.prototype.constructor = Using_directive_DropletFileContext;


 
Using_directive_DropletFileContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function UsingStaticDirective_DropletFileContext(parser, ctx) {
	Using_directive_DropletFileContext.call(this, parser);
    Using_directive_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UsingStaticDirective_DropletFileContext.prototype = Object.create(Using_directive_DropletFileContext.prototype);
UsingStaticDirective_DropletFileContext.prototype.constructor = UsingStaticDirective_DropletFileContext;

CSharpParser.UsingStaticDirective_DropletFileContext = UsingStaticDirective_DropletFileContext;

UsingStaticDirective_DropletFileContext.prototype.USING = function() {
    return this.getToken(CSharpParser.USING, 0);
};

UsingStaticDirective_DropletFileContext.prototype.STATIC = function() {
    return this.getToken(CSharpParser.STATIC, 0);
};

UsingStaticDirective_DropletFileContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};

UsingStaticDirective_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
UsingStaticDirective_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUsingStaticDirective_DropletFile(this);
	}
};

UsingStaticDirective_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUsingStaticDirective_DropletFile(this);
	}
};


function UsingAliasDirective_DropletFileContext(parser, ctx) {
	Using_directive_DropletFileContext.call(this, parser);
    Using_directive_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UsingAliasDirective_DropletFileContext.prototype = Object.create(Using_directive_DropletFileContext.prototype);
UsingAliasDirective_DropletFileContext.prototype.constructor = UsingAliasDirective_DropletFileContext;

CSharpParser.UsingAliasDirective_DropletFileContext = UsingAliasDirective_DropletFileContext;

UsingAliasDirective_DropletFileContext.prototype.USING = function() {
    return this.getToken(CSharpParser.USING, 0);
};

UsingAliasDirective_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

UsingAliasDirective_DropletFileContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};

UsingAliasDirective_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
UsingAliasDirective_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUsingAliasDirective_DropletFile(this);
	}
};

UsingAliasDirective_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUsingAliasDirective_DropletFile(this);
	}
};


function UsingNamespaceDirective_DropletFileContext(parser, ctx) {
	Using_directive_DropletFileContext.call(this, parser);
    Using_directive_DropletFileContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UsingNamespaceDirective_DropletFileContext.prototype = Object.create(Using_directive_DropletFileContext.prototype);
UsingNamespaceDirective_DropletFileContext.prototype.constructor = UsingNamespaceDirective_DropletFileContext;

CSharpParser.UsingNamespaceDirective_DropletFileContext = UsingNamespaceDirective_DropletFileContext;

UsingNamespaceDirective_DropletFileContext.prototype.USING = function() {
    return this.getToken(CSharpParser.USING, 0);
};

UsingNamespaceDirective_DropletFileContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};

UsingNamespaceDirective_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};
UsingNamespaceDirective_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterUsingNamespaceDirective_DropletFile(this);
	}
};

UsingNamespaceDirective_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitUsingNamespaceDirective_DropletFile(this);
	}
};



CSharpParser.Using_directive_DropletFileContext = Using_directive_DropletFileContext;

CSharpParser.prototype.using_directive_DropletFile = function() {

    var localctx = new Using_directive_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 592, CSharpParser.RULE_using_directive_DropletFile);
    try {
        this.state = 4108;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,441,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UsingAliasDirective_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 4090;
            this.match(CSharpParser.USING);
            this.state = 4091;
            this.identifier();
            this.state = 4092;
            this.match(CSharpParser.ASSIGNMENT);
            this.state = 4093;
            this.namespace_or_type_name();
            this.state = 4094;
            this.match(CSharpParser.SEMICOLON);
            this.state = 4095;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            localctx = new UsingNamespaceDirective_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 4097;
            this.match(CSharpParser.USING);
            this.state = 4098;
            this.namespace_or_type_name();
            this.state = 4099;
            this.match(CSharpParser.SEMICOLON);
            this.state = 4100;
            this.match(CSharpParser.EOF);
            break;

        case 3:
            localctx = new UsingStaticDirective_DropletFileContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 4102;
            this.match(CSharpParser.USING);
            this.state = 4103;
            this.match(CSharpParser.STATIC);
            this.state = 4104;
            this.namespace_or_type_name();
            this.state = 4105;
            this.match(CSharpParser.SEMICOLON);
            this.state = 4106;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Namespace_member_declarations_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_namespace_member_declarations_DropletFile;
    return this;
}

Namespace_member_declarations_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Namespace_member_declarations_DropletFileContext.prototype.constructor = Namespace_member_declarations_DropletFileContext;

Namespace_member_declarations_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Namespace_member_declarations_DropletFileContext.prototype.namespace_member_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Namespace_member_declarationContext);
    } else {
        return this.getTypedRuleContext(Namespace_member_declarationContext,i);
    }
};

Namespace_member_declarations_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNamespace_member_declarations_DropletFile(this);
	}
};

Namespace_member_declarations_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNamespace_member_declarations_DropletFile(this);
	}
};




CSharpParser.Namespace_member_declarations_DropletFileContext = Namespace_member_declarations_DropletFileContext;

CSharpParser.prototype.namespace_member_declarations_DropletFile = function() {

    var localctx = new Namespace_member_declarations_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 594, CSharpParser.RULE_namespace_member_declarations_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4111; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4110;
            this.namespace_member_declaration();
            this.state = 4113; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CSharpParser.ENUM - 36)) | (1 << (CSharpParser.EXTERN - 36)) | (1 << (CSharpParser.INTERFACE - 36)) | (1 << (CSharpParser.INTERNAL - 36)) | (1 << (CSharpParser.NAMESPACE - 36)) | (1 << (CSharpParser.NEW - 36)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CSharpParser.OVERRIDE - 72)) | (1 << (CSharpParser.PARTIAL - 72)) | (1 << (CSharpParser.PRIVATE - 72)) | (1 << (CSharpParser.PROTECTED - 72)) | (1 << (CSharpParser.PUBLIC - 72)) | (1 << (CSharpParser.READONLY - 72)) | (1 << (CSharpParser.SEALED - 72)) | (1 << (CSharpParser.STATIC - 72)) | (1 << (CSharpParser.STRUCT - 72)) | (1 << (CSharpParser.UNSAFE - 72)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (CSharpParser.VIRTUAL - 105)) | (1 << (CSharpParser.VOLATILE - 105)) | (1 << (CSharpParser.OPEN_BRACKET - 105)))) !== 0));
        this.state = 4115;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Namespace_member_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_namespace_member_declaration_DropletFile;
    return this;
}

Namespace_member_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Namespace_member_declaration_DropletFileContext.prototype.constructor = Namespace_member_declaration_DropletFileContext;

Namespace_member_declaration_DropletFileContext.prototype.namespace_declaration = function() {
    return this.getTypedRuleContext(Namespace_declarationContext,0);
};

Namespace_member_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Namespace_member_declaration_DropletFileContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Namespace_member_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterNamespace_member_declaration_DropletFile(this);
	}
};

Namespace_member_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitNamespace_member_declaration_DropletFile(this);
	}
};




CSharpParser.Namespace_member_declaration_DropletFileContext = Namespace_member_declaration_DropletFileContext;

CSharpParser.prototype.namespace_member_declaration_DropletFile = function() {

    var localctx = new Namespace_member_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 596, CSharpParser.RULE_namespace_member_declaration_DropletFile);
    try {
        this.state = 4123;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.NAMESPACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 4117;
            this.namespace_declaration();
            this.state = 4118;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ABSTRACT:
        case CSharpParser.ASYNC:
        case CSharpParser.CLASS:
        case CSharpParser.DELEGATE:
        case CSharpParser.ENUM:
        case CSharpParser.EXTERN:
        case CSharpParser.INTERFACE:
        case CSharpParser.INTERNAL:
        case CSharpParser.NEW:
        case CSharpParser.OVERRIDE:
        case CSharpParser.PARTIAL:
        case CSharpParser.PRIVATE:
        case CSharpParser.PROTECTED:
        case CSharpParser.PUBLIC:
        case CSharpParser.READONLY:
        case CSharpParser.SEALED:
        case CSharpParser.STATIC:
        case CSharpParser.STRUCT:
        case CSharpParser.UNSAFE:
        case CSharpParser.VIRTUAL:
        case CSharpParser.VOLATILE:
        case CSharpParser.OPEN_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 4120;
            this.type_declaration();
            this.state = 4121;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_declaration_DropletFile;
    return this;
}

Type_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_declaration_DropletFileContext.prototype.constructor = Type_declaration_DropletFileContext;

Type_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Type_declaration_DropletFileContext.prototype.class_definition = function() {
    return this.getTypedRuleContext(Class_definitionContext,0);
};

Type_declaration_DropletFileContext.prototype.struct_definition = function() {
    return this.getTypedRuleContext(Struct_definitionContext,0);
};

Type_declaration_DropletFileContext.prototype.interface_definition = function() {
    return this.getTypedRuleContext(Interface_definitionContext,0);
};

Type_declaration_DropletFileContext.prototype.enum_definition = function() {
    return this.getTypedRuleContext(Enum_definitionContext,0);
};

Type_declaration_DropletFileContext.prototype.delegate_definition = function() {
    return this.getTypedRuleContext(Delegate_definitionContext,0);
};

Type_declaration_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Type_declaration_DropletFileContext.prototype.all_member_modifiers = function() {
    return this.getTypedRuleContext(All_member_modifiersContext,0);
};

Type_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_declaration_DropletFile(this);
	}
};

Type_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_declaration_DropletFile(this);
	}
};




CSharpParser.Type_declaration_DropletFileContext = Type_declaration_DropletFileContext;

CSharpParser.prototype.type_declaration_DropletFile = function() {

    var localctx = new Type_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 598, CSharpParser.RULE_type_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4126;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4125;
            this.attributes();
        }

        this.state = 4129;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.ABSTRACT || _la===CSharpParser.ASYNC || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (CSharpParser.EXTERN - 40)) | (1 << (CSharpParser.INTERNAL - 40)) | (1 << (CSharpParser.NEW - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CSharpParser.OVERRIDE - 72)) | (1 << (CSharpParser.PARTIAL - 72)) | (1 << (CSharpParser.PRIVATE - 72)) | (1 << (CSharpParser.PROTECTED - 72)) | (1 << (CSharpParser.PUBLIC - 72)) | (1 << (CSharpParser.READONLY - 72)) | (1 << (CSharpParser.SEALED - 72)) | (1 << (CSharpParser.STATIC - 72)) | (1 << (CSharpParser.UNSAFE - 72)))) !== 0) || _la===CSharpParser.VIRTUAL || _la===CSharpParser.VOLATILE) {
            this.state = 4128;
            this.all_member_modifiers();
        }

        this.state = 4136;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.CLASS:
            this.state = 4131;
            this.class_definition();
            break;
        case CSharpParser.STRUCT:
            this.state = 4132;
            this.struct_definition();
            break;
        case CSharpParser.INTERFACE:
            this.state = 4133;
            this.interface_definition();
            break;
        case CSharpParser.ENUM:
            this.state = 4134;
            this.enum_definition();
            break;
        case CSharpParser.DELEGATE:
            this.state = 4135;
            this.delegate_definition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 4138;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Qualified_alias_member_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_qualified_alias_member_DropletFile;
    return this;
}

Qualified_alias_member_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Qualified_alias_member_DropletFileContext.prototype.constructor = Qualified_alias_member_DropletFileContext;

Qualified_alias_member_DropletFileContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Qualified_alias_member_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Qualified_alias_member_DropletFileContext.prototype.type_argument_list = function() {
    return this.getTypedRuleContext(Type_argument_listContext,0);
};

Qualified_alias_member_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterQualified_alias_member_DropletFile(this);
	}
};

Qualified_alias_member_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitQualified_alias_member_DropletFile(this);
	}
};




CSharpParser.Qualified_alias_member_DropletFileContext = Qualified_alias_member_DropletFileContext;

CSharpParser.prototype.qualified_alias_member_DropletFile = function() {

    var localctx = new Qualified_alias_member_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 600, CSharpParser.RULE_qualified_alias_member_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4140;
        this.identifier();
        this.state = 4141;
        this.match(CSharpParser.DOUBLE_COLON);
        this.state = 4142;
        this.identifier();
        this.state = 4144;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.LT) {
            this.state = 4143;
            this.type_argument_list();
        }

        this.state = 4146;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_parameter_list_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_parameter_list_DropletFile;
    return this;
}

Type_parameter_list_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_parameter_list_DropletFileContext.prototype.constructor = Type_parameter_list_DropletFileContext;

Type_parameter_list_DropletFileContext.prototype.type_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_parameterContext,i);
    }
};

Type_parameter_list_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Type_parameter_list_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_parameter_list_DropletFile(this);
	}
};

Type_parameter_list_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_parameter_list_DropletFile(this);
	}
};




CSharpParser.Type_parameter_list_DropletFileContext = Type_parameter_list_DropletFileContext;

CSharpParser.prototype.type_parameter_list_DropletFile = function() {

    var localctx = new Type_parameter_list_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 602, CSharpParser.RULE_type_parameter_list_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4148;
        this.match(CSharpParser.LT);
        this.state = 4149;
        this.type_parameter();
        this.state = 4154;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 4150;
            this.match(CSharpParser.COMMA);
            this.state = 4151;
            this.type_parameter();
            this.state = 4156;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4157;
        this.match(CSharpParser.GT);
        this.state = 4158;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_parameter_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_parameter_DropletFile;
    return this;
}

Type_parameter_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_parameter_DropletFileContext.prototype.constructor = Type_parameter_DropletFileContext;

Type_parameter_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Type_parameter_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Type_parameter_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Type_parameter_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_parameter_DropletFile(this);
	}
};

Type_parameter_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_parameter_DropletFile(this);
	}
};




CSharpParser.Type_parameter_DropletFileContext = Type_parameter_DropletFileContext;

CSharpParser.prototype.type_parameter_DropletFile = function() {

    var localctx = new Type_parameter_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 604, CSharpParser.RULE_type_parameter_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4161;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4160;
            this.attributes();
        }

        this.state = 4163;
        this.identifier();
        this.state = 4164;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_base_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_class_base_DropletFile;
    return this;
}

Class_base_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_base_DropletFileContext.prototype.constructor = Class_base_DropletFileContext;

Class_base_DropletFileContext.prototype.class_type = function() {
    return this.getTypedRuleContext(Class_typeContext,0);
};

Class_base_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Class_base_DropletFileContext.prototype.namespace_or_type_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Namespace_or_type_nameContext);
    } else {
        return this.getTypedRuleContext(Namespace_or_type_nameContext,i);
    }
};

Class_base_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterClass_base_DropletFile(this);
	}
};

Class_base_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitClass_base_DropletFile(this);
	}
};




CSharpParser.Class_base_DropletFileContext = Class_base_DropletFileContext;

CSharpParser.prototype.class_base_DropletFile = function() {

    var localctx = new Class_base_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 606, CSharpParser.RULE_class_base_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4166;
        this.match(CSharpParser.COLON);
        this.state = 4167;
        this.class_type();
        this.state = 4172;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 4168;
            this.match(CSharpParser.COMMA);
            this.state = 4169;
            this.namespace_or_type_name();
            this.state = 4174;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4175;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_type_list_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interface_type_list_DropletFile;
    return this;
}

Interface_type_list_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_type_list_DropletFileContext.prototype.constructor = Interface_type_list_DropletFileContext;

Interface_type_list_DropletFileContext.prototype.namespace_or_type_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Namespace_or_type_nameContext);
    } else {
        return this.getTypedRuleContext(Namespace_or_type_nameContext,i);
    }
};

Interface_type_list_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Interface_type_list_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterface_type_list_DropletFile(this);
	}
};

Interface_type_list_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterface_type_list_DropletFile(this);
	}
};




CSharpParser.Interface_type_list_DropletFileContext = Interface_type_list_DropletFileContext;

CSharpParser.prototype.interface_type_list_DropletFile = function() {

    var localctx = new Interface_type_list_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 608, CSharpParser.RULE_interface_type_list_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4177;
        this.namespace_or_type_name();
        this.state = 4182;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 4178;
            this.match(CSharpParser.COMMA);
            this.state = 4179;
            this.namespace_or_type_name();
            this.state = 4184;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4185;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_parameter_constraints_clauses_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_parameter_constraints_clauses_DropletFile;
    return this;
}

Type_parameter_constraints_clauses_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_parameter_constraints_clauses_DropletFileContext.prototype.constructor = Type_parameter_constraints_clauses_DropletFileContext;

Type_parameter_constraints_clauses_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Type_parameter_constraints_clauses_DropletFileContext.prototype.type_parameter_constraints_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_parameter_constraints_clauseContext);
    } else {
        return this.getTypedRuleContext(Type_parameter_constraints_clauseContext,i);
    }
};

Type_parameter_constraints_clauses_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_parameter_constraints_clauses_DropletFile(this);
	}
};

Type_parameter_constraints_clauses_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_parameter_constraints_clauses_DropletFile(this);
	}
};




CSharpParser.Type_parameter_constraints_clauses_DropletFileContext = Type_parameter_constraints_clauses_DropletFileContext;

CSharpParser.prototype.type_parameter_constraints_clauses_DropletFile = function() {

    var localctx = new Type_parameter_constraints_clauses_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 610, CSharpParser.RULE_type_parameter_constraints_clauses_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4188; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4187;
            this.type_parameter_constraints_clause();
            this.state = 4190; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===CSharpParser.WHERE);
        this.state = 4192;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_parameter_constraints_clause_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_parameter_constraints_clause_DropletFile;
    return this;
}

Type_parameter_constraints_clause_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_parameter_constraints_clause_DropletFileContext.prototype.constructor = Type_parameter_constraints_clause_DropletFileContext;

Type_parameter_constraints_clause_DropletFileContext.prototype.WHERE = function() {
    return this.getToken(CSharpParser.WHERE, 0);
};

Type_parameter_constraints_clause_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Type_parameter_constraints_clause_DropletFileContext.prototype.type_parameter_constraints = function() {
    return this.getTypedRuleContext(Type_parameter_constraintsContext,0);
};

Type_parameter_constraints_clause_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Type_parameter_constraints_clause_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_parameter_constraints_clause_DropletFile(this);
	}
};

Type_parameter_constraints_clause_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_parameter_constraints_clause_DropletFile(this);
	}
};




CSharpParser.Type_parameter_constraints_clause_DropletFileContext = Type_parameter_constraints_clause_DropletFileContext;

CSharpParser.prototype.type_parameter_constraints_clause_DropletFile = function() {

    var localctx = new Type_parameter_constraints_clause_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 612, CSharpParser.RULE_type_parameter_constraints_clause_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4194;
        this.match(CSharpParser.WHERE);
        this.state = 4195;
        this.identifier();
        this.state = 4196;
        this.match(CSharpParser.COLON);
        this.state = 4197;
        this.type_parameter_constraints();
        this.state = 4198;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_parameter_constraints_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_type_parameter_constraints_DropletFile;
    return this;
}

Type_parameter_constraints_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_parameter_constraints_DropletFileContext.prototype.constructor = Type_parameter_constraints_DropletFileContext;

Type_parameter_constraints_DropletFileContext.prototype.constructor_constraint = function() {
    return this.getTypedRuleContext(Constructor_constraintContext,0);
};

Type_parameter_constraints_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Type_parameter_constraints_DropletFileContext.prototype.primary_constraint = function() {
    return this.getTypedRuleContext(Primary_constraintContext,0);
};

Type_parameter_constraints_DropletFileContext.prototype.secondary_constraints = function() {
    return this.getTypedRuleContext(Secondary_constraintsContext,0);
};

Type_parameter_constraints_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterType_parameter_constraints_DropletFile(this);
	}
};

Type_parameter_constraints_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitType_parameter_constraints_DropletFile(this);
	}
};




CSharpParser.Type_parameter_constraints_DropletFileContext = Type_parameter_constraints_DropletFileContext;

CSharpParser.prototype.type_parameter_constraints_DropletFile = function() {

    var localctx = new Type_parameter_constraints_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 614, CSharpParser.RULE_type_parameter_constraints_DropletFile);
    var _la = 0; // Token type
    try {
        this.state = 4214;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.NEW:
            this.enterOuterAlt(localctx, 1);
            this.state = 4200;
            this.constructor_constraint();
            this.state = 4201;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BY:
        case CSharpParser.CLASS:
        case CSharpParser.DESCENDING:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.NAMEOF:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.STRING:
        case CSharpParser.STRUCT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 4203;
            this.primary_constraint();
            this.state = 4206;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,453,this._ctx);
            if(la_===1) {
                this.state = 4204;
                this.match(CSharpParser.COMMA);
                this.state = 4205;
                this.secondary_constraints();

            }
            this.state = 4210;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.COMMA) {
                this.state = 4208;
                this.match(CSharpParser.COMMA);
                this.state = 4209;
                this.constructor_constraint();
            }

            this.state = 4212;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Primary_constraint_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_primary_constraint_DropletFile;
    return this;
}

Primary_constraint_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_constraint_DropletFileContext.prototype.constructor = Primary_constraint_DropletFileContext;

Primary_constraint_DropletFileContext.prototype.class_type = function() {
    return this.getTypedRuleContext(Class_typeContext,0);
};

Primary_constraint_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Primary_constraint_DropletFileContext.prototype.CLASS = function() {
    return this.getToken(CSharpParser.CLASS, 0);
};

Primary_constraint_DropletFileContext.prototype.STRUCT = function() {
    return this.getToken(CSharpParser.STRUCT, 0);
};

Primary_constraint_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterPrimary_constraint_DropletFile(this);
	}
};

Primary_constraint_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitPrimary_constraint_DropletFile(this);
	}
};




CSharpParser.Primary_constraint_DropletFileContext = Primary_constraint_DropletFileContext;

CSharpParser.prototype.primary_constraint_DropletFile = function() {

    var localctx = new Primary_constraint_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 616, CSharpParser.RULE_primary_constraint_DropletFile);
    try {
        this.state = 4223;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BY:
        case CSharpParser.DESCENDING:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.NAMEOF:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.STRING:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 4216;
            this.class_type();
            this.state = 4217;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.CLASS:
            this.enterOuterAlt(localctx, 2);
            this.state = 4219;
            this.match(CSharpParser.CLASS);
            this.state = 4220;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.STRUCT:
            this.enterOuterAlt(localctx, 3);
            this.state = 4221;
            this.match(CSharpParser.STRUCT);
            this.state = 4222;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Secondary_constraints_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_secondary_constraints_DropletFile;
    return this;
}

Secondary_constraints_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Secondary_constraints_DropletFileContext.prototype.constructor = Secondary_constraints_DropletFileContext;

Secondary_constraints_DropletFileContext.prototype.namespace_or_type_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Namespace_or_type_nameContext);
    } else {
        return this.getTypedRuleContext(Namespace_or_type_nameContext,i);
    }
};

Secondary_constraints_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Secondary_constraints_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSecondary_constraints_DropletFile(this);
	}
};

Secondary_constraints_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSecondary_constraints_DropletFile(this);
	}
};




CSharpParser.Secondary_constraints_DropletFileContext = Secondary_constraints_DropletFileContext;

CSharpParser.prototype.secondary_constraints_DropletFile = function() {

    var localctx = new Secondary_constraints_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 618, CSharpParser.RULE_secondary_constraints_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4225;
        this.namespace_or_type_name();
        this.state = 4230;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 4226;
            this.match(CSharpParser.COMMA);
            this.state = 4227;
            this.namespace_or_type_name();
            this.state = 4232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4233;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_constraint_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_constructor_constraint_DropletFile;
    return this;
}

Constructor_constraint_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_constraint_DropletFileContext.prototype.constructor = Constructor_constraint_DropletFileContext;

Constructor_constraint_DropletFileContext.prototype.NEW = function() {
    return this.getToken(CSharpParser.NEW, 0);
};

Constructor_constraint_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Constructor_constraint_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Constructor_constraint_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Constructor_constraint_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConstructor_constraint_DropletFile(this);
	}
};

Constructor_constraint_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConstructor_constraint_DropletFile(this);
	}
};




CSharpParser.Constructor_constraint_DropletFileContext = Constructor_constraint_DropletFileContext;

CSharpParser.prototype.constructor_constraint_DropletFile = function() {

    var localctx = new Constructor_constraint_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 620, CSharpParser.RULE_constructor_constraint_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4235;
        this.match(CSharpParser.NEW);
        this.state = 4236;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 4237;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 4238;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_body_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_class_body_DropletFile;
    return this;
}

Class_body_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_body_DropletFileContext.prototype.constructor = Class_body_DropletFileContext;

Class_body_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Class_body_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Class_body_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Class_body_DropletFileContext.prototype.class_member_declarations = function() {
    return this.getTypedRuleContext(Class_member_declarationsContext,0);
};

Class_body_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterClass_body_DropletFile(this);
	}
};

Class_body_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitClass_body_DropletFile(this);
	}
};




CSharpParser.Class_body_DropletFileContext = Class_body_DropletFileContext;

CSharpParser.prototype.class_body_DropletFile = function() {

    var localctx = new Class_body_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 622, CSharpParser.RULE_class_body_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4240;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 4242;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.CONST) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.ENUM - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.EVENT - 33)) | (1 << (CSharpParser.EXPLICIT - 33)) | (1 << (CSharpParser.EXTERN - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.IMPLICIT - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTERFACE - 33)) | (1 << (CSharpParser.INTERNAL - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.OVERRIDE - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.PRIVATE - 65)) | (1 << (CSharpParser.PROTECTED - 65)) | (1 << (CSharpParser.PUBLIC - 65)) | (1 << (CSharpParser.READONLY - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SEALED - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.STATIC - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.STRUCT - 65)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CSharpParser.UINT - 98)) | (1 << (CSharpParser.ULONG - 98)) | (1 << (CSharpParser.UNSAFE - 98)) | (1 << (CSharpParser.USHORT - 98)) | (1 << (CSharpParser.VAR - 98)) | (1 << (CSharpParser.VIRTUAL - 98)) | (1 << (CSharpParser.VOID - 98)) | (1 << (CSharpParser.VOLATILE - 98)) | (1 << (CSharpParser.WHEN - 98)) | (1 << (CSharpParser.WHERE - 98)) | (1 << (CSharpParser.YIELD - 98)) | (1 << (CSharpParser.IDENTIFIER - 98)) | (1 << (CSharpParser.OPEN_BRACKET - 98)))) !== 0) || _la===CSharpParser.TILDE) {
            this.state = 4241;
            this.class_member_declarations();
        }

        this.state = 4244;
        this.match(CSharpParser.CLOSE_BRACE);
        this.state = 4245;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_member_declarations_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_class_member_declarations_DropletFile;
    return this;
}

Class_member_declarations_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_member_declarations_DropletFileContext.prototype.constructor = Class_member_declarations_DropletFileContext;

Class_member_declarations_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Class_member_declarations_DropletFileContext.prototype.class_member_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Class_member_declarationContext);
    } else {
        return this.getTypedRuleContext(Class_member_declarationContext,i);
    }
};

Class_member_declarations_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterClass_member_declarations_DropletFile(this);
	}
};

Class_member_declarations_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitClass_member_declarations_DropletFile(this);
	}
};




CSharpParser.Class_member_declarations_DropletFileContext = Class_member_declarations_DropletFileContext;

CSharpParser.prototype.class_member_declarations_DropletFile = function() {

    var localctx = new Class_member_declarations_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 624, CSharpParser.RULE_class_member_declarations_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4248; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4247;
            this.class_member_declaration();
            this.state = 4250; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.CONST) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.ENUM - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.EVENT - 33)) | (1 << (CSharpParser.EXPLICIT - 33)) | (1 << (CSharpParser.EXTERN - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.IMPLICIT - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTERFACE - 33)) | (1 << (CSharpParser.INTERNAL - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.OVERRIDE - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.PRIVATE - 65)) | (1 << (CSharpParser.PROTECTED - 65)) | (1 << (CSharpParser.PUBLIC - 65)) | (1 << (CSharpParser.READONLY - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SEALED - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.STATIC - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.STRUCT - 65)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CSharpParser.UINT - 98)) | (1 << (CSharpParser.ULONG - 98)) | (1 << (CSharpParser.UNSAFE - 98)) | (1 << (CSharpParser.USHORT - 98)) | (1 << (CSharpParser.VAR - 98)) | (1 << (CSharpParser.VIRTUAL - 98)) | (1 << (CSharpParser.VOID - 98)) | (1 << (CSharpParser.VOLATILE - 98)) | (1 << (CSharpParser.WHEN - 98)) | (1 << (CSharpParser.WHERE - 98)) | (1 << (CSharpParser.YIELD - 98)) | (1 << (CSharpParser.IDENTIFIER - 98)) | (1 << (CSharpParser.OPEN_BRACKET - 98)))) !== 0) || _la===CSharpParser.TILDE);
        this.state = 4252;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_member_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_class_member_declaration_DropletFile;
    return this;
}

Class_member_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_member_declaration_DropletFileContext.prototype.constructor = Class_member_declaration_DropletFileContext;

Class_member_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Class_member_declaration_DropletFileContext.prototype.common_member_declaration = function() {
    return this.getTypedRuleContext(Common_member_declarationContext,0);
};

Class_member_declaration_DropletFileContext.prototype.destructor_definition = function() {
    return this.getTypedRuleContext(Destructor_definitionContext,0);
};

Class_member_declaration_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Class_member_declaration_DropletFileContext.prototype.all_member_modifiers = function() {
    return this.getTypedRuleContext(All_member_modifiersContext,0);
};

Class_member_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterClass_member_declaration_DropletFile(this);
	}
};

Class_member_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitClass_member_declaration_DropletFile(this);
	}
};




CSharpParser.Class_member_declaration_DropletFileContext = Class_member_declaration_DropletFileContext;

CSharpParser.prototype.class_member_declaration_DropletFile = function() {

    var localctx = new Class_member_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 626, CSharpParser.RULE_class_member_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4255;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4254;
            this.attributes();
        }

        this.state = 4258;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,461,this._ctx);
        if(la_===1) {
            this.state = 4257;
            this.all_member_modifiers();

        }
        this.state = 4262;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CLASS:
        case CSharpParser.CONST:
        case CSharpParser.DECIMAL:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.ENUM:
        case CSharpParser.EQUALS:
        case CSharpParser.EVENT:
        case CSharpParser.EXPLICIT:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.IMPLICIT:
        case CSharpParser.INT:
        case CSharpParser.INTERFACE:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.STRING:
        case CSharpParser.STRUCT:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.VOID:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.state = 4260;
            this.common_member_declaration();
            break;
        case CSharpParser.TILDE:
            this.state = 4261;
            this.destructor_definition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 4264;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function All_member_modifiers_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_all_member_modifiers_DropletFile;
    return this;
}

All_member_modifiers_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
All_member_modifiers_DropletFileContext.prototype.constructor = All_member_modifiers_DropletFileContext;

All_member_modifiers_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

All_member_modifiers_DropletFileContext.prototype.all_member_modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(All_member_modifierContext);
    } else {
        return this.getTypedRuleContext(All_member_modifierContext,i);
    }
};

All_member_modifiers_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAll_member_modifiers_DropletFile(this);
	}
};

All_member_modifiers_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAll_member_modifiers_DropletFile(this);
	}
};




CSharpParser.All_member_modifiers_DropletFileContext = All_member_modifiers_DropletFileContext;

CSharpParser.prototype.all_member_modifiers_DropletFile = function() {

    var localctx = new All_member_modifiers_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 628, CSharpParser.RULE_all_member_modifiers_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4267; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4266;
            this.all_member_modifier();
            this.state = 4269; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===CSharpParser.ABSTRACT || _la===CSharpParser.ASYNC || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (CSharpParser.EXTERN - 40)) | (1 << (CSharpParser.INTERNAL - 40)) | (1 << (CSharpParser.NEW - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (CSharpParser.OVERRIDE - 72)) | (1 << (CSharpParser.PARTIAL - 72)) | (1 << (CSharpParser.PRIVATE - 72)) | (1 << (CSharpParser.PROTECTED - 72)) | (1 << (CSharpParser.PUBLIC - 72)) | (1 << (CSharpParser.READONLY - 72)) | (1 << (CSharpParser.SEALED - 72)) | (1 << (CSharpParser.STATIC - 72)) | (1 << (CSharpParser.UNSAFE - 72)))) !== 0) || _la===CSharpParser.VIRTUAL || _la===CSharpParser.VOLATILE);
        this.state = 4271;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function All_member_modifier_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_all_member_modifier_DropletFile;
    return this;
}

All_member_modifier_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
All_member_modifier_DropletFileContext.prototype.constructor = All_member_modifier_DropletFileContext;

All_member_modifier_DropletFileContext.prototype.NEW = function() {
    return this.getToken(CSharpParser.NEW, 0);
};

All_member_modifier_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

All_member_modifier_DropletFileContext.prototype.PUBLIC = function() {
    return this.getToken(CSharpParser.PUBLIC, 0);
};

All_member_modifier_DropletFileContext.prototype.PROTECTED = function() {
    return this.getToken(CSharpParser.PROTECTED, 0);
};

All_member_modifier_DropletFileContext.prototype.INTERNAL = function() {
    return this.getToken(CSharpParser.INTERNAL, 0);
};

All_member_modifier_DropletFileContext.prototype.PRIVATE = function() {
    return this.getToken(CSharpParser.PRIVATE, 0);
};

All_member_modifier_DropletFileContext.prototype.READONLY = function() {
    return this.getToken(CSharpParser.READONLY, 0);
};

All_member_modifier_DropletFileContext.prototype.VOLATILE = function() {
    return this.getToken(CSharpParser.VOLATILE, 0);
};

All_member_modifier_DropletFileContext.prototype.VIRTUAL = function() {
    return this.getToken(CSharpParser.VIRTUAL, 0);
};

All_member_modifier_DropletFileContext.prototype.SEALED = function() {
    return this.getToken(CSharpParser.SEALED, 0);
};

All_member_modifier_DropletFileContext.prototype.OVERRIDE = function() {
    return this.getToken(CSharpParser.OVERRIDE, 0);
};

All_member_modifier_DropletFileContext.prototype.ABSTRACT = function() {
    return this.getToken(CSharpParser.ABSTRACT, 0);
};

All_member_modifier_DropletFileContext.prototype.STATIC = function() {
    return this.getToken(CSharpParser.STATIC, 0);
};

All_member_modifier_DropletFileContext.prototype.UNSAFE = function() {
    return this.getToken(CSharpParser.UNSAFE, 0);
};

All_member_modifier_DropletFileContext.prototype.EXTERN = function() {
    return this.getToken(CSharpParser.EXTERN, 0);
};

All_member_modifier_DropletFileContext.prototype.PARTIAL = function() {
    return this.getToken(CSharpParser.PARTIAL, 0);
};

All_member_modifier_DropletFileContext.prototype.ASYNC = function() {
    return this.getToken(CSharpParser.ASYNC, 0);
};

All_member_modifier_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAll_member_modifier_DropletFile(this);
	}
};

All_member_modifier_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAll_member_modifier_DropletFile(this);
	}
};




CSharpParser.All_member_modifier_DropletFileContext = All_member_modifier_DropletFileContext;

CSharpParser.prototype.all_member_modifier_DropletFile = function() {

    var localctx = new All_member_modifier_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 630, CSharpParser.RULE_all_member_modifier_DropletFile);
    try {
        this.state = 4305;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.NEW:
            this.enterOuterAlt(localctx, 1);
            this.state = 4273;
            this.match(CSharpParser.NEW);
            this.state = 4274;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.PUBLIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 4275;
            this.match(CSharpParser.PUBLIC);
            this.state = 4276;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.PROTECTED:
            this.enterOuterAlt(localctx, 3);
            this.state = 4277;
            this.match(CSharpParser.PROTECTED);
            this.state = 4278;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.INTERNAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 4279;
            this.match(CSharpParser.INTERNAL);
            this.state = 4280;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.PRIVATE:
            this.enterOuterAlt(localctx, 5);
            this.state = 4281;
            this.match(CSharpParser.PRIVATE);
            this.state = 4282;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.READONLY:
            this.enterOuterAlt(localctx, 6);
            this.state = 4283;
            this.match(CSharpParser.READONLY);
            this.state = 4284;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.VOLATILE:
            this.enterOuterAlt(localctx, 7);
            this.state = 4285;
            this.match(CSharpParser.VOLATILE);
            this.state = 4286;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.VIRTUAL:
            this.enterOuterAlt(localctx, 8);
            this.state = 4287;
            this.match(CSharpParser.VIRTUAL);
            this.state = 4288;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SEALED:
            this.enterOuterAlt(localctx, 9);
            this.state = 4289;
            this.match(CSharpParser.SEALED);
            this.state = 4290;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OVERRIDE:
            this.enterOuterAlt(localctx, 10);
            this.state = 4291;
            this.match(CSharpParser.OVERRIDE);
            this.state = 4292;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ABSTRACT:
            this.enterOuterAlt(localctx, 11);
            this.state = 4293;
            this.match(CSharpParser.ABSTRACT);
            this.state = 4294;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.STATIC:
            this.enterOuterAlt(localctx, 12);
            this.state = 4295;
            this.match(CSharpParser.STATIC);
            this.state = 4296;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.UNSAFE:
            this.enterOuterAlt(localctx, 13);
            this.state = 4297;
            this.match(CSharpParser.UNSAFE);
            this.state = 4298;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.EXTERN:
            this.enterOuterAlt(localctx, 14);
            this.state = 4299;
            this.match(CSharpParser.EXTERN);
            this.state = 4300;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.PARTIAL:
            this.enterOuterAlt(localctx, 15);
            this.state = 4301;
            this.match(CSharpParser.PARTIAL);
            this.state = 4302;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ASYNC:
            this.enterOuterAlt(localctx, 16);
            this.state = 4303;
            this.match(CSharpParser.ASYNC);
            this.state = 4304;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Common_member_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_common_member_declaration_DropletFile;
    return this;
}

Common_member_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Common_member_declaration_DropletFileContext.prototype.constructor = Common_member_declaration_DropletFileContext;

Common_member_declaration_DropletFileContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Common_member_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Common_member_declaration_DropletFileContext.prototype.typed_member_declaration = function() {
    return this.getTypedRuleContext(Typed_member_declarationContext,0);
};

Common_member_declaration_DropletFileContext.prototype.event_declaration = function() {
    return this.getTypedRuleContext(Event_declarationContext,0);
};

Common_member_declaration_DropletFileContext.prototype.conversion_operator_declarator = function() {
    return this.getTypedRuleContext(Conversion_operator_declaratorContext,0);
};

Common_member_declaration_DropletFileContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Common_member_declaration_DropletFileContext.prototype.right_arrow = function() {
    return this.getTypedRuleContext(Right_arrowContext,0);
};

Common_member_declaration_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Common_member_declaration_DropletFileContext.prototype.constructor_declaration = function() {
    return this.getTypedRuleContext(Constructor_declarationContext,0);
};

Common_member_declaration_DropletFileContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};

Common_member_declaration_DropletFileContext.prototype.method_declaration = function() {
    return this.getTypedRuleContext(Method_declarationContext,0);
};

Common_member_declaration_DropletFileContext.prototype.class_definition = function() {
    return this.getTypedRuleContext(Class_definitionContext,0);
};

Common_member_declaration_DropletFileContext.prototype.struct_definition = function() {
    return this.getTypedRuleContext(Struct_definitionContext,0);
};

Common_member_declaration_DropletFileContext.prototype.interface_definition = function() {
    return this.getTypedRuleContext(Interface_definitionContext,0);
};

Common_member_declaration_DropletFileContext.prototype.enum_definition = function() {
    return this.getTypedRuleContext(Enum_definitionContext,0);
};

Common_member_declaration_DropletFileContext.prototype.delegate_definition = function() {
    return this.getTypedRuleContext(Delegate_definitionContext,0);
};

Common_member_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterCommon_member_declaration_DropletFile(this);
	}
};

Common_member_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitCommon_member_declaration_DropletFile(this);
	}
};




CSharpParser.Common_member_declaration_DropletFileContext = Common_member_declaration_DropletFileContext;

CSharpParser.prototype.common_member_declaration_DropletFile = function() {

    var localctx = new Common_member_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 632, CSharpParser.RULE_common_member_declaration_DropletFile);
    try {
        this.state = 4348;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,466,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4307;
            this.constant_declaration();
            this.state = 4308;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4310;
            this.typed_member_declaration();
            this.state = 4311;
            this.match(CSharpParser.EOF);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4313;
            this.event_declaration();
            this.state = 4314;
            this.match(CSharpParser.EOF);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4316;
            this.conversion_operator_declarator();
            this.state = 4322;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.OPEN_BRACE:
            case CSharpParser.SEMICOLON:
                this.state = 4317;
                this.body();
                break;
            case CSharpParser.ASSIGNMENT:
                this.state = 4318;
                this.right_arrow();
                this.state = 4319;
                this.expression();
                this.state = 4320;
                this.match(CSharpParser.SEMICOLON);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4324;
            this.match(CSharpParser.EOF);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4326;
            this.constructor_declaration();
            this.state = 4327;
            this.match(CSharpParser.EOF);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 4329;
            this.match(CSharpParser.VOID);
            this.state = 4330;
            this.method_declaration();
            this.state = 4331;
            this.match(CSharpParser.EOF);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 4333;
            this.class_definition();
            this.state = 4334;
            this.match(CSharpParser.EOF);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 4336;
            this.struct_definition();
            this.state = 4337;
            this.match(CSharpParser.EOF);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 4339;
            this.interface_definition();
            this.state = 4340;
            this.match(CSharpParser.EOF);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 4342;
            this.enum_definition();
            this.state = 4343;
            this.match(CSharpParser.EOF);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 4345;
            this.delegate_definition();
            this.state = 4346;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Typed_member_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_typed_member_declaration_DropletFile;
    return this;
}

Typed_member_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typed_member_declaration_DropletFileContext.prototype.constructor = Typed_member_declaration_DropletFileContext;

Typed_member_declaration_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Typed_member_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Typed_member_declaration_DropletFileContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};

Typed_member_declaration_DropletFileContext.prototype.indexer_declaration = function() {
    return this.getTypedRuleContext(Indexer_declarationContext,0);
};

Typed_member_declaration_DropletFileContext.prototype.method_declaration = function() {
    return this.getTypedRuleContext(Method_declarationContext,0);
};

Typed_member_declaration_DropletFileContext.prototype.property_declaration = function() {
    return this.getTypedRuleContext(Property_declarationContext,0);
};

Typed_member_declaration_DropletFileContext.prototype.operator_declaration = function() {
    return this.getTypedRuleContext(Operator_declarationContext,0);
};

Typed_member_declaration_DropletFileContext.prototype.field_declaration = function() {
    return this.getTypedRuleContext(Field_declarationContext,0);
};

Typed_member_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterTyped_member_declaration_DropletFile(this);
	}
};

Typed_member_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitTyped_member_declaration_DropletFile(this);
	}
};




CSharpParser.Typed_member_declaration_DropletFileContext = Typed_member_declaration_DropletFileContext;

CSharpParser.prototype.typed_member_declaration_DropletFile = function() {

    var localctx = new Typed_member_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 634, CSharpParser.RULE_typed_member_declaration_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4350;
        this.var_type();
        this.state = 4360;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,467,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4351;
            this.namespace_or_type_name();
            this.state = 4352;
            this.match(CSharpParser.DOT);
            this.state = 4353;
            this.indexer_declaration();
            break;

        case 2:
            this.state = 4355;
            this.method_declaration();
            break;

        case 3:
            this.state = 4356;
            this.property_declaration();
            break;

        case 4:
            this.state = 4357;
            this.indexer_declaration();
            break;

        case 5:
            this.state = 4358;
            this.operator_declaration();
            break;

        case 6:
            this.state = 4359;
            this.field_declaration();
            break;

        }
        this.state = 4362;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constant_declarators_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_constant_declarators_DropletFile;
    return this;
}

Constant_declarators_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_declarators_DropletFileContext.prototype.constructor = Constant_declarators_DropletFileContext;

Constant_declarators_DropletFileContext.prototype.constant_declarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constant_declaratorContext);
    } else {
        return this.getTypedRuleContext(Constant_declaratorContext,i);
    }
};

Constant_declarators_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Constant_declarators_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConstant_declarators_DropletFile(this);
	}
};

Constant_declarators_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConstant_declarators_DropletFile(this);
	}
};




CSharpParser.Constant_declarators_DropletFileContext = Constant_declarators_DropletFileContext;

CSharpParser.prototype.constant_declarators_DropletFile = function() {

    var localctx = new Constant_declarators_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 636, CSharpParser.RULE_constant_declarators_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4364;
        this.constant_declarator();
        this.state = 4369;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 4365;
            this.match(CSharpParser.COMMA);
            this.state = 4366;
            this.constant_declarator();
            this.state = 4371;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4372;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constant_declarator_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_constant_declarator_DropletFile;
    return this;
}

Constant_declarator_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_declarator_DropletFileContext.prototype.constructor = Constant_declarator_DropletFileContext;

Constant_declarator_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Constant_declarator_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Constant_declarator_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Constant_declarator_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConstant_declarator_DropletFile(this);
	}
};

Constant_declarator_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConstant_declarator_DropletFile(this);
	}
};




CSharpParser.Constant_declarator_DropletFileContext = Constant_declarator_DropletFileContext;

CSharpParser.prototype.constant_declarator_DropletFile = function() {

    var localctx = new Constant_declarator_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 638, CSharpParser.RULE_constant_declarator_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4374;
        this.identifier();
        this.state = 4375;
        this.match(CSharpParser.ASSIGNMENT);
        this.state = 4376;
        this.expression();
        this.state = 4377;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_declarators_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_variable_declarators_DropletFile;
    return this;
}

Variable_declarators_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declarators_DropletFileContext.prototype.constructor = Variable_declarators_DropletFileContext;

Variable_declarators_DropletFileContext.prototype.variable_declarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_declaratorContext);
    } else {
        return this.getTypedRuleContext(Variable_declaratorContext,i);
    }
};

Variable_declarators_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Variable_declarators_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVariable_declarators_DropletFile(this);
	}
};

Variable_declarators_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVariable_declarators_DropletFile(this);
	}
};




CSharpParser.Variable_declarators_DropletFileContext = Variable_declarators_DropletFileContext;

CSharpParser.prototype.variable_declarators_DropletFile = function() {

    var localctx = new Variable_declarators_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 640, CSharpParser.RULE_variable_declarators_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4379;
        this.variable_declarator();
        this.state = 4384;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 4380;
            this.match(CSharpParser.COMMA);
            this.state = 4381;
            this.variable_declarator();
            this.state = 4386;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4387;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_declarator_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_variable_declarator_DropletFile;
    return this;
}

Variable_declarator_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declarator_DropletFileContext.prototype.constructor = Variable_declarator_DropletFileContext;

Variable_declarator_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Variable_declarator_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Variable_declarator_DropletFileContext.prototype.variable_initializer = function() {
    return this.getTypedRuleContext(Variable_initializerContext,0);
};

Variable_declarator_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVariable_declarator_DropletFile(this);
	}
};

Variable_declarator_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVariable_declarator_DropletFile(this);
	}
};




CSharpParser.Variable_declarator_DropletFileContext = Variable_declarator_DropletFileContext;

CSharpParser.prototype.variable_declarator_DropletFile = function() {

    var localctx = new Variable_declarator_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 642, CSharpParser.RULE_variable_declarator_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4389;
        this.identifier();
        this.state = 4392;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.ASSIGNMENT) {
            this.state = 4390;
            this.match(CSharpParser.ASSIGNMENT);
            this.state = 4391;
            this.variable_initializer();
        }

        this.state = 4394;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_initializer_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_variable_initializer_DropletFile;
    return this;
}

Variable_initializer_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_initializer_DropletFileContext.prototype.constructor = Variable_initializer_DropletFileContext;

Variable_initializer_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Variable_initializer_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Variable_initializer_DropletFileContext.prototype.array_initializer = function() {
    return this.getTypedRuleContext(Array_initializerContext,0);
};

Variable_initializer_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVariable_initializer_DropletFile(this);
	}
};

Variable_initializer_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVariable_initializer_DropletFile(this);
	}
};




CSharpParser.Variable_initializer_DropletFileContext = Variable_initializer_DropletFileContext;

CSharpParser.prototype.variable_initializer_DropletFile = function() {

    var localctx = new Variable_initializer_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 644, CSharpParser.RULE_variable_initializer_DropletFile);
    try {
        this.state = 4402;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 4396;
            this.expression();
            this.state = 4397;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 4399;
            this.array_initializer();
            this.state = 4400;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_type_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_return_type_DropletFile;
    return this;
}

Return_type_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_type_DropletFileContext.prototype.constructor = Return_type_DropletFileContext;

Return_type_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Return_type_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Return_type_DropletFileContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};

Return_type_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterReturn_type_DropletFile(this);
	}
};

Return_type_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitReturn_type_DropletFile(this);
	}
};




CSharpParser.Return_type_DropletFileContext = Return_type_DropletFileContext;

CSharpParser.prototype.return_type_DropletFile = function() {

    var localctx = new Return_type_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 646, CSharpParser.RULE_return_type_DropletFile);
    try {
        this.state = 4409;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,472,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4404;
            this.var_type();
            this.state = 4405;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4407;
            this.match(CSharpParser.VOID);
            this.state = 4408;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_name_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_member_name_DropletFile;
    return this;
}

Member_name_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_name_DropletFileContext.prototype.constructor = Member_name_DropletFileContext;

Member_name_DropletFileContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};

Member_name_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Member_name_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMember_name_DropletFile(this);
	}
};

Member_name_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMember_name_DropletFile(this);
	}
};




CSharpParser.Member_name_DropletFileContext = Member_name_DropletFileContext;

CSharpParser.prototype.member_name_DropletFile = function() {

    var localctx = new Member_name_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 648, CSharpParser.RULE_member_name_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4411;
        this.namespace_or_type_name();
        this.state = 4412;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_body_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_method_body_DropletFile;
    return this;
}

Method_body_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_body_DropletFileContext.prototype.constructor = Method_body_DropletFileContext;

Method_body_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Method_body_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Method_body_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMethod_body_DropletFile(this);
	}
};

Method_body_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMethod_body_DropletFile(this);
	}
};




CSharpParser.Method_body_DropletFileContext = Method_body_DropletFileContext;

CSharpParser.prototype.method_body_DropletFile = function() {

    var localctx = new Method_body_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 650, CSharpParser.RULE_method_body_DropletFile);
    try {
        this.state = 4419;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 4414;
            this.block();
            this.state = 4415;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SEMICOLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 4417;
            this.match(CSharpParser.SEMICOLON);
            this.state = 4418;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Formal_parameter_list_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_formal_parameter_list_DropletFile;
    return this;
}

Formal_parameter_list_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Formal_parameter_list_DropletFileContext.prototype.constructor = Formal_parameter_list_DropletFileContext;

Formal_parameter_list_DropletFileContext.prototype.parameter_array = function() {
    return this.getTypedRuleContext(Parameter_arrayContext,0);
};

Formal_parameter_list_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Formal_parameter_list_DropletFileContext.prototype.fixed_parameters = function() {
    return this.getTypedRuleContext(Fixed_parametersContext,0);
};

Formal_parameter_list_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFormal_parameter_list_DropletFile(this);
	}
};

Formal_parameter_list_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFormal_parameter_list_DropletFile(this);
	}
};




CSharpParser.Formal_parameter_list_DropletFileContext = Formal_parameter_list_DropletFileContext;

CSharpParser.prototype.formal_parameter_list_DropletFile = function() {

    var localctx = new Formal_parameter_list_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 652, CSharpParser.RULE_formal_parameter_list_DropletFile);
    var _la = 0; // Token type
    try {
        this.state = 4431;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,475,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4421;
            this.parameter_array();
            this.state = 4422;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4424;
            this.fixed_parameters();
            this.state = 4427;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.COMMA) {
                this.state = 4425;
                this.match(CSharpParser.COMMA);
                this.state = 4426;
                this.parameter_array();
            }

            this.state = 4429;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fixed_parameters_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_fixed_parameters_DropletFile;
    return this;
}

Fixed_parameters_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fixed_parameters_DropletFileContext.prototype.constructor = Fixed_parameters_DropletFileContext;

Fixed_parameters_DropletFileContext.prototype.fixed_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Fixed_parameterContext);
    } else {
        return this.getTypedRuleContext(Fixed_parameterContext,i);
    }
};

Fixed_parameters_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Fixed_parameters_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixed_parameters_DropletFile(this);
	}
};

Fixed_parameters_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixed_parameters_DropletFile(this);
	}
};




CSharpParser.Fixed_parameters_DropletFileContext = Fixed_parameters_DropletFileContext;

CSharpParser.prototype.fixed_parameters_DropletFile = function() {

    var localctx = new Fixed_parameters_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 654, CSharpParser.RULE_fixed_parameters_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4433;
        this.fixed_parameter();
        this.state = 4438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 4434;
            this.match(CSharpParser.COMMA);
            this.state = 4435;
            this.fixed_parameter();
            this.state = 4440;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4441;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fixed_parameter_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_fixed_parameter_DropletFile;
    return this;
}

Fixed_parameter_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fixed_parameter_DropletFileContext.prototype.constructor = Fixed_parameter_DropletFileContext;

Fixed_parameter_DropletFileContext.prototype.arg_declaration = function() {
    return this.getTypedRuleContext(Arg_declarationContext,0);
};

Fixed_parameter_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Fixed_parameter_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Fixed_parameter_DropletFileContext.prototype.parameter_modifier = function() {
    return this.getTypedRuleContext(Parameter_modifierContext,0);
};

Fixed_parameter_DropletFileContext.prototype.ARGLIST = function() {
    return this.getToken(CSharpParser.ARGLIST, 0);
};

Fixed_parameter_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixed_parameter_DropletFile(this);
	}
};

Fixed_parameter_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixed_parameter_DropletFile(this);
	}
};




CSharpParser.Fixed_parameter_DropletFileContext = Fixed_parameter_DropletFileContext;

CSharpParser.prototype.fixed_parameter_DropletFile = function() {

    var localctx = new Fixed_parameter_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 656, CSharpParser.RULE_fixed_parameter_DropletFile);
    var _la = 0; // Token type
    try {
        this.state = 4454;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,479,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4444;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.OPEN_BRACKET) {
                this.state = 4443;
                this.attributes();
            }

            this.state = 4447;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CSharpParser.OUT - 71)) | (1 << (CSharpParser.REF - 71)) | (1 << (CSharpParser.THIS - 71)))) !== 0)) {
                this.state = 4446;
                this.parameter_modifier();
            }

            this.state = 4449;
            this.arg_declaration();
            this.state = 4450;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4452;
            this.match(CSharpParser.ARGLIST);
            this.state = 4453;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parameter_modifier_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_parameter_modifier_DropletFile;
    return this;
}

Parameter_modifier_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_modifier_DropletFileContext.prototype.constructor = Parameter_modifier_DropletFileContext;

Parameter_modifier_DropletFileContext.prototype.REF = function() {
    return this.getToken(CSharpParser.REF, 0);
};

Parameter_modifier_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Parameter_modifier_DropletFileContext.prototype.OUT = function() {
    return this.getToken(CSharpParser.OUT, 0);
};

Parameter_modifier_DropletFileContext.prototype.THIS = function() {
    return this.getToken(CSharpParser.THIS, 0);
};

Parameter_modifier_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterParameter_modifier_DropletFile(this);
	}
};

Parameter_modifier_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitParameter_modifier_DropletFile(this);
	}
};




CSharpParser.Parameter_modifier_DropletFileContext = Parameter_modifier_DropletFileContext;

CSharpParser.prototype.parameter_modifier_DropletFile = function() {

    var localctx = new Parameter_modifier_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 658, CSharpParser.RULE_parameter_modifier_DropletFile);
    try {
        this.state = 4462;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.REF:
            this.enterOuterAlt(localctx, 1);
            this.state = 4456;
            this.match(CSharpParser.REF);
            this.state = 4457;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OUT:
            this.enterOuterAlt(localctx, 2);
            this.state = 4458;
            this.match(CSharpParser.OUT);
            this.state = 4459;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.THIS:
            this.enterOuterAlt(localctx, 3);
            this.state = 4460;
            this.match(CSharpParser.THIS);
            this.state = 4461;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parameter_array_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_parameter_array_DropletFile;
    return this;
}

Parameter_array_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_array_DropletFileContext.prototype.constructor = Parameter_array_DropletFileContext;

Parameter_array_DropletFileContext.prototype.PARAMS = function() {
    return this.getToken(CSharpParser.PARAMS, 0);
};

Parameter_array_DropletFileContext.prototype.array_type = function() {
    return this.getTypedRuleContext(Array_typeContext,0);
};

Parameter_array_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Parameter_array_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Parameter_array_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Parameter_array_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterParameter_array_DropletFile(this);
	}
};

Parameter_array_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitParameter_array_DropletFile(this);
	}
};




CSharpParser.Parameter_array_DropletFileContext = Parameter_array_DropletFileContext;

CSharpParser.prototype.parameter_array_DropletFile = function() {

    var localctx = new Parameter_array_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 660, CSharpParser.RULE_parameter_array_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4465;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4464;
            this.attributes();
        }

        this.state = 4467;
        this.match(CSharpParser.PARAMS);
        this.state = 4468;
        this.array_type();
        this.state = 4469;
        this.identifier();
        this.state = 4470;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Accessor_declarations_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_accessor_declarations_DropletFile;
    this.attrs = null; // AttributesContext
    this.mods = null; // Accessor_modifierContext
    return this;
}

Accessor_declarations_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Accessor_declarations_DropletFileContext.prototype.constructor = Accessor_declarations_DropletFileContext;

Accessor_declarations_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Accessor_declarations_DropletFileContext.prototype.GET = function() {
    return this.getToken(CSharpParser.GET, 0);
};

Accessor_declarations_DropletFileContext.prototype.accessor_body = function() {
    return this.getTypedRuleContext(Accessor_bodyContext,0);
};

Accessor_declarations_DropletFileContext.prototype.SET = function() {
    return this.getToken(CSharpParser.SET, 0);
};

Accessor_declarations_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Accessor_declarations_DropletFileContext.prototype.accessor_modifier = function() {
    return this.getTypedRuleContext(Accessor_modifierContext,0);
};

Accessor_declarations_DropletFileContext.prototype.set_accessor_declaration = function() {
    return this.getTypedRuleContext(Set_accessor_declarationContext,0);
};

Accessor_declarations_DropletFileContext.prototype.get_accessor_declaration = function() {
    return this.getTypedRuleContext(Get_accessor_declarationContext,0);
};

Accessor_declarations_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAccessor_declarations_DropletFile(this);
	}
};

Accessor_declarations_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAccessor_declarations_DropletFile(this);
	}
};




CSharpParser.Accessor_declarations_DropletFileContext = Accessor_declarations_DropletFileContext;

CSharpParser.prototype.accessor_declarations_DropletFile = function() {

    var localctx = new Accessor_declarations_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 662, CSharpParser.RULE_accessor_declarations_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4473;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4472;
            localctx.attrs = this.attributes();
        }

        this.state = 4476;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (CSharpParser.INTERNAL - 56)) | (1 << (CSharpParser.PRIVATE - 56)) | (1 << (CSharpParser.PROTECTED - 56)))) !== 0)) {
            this.state = 4475;
            localctx.mods = this.accessor_modifier();
        }

        this.state = 4488;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.GET:
            this.state = 4478;
            this.match(CSharpParser.GET);
            this.state = 4479;
            this.accessor_body();
            this.state = 4481;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (CSharpParser.INTERNAL - 56)) | (1 << (CSharpParser.PRIVATE - 56)) | (1 << (CSharpParser.PROTECTED - 56)) | (1 << (CSharpParser.SET - 56)))) !== 0) || _la===CSharpParser.OPEN_BRACKET) {
                this.state = 4480;
                this.set_accessor_declaration();
            }

            break;
        case CSharpParser.SET:
            this.state = 4483;
            this.match(CSharpParser.SET);
            this.state = 4484;
            this.accessor_body();
            this.state = 4486;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (CSharpParser.GET - 48)) | (1 << (CSharpParser.INTERNAL - 48)) | (1 << (CSharpParser.PRIVATE - 48)) | (1 << (CSharpParser.PROTECTED - 48)))) !== 0) || _la===CSharpParser.OPEN_BRACKET) {
                this.state = 4485;
                this.get_accessor_declaration();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 4490;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Get_accessor_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_get_accessor_declaration_DropletFile;
    return this;
}

Get_accessor_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Get_accessor_declaration_DropletFileContext.prototype.constructor = Get_accessor_declaration_DropletFileContext;

Get_accessor_declaration_DropletFileContext.prototype.GET = function() {
    return this.getToken(CSharpParser.GET, 0);
};

Get_accessor_declaration_DropletFileContext.prototype.accessor_body = function() {
    return this.getTypedRuleContext(Accessor_bodyContext,0);
};

Get_accessor_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Get_accessor_declaration_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Get_accessor_declaration_DropletFileContext.prototype.accessor_modifier = function() {
    return this.getTypedRuleContext(Accessor_modifierContext,0);
};

Get_accessor_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterGet_accessor_declaration_DropletFile(this);
	}
};

Get_accessor_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitGet_accessor_declaration_DropletFile(this);
	}
};




CSharpParser.Get_accessor_declaration_DropletFileContext = Get_accessor_declaration_DropletFileContext;

CSharpParser.prototype.get_accessor_declaration_DropletFile = function() {

    var localctx = new Get_accessor_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 664, CSharpParser.RULE_get_accessor_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4493;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4492;
            this.attributes();
        }

        this.state = 4496;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (CSharpParser.INTERNAL - 56)) | (1 << (CSharpParser.PRIVATE - 56)) | (1 << (CSharpParser.PROTECTED - 56)))) !== 0)) {
            this.state = 4495;
            this.accessor_modifier();
        }

        this.state = 4498;
        this.match(CSharpParser.GET);
        this.state = 4499;
        this.accessor_body();
        this.state = 4500;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_accessor_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_set_accessor_declaration_DropletFile;
    return this;
}

Set_accessor_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_accessor_declaration_DropletFileContext.prototype.constructor = Set_accessor_declaration_DropletFileContext;

Set_accessor_declaration_DropletFileContext.prototype.SET = function() {
    return this.getToken(CSharpParser.SET, 0);
};

Set_accessor_declaration_DropletFileContext.prototype.accessor_body = function() {
    return this.getTypedRuleContext(Accessor_bodyContext,0);
};

Set_accessor_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Set_accessor_declaration_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Set_accessor_declaration_DropletFileContext.prototype.accessor_modifier = function() {
    return this.getTypedRuleContext(Accessor_modifierContext,0);
};

Set_accessor_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterSet_accessor_declaration_DropletFile(this);
	}
};

Set_accessor_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitSet_accessor_declaration_DropletFile(this);
	}
};




CSharpParser.Set_accessor_declaration_DropletFileContext = Set_accessor_declaration_DropletFileContext;

CSharpParser.prototype.set_accessor_declaration_DropletFile = function() {

    var localctx = new Set_accessor_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 666, CSharpParser.RULE_set_accessor_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4503;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4502;
            this.attributes();
        }

        this.state = 4506;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (CSharpParser.INTERNAL - 56)) | (1 << (CSharpParser.PRIVATE - 56)) | (1 << (CSharpParser.PROTECTED - 56)))) !== 0)) {
            this.state = 4505;
            this.accessor_modifier();
        }

        this.state = 4508;
        this.match(CSharpParser.SET);
        this.state = 4509;
        this.accessor_body();
        this.state = 4510;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Accessor_modifier_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_accessor_modifier_DropletFile;
    return this;
}

Accessor_modifier_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Accessor_modifier_DropletFileContext.prototype.constructor = Accessor_modifier_DropletFileContext;

Accessor_modifier_DropletFileContext.prototype.PROTECTED = function() {
    return this.getToken(CSharpParser.PROTECTED, 0);
};

Accessor_modifier_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Accessor_modifier_DropletFileContext.prototype.INTERNAL = function() {
    return this.getToken(CSharpParser.INTERNAL, 0);
};

Accessor_modifier_DropletFileContext.prototype.PRIVATE = function() {
    return this.getToken(CSharpParser.PRIVATE, 0);
};

Accessor_modifier_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAccessor_modifier_DropletFile(this);
	}
};

Accessor_modifier_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAccessor_modifier_DropletFile(this);
	}
};




CSharpParser.Accessor_modifier_DropletFileContext = Accessor_modifier_DropletFileContext;

CSharpParser.prototype.accessor_modifier_DropletFile = function() {

    var localctx = new Accessor_modifier_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 668, CSharpParser.RULE_accessor_modifier_DropletFile);
    try {
        this.state = 4524;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,491,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4512;
            this.match(CSharpParser.PROTECTED);
            this.state = 4513;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4514;
            this.match(CSharpParser.INTERNAL);
            this.state = 4515;
            this.match(CSharpParser.EOF);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4516;
            this.match(CSharpParser.PRIVATE);
            this.state = 4517;
            this.match(CSharpParser.EOF);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4518;
            this.match(CSharpParser.PROTECTED);
            this.state = 4519;
            this.match(CSharpParser.INTERNAL);
            this.state = 4520;
            this.match(CSharpParser.EOF);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4521;
            this.match(CSharpParser.INTERNAL);
            this.state = 4522;
            this.match(CSharpParser.PROTECTED);
            this.state = 4523;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Accessor_body_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_accessor_body_DropletFile;
    return this;
}

Accessor_body_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Accessor_body_DropletFileContext.prototype.constructor = Accessor_body_DropletFileContext;

Accessor_body_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Accessor_body_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Accessor_body_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAccessor_body_DropletFile(this);
	}
};

Accessor_body_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAccessor_body_DropletFile(this);
	}
};




CSharpParser.Accessor_body_DropletFileContext = Accessor_body_DropletFileContext;

CSharpParser.prototype.accessor_body_DropletFile = function() {

    var localctx = new Accessor_body_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 670, CSharpParser.RULE_accessor_body_DropletFile);
    try {
        this.state = 4531;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 4526;
            this.block();
            this.state = 4527;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SEMICOLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 4529;
            this.match(CSharpParser.SEMICOLON);
            this.state = 4530;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Event_accessor_declarations_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_event_accessor_declarations_DropletFile;
    return this;
}

Event_accessor_declarations_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_accessor_declarations_DropletFileContext.prototype.constructor = Event_accessor_declarations_DropletFileContext;

Event_accessor_declarations_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Event_accessor_declarations_DropletFileContext.prototype.ADD = function() {
    return this.getToken(CSharpParser.ADD, 0);
};

Event_accessor_declarations_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Event_accessor_declarations_DropletFileContext.prototype.remove_accessor_declaration = function() {
    return this.getTypedRuleContext(Remove_accessor_declarationContext,0);
};

Event_accessor_declarations_DropletFileContext.prototype.REMOVE = function() {
    return this.getToken(CSharpParser.REMOVE, 0);
};

Event_accessor_declarations_DropletFileContext.prototype.add_accessor_declaration = function() {
    return this.getTypedRuleContext(Add_accessor_declarationContext,0);
};

Event_accessor_declarations_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Event_accessor_declarations_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEvent_accessor_declarations_DropletFile(this);
	}
};

Event_accessor_declarations_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEvent_accessor_declarations_DropletFile(this);
	}
};




CSharpParser.Event_accessor_declarations_DropletFileContext = Event_accessor_declarations_DropletFileContext;

CSharpParser.prototype.event_accessor_declarations_DropletFile = function() {

    var localctx = new Event_accessor_declarations_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 672, CSharpParser.RULE_event_accessor_declarations_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4534;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4533;
            this.attributes();
        }

        this.state = 4544;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
            this.state = 4536;
            this.match(CSharpParser.ADD);
            this.state = 4537;
            this.block();
            this.state = 4538;
            this.remove_accessor_declaration();
            break;
        case CSharpParser.REMOVE:
            this.state = 4540;
            this.match(CSharpParser.REMOVE);
            this.state = 4541;
            this.block();
            this.state = 4542;
            this.add_accessor_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 4546;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Add_accessor_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_add_accessor_declaration_DropletFile;
    return this;
}

Add_accessor_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Add_accessor_declaration_DropletFileContext.prototype.constructor = Add_accessor_declaration_DropletFileContext;

Add_accessor_declaration_DropletFileContext.prototype.ADD = function() {
    return this.getToken(CSharpParser.ADD, 0);
};

Add_accessor_declaration_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Add_accessor_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Add_accessor_declaration_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Add_accessor_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAdd_accessor_declaration_DropletFile(this);
	}
};

Add_accessor_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAdd_accessor_declaration_DropletFile(this);
	}
};




CSharpParser.Add_accessor_declaration_DropletFileContext = Add_accessor_declaration_DropletFileContext;

CSharpParser.prototype.add_accessor_declaration_DropletFile = function() {

    var localctx = new Add_accessor_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 674, CSharpParser.RULE_add_accessor_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4549;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4548;
            this.attributes();
        }

        this.state = 4551;
        this.match(CSharpParser.ADD);
        this.state = 4552;
        this.block();
        this.state = 4553;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Remove_accessor_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_remove_accessor_declaration_DropletFile;
    return this;
}

Remove_accessor_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Remove_accessor_declaration_DropletFileContext.prototype.constructor = Remove_accessor_declaration_DropletFileContext;

Remove_accessor_declaration_DropletFileContext.prototype.REMOVE = function() {
    return this.getToken(CSharpParser.REMOVE, 0);
};

Remove_accessor_declaration_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Remove_accessor_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Remove_accessor_declaration_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Remove_accessor_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterRemove_accessor_declaration_DropletFile(this);
	}
};

Remove_accessor_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitRemove_accessor_declaration_DropletFile(this);
	}
};




CSharpParser.Remove_accessor_declaration_DropletFileContext = Remove_accessor_declaration_DropletFileContext;

CSharpParser.prototype.remove_accessor_declaration_DropletFile = function() {

    var localctx = new Remove_accessor_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 676, CSharpParser.RULE_remove_accessor_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4556;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4555;
            this.attributes();
        }

        this.state = 4558;
        this.match(CSharpParser.REMOVE);
        this.state = 4559;
        this.block();
        this.state = 4560;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Overloadable_operator_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_overloadable_operator_DropletFile;
    return this;
}

Overloadable_operator_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Overloadable_operator_DropletFileContext.prototype.constructor = Overloadable_operator_DropletFileContext;

Overloadable_operator_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Overloadable_operator_DropletFileContext.prototype.BANG = function() {
    return this.getToken(CSharpParser.BANG, 0);
};

Overloadable_operator_DropletFileContext.prototype.TRUE = function() {
    return this.getToken(CSharpParser.TRUE, 0);
};

Overloadable_operator_DropletFileContext.prototype.FALSE = function() {
    return this.getToken(CSharpParser.FALSE, 0);
};

Overloadable_operator_DropletFileContext.prototype.right_shift = function() {
    return this.getTypedRuleContext(Right_shiftContext,0);
};

Overloadable_operator_DropletFileContext.prototype.OP_EQ = function() {
    return this.getToken(CSharpParser.OP_EQ, 0);
};

Overloadable_operator_DropletFileContext.prototype.OP_NE = function() {
    return this.getToken(CSharpParser.OP_NE, 0);
};

Overloadable_operator_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterOverloadable_operator_DropletFile(this);
	}
};

Overloadable_operator_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitOverloadable_operator_DropletFile(this);
	}
};




CSharpParser.Overloadable_operator_DropletFileContext = Overloadable_operator_DropletFileContext;

CSharpParser.prototype.overloadable_operator_DropletFile = function() {

    var localctx = new Overloadable_operator_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 678, CSharpParser.RULE_overloadable_operator_DropletFile);
    try {
        this.state = 4607;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,497,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4562;
            this.match(CSharpParser.PLUS);
            this.state = 4563;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4564;
            this.match(CSharpParser.MINUS);
            this.state = 4565;
            this.match(CSharpParser.EOF);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4566;
            this.match(CSharpParser.BANG);
            this.state = 4567;
            this.match(CSharpParser.EOF);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4568;
            this.match(CSharpParser.TILDE);
            this.state = 4569;
            this.match(CSharpParser.EOF);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4570;
            this.match(CSharpParser.OP_INC);
            this.state = 4571;
            this.match(CSharpParser.EOF);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 4572;
            this.match(CSharpParser.OP_DEC);
            this.state = 4573;
            this.match(CSharpParser.EOF);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 4574;
            this.match(CSharpParser.TRUE);
            this.state = 4575;
            this.match(CSharpParser.EOF);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 4576;
            this.match(CSharpParser.FALSE);
            this.state = 4577;
            this.match(CSharpParser.EOF);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 4578;
            this.match(CSharpParser.STAR);
            this.state = 4579;
            this.match(CSharpParser.EOF);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 4580;
            this.match(CSharpParser.DIV);
            this.state = 4581;
            this.match(CSharpParser.EOF);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 4582;
            this.match(CSharpParser.PERCENT);
            this.state = 4583;
            this.match(CSharpParser.EOF);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 4584;
            this.match(CSharpParser.AMP);
            this.state = 4585;
            this.match(CSharpParser.EOF);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 4586;
            this.match(CSharpParser.BITWISE_OR);
            this.state = 4587;
            this.match(CSharpParser.EOF);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 4588;
            this.match(CSharpParser.CARET);
            this.state = 4589;
            this.match(CSharpParser.EOF);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 4590;
            this.match(CSharpParser.OP_LEFT_SHIFT);
            this.state = 4591;
            this.match(CSharpParser.EOF);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 4592;
            this.right_shift();
            this.state = 4593;
            this.match(CSharpParser.EOF);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 4595;
            this.match(CSharpParser.OP_EQ);
            this.state = 4596;
            this.match(CSharpParser.EOF);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 4597;
            this.match(CSharpParser.OP_NE);
            this.state = 4598;
            this.match(CSharpParser.EOF);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 4599;
            this.match(CSharpParser.GT);
            this.state = 4600;
            this.match(CSharpParser.EOF);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 4601;
            this.match(CSharpParser.LT);
            this.state = 4602;
            this.match(CSharpParser.EOF);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 4603;
            this.match(CSharpParser.OP_GE);
            this.state = 4604;
            this.match(CSharpParser.EOF);
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 4605;
            this.match(CSharpParser.OP_LE);
            this.state = 4606;
            this.match(CSharpParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conversion_operator_declarator_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_conversion_operator_declarator_DropletFile;
    return this;
}

Conversion_operator_declarator_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conversion_operator_declarator_DropletFileContext.prototype.constructor = Conversion_operator_declarator_DropletFileContext;

Conversion_operator_declarator_DropletFileContext.prototype.OPERATOR = function() {
    return this.getToken(CSharpParser.OPERATOR, 0);
};

Conversion_operator_declarator_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Conversion_operator_declarator_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Conversion_operator_declarator_DropletFileContext.prototype.arg_declaration = function() {
    return this.getTypedRuleContext(Arg_declarationContext,0);
};

Conversion_operator_declarator_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Conversion_operator_declarator_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Conversion_operator_declarator_DropletFileContext.prototype.IMPLICIT = function() {
    return this.getToken(CSharpParser.IMPLICIT, 0);
};

Conversion_operator_declarator_DropletFileContext.prototype.EXPLICIT = function() {
    return this.getToken(CSharpParser.EXPLICIT, 0);
};

Conversion_operator_declarator_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConversion_operator_declarator_DropletFile(this);
	}
};

Conversion_operator_declarator_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConversion_operator_declarator_DropletFile(this);
	}
};




CSharpParser.Conversion_operator_declarator_DropletFileContext = Conversion_operator_declarator_DropletFileContext;

CSharpParser.prototype.conversion_operator_declarator_DropletFile = function() {

    var localctx = new Conversion_operator_declarator_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 680, CSharpParser.RULE_conversion_operator_declarator_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4609;
        _la = this._input.LA(1);
        if(!(_la===CSharpParser.EXPLICIT || _la===CSharpParser.IMPLICIT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4610;
        this.match(CSharpParser.OPERATOR);
        this.state = 4611;
        this.var_type();
        this.state = 4612;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 4613;
        this.arg_declaration();
        this.state = 4614;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 4615;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_initializer_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_constructor_initializer_DropletFile;
    return this;
}

Constructor_initializer_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_initializer_DropletFileContext.prototype.constructor = Constructor_initializer_DropletFileContext;

Constructor_initializer_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Constructor_initializer_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Constructor_initializer_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Constructor_initializer_DropletFileContext.prototype.BASE = function() {
    return this.getToken(CSharpParser.BASE, 0);
};

Constructor_initializer_DropletFileContext.prototype.THIS = function() {
    return this.getToken(CSharpParser.THIS, 0);
};

Constructor_initializer_DropletFileContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Constructor_initializer_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConstructor_initializer_DropletFile(this);
	}
};

Constructor_initializer_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConstructor_initializer_DropletFile(this);
	}
};




CSharpParser.Constructor_initializer_DropletFileContext = Constructor_initializer_DropletFileContext;

CSharpParser.prototype.constructor_initializer_DropletFile = function() {

    var localctx = new Constructor_initializer_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 682, CSharpParser.RULE_constructor_initializer_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4617;
        this.match(CSharpParser.COLON);
        this.state = 4618;
        _la = this._input.LA(1);
        if(!(_la===CSharpParser.BASE || _la===CSharpParser.THIS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4619;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 4621;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.OUT - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REF - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.VOID - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
            this.state = 4620;
            this.argument_list();
        }

        this.state = 4623;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 4624;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Body_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_body_DropletFile;
    return this;
}

Body_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Body_DropletFileContext.prototype.constructor = Body_DropletFileContext;

Body_DropletFileContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Body_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Body_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBody_DropletFile(this);
	}
};

Body_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBody_DropletFile(this);
	}
};




CSharpParser.Body_DropletFileContext = Body_DropletFileContext;

CSharpParser.prototype.body_DropletFile = function() {

    var localctx = new Body_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 684, CSharpParser.RULE_body_DropletFile);
    try {
        this.state = 4631;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 4626;
            this.block();
            this.state = 4627;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SEMICOLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 4629;
            this.match(CSharpParser.SEMICOLON);
            this.state = 4630;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Struct_interfaces_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_struct_interfaces_DropletFile;
    return this;
}

Struct_interfaces_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_interfaces_DropletFileContext.prototype.constructor = Struct_interfaces_DropletFileContext;

Struct_interfaces_DropletFileContext.prototype.interface_type_list = function() {
    return this.getTypedRuleContext(Interface_type_listContext,0);
};

Struct_interfaces_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Struct_interfaces_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterStruct_interfaces_DropletFile(this);
	}
};

Struct_interfaces_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitStruct_interfaces_DropletFile(this);
	}
};




CSharpParser.Struct_interfaces_DropletFileContext = Struct_interfaces_DropletFileContext;

CSharpParser.prototype.struct_interfaces_DropletFile = function() {

    var localctx = new Struct_interfaces_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 686, CSharpParser.RULE_struct_interfaces_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4633;
        this.match(CSharpParser.COLON);
        this.state = 4634;
        this.interface_type_list();
        this.state = 4635;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Struct_body_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_struct_body_DropletFile;
    return this;
}

Struct_body_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_body_DropletFileContext.prototype.constructor = Struct_body_DropletFileContext;

Struct_body_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Struct_body_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Struct_body_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Struct_body_DropletFileContext.prototype.struct_member_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Struct_member_declarationContext);
    } else {
        return this.getTypedRuleContext(Struct_member_declarationContext,i);
    }
};

Struct_body_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterStruct_body_DropletFile(this);
	}
};

Struct_body_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitStruct_body_DropletFile(this);
	}
};




CSharpParser.Struct_body_DropletFileContext = Struct_body_DropletFileContext;

CSharpParser.prototype.struct_body_DropletFile = function() {

    var localctx = new Struct_body_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 688, CSharpParser.RULE_struct_body_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4637;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 4641;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.CONST) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.ENUM - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.EVENT - 33)) | (1 << (CSharpParser.EXPLICIT - 33)) | (1 << (CSharpParser.EXTERN - 33)) | (1 << (CSharpParser.FIXED - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.IMPLICIT - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTERFACE - 33)) | (1 << (CSharpParser.INTERNAL - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.OVERRIDE - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.PRIVATE - 65)) | (1 << (CSharpParser.PROTECTED - 65)) | (1 << (CSharpParser.PUBLIC - 65)) | (1 << (CSharpParser.READONLY - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SEALED - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.STATIC - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.STRUCT - 65)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CSharpParser.UINT - 98)) | (1 << (CSharpParser.ULONG - 98)) | (1 << (CSharpParser.UNSAFE - 98)) | (1 << (CSharpParser.USHORT - 98)) | (1 << (CSharpParser.VAR - 98)) | (1 << (CSharpParser.VIRTUAL - 98)) | (1 << (CSharpParser.VOID - 98)) | (1 << (CSharpParser.VOLATILE - 98)) | (1 << (CSharpParser.WHEN - 98)) | (1 << (CSharpParser.WHERE - 98)) | (1 << (CSharpParser.YIELD - 98)) | (1 << (CSharpParser.IDENTIFIER - 98)) | (1 << (CSharpParser.OPEN_BRACKET - 98)))) !== 0)) {
            this.state = 4638;
            this.struct_member_declaration();
            this.state = 4643;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4644;
        this.match(CSharpParser.CLOSE_BRACE);
        this.state = 4645;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Struct_member_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_struct_member_declaration_DropletFile;
    return this;
}

Struct_member_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_member_declaration_DropletFileContext.prototype.constructor = Struct_member_declaration_DropletFileContext;

Struct_member_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Struct_member_declaration_DropletFileContext.prototype.common_member_declaration = function() {
    return this.getTypedRuleContext(Common_member_declarationContext,0);
};

Struct_member_declaration_DropletFileContext.prototype.FIXED = function() {
    return this.getToken(CSharpParser.FIXED, 0);
};

Struct_member_declaration_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Struct_member_declaration_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Struct_member_declaration_DropletFileContext.prototype.all_member_modifiers = function() {
    return this.getTypedRuleContext(All_member_modifiersContext,0);
};

Struct_member_declaration_DropletFileContext.prototype.fixed_size_buffer_declarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Fixed_size_buffer_declaratorContext);
    } else {
        return this.getTypedRuleContext(Fixed_size_buffer_declaratorContext,i);
    }
};

Struct_member_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterStruct_member_declaration_DropletFile(this);
	}
};

Struct_member_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitStruct_member_declaration_DropletFile(this);
	}
};




CSharpParser.Struct_member_declaration_DropletFileContext = Struct_member_declaration_DropletFileContext;

CSharpParser.prototype.struct_member_declaration_DropletFile = function() {

    var localctx = new Struct_member_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 690, CSharpParser.RULE_struct_member_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4648;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4647;
            this.attributes();
        }

        this.state = 4651;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,502,this._ctx);
        if(la_===1) {
            this.state = 4650;
            this.all_member_modifiers();

        }
        this.state = 4663;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CLASS:
        case CSharpParser.CONST:
        case CSharpParser.DECIMAL:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.ENUM:
        case CSharpParser.EQUALS:
        case CSharpParser.EVENT:
        case CSharpParser.EXPLICIT:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.IMPLICIT:
        case CSharpParser.INT:
        case CSharpParser.INTERFACE:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.STRING:
        case CSharpParser.STRUCT:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.VOID:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.state = 4653;
            this.common_member_declaration();
            break;
        case CSharpParser.FIXED:
            this.state = 4654;
            this.match(CSharpParser.FIXED);
            this.state = 4655;
            this.var_type();
            this.state = 4657; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 4656;
                this.fixed_size_buffer_declarator();
                this.state = 4659; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CSharpParser.DYNAMIC - 34)) | (1 << (CSharpParser.EQUALS - 34)) | (1 << (CSharpParser.FROM - 34)) | (1 << (CSharpParser.GET - 34)) | (1 << (CSharpParser.GROUP - 34)) | (1 << (CSharpParser.INTO - 34)) | (1 << (CSharpParser.JOIN - 34)) | (1 << (CSharpParser.LET - 34)) | (1 << (CSharpParser.NAMEOF - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CSharpParser.ON - 68)) | (1 << (CSharpParser.ORDERBY - 68)) | (1 << (CSharpParser.PARTIAL - 68)) | (1 << (CSharpParser.REMOVE - 68)) | (1 << (CSharpParser.SELECT - 68)) | (1 << (CSharpParser.SET - 68)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (CSharpParser.VAR - 104)) | (1 << (CSharpParser.WHEN - 104)) | (1 << (CSharpParser.WHERE - 104)) | (1 << (CSharpParser.YIELD - 104)) | (1 << (CSharpParser.IDENTIFIER - 104)))) !== 0));
            this.state = 4661;
            this.match(CSharpParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 4665;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Array_type_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_array_type_DropletFile;
    return this;
}

Array_type_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_type_DropletFileContext.prototype.constructor = Array_type_DropletFileContext;

Array_type_DropletFileContext.prototype.base_type = function() {
    return this.getTypedRuleContext(Base_typeContext,0);
};

Array_type_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Array_type_DropletFileContext.prototype.rank_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rank_specifierContext);
    } else {
        return this.getTypedRuleContext(Rank_specifierContext,i);
    }
};

Array_type_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterArray_type_DropletFile(this);
	}
};

Array_type_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitArray_type_DropletFile(this);
	}
};




CSharpParser.Array_type_DropletFileContext = Array_type_DropletFileContext;

CSharpParser.prototype.array_type_DropletFile = function() {

    var localctx = new Array_type_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 692, CSharpParser.RULE_array_type_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4667;
        this.base_type();
        this.state = 4675; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4671;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CSharpParser.STAR || _la===CSharpParser.INTERR) {
                this.state = 4668;
                _la = this._input.LA(1);
                if(!(_la===CSharpParser.STAR || _la===CSharpParser.INTERR)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4673;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4674;
            this.rank_specifier();
            this.state = 4677; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (CSharpParser.OPEN_BRACKET - 124)) | (1 << (CSharpParser.STAR - 124)) | (1 << (CSharpParser.INTERR - 124)))) !== 0));
        this.state = 4679;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rank_specifier_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_rank_specifier_DropletFile;
    return this;
}

Rank_specifier_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rank_specifier_DropletFileContext.prototype.constructor = Rank_specifier_DropletFileContext;

Rank_specifier_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Rank_specifier_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterRank_specifier_DropletFile(this);
	}
};

Rank_specifier_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitRank_specifier_DropletFile(this);
	}
};




CSharpParser.Rank_specifier_DropletFileContext = Rank_specifier_DropletFileContext;

CSharpParser.prototype.rank_specifier_DropletFile = function() {

    var localctx = new Rank_specifier_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 694, CSharpParser.RULE_rank_specifier_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4681;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 4685;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 4682;
            this.match(CSharpParser.COMMA);
            this.state = 4687;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4688;
        this.match(CSharpParser.CLOSE_BRACKET);
        this.state = 4689;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Array_initializer_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_array_initializer_DropletFile;
    return this;
}

Array_initializer_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_initializer_DropletFileContext.prototype.constructor = Array_initializer_DropletFileContext;

Array_initializer_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Array_initializer_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Array_initializer_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Array_initializer_DropletFileContext.prototype.variable_initializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_initializerContext);
    } else {
        return this.getTypedRuleContext(Variable_initializerContext,i);
    }
};

Array_initializer_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterArray_initializer_DropletFile(this);
	}
};

Array_initializer_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitArray_initializer_DropletFile(this);
	}
};




CSharpParser.Array_initializer_DropletFileContext = Array_initializer_DropletFileContext;

CSharpParser.prototype.array_initializer_DropletFile = function() {

    var localctx = new Array_initializer_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 696, CSharpParser.RULE_array_initializer_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4691;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 4703;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_BRACE - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
            this.state = 4692;
            this.variable_initializer();
            this.state = 4697;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,508,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4693;
                    this.match(CSharpParser.COMMA);
                    this.state = 4694;
                    this.variable_initializer(); 
                }
                this.state = 4699;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,508,this._ctx);
            }

            this.state = 4701;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.COMMA) {
                this.state = 4700;
                this.match(CSharpParser.COMMA);
            }

        }

        this.state = 4705;
        this.match(CSharpParser.CLOSE_BRACE);
        this.state = 4706;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variant_type_parameter_list_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_variant_type_parameter_list_DropletFile;
    return this;
}

Variant_type_parameter_list_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variant_type_parameter_list_DropletFileContext.prototype.constructor = Variant_type_parameter_list_DropletFileContext;

Variant_type_parameter_list_DropletFileContext.prototype.variant_type_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variant_type_parameterContext);
    } else {
        return this.getTypedRuleContext(Variant_type_parameterContext,i);
    }
};

Variant_type_parameter_list_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Variant_type_parameter_list_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVariant_type_parameter_list_DropletFile(this);
	}
};

Variant_type_parameter_list_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVariant_type_parameter_list_DropletFile(this);
	}
};




CSharpParser.Variant_type_parameter_list_DropletFileContext = Variant_type_parameter_list_DropletFileContext;

CSharpParser.prototype.variant_type_parameter_list_DropletFile = function() {

    var localctx = new Variant_type_parameter_list_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 698, CSharpParser.RULE_variant_type_parameter_list_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4708;
        this.match(CSharpParser.LT);
        this.state = 4709;
        this.variant_type_parameter();
        this.state = 4714;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 4710;
            this.match(CSharpParser.COMMA);
            this.state = 4711;
            this.variant_type_parameter();
            this.state = 4716;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4717;
        this.match(CSharpParser.GT);
        this.state = 4718;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variant_type_parameter_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_variant_type_parameter_DropletFile;
    return this;
}

Variant_type_parameter_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variant_type_parameter_DropletFileContext.prototype.constructor = Variant_type_parameter_DropletFileContext;

Variant_type_parameter_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Variant_type_parameter_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Variant_type_parameter_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Variant_type_parameter_DropletFileContext.prototype.variance_annotation = function() {
    return this.getTypedRuleContext(Variance_annotationContext,0);
};

Variant_type_parameter_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVariant_type_parameter_DropletFile(this);
	}
};

Variant_type_parameter_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVariant_type_parameter_DropletFile(this);
	}
};




CSharpParser.Variant_type_parameter_DropletFileContext = Variant_type_parameter_DropletFileContext;

CSharpParser.prototype.variant_type_parameter_DropletFile = function() {

    var localctx = new Variant_type_parameter_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 700, CSharpParser.RULE_variant_type_parameter_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4721;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4720;
            this.attributes();
        }

        this.state = 4724;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.IN || _la===CSharpParser.OUT) {
            this.state = 4723;
            this.variance_annotation();
        }

        this.state = 4726;
        this.identifier();
        this.state = 4727;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variance_annotation_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_variance_annotation_DropletFile;
    return this;
}

Variance_annotation_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variance_annotation_DropletFileContext.prototype.constructor = Variance_annotation_DropletFileContext;

Variance_annotation_DropletFileContext.prototype.IN = function() {
    return this.getToken(CSharpParser.IN, 0);
};

Variance_annotation_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Variance_annotation_DropletFileContext.prototype.OUT = function() {
    return this.getToken(CSharpParser.OUT, 0);
};

Variance_annotation_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterVariance_annotation_DropletFile(this);
	}
};

Variance_annotation_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitVariance_annotation_DropletFile(this);
	}
};




CSharpParser.Variance_annotation_DropletFileContext = Variance_annotation_DropletFileContext;

CSharpParser.prototype.variance_annotation_DropletFile = function() {

    var localctx = new Variance_annotation_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 702, CSharpParser.RULE_variance_annotation_DropletFile);
    try {
        this.state = 4733;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.IN:
            this.enterOuterAlt(localctx, 1);
            this.state = 4729;
            this.match(CSharpParser.IN);
            this.state = 4730;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OUT:
            this.enterOuterAlt(localctx, 2);
            this.state = 4731;
            this.match(CSharpParser.OUT);
            this.state = 4732;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_base_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interface_base_DropletFile;
    return this;
}

Interface_base_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_base_DropletFileContext.prototype.constructor = Interface_base_DropletFileContext;

Interface_base_DropletFileContext.prototype.interface_type_list = function() {
    return this.getTypedRuleContext(Interface_type_listContext,0);
};

Interface_base_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Interface_base_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterface_base_DropletFile(this);
	}
};

Interface_base_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterface_base_DropletFile(this);
	}
};




CSharpParser.Interface_base_DropletFileContext = Interface_base_DropletFileContext;

CSharpParser.prototype.interface_base_DropletFile = function() {

    var localctx = new Interface_base_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 704, CSharpParser.RULE_interface_base_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4735;
        this.match(CSharpParser.COLON);
        this.state = 4736;
        this.interface_type_list();
        this.state = 4737;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_body_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interface_body_DropletFile;
    return this;
}

Interface_body_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_body_DropletFileContext.prototype.constructor = Interface_body_DropletFileContext;

Interface_body_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Interface_body_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Interface_body_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Interface_body_DropletFileContext.prototype.interface_member_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interface_member_declarationContext);
    } else {
        return this.getTypedRuleContext(Interface_member_declarationContext,i);
    }
};

Interface_body_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterface_body_DropletFile(this);
	}
};

Interface_body_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterface_body_DropletFile(this);
	}
};




CSharpParser.Interface_body_DropletFileContext = Interface_body_DropletFileContext;

CSharpParser.prototype.interface_body_DropletFile = function() {

    var localctx = new Interface_body_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 706, CSharpParser.RULE_interface_body_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4739;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 4743;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.EVENT - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.STRING - 65)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CSharpParser.UINT - 98)) | (1 << (CSharpParser.ULONG - 98)) | (1 << (CSharpParser.UNSAFE - 98)) | (1 << (CSharpParser.USHORT - 98)) | (1 << (CSharpParser.VAR - 98)) | (1 << (CSharpParser.VOID - 98)) | (1 << (CSharpParser.WHEN - 98)) | (1 << (CSharpParser.WHERE - 98)) | (1 << (CSharpParser.YIELD - 98)) | (1 << (CSharpParser.IDENTIFIER - 98)) | (1 << (CSharpParser.OPEN_BRACKET - 98)))) !== 0)) {
            this.state = 4740;
            this.interface_member_declaration();
            this.state = 4745;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4746;
        this.match(CSharpParser.CLOSE_BRACE);
        this.state = 4747;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_member_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interface_member_declaration_DropletFile;
    return this;
}

Interface_member_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_member_declaration_DropletFileContext.prototype.constructor = Interface_member_declaration_DropletFileContext;

Interface_member_declaration_DropletFileContext.prototype.EOF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.EOF);
    } else {
        return this.getToken(CSharpParser.EOF, i);
    }
};


Interface_member_declaration_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Interface_member_declaration_DropletFileContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};

Interface_member_declaration_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Interface_member_declaration_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Interface_member_declaration_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Interface_member_declaration_DropletFileContext.prototype.EVENT = function() {
    return this.getToken(CSharpParser.EVENT, 0);
};

Interface_member_declaration_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Interface_member_declaration_DropletFileContext.prototype.NEW = function() {
    return this.getToken(CSharpParser.NEW, 0);
};

Interface_member_declaration_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Interface_member_declaration_DropletFileContext.prototype.interface_accessors = function() {
    return this.getTypedRuleContext(Interface_accessorsContext,0);
};

Interface_member_declaration_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Interface_member_declaration_DropletFileContext.prototype.THIS = function() {
    return this.getToken(CSharpParser.THIS, 0);
};

Interface_member_declaration_DropletFileContext.prototype.formal_parameter_list = function() {
    return this.getTypedRuleContext(Formal_parameter_listContext,0);
};

Interface_member_declaration_DropletFileContext.prototype.UNSAFE = function() {
    return this.getToken(CSharpParser.UNSAFE, 0);
};

Interface_member_declaration_DropletFileContext.prototype.type_parameter_list = function() {
    return this.getTypedRuleContext(Type_parameter_listContext,0);
};

Interface_member_declaration_DropletFileContext.prototype.type_parameter_constraints_clauses = function() {
    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
};

Interface_member_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterface_member_declaration_DropletFile(this);
	}
};

Interface_member_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterface_member_declaration_DropletFile(this);
	}
};




CSharpParser.Interface_member_declaration_DropletFileContext = Interface_member_declaration_DropletFileContext;

CSharpParser.prototype.interface_member_declaration_DropletFile = function() {

    var localctx = new Interface_member_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 708, CSharpParser.RULE_interface_member_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4750;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4749;
            this.attributes();
        }

        this.state = 4753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.NEW) {
            this.state = 4752;
            this.match(CSharpParser.NEW);
        }

        this.state = 4814;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,527,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4756;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.UNSAFE) {
                this.state = 4755;
                this.match(CSharpParser.UNSAFE);
            }

            this.state = 4758;
            this.var_type();
            this.state = 4786;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,522,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4759;
                this.identifier();
                this.state = 4761;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CSharpParser.LT) {
                    this.state = 4760;
                    this.type_parameter_list();
                }

                this.state = 4763;
                this.match(CSharpParser.OPEN_PARENS);
                this.state = 4765;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CSharpParser.OBJECT - 67)) | (1 << (CSharpParser.ON - 67)) | (1 << (CSharpParser.ORDERBY - 67)) | (1 << (CSharpParser.OUT - 67)) | (1 << (CSharpParser.PARAMS - 67)) | (1 << (CSharpParser.PARTIAL - 67)) | (1 << (CSharpParser.REF - 67)) | (1 << (CSharpParser.REMOVE - 67)) | (1 << (CSharpParser.SBYTE - 67)) | (1 << (CSharpParser.SELECT - 67)) | (1 << (CSharpParser.SET - 67)) | (1 << (CSharpParser.SHORT - 67)) | (1 << (CSharpParser.STRING - 67)) | (1 << (CSharpParser.THIS - 67)) | (1 << (CSharpParser.UINT - 67)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)))) !== 0)) {
                    this.state = 4764;
                    this.formal_parameter_list();
                }

                this.state = 4767;
                this.match(CSharpParser.CLOSE_PARENS);
                this.state = 4769;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CSharpParser.WHERE) {
                    this.state = 4768;
                    this.type_parameter_constraints_clauses();
                }

                this.state = 4771;
                this.match(CSharpParser.SEMICOLON);
                break;

            case 2:
                this.state = 4773;
                this.identifier();
                this.state = 4774;
                this.match(CSharpParser.OPEN_BRACE);
                this.state = 4775;
                this.interface_accessors();
                this.state = 4776;
                this.match(CSharpParser.CLOSE_BRACE);
                break;

            case 3:
                this.state = 4778;
                this.match(CSharpParser.THIS);
                this.state = 4779;
                this.match(CSharpParser.OPEN_BRACKET);
                this.state = 4780;
                this.formal_parameter_list();
                this.state = 4781;
                this.match(CSharpParser.CLOSE_BRACKET);
                this.state = 4782;
                this.match(CSharpParser.OPEN_BRACE);
                this.state = 4783;
                this.interface_accessors();
                this.state = 4784;
                this.match(CSharpParser.CLOSE_BRACE);
                break;

            }
            this.state = 4788;
            this.match(CSharpParser.EOF);
            break;

        case 2:
            this.state = 4791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.UNSAFE) {
                this.state = 4790;
                this.match(CSharpParser.UNSAFE);
            }

            this.state = 4793;
            this.match(CSharpParser.VOID);
            this.state = 4794;
            this.identifier();
            this.state = 4796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.LT) {
                this.state = 4795;
                this.type_parameter_list();
            }

            this.state = 4798;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 4800;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CSharpParser.OBJECT - 67)) | (1 << (CSharpParser.ON - 67)) | (1 << (CSharpParser.ORDERBY - 67)) | (1 << (CSharpParser.OUT - 67)) | (1 << (CSharpParser.PARAMS - 67)) | (1 << (CSharpParser.PARTIAL - 67)) | (1 << (CSharpParser.REF - 67)) | (1 << (CSharpParser.REMOVE - 67)) | (1 << (CSharpParser.SBYTE - 67)) | (1 << (CSharpParser.SELECT - 67)) | (1 << (CSharpParser.SET - 67)) | (1 << (CSharpParser.SHORT - 67)) | (1 << (CSharpParser.STRING - 67)) | (1 << (CSharpParser.THIS - 67)) | (1 << (CSharpParser.UINT - 67)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)))) !== 0)) {
                this.state = 4799;
                this.formal_parameter_list();
            }

            this.state = 4802;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 4804;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.WHERE) {
                this.state = 4803;
                this.type_parameter_constraints_clauses();
            }

            this.state = 4806;
            this.match(CSharpParser.SEMICOLON);
            this.state = 4807;
            this.match(CSharpParser.EOF);
            break;

        case 3:
            this.state = 4809;
            this.match(CSharpParser.EVENT);
            this.state = 4810;
            this.var_type();
            this.state = 4811;
            this.identifier();
            this.state = 4812;
            this.match(CSharpParser.SEMICOLON);
            break;

        }
        this.state = 4816;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_accessors_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interface_accessors_DropletFile;
    return this;
}

Interface_accessors_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_accessors_DropletFileContext.prototype.constructor = Interface_accessors_DropletFileContext;

Interface_accessors_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Interface_accessors_DropletFileContext.prototype.GET = function() {
    return this.getToken(CSharpParser.GET, 0);
};

Interface_accessors_DropletFileContext.prototype.SET = function() {
    return this.getToken(CSharpParser.SET, 0);
};

Interface_accessors_DropletFileContext.prototype.attributes = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributesContext);
    } else {
        return this.getTypedRuleContext(AttributesContext,i);
    }
};

Interface_accessors_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterface_accessors_DropletFile(this);
	}
};

Interface_accessors_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterface_accessors_DropletFile(this);
	}
};




CSharpParser.Interface_accessors_DropletFileContext = Interface_accessors_DropletFileContext;

CSharpParser.prototype.interface_accessors_DropletFile = function() {

    var localctx = new Interface_accessors_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 710, CSharpParser.RULE_interface_accessors_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4819;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4818;
            this.attributes();
        }

        this.state = 4839;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.GET:
            this.state = 4821;
            this.match(CSharpParser.GET);
            this.state = 4822;
            this.match(CSharpParser.SEMICOLON);
            this.state = 4828;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.SET || _la===CSharpParser.OPEN_BRACKET) {
                this.state = 4824;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CSharpParser.OPEN_BRACKET) {
                    this.state = 4823;
                    this.attributes();
                }

                this.state = 4826;
                this.match(CSharpParser.SET);
                this.state = 4827;
                this.match(CSharpParser.SEMICOLON);
            }

            break;
        case CSharpParser.SET:
            this.state = 4830;
            this.match(CSharpParser.SET);
            this.state = 4831;
            this.match(CSharpParser.SEMICOLON);
            this.state = 4837;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.GET || _la===CSharpParser.OPEN_BRACKET) {
                this.state = 4833;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CSharpParser.OPEN_BRACKET) {
                    this.state = 4832;
                    this.attributes();
                }

                this.state = 4835;
                this.match(CSharpParser.GET);
                this.state = 4836;
                this.match(CSharpParser.SEMICOLON);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 4841;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_base_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_enum_base_DropletFile;
    return this;
}

Enum_base_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_base_DropletFileContext.prototype.constructor = Enum_base_DropletFileContext;

Enum_base_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Enum_base_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Enum_base_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEnum_base_DropletFile(this);
	}
};

Enum_base_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEnum_base_DropletFile(this);
	}
};




CSharpParser.Enum_base_DropletFileContext = Enum_base_DropletFileContext;

CSharpParser.prototype.enum_base_DropletFile = function() {

    var localctx = new Enum_base_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 712, CSharpParser.RULE_enum_base_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4843;
        this.match(CSharpParser.COLON);
        this.state = 4844;
        this.var_type();
        this.state = 4845;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_body_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_enum_body_DropletFile;
    return this;
}

Enum_body_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_body_DropletFileContext.prototype.constructor = Enum_body_DropletFileContext;

Enum_body_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Enum_body_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Enum_body_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Enum_body_DropletFileContext.prototype.enum_member_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Enum_member_declarationContext);
    } else {
        return this.getTypedRuleContext(Enum_member_declarationContext,i);
    }
};

Enum_body_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEnum_body_DropletFile(this);
	}
};

Enum_body_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEnum_body_DropletFile(this);
	}
};




CSharpParser.Enum_body_DropletFileContext = Enum_body_DropletFileContext;

CSharpParser.prototype.enum_body_DropletFile = function() {

    var localctx = new Enum_body_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 714, CSharpParser.RULE_enum_body_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4847;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 4859;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CSharpParser.DYNAMIC - 34)) | (1 << (CSharpParser.EQUALS - 34)) | (1 << (CSharpParser.FROM - 34)) | (1 << (CSharpParser.GET - 34)) | (1 << (CSharpParser.GROUP - 34)) | (1 << (CSharpParser.INTO - 34)) | (1 << (CSharpParser.JOIN - 34)) | (1 << (CSharpParser.LET - 34)) | (1 << (CSharpParser.NAMEOF - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CSharpParser.ON - 68)) | (1 << (CSharpParser.ORDERBY - 68)) | (1 << (CSharpParser.PARTIAL - 68)) | (1 << (CSharpParser.REMOVE - 68)) | (1 << (CSharpParser.SELECT - 68)) | (1 << (CSharpParser.SET - 68)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (CSharpParser.VAR - 104)) | (1 << (CSharpParser.WHEN - 104)) | (1 << (CSharpParser.WHERE - 104)) | (1 << (CSharpParser.YIELD - 104)) | (1 << (CSharpParser.IDENTIFIER - 104)) | (1 << (CSharpParser.OPEN_BRACKET - 104)))) !== 0)) {
            this.state = 4848;
            this.enum_member_declaration();
            this.state = 4853;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,534,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4849;
                    this.match(CSharpParser.COMMA);
                    this.state = 4850;
                    this.enum_member_declaration(); 
                }
                this.state = 4855;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,534,this._ctx);
            }

            this.state = 4857;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.COMMA) {
                this.state = 4856;
                this.match(CSharpParser.COMMA);
            }

        }

        this.state = 4861;
        this.match(CSharpParser.CLOSE_BRACE);
        this.state = 4862;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_member_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_enum_member_declaration_DropletFile;
    return this;
}

Enum_member_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_member_declaration_DropletFileContext.prototype.constructor = Enum_member_declaration_DropletFileContext;

Enum_member_declaration_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Enum_member_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Enum_member_declaration_DropletFileContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Enum_member_declaration_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Enum_member_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEnum_member_declaration_DropletFile(this);
	}
};

Enum_member_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEnum_member_declaration_DropletFile(this);
	}
};




CSharpParser.Enum_member_declaration_DropletFileContext = Enum_member_declaration_DropletFileContext;

CSharpParser.prototype.enum_member_declaration_DropletFile = function() {

    var localctx = new Enum_member_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 716, CSharpParser.RULE_enum_member_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4865;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACKET) {
            this.state = 4864;
            this.attributes();
        }

        this.state = 4867;
        this.identifier();
        this.state = 4870;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.ASSIGNMENT) {
            this.state = 4868;
            this.match(CSharpParser.ASSIGNMENT);
            this.state = 4869;
            this.expression();
        }

        this.state = 4872;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Global_attribute_section_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_global_attribute_section_DropletFile;
    return this;
}

Global_attribute_section_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_attribute_section_DropletFileContext.prototype.constructor = Global_attribute_section_DropletFileContext;

Global_attribute_section_DropletFileContext.prototype.global_attribute_target = function() {
    return this.getTypedRuleContext(Global_attribute_targetContext,0);
};

Global_attribute_section_DropletFileContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Global_attribute_section_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Global_attribute_section_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterGlobal_attribute_section_DropletFile(this);
	}
};

Global_attribute_section_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitGlobal_attribute_section_DropletFile(this);
	}
};




CSharpParser.Global_attribute_section_DropletFileContext = Global_attribute_section_DropletFileContext;

CSharpParser.prototype.global_attribute_section_DropletFile = function() {

    var localctx = new Global_attribute_section_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 718, CSharpParser.RULE_global_attribute_section_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4874;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 4875;
        this.global_attribute_target();
        this.state = 4876;
        this.match(CSharpParser.COLON);
        this.state = 4877;
        this.attribute_list();
        this.state = 4879;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COMMA) {
            this.state = 4878;
            this.match(CSharpParser.COMMA);
        }

        this.state = 4881;
        this.match(CSharpParser.CLOSE_BRACKET);
        this.state = 4882;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Global_attribute_target_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_global_attribute_target_DropletFile;
    return this;
}

Global_attribute_target_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_attribute_target_DropletFileContext.prototype.constructor = Global_attribute_target_DropletFileContext;

Global_attribute_target_DropletFileContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

Global_attribute_target_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Global_attribute_target_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Global_attribute_target_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterGlobal_attribute_target_DropletFile(this);
	}
};

Global_attribute_target_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitGlobal_attribute_target_DropletFile(this);
	}
};




CSharpParser.Global_attribute_target_DropletFileContext = Global_attribute_target_DropletFileContext;

CSharpParser.prototype.global_attribute_target_DropletFile = function() {

    var localctx = new Global_attribute_target_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 720, CSharpParser.RULE_global_attribute_target_DropletFile);
    try {
        this.state = 4890;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ABSTRACT:
        case CSharpParser.AS:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BREAK:
        case CSharpParser.BYTE:
        case CSharpParser.CASE:
        case CSharpParser.CATCH:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.CLASS:
        case CSharpParser.CONST:
        case CSharpParser.CONTINUE:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DO:
        case CSharpParser.DOUBLE:
        case CSharpParser.ELSE:
        case CSharpParser.ENUM:
        case CSharpParser.EVENT:
        case CSharpParser.EXPLICIT:
        case CSharpParser.EXTERN:
        case CSharpParser.FALSE:
        case CSharpParser.FINALLY:
        case CSharpParser.FIXED:
        case CSharpParser.FLOAT:
        case CSharpParser.FOR:
        case CSharpParser.FOREACH:
        case CSharpParser.GOTO:
        case CSharpParser.IF:
        case CSharpParser.IMPLICIT:
        case CSharpParser.IN:
        case CSharpParser.INT:
        case CSharpParser.INTERFACE:
        case CSharpParser.INTERNAL:
        case CSharpParser.IS:
        case CSharpParser.LOCK:
        case CSharpParser.LONG:
        case CSharpParser.NAMESPACE:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.OPERATOR:
        case CSharpParser.OUT:
        case CSharpParser.OVERRIDE:
        case CSharpParser.PARAMS:
        case CSharpParser.PRIVATE:
        case CSharpParser.PROTECTED:
        case CSharpParser.PUBLIC:
        case CSharpParser.READONLY:
        case CSharpParser.REF:
        case CSharpParser.RETURN:
        case CSharpParser.SBYTE:
        case CSharpParser.SEALED:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STACKALLOC:
        case CSharpParser.STATIC:
        case CSharpParser.STRING:
        case CSharpParser.STRUCT:
        case CSharpParser.SWITCH:
        case CSharpParser.THIS:
        case CSharpParser.THROW:
        case CSharpParser.TRUE:
        case CSharpParser.TRY:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.UNSAFE:
        case CSharpParser.USHORT:
        case CSharpParser.USING:
        case CSharpParser.VIRTUAL:
        case CSharpParser.VOID:
        case CSharpParser.VOLATILE:
        case CSharpParser.WHILE:
            this.enterOuterAlt(localctx, 1);
            this.state = 4884;
            this.keyword();
            this.state = 4885;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BY:
        case CSharpParser.DESCENDING:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.NAMEOF:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 4887;
            this.identifier();
            this.state = 4888;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attributes_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_attributes_DropletFile;
    return this;
}

Attributes_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attributes_DropletFileContext.prototype.constructor = Attributes_DropletFileContext;

Attributes_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Attributes_DropletFileContext.prototype.attribute_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_sectionContext);
    } else {
        return this.getTypedRuleContext(Attribute_sectionContext,i);
    }
};

Attributes_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAttributes_DropletFile(this);
	}
};

Attributes_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAttributes_DropletFile(this);
	}
};




CSharpParser.Attributes_DropletFileContext = Attributes_DropletFileContext;

CSharpParser.prototype.attributes_DropletFile = function() {

    var localctx = new Attributes_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 722, CSharpParser.RULE_attributes_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4893; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4892;
            this.attribute_section();
            this.state = 4895; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===CSharpParser.OPEN_BRACKET);
        this.state = 4897;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_section_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_attribute_section_DropletFile;
    return this;
}

Attribute_section_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_section_DropletFileContext.prototype.constructor = Attribute_section_DropletFileContext;

Attribute_section_DropletFileContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Attribute_section_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Attribute_section_DropletFileContext.prototype.attribute_target = function() {
    return this.getTypedRuleContext(Attribute_targetContext,0);
};

Attribute_section_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAttribute_section_DropletFile(this);
	}
};

Attribute_section_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAttribute_section_DropletFile(this);
	}
};




CSharpParser.Attribute_section_DropletFileContext = Attribute_section_DropletFileContext;

CSharpParser.prototype.attribute_section_DropletFile = function() {

    var localctx = new Attribute_section_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 724, CSharpParser.RULE_attribute_section_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4899;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 4903;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,542,this._ctx);
        if(la_===1) {
            this.state = 4900;
            this.attribute_target();
            this.state = 4901;
            this.match(CSharpParser.COLON);

        }
        this.state = 4905;
        this.attribute_list();
        this.state = 4907;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COMMA) {
            this.state = 4906;
            this.match(CSharpParser.COMMA);
        }

        this.state = 4909;
        this.match(CSharpParser.CLOSE_BRACKET);
        this.state = 4910;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_target_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_attribute_target_DropletFile;
    return this;
}

Attribute_target_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_target_DropletFileContext.prototype.constructor = Attribute_target_DropletFileContext;

Attribute_target_DropletFileContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

Attribute_target_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Attribute_target_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Attribute_target_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAttribute_target_DropletFile(this);
	}
};

Attribute_target_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAttribute_target_DropletFile(this);
	}
};




CSharpParser.Attribute_target_DropletFileContext = Attribute_target_DropletFileContext;

CSharpParser.prototype.attribute_target_DropletFile = function() {

    var localctx = new Attribute_target_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 726, CSharpParser.RULE_attribute_target_DropletFile);
    try {
        this.state = 4918;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ABSTRACT:
        case CSharpParser.AS:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BREAK:
        case CSharpParser.BYTE:
        case CSharpParser.CASE:
        case CSharpParser.CATCH:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.CLASS:
        case CSharpParser.CONST:
        case CSharpParser.CONTINUE:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DO:
        case CSharpParser.DOUBLE:
        case CSharpParser.ELSE:
        case CSharpParser.ENUM:
        case CSharpParser.EVENT:
        case CSharpParser.EXPLICIT:
        case CSharpParser.EXTERN:
        case CSharpParser.FALSE:
        case CSharpParser.FINALLY:
        case CSharpParser.FIXED:
        case CSharpParser.FLOAT:
        case CSharpParser.FOR:
        case CSharpParser.FOREACH:
        case CSharpParser.GOTO:
        case CSharpParser.IF:
        case CSharpParser.IMPLICIT:
        case CSharpParser.IN:
        case CSharpParser.INT:
        case CSharpParser.INTERFACE:
        case CSharpParser.INTERNAL:
        case CSharpParser.IS:
        case CSharpParser.LOCK:
        case CSharpParser.LONG:
        case CSharpParser.NAMESPACE:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.OPERATOR:
        case CSharpParser.OUT:
        case CSharpParser.OVERRIDE:
        case CSharpParser.PARAMS:
        case CSharpParser.PRIVATE:
        case CSharpParser.PROTECTED:
        case CSharpParser.PUBLIC:
        case CSharpParser.READONLY:
        case CSharpParser.REF:
        case CSharpParser.RETURN:
        case CSharpParser.SBYTE:
        case CSharpParser.SEALED:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STACKALLOC:
        case CSharpParser.STATIC:
        case CSharpParser.STRING:
        case CSharpParser.STRUCT:
        case CSharpParser.SWITCH:
        case CSharpParser.THIS:
        case CSharpParser.THROW:
        case CSharpParser.TRUE:
        case CSharpParser.TRY:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.UNSAFE:
        case CSharpParser.USHORT:
        case CSharpParser.USING:
        case CSharpParser.VIRTUAL:
        case CSharpParser.VOID:
        case CSharpParser.VOLATILE:
        case CSharpParser.WHILE:
            this.enterOuterAlt(localctx, 1);
            this.state = 4912;
            this.keyword();
            this.state = 4913;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BY:
        case CSharpParser.DESCENDING:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.NAMEOF:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 4915;
            this.identifier();
            this.state = 4916;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_list_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_attribute_list_DropletFile;
    return this;
}

Attribute_list_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_list_DropletFileContext.prototype.constructor = Attribute_list_DropletFileContext;

Attribute_list_DropletFileContext.prototype.attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeContext);
    } else {
        return this.getTypedRuleContext(AttributeContext,i);
    }
};

Attribute_list_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Attribute_list_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAttribute_list_DropletFile(this);
	}
};

Attribute_list_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAttribute_list_DropletFile(this);
	}
};




CSharpParser.Attribute_list_DropletFileContext = Attribute_list_DropletFileContext;

CSharpParser.prototype.attribute_list_DropletFile = function() {

    var localctx = new Attribute_list_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 728, CSharpParser.RULE_attribute_list_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4920;
        this.attribute();
        this.state = 4925;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 4921;
            this.match(CSharpParser.COMMA);
            this.state = 4922;
            this.attribute();
            this.state = 4927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4928;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_attribute_DropletFile;
    return this;
}

Attribute_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_DropletFileContext.prototype.constructor = Attribute_DropletFileContext;

Attribute_DropletFileContext.prototype.namespace_or_type_name = function() {
    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
};

Attribute_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Attribute_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Attribute_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Attribute_DropletFileContext.prototype.attribute_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_argumentContext);
    } else {
        return this.getTypedRuleContext(Attribute_argumentContext,i);
    }
};

Attribute_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAttribute_DropletFile(this);
	}
};

Attribute_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAttribute_DropletFile(this);
	}
};




CSharpParser.Attribute_DropletFileContext = Attribute_DropletFileContext;

CSharpParser.prototype.attribute_DropletFile = function() {

    var localctx = new Attribute_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 730, CSharpParser.RULE_attribute_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4930;
        this.namespace_or_type_name();
        this.state = 4943;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_PARENS) {
            this.state = 4931;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 4940;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
                this.state = 4932;
                this.attribute_argument();
                this.state = 4937;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===CSharpParser.COMMA) {
                    this.state = 4933;
                    this.match(CSharpParser.COMMA);
                    this.state = 4934;
                    this.attribute_argument();
                    this.state = 4939;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 4942;
            this.match(CSharpParser.CLOSE_PARENS);
        }

        this.state = 4945;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_argument_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_attribute_argument_DropletFile;
    return this;
}

Attribute_argument_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_argument_DropletFileContext.prototype.constructor = Attribute_argument_DropletFileContext;

Attribute_argument_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Attribute_argument_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Attribute_argument_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Attribute_argument_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterAttribute_argument_DropletFile(this);
	}
};

Attribute_argument_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitAttribute_argument_DropletFile(this);
	}
};




CSharpParser.Attribute_argument_DropletFileContext = Attribute_argument_DropletFileContext;

CSharpParser.prototype.attribute_argument_DropletFile = function() {

    var localctx = new Attribute_argument_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 732, CSharpParser.RULE_attribute_argument_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4950;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,549,this._ctx);
        if(la_===1) {
            this.state = 4947;
            this.identifier();
            this.state = 4948;
            this.match(CSharpParser.COLON);

        }
        this.state = 4952;
        this.expression();
        this.state = 4953;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pointer_type_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_pointer_type_DropletFile;
    return this;
}

Pointer_type_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pointer_type_DropletFileContext.prototype.constructor = Pointer_type_DropletFileContext;

Pointer_type_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Pointer_type_DropletFileContext.prototype.simple_type = function() {
    return this.getTypedRuleContext(Simple_typeContext,0);
};

Pointer_type_DropletFileContext.prototype.class_type = function() {
    return this.getTypedRuleContext(Class_typeContext,0);
};

Pointer_type_DropletFileContext.prototype.rank_specifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rank_specifierContext);
    } else {
        return this.getTypedRuleContext(Rank_specifierContext,i);
    }
};

Pointer_type_DropletFileContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};

Pointer_type_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterPointer_type_DropletFile(this);
	}
};

Pointer_type_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitPointer_type_DropletFile(this);
	}
};




CSharpParser.Pointer_type_DropletFileContext = Pointer_type_DropletFileContext;

CSharpParser.prototype.pointer_type_DropletFile = function() {

    var localctx = new Pointer_type_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 734, CSharpParser.RULE_pointer_type_DropletFile);
    var _la = 0; // Token type
    try {
        this.state = 4972;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.DECIMAL:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.STRING:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 4957;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CSharpParser.BOOL:
            case CSharpParser.BYTE:
            case CSharpParser.CHAR:
            case CSharpParser.DECIMAL:
            case CSharpParser.DOUBLE:
            case CSharpParser.FLOAT:
            case CSharpParser.INT:
            case CSharpParser.LONG:
            case CSharpParser.SBYTE:
            case CSharpParser.SHORT:
            case CSharpParser.UINT:
            case CSharpParser.ULONG:
            case CSharpParser.USHORT:
                this.state = 4955;
                this.simple_type();
                break;
            case CSharpParser.ADD:
            case CSharpParser.ALIAS:
            case CSharpParser.ARGLIST:
            case CSharpParser.ASCENDING:
            case CSharpParser.ASYNC:
            case CSharpParser.AWAIT:
            case CSharpParser.BY:
            case CSharpParser.DESCENDING:
            case CSharpParser.DYNAMIC:
            case CSharpParser.EQUALS:
            case CSharpParser.FROM:
            case CSharpParser.GET:
            case CSharpParser.GROUP:
            case CSharpParser.INTO:
            case CSharpParser.JOIN:
            case CSharpParser.LET:
            case CSharpParser.NAMEOF:
            case CSharpParser.OBJECT:
            case CSharpParser.ON:
            case CSharpParser.ORDERBY:
            case CSharpParser.PARTIAL:
            case CSharpParser.REMOVE:
            case CSharpParser.SELECT:
            case CSharpParser.SET:
            case CSharpParser.STRING:
            case CSharpParser.VAR:
            case CSharpParser.WHEN:
            case CSharpParser.WHERE:
            case CSharpParser.YIELD:
            case CSharpParser.IDENTIFIER:
                this.state = 4956;
                this.class_type();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4963;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CSharpParser.OPEN_BRACKET || _la===CSharpParser.INTERR) {
                this.state = 4961;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CSharpParser.OPEN_BRACKET:
                    this.state = 4959;
                    this.rank_specifier();
                    break;
                case CSharpParser.INTERR:
                    this.state = 4960;
                    this.match(CSharpParser.INTERR);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 4965;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4966;
            this.match(CSharpParser.STAR);
            this.state = 4967;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.VOID:
            this.enterOuterAlt(localctx, 2);
            this.state = 4969;
            this.match(CSharpParser.VOID);
            this.state = 4970;
            this.match(CSharpParser.STAR);
            this.state = 4971;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fixed_pointer_declarators_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_fixed_pointer_declarators_DropletFile;
    return this;
}

Fixed_pointer_declarators_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fixed_pointer_declarators_DropletFileContext.prototype.constructor = Fixed_pointer_declarators_DropletFileContext;

Fixed_pointer_declarators_DropletFileContext.prototype.fixed_pointer_declarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Fixed_pointer_declaratorContext);
    } else {
        return this.getTypedRuleContext(Fixed_pointer_declaratorContext,i);
    }
};

Fixed_pointer_declarators_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Fixed_pointer_declarators_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixed_pointer_declarators_DropletFile(this);
	}
};

Fixed_pointer_declarators_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixed_pointer_declarators_DropletFile(this);
	}
};




CSharpParser.Fixed_pointer_declarators_DropletFileContext = Fixed_pointer_declarators_DropletFileContext;

CSharpParser.prototype.fixed_pointer_declarators_DropletFile = function() {

    var localctx = new Fixed_pointer_declarators_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 736, CSharpParser.RULE_fixed_pointer_declarators_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4974;
        this.fixed_pointer_declarator();
        this.state = 4979;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 4975;
            this.match(CSharpParser.COMMA);
            this.state = 4976;
            this.fixed_pointer_declarator();
            this.state = 4981;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4982;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fixed_pointer_declarator_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_fixed_pointer_declarator_DropletFile;
    return this;
}

Fixed_pointer_declarator_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fixed_pointer_declarator_DropletFileContext.prototype.constructor = Fixed_pointer_declarator_DropletFileContext;

Fixed_pointer_declarator_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Fixed_pointer_declarator_DropletFileContext.prototype.fixed_pointer_initializer = function() {
    return this.getTypedRuleContext(Fixed_pointer_initializerContext,0);
};

Fixed_pointer_declarator_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Fixed_pointer_declarator_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixed_pointer_declarator_DropletFile(this);
	}
};

Fixed_pointer_declarator_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixed_pointer_declarator_DropletFile(this);
	}
};




CSharpParser.Fixed_pointer_declarator_DropletFileContext = Fixed_pointer_declarator_DropletFileContext;

CSharpParser.prototype.fixed_pointer_declarator_DropletFile = function() {

    var localctx = new Fixed_pointer_declarator_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 738, CSharpParser.RULE_fixed_pointer_declarator_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4984;
        this.identifier();
        this.state = 4985;
        this.match(CSharpParser.ASSIGNMENT);
        this.state = 4986;
        this.fixed_pointer_initializer();
        this.state = 4987;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fixed_pointer_initializer_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_fixed_pointer_initializer_DropletFile;
    return this;
}

Fixed_pointer_initializer_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fixed_pointer_initializer_DropletFileContext.prototype.constructor = Fixed_pointer_initializer_DropletFileContext;

Fixed_pointer_initializer_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Fixed_pointer_initializer_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Fixed_pointer_initializer_DropletFileContext.prototype.local_variable_initializer_unsafe = function() {
    return this.getTypedRuleContext(Local_variable_initializer_unsafeContext,0);
};

Fixed_pointer_initializer_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixed_pointer_initializer_DropletFile(this);
	}
};

Fixed_pointer_initializer_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixed_pointer_initializer_DropletFile(this);
	}
};




CSharpParser.Fixed_pointer_initializer_DropletFileContext = Fixed_pointer_initializer_DropletFileContext;

CSharpParser.prototype.fixed_pointer_initializer_DropletFile = function() {

    var localctx = new Fixed_pointer_initializer_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 740, CSharpParser.RULE_fixed_pointer_initializer_DropletFile);
    try {
        this.state = 4998;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 4990;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,555,this._ctx);
            if(la_===1) {
                this.state = 4989;
                this.match(CSharpParser.AMP);

            }
            this.state = 4992;
            this.expression();
            this.state = 4993;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.STACKALLOC:
            this.enterOuterAlt(localctx, 2);
            this.state = 4995;
            this.local_variable_initializer_unsafe();
            this.state = 4996;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fixed_size_buffer_declarator_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_fixed_size_buffer_declarator_DropletFile;
    return this;
}

Fixed_size_buffer_declarator_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fixed_size_buffer_declarator_DropletFileContext.prototype.constructor = Fixed_size_buffer_declarator_DropletFileContext;

Fixed_size_buffer_declarator_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Fixed_size_buffer_declarator_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Fixed_size_buffer_declarator_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Fixed_size_buffer_declarator_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterFixed_size_buffer_declarator_DropletFile(this);
	}
};

Fixed_size_buffer_declarator_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitFixed_size_buffer_declarator_DropletFile(this);
	}
};




CSharpParser.Fixed_size_buffer_declarator_DropletFileContext = Fixed_size_buffer_declarator_DropletFileContext;

CSharpParser.prototype.fixed_size_buffer_declarator_DropletFile = function() {

    var localctx = new Fixed_size_buffer_declarator_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 742, CSharpParser.RULE_fixed_size_buffer_declarator_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5000;
        this.identifier();
        this.state = 5001;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 5002;
        this.expression();
        this.state = 5003;
        this.match(CSharpParser.CLOSE_BRACKET);
        this.state = 5004;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_variable_initializer_unsafe_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_local_variable_initializer_unsafe_DropletFile;
    return this;
}

Local_variable_initializer_unsafe_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_variable_initializer_unsafe_DropletFileContext.prototype.constructor = Local_variable_initializer_unsafe_DropletFileContext;

Local_variable_initializer_unsafe_DropletFileContext.prototype.STACKALLOC = function() {
    return this.getToken(CSharpParser.STACKALLOC, 0);
};

Local_variable_initializer_unsafe_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Local_variable_initializer_unsafe_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Local_variable_initializer_unsafe_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Local_variable_initializer_unsafe_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLocal_variable_initializer_unsafe_DropletFile(this);
	}
};

Local_variable_initializer_unsafe_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLocal_variable_initializer_unsafe_DropletFile(this);
	}
};




CSharpParser.Local_variable_initializer_unsafe_DropletFileContext = Local_variable_initializer_unsafe_DropletFileContext;

CSharpParser.prototype.local_variable_initializer_unsafe_DropletFile = function() {

    var localctx = new Local_variable_initializer_unsafe_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 744, CSharpParser.RULE_local_variable_initializer_unsafe_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5006;
        this.match(CSharpParser.STACKALLOC);
        this.state = 5007;
        this.var_type();
        this.state = 5008;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 5009;
        this.expression();
        this.state = 5010;
        this.match(CSharpParser.CLOSE_BRACKET);
        this.state = 5011;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Right_arrow_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_right_arrow_DropletFile;
    this.first = null; // Token
    this.second = null; // Token
    return this;
}

Right_arrow_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Right_arrow_DropletFileContext.prototype.constructor = Right_arrow_DropletFileContext;

Right_arrow_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Right_arrow_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterRight_arrow_DropletFile(this);
	}
};

Right_arrow_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitRight_arrow_DropletFile(this);
	}
};




CSharpParser.Right_arrow_DropletFileContext = Right_arrow_DropletFileContext;

CSharpParser.prototype.right_arrow_DropletFile = function() {

    var localctx = new Right_arrow_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 746, CSharpParser.RULE_right_arrow_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5013;
        localctx.first = this.match(CSharpParser.ASSIGNMENT);
        this.state = 5014;
        localctx.second = this.match(CSharpParser.GT);
        this.state = 5015;
        if (!( (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex))) {
            throw new antlr4.error.FailedPredicateException(this, "$first.index + 1 == $second.index");
        }
        this.state = 5016;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Right_shift_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_right_shift_DropletFile;
    this.first = null; // Token
    this.second = null; // Token
    return this;
}

Right_shift_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Right_shift_DropletFileContext.prototype.constructor = Right_shift_DropletFileContext;

Right_shift_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Right_shift_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterRight_shift_DropletFile(this);
	}
};

Right_shift_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitRight_shift_DropletFile(this);
	}
};




CSharpParser.Right_shift_DropletFileContext = Right_shift_DropletFileContext;

CSharpParser.prototype.right_shift_DropletFile = function() {

    var localctx = new Right_shift_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 748, CSharpParser.RULE_right_shift_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5018;
        localctx.first = this.match(CSharpParser.GT);
        this.state = 5019;
        localctx.second = this.match(CSharpParser.GT);
        this.state = 5020;
        if (!( (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex))) {
            throw new antlr4.error.FailedPredicateException(this, "$first.index + 1 == $second.index");
        }
        this.state = 5021;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Right_shift_assignment_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_right_shift_assignment_DropletFile;
    this.first = null; // Token
    this.second = null; // Token
    return this;
}

Right_shift_assignment_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Right_shift_assignment_DropletFileContext.prototype.constructor = Right_shift_assignment_DropletFileContext;

Right_shift_assignment_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Right_shift_assignment_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterRight_shift_assignment_DropletFile(this);
	}
};

Right_shift_assignment_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitRight_shift_assignment_DropletFile(this);
	}
};




CSharpParser.Right_shift_assignment_DropletFileContext = Right_shift_assignment_DropletFileContext;

CSharpParser.prototype.right_shift_assignment_DropletFile = function() {

    var localctx = new Right_shift_assignment_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 750, CSharpParser.RULE_right_shift_assignment_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5023;
        localctx.first = this.match(CSharpParser.GT);
        this.state = 5024;
        localctx.second = this.match(CSharpParser.OP_GE);
        this.state = 5025;
        if (!( (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex))) {
            throw new antlr4.error.FailedPredicateException(this, "$first.index + 1 == $second.index");
        }
        this.state = 5026;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_literal_DropletFile;
    return this;
}

Literal_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_DropletFileContext.prototype.constructor = Literal_DropletFileContext;

Literal_DropletFileContext.prototype.boolean_literal = function() {
    return this.getTypedRuleContext(Boolean_literalContext,0);
};

Literal_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Literal_DropletFileContext.prototype.string_literal = function() {
    return this.getTypedRuleContext(String_literalContext,0);
};

Literal_DropletFileContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(CSharpParser.INTEGER_LITERAL, 0);
};

Literal_DropletFileContext.prototype.HEX_INTEGER_LITERAL = function() {
    return this.getToken(CSharpParser.HEX_INTEGER_LITERAL, 0);
};

Literal_DropletFileContext.prototype.REAL_LITERAL = function() {
    return this.getToken(CSharpParser.REAL_LITERAL, 0);
};

Literal_DropletFileContext.prototype.CHARACTER_LITERAL = function() {
    return this.getToken(CSharpParser.CHARACTER_LITERAL, 0);
};

Literal_DropletFileContext.prototype.NULL = function() {
    return this.getToken(CSharpParser.NULL, 0);
};

Literal_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterLiteral_DropletFile(this);
	}
};

Literal_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitLiteral_DropletFile(this);
	}
};




CSharpParser.Literal_DropletFileContext = Literal_DropletFileContext;

CSharpParser.prototype.literal_DropletFile = function() {

    var localctx = new Literal_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 752, CSharpParser.RULE_literal_DropletFile);
    try {
        this.state = 5044;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.FALSE:
        case CSharpParser.TRUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 5028;
            this.boolean_literal();
            this.state = 5029;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
            this.enterOuterAlt(localctx, 2);
            this.state = 5031;
            this.string_literal();
            this.state = 5032;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.INTEGER_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 5034;
            this.match(CSharpParser.INTEGER_LITERAL);
            this.state = 5035;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.HEX_INTEGER_LITERAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 5036;
            this.match(CSharpParser.HEX_INTEGER_LITERAL);
            this.state = 5037;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.REAL_LITERAL:
            this.enterOuterAlt(localctx, 5);
            this.state = 5038;
            this.match(CSharpParser.REAL_LITERAL);
            this.state = 5039;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.CHARACTER_LITERAL:
            this.enterOuterAlt(localctx, 6);
            this.state = 5040;
            this.match(CSharpParser.CHARACTER_LITERAL);
            this.state = 5041;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.NULL:
            this.enterOuterAlt(localctx, 7);
            this.state = 5042;
            this.match(CSharpParser.NULL);
            this.state = 5043;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_literal_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_boolean_literal_DropletFile;
    return this;
}

Boolean_literal_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_literal_DropletFileContext.prototype.constructor = Boolean_literal_DropletFileContext;

Boolean_literal_DropletFileContext.prototype.TRUE = function() {
    return this.getToken(CSharpParser.TRUE, 0);
};

Boolean_literal_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Boolean_literal_DropletFileContext.prototype.FALSE = function() {
    return this.getToken(CSharpParser.FALSE, 0);
};

Boolean_literal_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterBoolean_literal_DropletFile(this);
	}
};

Boolean_literal_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitBoolean_literal_DropletFile(this);
	}
};




CSharpParser.Boolean_literal_DropletFileContext = Boolean_literal_DropletFileContext;

CSharpParser.prototype.boolean_literal_DropletFile = function() {

    var localctx = new Boolean_literal_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 754, CSharpParser.RULE_boolean_literal_DropletFile);
    try {
        this.state = 5050;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.TRUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 5046;
            this.match(CSharpParser.TRUE);
            this.state = 5047;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.FALSE:
            this.enterOuterAlt(localctx, 2);
            this.state = 5048;
            this.match(CSharpParser.FALSE);
            this.state = 5049;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function String_literal_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_string_literal_DropletFile;
    return this;
}

String_literal_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_literal_DropletFileContext.prototype.constructor = String_literal_DropletFileContext;

String_literal_DropletFileContext.prototype.interpolated_regular_string = function() {
    return this.getTypedRuleContext(Interpolated_regular_stringContext,0);
};

String_literal_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

String_literal_DropletFileContext.prototype.interpolated_verbatium_string = function() {
    return this.getTypedRuleContext(Interpolated_verbatium_stringContext,0);
};

String_literal_DropletFileContext.prototype.REGULAR_STRING = function() {
    return this.getToken(CSharpParser.REGULAR_STRING, 0);
};

String_literal_DropletFileContext.prototype.VERBATIUM_STRING = function() {
    return this.getToken(CSharpParser.VERBATIUM_STRING, 0);
};

String_literal_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterString_literal_DropletFile(this);
	}
};

String_literal_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitString_literal_DropletFile(this);
	}
};




CSharpParser.String_literal_DropletFileContext = String_literal_DropletFileContext;

CSharpParser.prototype.string_literal_DropletFile = function() {

    var localctx = new String_literal_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 756, CSharpParser.RULE_string_literal_DropletFile);
    try {
        this.state = 5062;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
            this.enterOuterAlt(localctx, 1);
            this.state = 5052;
            this.interpolated_regular_string();
            this.state = 5053;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
            this.enterOuterAlt(localctx, 2);
            this.state = 5055;
            this.interpolated_verbatium_string();
            this.state = 5056;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.REGULAR_STRING:
            this.enterOuterAlt(localctx, 3);
            this.state = 5058;
            this.match(CSharpParser.REGULAR_STRING);
            this.state = 5059;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.VERBATIUM_STRING:
            this.enterOuterAlt(localctx, 4);
            this.state = 5060;
            this.match(CSharpParser.VERBATIUM_STRING);
            this.state = 5061;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interpolated_regular_string_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interpolated_regular_string_DropletFile;
    return this;
}

Interpolated_regular_string_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interpolated_regular_string_DropletFileContext.prototype.constructor = Interpolated_regular_string_DropletFileContext;

Interpolated_regular_string_DropletFileContext.prototype.INTERPOLATED_REGULAR_STRING_START = function() {
    return this.getToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0);
};

Interpolated_regular_string_DropletFileContext.prototype.DOUBLE_QUOTE_INSIDE = function() {
    return this.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0);
};

Interpolated_regular_string_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Interpolated_regular_string_DropletFileContext.prototype.interpolated_regular_string_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interpolated_regular_string_partContext);
    } else {
        return this.getTypedRuleContext(Interpolated_regular_string_partContext,i);
    }
};

Interpolated_regular_string_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterpolated_regular_string_DropletFile(this);
	}
};

Interpolated_regular_string_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterpolated_regular_string_DropletFile(this);
	}
};




CSharpParser.Interpolated_regular_string_DropletFileContext = Interpolated_regular_string_DropletFileContext;

CSharpParser.prototype.interpolated_regular_string_DropletFile = function() {

    var localctx = new Interpolated_regular_string_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 758, CSharpParser.RULE_interpolated_regular_string_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5064;
        this.match(CSharpParser.INTERPOLATED_REGULAR_STRING_START);
        this.state = 5068;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (CSharpParser.DOUBLE_CURLY_INSIDE - 167)) | (1 << (CSharpParser.REGULAR_CHAR_INSIDE - 167)) | (1 << (CSharpParser.REGULAR_STRING_INSIDE - 167)))) !== 0)) {
            this.state = 5065;
            this.interpolated_regular_string_part();
            this.state = 5070;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5071;
        this.match(CSharpParser.DOUBLE_QUOTE_INSIDE);
        this.state = 5072;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interpolated_verbatium_string_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interpolated_verbatium_string_DropletFile;
    return this;
}

Interpolated_verbatium_string_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interpolated_verbatium_string_DropletFileContext.prototype.constructor = Interpolated_verbatium_string_DropletFileContext;

Interpolated_verbatium_string_DropletFileContext.prototype.INTERPOLATED_VERBATIUM_STRING_START = function() {
    return this.getToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0);
};

Interpolated_verbatium_string_DropletFileContext.prototype.DOUBLE_QUOTE_INSIDE = function() {
    return this.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0);
};

Interpolated_verbatium_string_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Interpolated_verbatium_string_DropletFileContext.prototype.interpolated_verbatium_string_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interpolated_verbatium_string_partContext);
    } else {
        return this.getTypedRuleContext(Interpolated_verbatium_string_partContext,i);
    }
};

Interpolated_verbatium_string_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterpolated_verbatium_string_DropletFile(this);
	}
};

Interpolated_verbatium_string_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterpolated_verbatium_string_DropletFile(this);
	}
};




CSharpParser.Interpolated_verbatium_string_DropletFileContext = Interpolated_verbatium_string_DropletFileContext;

CSharpParser.prototype.interpolated_verbatium_string_DropletFile = function() {

    var localctx = new Interpolated_verbatium_string_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 760, CSharpParser.RULE_interpolated_verbatium_string_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5074;
        this.match(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START);
        this.state = 5078;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (CSharpParser.DOUBLE_CURLY_INSIDE - 167)) | (1 << (CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE - 167)) | (1 << (CSharpParser.VERBATIUM_INSIDE_STRING - 167)))) !== 0)) {
            this.state = 5075;
            this.interpolated_verbatium_string_part();
            this.state = 5080;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5081;
        this.match(CSharpParser.DOUBLE_QUOTE_INSIDE);
        this.state = 5082;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interpolated_regular_string_part_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interpolated_regular_string_part_DropletFile;
    return this;
}

Interpolated_regular_string_part_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interpolated_regular_string_part_DropletFileContext.prototype.constructor = Interpolated_regular_string_part_DropletFileContext;

Interpolated_regular_string_part_DropletFileContext.prototype.interpolated_string_expression = function() {
    return this.getTypedRuleContext(Interpolated_string_expressionContext,0);
};

Interpolated_regular_string_part_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Interpolated_regular_string_part_DropletFileContext.prototype.DOUBLE_CURLY_INSIDE = function() {
    return this.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0);
};

Interpolated_regular_string_part_DropletFileContext.prototype.REGULAR_CHAR_INSIDE = function() {
    return this.getToken(CSharpParser.REGULAR_CHAR_INSIDE, 0);
};

Interpolated_regular_string_part_DropletFileContext.prototype.REGULAR_STRING_INSIDE = function() {
    return this.getToken(CSharpParser.REGULAR_STRING_INSIDE, 0);
};

Interpolated_regular_string_part_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterpolated_regular_string_part_DropletFile(this);
	}
};

Interpolated_regular_string_part_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterpolated_regular_string_part_DropletFile(this);
	}
};




CSharpParser.Interpolated_regular_string_part_DropletFileContext = Interpolated_regular_string_part_DropletFileContext;

CSharpParser.prototype.interpolated_regular_string_part_DropletFile = function() {

    var localctx = new Interpolated_regular_string_part_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 762, CSharpParser.RULE_interpolated_regular_string_part_DropletFile);
    try {
        this.state = 5093;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 5084;
            this.interpolated_string_expression();
            this.state = 5085;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DOUBLE_CURLY_INSIDE:
            this.enterOuterAlt(localctx, 2);
            this.state = 5087;
            this.match(CSharpParser.DOUBLE_CURLY_INSIDE);
            this.state = 5088;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.REGULAR_CHAR_INSIDE:
            this.enterOuterAlt(localctx, 3);
            this.state = 5089;
            this.match(CSharpParser.REGULAR_CHAR_INSIDE);
            this.state = 5090;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.REGULAR_STRING_INSIDE:
            this.enterOuterAlt(localctx, 4);
            this.state = 5091;
            this.match(CSharpParser.REGULAR_STRING_INSIDE);
            this.state = 5092;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interpolated_verbatium_string_part_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interpolated_verbatium_string_part_DropletFile;
    return this;
}

Interpolated_verbatium_string_part_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interpolated_verbatium_string_part_DropletFileContext.prototype.constructor = Interpolated_verbatium_string_part_DropletFileContext;

Interpolated_verbatium_string_part_DropletFileContext.prototype.interpolated_string_expression = function() {
    return this.getTypedRuleContext(Interpolated_string_expressionContext,0);
};

Interpolated_verbatium_string_part_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Interpolated_verbatium_string_part_DropletFileContext.prototype.DOUBLE_CURLY_INSIDE = function() {
    return this.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0);
};

Interpolated_verbatium_string_part_DropletFileContext.prototype.VERBATIUM_DOUBLE_QUOTE_INSIDE = function() {
    return this.getToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0);
};

Interpolated_verbatium_string_part_DropletFileContext.prototype.VERBATIUM_INSIDE_STRING = function() {
    return this.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0);
};

Interpolated_verbatium_string_part_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterpolated_verbatium_string_part_DropletFile(this);
	}
};

Interpolated_verbatium_string_part_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterpolated_verbatium_string_part_DropletFile(this);
	}
};




CSharpParser.Interpolated_verbatium_string_part_DropletFileContext = Interpolated_verbatium_string_part_DropletFileContext;

CSharpParser.prototype.interpolated_verbatium_string_part_DropletFile = function() {

    var localctx = new Interpolated_verbatium_string_part_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 764, CSharpParser.RULE_interpolated_verbatium_string_part_DropletFile);
    try {
        this.state = 5104;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ADD:
        case CSharpParser.ALIAS:
        case CSharpParser.ARGLIST:
        case CSharpParser.ASCENDING:
        case CSharpParser.ASYNC:
        case CSharpParser.AWAIT:
        case CSharpParser.BASE:
        case CSharpParser.BOOL:
        case CSharpParser.BY:
        case CSharpParser.BYTE:
        case CSharpParser.CHAR:
        case CSharpParser.CHECKED:
        case CSharpParser.DECIMAL:
        case CSharpParser.DEFAULT:
        case CSharpParser.DELEGATE:
        case CSharpParser.DESCENDING:
        case CSharpParser.DOUBLE:
        case CSharpParser.DYNAMIC:
        case CSharpParser.EQUALS:
        case CSharpParser.FALSE:
        case CSharpParser.FLOAT:
        case CSharpParser.FROM:
        case CSharpParser.GET:
        case CSharpParser.GROUP:
        case CSharpParser.INT:
        case CSharpParser.INTO:
        case CSharpParser.JOIN:
        case CSharpParser.LET:
        case CSharpParser.LONG:
        case CSharpParser.NAMEOF:
        case CSharpParser.NEW:
        case CSharpParser.NULL:
        case CSharpParser.OBJECT:
        case CSharpParser.ON:
        case CSharpParser.ORDERBY:
        case CSharpParser.PARTIAL:
        case CSharpParser.REMOVE:
        case CSharpParser.SBYTE:
        case CSharpParser.SELECT:
        case CSharpParser.SET:
        case CSharpParser.SHORT:
        case CSharpParser.SIZEOF:
        case CSharpParser.STRING:
        case CSharpParser.THIS:
        case CSharpParser.TRUE:
        case CSharpParser.TYPEOF:
        case CSharpParser.UINT:
        case CSharpParser.ULONG:
        case CSharpParser.UNCHECKED:
        case CSharpParser.USHORT:
        case CSharpParser.VAR:
        case CSharpParser.WHEN:
        case CSharpParser.WHERE:
        case CSharpParser.YIELD:
        case CSharpParser.IDENTIFIER:
        case CSharpParser.LITERAL_ACCESS:
        case CSharpParser.INTEGER_LITERAL:
        case CSharpParser.HEX_INTEGER_LITERAL:
        case CSharpParser.REAL_LITERAL:
        case CSharpParser.CHARACTER_LITERAL:
        case CSharpParser.REGULAR_STRING:
        case CSharpParser.VERBATIUM_STRING:
        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser.OPEN_PARENS:
        case CSharpParser.PLUS:
        case CSharpParser.MINUS:
        case CSharpParser.STAR:
        case CSharpParser.AMP:
        case CSharpParser.BANG:
        case CSharpParser.TILDE:
        case CSharpParser.OP_INC:
        case CSharpParser.OP_DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 5095;
            this.interpolated_string_expression();
            this.state = 5096;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DOUBLE_CURLY_INSIDE:
            this.enterOuterAlt(localctx, 2);
            this.state = 5098;
            this.match(CSharpParser.DOUBLE_CURLY_INSIDE);
            this.state = 5099;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE:
            this.enterOuterAlt(localctx, 3);
            this.state = 5100;
            this.match(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE);
            this.state = 5101;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.VERBATIUM_INSIDE_STRING:
            this.enterOuterAlt(localctx, 4);
            this.state = 5102;
            this.match(CSharpParser.VERBATIUM_INSIDE_STRING);
            this.state = 5103;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interpolated_string_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interpolated_string_expression_DropletFile;
    return this;
}

Interpolated_string_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interpolated_string_expression_DropletFileContext.prototype.constructor = Interpolated_string_expression_DropletFileContext;

Interpolated_string_expression_DropletFileContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Interpolated_string_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Interpolated_string_expression_DropletFileContext.prototype.FORMAT_STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CSharpParser.FORMAT_STRING);
    } else {
        return this.getToken(CSharpParser.FORMAT_STRING, i);
    }
};


Interpolated_string_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterpolated_string_expression_DropletFile(this);
	}
};

Interpolated_string_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterpolated_string_expression_DropletFile(this);
	}
};




CSharpParser.Interpolated_string_expression_DropletFileContext = Interpolated_string_expression_DropletFileContext;

CSharpParser.prototype.interpolated_string_expression_DropletFile = function() {

    var localctx = new Interpolated_string_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 766, CSharpParser.RULE_interpolated_string_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5106;
        this.expression();
        this.state = 5111;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.COMMA) {
            this.state = 5107;
            this.match(CSharpParser.COMMA);
            this.state = 5108;
            this.expression();
            this.state = 5113;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5120;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COLON) {
            this.state = 5114;
            this.match(CSharpParser.COLON);
            this.state = 5116; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 5115;
                this.match(CSharpParser.FORMAT_STRING);
                this.state = 5118; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===CSharpParser.FORMAT_STRING);
        }

        this.state = 5122;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Keyword_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_keyword_DropletFile;
    return this;
}

Keyword_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Keyword_DropletFileContext.prototype.constructor = Keyword_DropletFileContext;

Keyword_DropletFileContext.prototype.ABSTRACT = function() {
    return this.getToken(CSharpParser.ABSTRACT, 0);
};

Keyword_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Keyword_DropletFileContext.prototype.AS = function() {
    return this.getToken(CSharpParser.AS, 0);
};

Keyword_DropletFileContext.prototype.BASE = function() {
    return this.getToken(CSharpParser.BASE, 0);
};

Keyword_DropletFileContext.prototype.BOOL = function() {
    return this.getToken(CSharpParser.BOOL, 0);
};

Keyword_DropletFileContext.prototype.BREAK = function() {
    return this.getToken(CSharpParser.BREAK, 0);
};

Keyword_DropletFileContext.prototype.BYTE = function() {
    return this.getToken(CSharpParser.BYTE, 0);
};

Keyword_DropletFileContext.prototype.CASE = function() {
    return this.getToken(CSharpParser.CASE, 0);
};

Keyword_DropletFileContext.prototype.CATCH = function() {
    return this.getToken(CSharpParser.CATCH, 0);
};

Keyword_DropletFileContext.prototype.CHAR = function() {
    return this.getToken(CSharpParser.CHAR, 0);
};

Keyword_DropletFileContext.prototype.CHECKED = function() {
    return this.getToken(CSharpParser.CHECKED, 0);
};

Keyword_DropletFileContext.prototype.CLASS = function() {
    return this.getToken(CSharpParser.CLASS, 0);
};

Keyword_DropletFileContext.prototype.CONST = function() {
    return this.getToken(CSharpParser.CONST, 0);
};

Keyword_DropletFileContext.prototype.CONTINUE = function() {
    return this.getToken(CSharpParser.CONTINUE, 0);
};

Keyword_DropletFileContext.prototype.DECIMAL = function() {
    return this.getToken(CSharpParser.DECIMAL, 0);
};

Keyword_DropletFileContext.prototype.DEFAULT = function() {
    return this.getToken(CSharpParser.DEFAULT, 0);
};

Keyword_DropletFileContext.prototype.DELEGATE = function() {
    return this.getToken(CSharpParser.DELEGATE, 0);
};

Keyword_DropletFileContext.prototype.DO = function() {
    return this.getToken(CSharpParser.DO, 0);
};

Keyword_DropletFileContext.prototype.DOUBLE = function() {
    return this.getToken(CSharpParser.DOUBLE, 0);
};

Keyword_DropletFileContext.prototype.ELSE = function() {
    return this.getToken(CSharpParser.ELSE, 0);
};

Keyword_DropletFileContext.prototype.ENUM = function() {
    return this.getToken(CSharpParser.ENUM, 0);
};

Keyword_DropletFileContext.prototype.EVENT = function() {
    return this.getToken(CSharpParser.EVENT, 0);
};

Keyword_DropletFileContext.prototype.EXPLICIT = function() {
    return this.getToken(CSharpParser.EXPLICIT, 0);
};

Keyword_DropletFileContext.prototype.EXTERN = function() {
    return this.getToken(CSharpParser.EXTERN, 0);
};

Keyword_DropletFileContext.prototype.FALSE = function() {
    return this.getToken(CSharpParser.FALSE, 0);
};

Keyword_DropletFileContext.prototype.FINALLY = function() {
    return this.getToken(CSharpParser.FINALLY, 0);
};

Keyword_DropletFileContext.prototype.FIXED = function() {
    return this.getToken(CSharpParser.FIXED, 0);
};

Keyword_DropletFileContext.prototype.FLOAT = function() {
    return this.getToken(CSharpParser.FLOAT, 0);
};

Keyword_DropletFileContext.prototype.FOR = function() {
    return this.getToken(CSharpParser.FOR, 0);
};

Keyword_DropletFileContext.prototype.FOREACH = function() {
    return this.getToken(CSharpParser.FOREACH, 0);
};

Keyword_DropletFileContext.prototype.GOTO = function() {
    return this.getToken(CSharpParser.GOTO, 0);
};

Keyword_DropletFileContext.prototype.IF = function() {
    return this.getToken(CSharpParser.IF, 0);
};

Keyword_DropletFileContext.prototype.IMPLICIT = function() {
    return this.getToken(CSharpParser.IMPLICIT, 0);
};

Keyword_DropletFileContext.prototype.IN = function() {
    return this.getToken(CSharpParser.IN, 0);
};

Keyword_DropletFileContext.prototype.INT = function() {
    return this.getToken(CSharpParser.INT, 0);
};

Keyword_DropletFileContext.prototype.INTERFACE = function() {
    return this.getToken(CSharpParser.INTERFACE, 0);
};

Keyword_DropletFileContext.prototype.INTERNAL = function() {
    return this.getToken(CSharpParser.INTERNAL, 0);
};

Keyword_DropletFileContext.prototype.IS = function() {
    return this.getToken(CSharpParser.IS, 0);
};

Keyword_DropletFileContext.prototype.LOCK = function() {
    return this.getToken(CSharpParser.LOCK, 0);
};

Keyword_DropletFileContext.prototype.LONG = function() {
    return this.getToken(CSharpParser.LONG, 0);
};

Keyword_DropletFileContext.prototype.NAMESPACE = function() {
    return this.getToken(CSharpParser.NAMESPACE, 0);
};

Keyword_DropletFileContext.prototype.NEW = function() {
    return this.getToken(CSharpParser.NEW, 0);
};

Keyword_DropletFileContext.prototype.NULL = function() {
    return this.getToken(CSharpParser.NULL, 0);
};

Keyword_DropletFileContext.prototype.OBJECT = function() {
    return this.getToken(CSharpParser.OBJECT, 0);
};

Keyword_DropletFileContext.prototype.OPERATOR = function() {
    return this.getToken(CSharpParser.OPERATOR, 0);
};

Keyword_DropletFileContext.prototype.OUT = function() {
    return this.getToken(CSharpParser.OUT, 0);
};

Keyword_DropletFileContext.prototype.OVERRIDE = function() {
    return this.getToken(CSharpParser.OVERRIDE, 0);
};

Keyword_DropletFileContext.prototype.PARAMS = function() {
    return this.getToken(CSharpParser.PARAMS, 0);
};

Keyword_DropletFileContext.prototype.PRIVATE = function() {
    return this.getToken(CSharpParser.PRIVATE, 0);
};

Keyword_DropletFileContext.prototype.PROTECTED = function() {
    return this.getToken(CSharpParser.PROTECTED, 0);
};

Keyword_DropletFileContext.prototype.PUBLIC = function() {
    return this.getToken(CSharpParser.PUBLIC, 0);
};

Keyword_DropletFileContext.prototype.READONLY = function() {
    return this.getToken(CSharpParser.READONLY, 0);
};

Keyword_DropletFileContext.prototype.REF = function() {
    return this.getToken(CSharpParser.REF, 0);
};

Keyword_DropletFileContext.prototype.RETURN = function() {
    return this.getToken(CSharpParser.RETURN, 0);
};

Keyword_DropletFileContext.prototype.SBYTE = function() {
    return this.getToken(CSharpParser.SBYTE, 0);
};

Keyword_DropletFileContext.prototype.SEALED = function() {
    return this.getToken(CSharpParser.SEALED, 0);
};

Keyword_DropletFileContext.prototype.SHORT = function() {
    return this.getToken(CSharpParser.SHORT, 0);
};

Keyword_DropletFileContext.prototype.SIZEOF = function() {
    return this.getToken(CSharpParser.SIZEOF, 0);
};

Keyword_DropletFileContext.prototype.STACKALLOC = function() {
    return this.getToken(CSharpParser.STACKALLOC, 0);
};

Keyword_DropletFileContext.prototype.STATIC = function() {
    return this.getToken(CSharpParser.STATIC, 0);
};

Keyword_DropletFileContext.prototype.STRING = function() {
    return this.getToken(CSharpParser.STRING, 0);
};

Keyword_DropletFileContext.prototype.STRUCT = function() {
    return this.getToken(CSharpParser.STRUCT, 0);
};

Keyword_DropletFileContext.prototype.SWITCH = function() {
    return this.getToken(CSharpParser.SWITCH, 0);
};

Keyword_DropletFileContext.prototype.THIS = function() {
    return this.getToken(CSharpParser.THIS, 0);
};

Keyword_DropletFileContext.prototype.THROW = function() {
    return this.getToken(CSharpParser.THROW, 0);
};

Keyword_DropletFileContext.prototype.TRUE = function() {
    return this.getToken(CSharpParser.TRUE, 0);
};

Keyword_DropletFileContext.prototype.TRY = function() {
    return this.getToken(CSharpParser.TRY, 0);
};

Keyword_DropletFileContext.prototype.TYPEOF = function() {
    return this.getToken(CSharpParser.TYPEOF, 0);
};

Keyword_DropletFileContext.prototype.UINT = function() {
    return this.getToken(CSharpParser.UINT, 0);
};

Keyword_DropletFileContext.prototype.ULONG = function() {
    return this.getToken(CSharpParser.ULONG, 0);
};

Keyword_DropletFileContext.prototype.UNCHECKED = function() {
    return this.getToken(CSharpParser.UNCHECKED, 0);
};

Keyword_DropletFileContext.prototype.UNSAFE = function() {
    return this.getToken(CSharpParser.UNSAFE, 0);
};

Keyword_DropletFileContext.prototype.USHORT = function() {
    return this.getToken(CSharpParser.USHORT, 0);
};

Keyword_DropletFileContext.prototype.USING = function() {
    return this.getToken(CSharpParser.USING, 0);
};

Keyword_DropletFileContext.prototype.VIRTUAL = function() {
    return this.getToken(CSharpParser.VIRTUAL, 0);
};

Keyword_DropletFileContext.prototype.VOID = function() {
    return this.getToken(CSharpParser.VOID, 0);
};

Keyword_DropletFileContext.prototype.VOLATILE = function() {
    return this.getToken(CSharpParser.VOLATILE, 0);
};

Keyword_DropletFileContext.prototype.WHILE = function() {
    return this.getToken(CSharpParser.WHILE, 0);
};

Keyword_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterKeyword_DropletFile(this);
	}
};

Keyword_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitKeyword_DropletFile(this);
	}
};




CSharpParser.Keyword_DropletFileContext = Keyword_DropletFileContext;

CSharpParser.prototype.keyword_DropletFile = function() {

    var localctx = new Keyword_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 768, CSharpParser.RULE_keyword_DropletFile);
    try {
        this.state = 5278;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.ABSTRACT:
            this.enterOuterAlt(localctx, 1);
            this.state = 5124;
            this.match(CSharpParser.ABSTRACT);
            this.state = 5125;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.AS:
            this.enterOuterAlt(localctx, 2);
            this.state = 5126;
            this.match(CSharpParser.AS);
            this.state = 5127;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.BASE:
            this.enterOuterAlt(localctx, 3);
            this.state = 5128;
            this.match(CSharpParser.BASE);
            this.state = 5129;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.BOOL:
            this.enterOuterAlt(localctx, 4);
            this.state = 5130;
            this.match(CSharpParser.BOOL);
            this.state = 5131;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.BREAK:
            this.enterOuterAlt(localctx, 5);
            this.state = 5132;
            this.match(CSharpParser.BREAK);
            this.state = 5133;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.BYTE:
            this.enterOuterAlt(localctx, 6);
            this.state = 5134;
            this.match(CSharpParser.BYTE);
            this.state = 5135;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.CASE:
            this.enterOuterAlt(localctx, 7);
            this.state = 5136;
            this.match(CSharpParser.CASE);
            this.state = 5137;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.CATCH:
            this.enterOuterAlt(localctx, 8);
            this.state = 5138;
            this.match(CSharpParser.CATCH);
            this.state = 5139;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.CHAR:
            this.enterOuterAlt(localctx, 9);
            this.state = 5140;
            this.match(CSharpParser.CHAR);
            this.state = 5141;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.CHECKED:
            this.enterOuterAlt(localctx, 10);
            this.state = 5142;
            this.match(CSharpParser.CHECKED);
            this.state = 5143;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.CLASS:
            this.enterOuterAlt(localctx, 11);
            this.state = 5144;
            this.match(CSharpParser.CLASS);
            this.state = 5145;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.CONST:
            this.enterOuterAlt(localctx, 12);
            this.state = 5146;
            this.match(CSharpParser.CONST);
            this.state = 5147;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.CONTINUE:
            this.enterOuterAlt(localctx, 13);
            this.state = 5148;
            this.match(CSharpParser.CONTINUE);
            this.state = 5149;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DECIMAL:
            this.enterOuterAlt(localctx, 14);
            this.state = 5150;
            this.match(CSharpParser.DECIMAL);
            this.state = 5151;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DEFAULT:
            this.enterOuterAlt(localctx, 15);
            this.state = 5152;
            this.match(CSharpParser.DEFAULT);
            this.state = 5153;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DELEGATE:
            this.enterOuterAlt(localctx, 16);
            this.state = 5154;
            this.match(CSharpParser.DELEGATE);
            this.state = 5155;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DO:
            this.enterOuterAlt(localctx, 17);
            this.state = 5156;
            this.match(CSharpParser.DO);
            this.state = 5157;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DOUBLE:
            this.enterOuterAlt(localctx, 18);
            this.state = 5158;
            this.match(CSharpParser.DOUBLE);
            this.state = 5159;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ELSE:
            this.enterOuterAlt(localctx, 19);
            this.state = 5160;
            this.match(CSharpParser.ELSE);
            this.state = 5161;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ENUM:
            this.enterOuterAlt(localctx, 20);
            this.state = 5162;
            this.match(CSharpParser.ENUM);
            this.state = 5163;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.EVENT:
            this.enterOuterAlt(localctx, 21);
            this.state = 5164;
            this.match(CSharpParser.EVENT);
            this.state = 5165;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.EXPLICIT:
            this.enterOuterAlt(localctx, 22);
            this.state = 5166;
            this.match(CSharpParser.EXPLICIT);
            this.state = 5167;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.EXTERN:
            this.enterOuterAlt(localctx, 23);
            this.state = 5168;
            this.match(CSharpParser.EXTERN);
            this.state = 5169;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.FALSE:
            this.enterOuterAlt(localctx, 24);
            this.state = 5170;
            this.match(CSharpParser.FALSE);
            this.state = 5171;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.FINALLY:
            this.enterOuterAlt(localctx, 25);
            this.state = 5172;
            this.match(CSharpParser.FINALLY);
            this.state = 5173;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.FIXED:
            this.enterOuterAlt(localctx, 26);
            this.state = 5174;
            this.match(CSharpParser.FIXED);
            this.state = 5175;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.FLOAT:
            this.enterOuterAlt(localctx, 27);
            this.state = 5176;
            this.match(CSharpParser.FLOAT);
            this.state = 5177;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.FOR:
            this.enterOuterAlt(localctx, 28);
            this.state = 5178;
            this.match(CSharpParser.FOR);
            this.state = 5179;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.FOREACH:
            this.enterOuterAlt(localctx, 29);
            this.state = 5180;
            this.match(CSharpParser.FOREACH);
            this.state = 5181;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.GOTO:
            this.enterOuterAlt(localctx, 30);
            this.state = 5182;
            this.match(CSharpParser.GOTO);
            this.state = 5183;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.IF:
            this.enterOuterAlt(localctx, 31);
            this.state = 5184;
            this.match(CSharpParser.IF);
            this.state = 5185;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.IMPLICIT:
            this.enterOuterAlt(localctx, 32);
            this.state = 5186;
            this.match(CSharpParser.IMPLICIT);
            this.state = 5187;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.IN:
            this.enterOuterAlt(localctx, 33);
            this.state = 5188;
            this.match(CSharpParser.IN);
            this.state = 5189;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.INT:
            this.enterOuterAlt(localctx, 34);
            this.state = 5190;
            this.match(CSharpParser.INT);
            this.state = 5191;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.INTERFACE:
            this.enterOuterAlt(localctx, 35);
            this.state = 5192;
            this.match(CSharpParser.INTERFACE);
            this.state = 5193;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.INTERNAL:
            this.enterOuterAlt(localctx, 36);
            this.state = 5194;
            this.match(CSharpParser.INTERNAL);
            this.state = 5195;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.IS:
            this.enterOuterAlt(localctx, 37);
            this.state = 5196;
            this.match(CSharpParser.IS);
            this.state = 5197;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.LOCK:
            this.enterOuterAlt(localctx, 38);
            this.state = 5198;
            this.match(CSharpParser.LOCK);
            this.state = 5199;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.LONG:
            this.enterOuterAlt(localctx, 39);
            this.state = 5200;
            this.match(CSharpParser.LONG);
            this.state = 5201;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.NAMESPACE:
            this.enterOuterAlt(localctx, 40);
            this.state = 5202;
            this.match(CSharpParser.NAMESPACE);
            this.state = 5203;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.NEW:
            this.enterOuterAlt(localctx, 41);
            this.state = 5204;
            this.match(CSharpParser.NEW);
            this.state = 5205;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.NULL:
            this.enterOuterAlt(localctx, 42);
            this.state = 5206;
            this.match(CSharpParser.NULL);
            this.state = 5207;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OBJECT:
            this.enterOuterAlt(localctx, 43);
            this.state = 5208;
            this.match(CSharpParser.OBJECT);
            this.state = 5209;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OPERATOR:
            this.enterOuterAlt(localctx, 44);
            this.state = 5210;
            this.match(CSharpParser.OPERATOR);
            this.state = 5211;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OUT:
            this.enterOuterAlt(localctx, 45);
            this.state = 5212;
            this.match(CSharpParser.OUT);
            this.state = 5213;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.OVERRIDE:
            this.enterOuterAlt(localctx, 46);
            this.state = 5214;
            this.match(CSharpParser.OVERRIDE);
            this.state = 5215;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.PARAMS:
            this.enterOuterAlt(localctx, 47);
            this.state = 5216;
            this.match(CSharpParser.PARAMS);
            this.state = 5217;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.PRIVATE:
            this.enterOuterAlt(localctx, 48);
            this.state = 5218;
            this.match(CSharpParser.PRIVATE);
            this.state = 5219;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.PROTECTED:
            this.enterOuterAlt(localctx, 49);
            this.state = 5220;
            this.match(CSharpParser.PROTECTED);
            this.state = 5221;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.PUBLIC:
            this.enterOuterAlt(localctx, 50);
            this.state = 5222;
            this.match(CSharpParser.PUBLIC);
            this.state = 5223;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.READONLY:
            this.enterOuterAlt(localctx, 51);
            this.state = 5224;
            this.match(CSharpParser.READONLY);
            this.state = 5225;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.REF:
            this.enterOuterAlt(localctx, 52);
            this.state = 5226;
            this.match(CSharpParser.REF);
            this.state = 5227;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.RETURN:
            this.enterOuterAlt(localctx, 53);
            this.state = 5228;
            this.match(CSharpParser.RETURN);
            this.state = 5229;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SBYTE:
            this.enterOuterAlt(localctx, 54);
            this.state = 5230;
            this.match(CSharpParser.SBYTE);
            this.state = 5231;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SEALED:
            this.enterOuterAlt(localctx, 55);
            this.state = 5232;
            this.match(CSharpParser.SEALED);
            this.state = 5233;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SHORT:
            this.enterOuterAlt(localctx, 56);
            this.state = 5234;
            this.match(CSharpParser.SHORT);
            this.state = 5235;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SIZEOF:
            this.enterOuterAlt(localctx, 57);
            this.state = 5236;
            this.match(CSharpParser.SIZEOF);
            this.state = 5237;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.STACKALLOC:
            this.enterOuterAlt(localctx, 58);
            this.state = 5238;
            this.match(CSharpParser.STACKALLOC);
            this.state = 5239;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.STATIC:
            this.enterOuterAlt(localctx, 59);
            this.state = 5240;
            this.match(CSharpParser.STATIC);
            this.state = 5241;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.STRING:
            this.enterOuterAlt(localctx, 60);
            this.state = 5242;
            this.match(CSharpParser.STRING);
            this.state = 5243;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.STRUCT:
            this.enterOuterAlt(localctx, 61);
            this.state = 5244;
            this.match(CSharpParser.STRUCT);
            this.state = 5245;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SWITCH:
            this.enterOuterAlt(localctx, 62);
            this.state = 5246;
            this.match(CSharpParser.SWITCH);
            this.state = 5247;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.THIS:
            this.enterOuterAlt(localctx, 63);
            this.state = 5248;
            this.match(CSharpParser.THIS);
            this.state = 5249;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.THROW:
            this.enterOuterAlt(localctx, 64);
            this.state = 5250;
            this.match(CSharpParser.THROW);
            this.state = 5251;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.TRUE:
            this.enterOuterAlt(localctx, 65);
            this.state = 5252;
            this.match(CSharpParser.TRUE);
            this.state = 5253;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.TRY:
            this.enterOuterAlt(localctx, 66);
            this.state = 5254;
            this.match(CSharpParser.TRY);
            this.state = 5255;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.TYPEOF:
            this.enterOuterAlt(localctx, 67);
            this.state = 5256;
            this.match(CSharpParser.TYPEOF);
            this.state = 5257;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.UINT:
            this.enterOuterAlt(localctx, 68);
            this.state = 5258;
            this.match(CSharpParser.UINT);
            this.state = 5259;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ULONG:
            this.enterOuterAlt(localctx, 69);
            this.state = 5260;
            this.match(CSharpParser.ULONG);
            this.state = 5261;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.UNCHECKED:
            this.enterOuterAlt(localctx, 70);
            this.state = 5262;
            this.match(CSharpParser.UNCHECKED);
            this.state = 5263;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.UNSAFE:
            this.enterOuterAlt(localctx, 71);
            this.state = 5264;
            this.match(CSharpParser.UNSAFE);
            this.state = 5265;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.USHORT:
            this.enterOuterAlt(localctx, 72);
            this.state = 5266;
            this.match(CSharpParser.USHORT);
            this.state = 5267;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.USING:
            this.enterOuterAlt(localctx, 73);
            this.state = 5268;
            this.match(CSharpParser.USING);
            this.state = 5269;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.VIRTUAL:
            this.enterOuterAlt(localctx, 74);
            this.state = 5270;
            this.match(CSharpParser.VIRTUAL);
            this.state = 5271;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.VOID:
            this.enterOuterAlt(localctx, 75);
            this.state = 5272;
            this.match(CSharpParser.VOID);
            this.state = 5273;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.VOLATILE:
            this.enterOuterAlt(localctx, 76);
            this.state = 5274;
            this.match(CSharpParser.VOLATILE);
            this.state = 5275;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.WHILE:
            this.enterOuterAlt(localctx, 77);
            this.state = 5276;
            this.match(CSharpParser.WHILE);
            this.state = 5277;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_definition_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_class_definition_DropletFile;
    return this;
}

Class_definition_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_definition_DropletFileContext.prototype.constructor = Class_definition_DropletFileContext;

Class_definition_DropletFileContext.prototype.CLASS = function() {
    return this.getToken(CSharpParser.CLASS, 0);
};

Class_definition_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Class_definition_DropletFileContext.prototype.class_body = function() {
    return this.getTypedRuleContext(Class_bodyContext,0);
};

Class_definition_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Class_definition_DropletFileContext.prototype.type_parameter_list = function() {
    return this.getTypedRuleContext(Type_parameter_listContext,0);
};

Class_definition_DropletFileContext.prototype.class_base = function() {
    return this.getTypedRuleContext(Class_baseContext,0);
};

Class_definition_DropletFileContext.prototype.type_parameter_constraints_clauses = function() {
    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
};

Class_definition_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterClass_definition_DropletFile(this);
	}
};

Class_definition_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitClass_definition_DropletFile(this);
	}
};




CSharpParser.Class_definition_DropletFileContext = Class_definition_DropletFileContext;

CSharpParser.prototype.class_definition_DropletFile = function() {

    var localctx = new Class_definition_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 770, CSharpParser.RULE_class_definition_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5280;
        this.match(CSharpParser.CLASS);
        this.state = 5281;
        this.identifier();
        this.state = 5283;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.LT) {
            this.state = 5282;
            this.type_parameter_list();
        }

        this.state = 5286;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COLON) {
            this.state = 5285;
            this.class_base();
        }

        this.state = 5289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHERE) {
            this.state = 5288;
            this.type_parameter_constraints_clauses();
        }

        this.state = 5291;
        this.class_body();
        this.state = 5293;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.SEMICOLON) {
            this.state = 5292;
            this.match(CSharpParser.SEMICOLON);
        }

        this.state = 5295;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Struct_definition_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_struct_definition_DropletFile;
    return this;
}

Struct_definition_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_definition_DropletFileContext.prototype.constructor = Struct_definition_DropletFileContext;

Struct_definition_DropletFileContext.prototype.STRUCT = function() {
    return this.getToken(CSharpParser.STRUCT, 0);
};

Struct_definition_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Struct_definition_DropletFileContext.prototype.struct_body = function() {
    return this.getTypedRuleContext(Struct_bodyContext,0);
};

Struct_definition_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Struct_definition_DropletFileContext.prototype.type_parameter_list = function() {
    return this.getTypedRuleContext(Type_parameter_listContext,0);
};

Struct_definition_DropletFileContext.prototype.struct_interfaces = function() {
    return this.getTypedRuleContext(Struct_interfacesContext,0);
};

Struct_definition_DropletFileContext.prototype.type_parameter_constraints_clauses = function() {
    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
};

Struct_definition_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterStruct_definition_DropletFile(this);
	}
};

Struct_definition_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitStruct_definition_DropletFile(this);
	}
};




CSharpParser.Struct_definition_DropletFileContext = Struct_definition_DropletFileContext;

CSharpParser.prototype.struct_definition_DropletFile = function() {

    var localctx = new Struct_definition_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 772, CSharpParser.RULE_struct_definition_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5297;
        this.match(CSharpParser.STRUCT);
        this.state = 5298;
        this.identifier();
        this.state = 5300;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.LT) {
            this.state = 5299;
            this.type_parameter_list();
        }

        this.state = 5303;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COLON) {
            this.state = 5302;
            this.struct_interfaces();
        }

        this.state = 5306;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHERE) {
            this.state = 5305;
            this.type_parameter_constraints_clauses();
        }

        this.state = 5308;
        this.struct_body();
        this.state = 5310;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.SEMICOLON) {
            this.state = 5309;
            this.match(CSharpParser.SEMICOLON);
        }

        this.state = 5312;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_definition_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_interface_definition_DropletFile;
    return this;
}

Interface_definition_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_definition_DropletFileContext.prototype.constructor = Interface_definition_DropletFileContext;

Interface_definition_DropletFileContext.prototype.INTERFACE = function() {
    return this.getToken(CSharpParser.INTERFACE, 0);
};

Interface_definition_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Interface_definition_DropletFileContext.prototype.interface_body = function() {
    return this.getTypedRuleContext(Interface_bodyContext,0);
};

Interface_definition_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Interface_definition_DropletFileContext.prototype.variant_type_parameter_list = function() {
    return this.getTypedRuleContext(Variant_type_parameter_listContext,0);
};

Interface_definition_DropletFileContext.prototype.interface_base = function() {
    return this.getTypedRuleContext(Interface_baseContext,0);
};

Interface_definition_DropletFileContext.prototype.type_parameter_constraints_clauses = function() {
    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
};

Interface_definition_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterInterface_definition_DropletFile(this);
	}
};

Interface_definition_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitInterface_definition_DropletFile(this);
	}
};




CSharpParser.Interface_definition_DropletFileContext = Interface_definition_DropletFileContext;

CSharpParser.prototype.interface_definition_DropletFile = function() {

    var localctx = new Interface_definition_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 774, CSharpParser.RULE_interface_definition_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5314;
        this.match(CSharpParser.INTERFACE);
        this.state = 5315;
        this.identifier();
        this.state = 5317;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.LT) {
            this.state = 5316;
            this.variant_type_parameter_list();
        }

        this.state = 5320;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COLON) {
            this.state = 5319;
            this.interface_base();
        }

        this.state = 5323;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHERE) {
            this.state = 5322;
            this.type_parameter_constraints_clauses();
        }

        this.state = 5325;
        this.interface_body();
        this.state = 5327;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.SEMICOLON) {
            this.state = 5326;
            this.match(CSharpParser.SEMICOLON);
        }

        this.state = 5329;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_definition_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_enum_definition_DropletFile;
    return this;
}

Enum_definition_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_definition_DropletFileContext.prototype.constructor = Enum_definition_DropletFileContext;

Enum_definition_DropletFileContext.prototype.ENUM = function() {
    return this.getToken(CSharpParser.ENUM, 0);
};

Enum_definition_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Enum_definition_DropletFileContext.prototype.enum_body = function() {
    return this.getTypedRuleContext(Enum_bodyContext,0);
};

Enum_definition_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Enum_definition_DropletFileContext.prototype.enum_base = function() {
    return this.getTypedRuleContext(Enum_baseContext,0);
};

Enum_definition_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEnum_definition_DropletFile(this);
	}
};

Enum_definition_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEnum_definition_DropletFile(this);
	}
};




CSharpParser.Enum_definition_DropletFileContext = Enum_definition_DropletFileContext;

CSharpParser.prototype.enum_definition_DropletFile = function() {

    var localctx = new Enum_definition_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 776, CSharpParser.RULE_enum_definition_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5331;
        this.match(CSharpParser.ENUM);
        this.state = 5332;
        this.identifier();
        this.state = 5334;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COLON) {
            this.state = 5333;
            this.enum_base();
        }

        this.state = 5336;
        this.enum_body();
        this.state = 5338;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.SEMICOLON) {
            this.state = 5337;
            this.match(CSharpParser.SEMICOLON);
        }

        this.state = 5340;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Delegate_definition_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_delegate_definition_DropletFile;
    return this;
}

Delegate_definition_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delegate_definition_DropletFileContext.prototype.constructor = Delegate_definition_DropletFileContext;

Delegate_definition_DropletFileContext.prototype.DELEGATE = function() {
    return this.getToken(CSharpParser.DELEGATE, 0);
};

Delegate_definition_DropletFileContext.prototype.return_type = function() {
    return this.getTypedRuleContext(Return_typeContext,0);
};

Delegate_definition_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Delegate_definition_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Delegate_definition_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Delegate_definition_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Delegate_definition_DropletFileContext.prototype.variant_type_parameter_list = function() {
    return this.getTypedRuleContext(Variant_type_parameter_listContext,0);
};

Delegate_definition_DropletFileContext.prototype.formal_parameter_list = function() {
    return this.getTypedRuleContext(Formal_parameter_listContext,0);
};

Delegate_definition_DropletFileContext.prototype.type_parameter_constraints_clauses = function() {
    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
};

Delegate_definition_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterDelegate_definition_DropletFile(this);
	}
};

Delegate_definition_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitDelegate_definition_DropletFile(this);
	}
};




CSharpParser.Delegate_definition_DropletFileContext = Delegate_definition_DropletFileContext;

CSharpParser.prototype.delegate_definition_DropletFile = function() {

    var localctx = new Delegate_definition_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 778, CSharpParser.RULE_delegate_definition_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5342;
        this.match(CSharpParser.DELEGATE);
        this.state = 5343;
        this.return_type();
        this.state = 5344;
        this.identifier();
        this.state = 5346;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.LT) {
            this.state = 5345;
            this.variant_type_parameter_list();
        }

        this.state = 5348;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 5350;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CSharpParser.OBJECT - 67)) | (1 << (CSharpParser.ON - 67)) | (1 << (CSharpParser.ORDERBY - 67)) | (1 << (CSharpParser.OUT - 67)) | (1 << (CSharpParser.PARAMS - 67)) | (1 << (CSharpParser.PARTIAL - 67)) | (1 << (CSharpParser.REF - 67)) | (1 << (CSharpParser.REMOVE - 67)) | (1 << (CSharpParser.SBYTE - 67)) | (1 << (CSharpParser.SELECT - 67)) | (1 << (CSharpParser.SET - 67)) | (1 << (CSharpParser.SHORT - 67)) | (1 << (CSharpParser.STRING - 67)) | (1 << (CSharpParser.THIS - 67)) | (1 << (CSharpParser.UINT - 67)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)))) !== 0)) {
            this.state = 5349;
            this.formal_parameter_list();
        }

        this.state = 5352;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 5354;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHERE) {
            this.state = 5353;
            this.type_parameter_constraints_clauses();
        }

        this.state = 5356;
        this.match(CSharpParser.SEMICOLON);
        this.state = 5357;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Event_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_event_declaration_DropletFile;
    return this;
}

Event_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_declaration_DropletFileContext.prototype.constructor = Event_declaration_DropletFileContext;

Event_declaration_DropletFileContext.prototype.EVENT = function() {
    return this.getToken(CSharpParser.EVENT, 0);
};

Event_declaration_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Event_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Event_declaration_DropletFileContext.prototype.variable_declarators = function() {
    return this.getTypedRuleContext(Variable_declaratorsContext,0);
};

Event_declaration_DropletFileContext.prototype.member_name = function() {
    return this.getTypedRuleContext(Member_nameContext,0);
};

Event_declaration_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Event_declaration_DropletFileContext.prototype.event_accessor_declarations = function() {
    return this.getTypedRuleContext(Event_accessor_declarationsContext,0);
};

Event_declaration_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Event_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterEvent_declaration_DropletFile(this);
	}
};

Event_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitEvent_declaration_DropletFile(this);
	}
};




CSharpParser.Event_declaration_DropletFileContext = Event_declaration_DropletFileContext;

CSharpParser.prototype.event_declaration_DropletFile = function() {

    var localctx = new Event_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 780, CSharpParser.RULE_event_declaration_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5359;
        this.match(CSharpParser.EVENT);
        this.state = 5360;
        this.var_type();
        this.state = 5369;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,585,this._ctx);
        switch(la_) {
        case 1:
            this.state = 5361;
            this.variable_declarators();
            this.state = 5362;
            this.match(CSharpParser.SEMICOLON);
            break;

        case 2:
            this.state = 5364;
            this.member_name();
            this.state = 5365;
            this.match(CSharpParser.OPEN_BRACE);
            this.state = 5366;
            this.event_accessor_declarations();
            this.state = 5367;
            this.match(CSharpParser.CLOSE_BRACE);
            break;

        }
        this.state = 5371;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_field_declaration_DropletFile;
    return this;
}

Field_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_declaration_DropletFileContext.prototype.constructor = Field_declaration_DropletFileContext;

Field_declaration_DropletFileContext.prototype.variable_declarators = function() {
    return this.getTypedRuleContext(Variable_declaratorsContext,0);
};

Field_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Field_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterField_declaration_DropletFile(this);
	}
};

Field_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitField_declaration_DropletFile(this);
	}
};




CSharpParser.Field_declaration_DropletFileContext = Field_declaration_DropletFileContext;

CSharpParser.prototype.field_declaration_DropletFile = function() {

    var localctx = new Field_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 782, CSharpParser.RULE_field_declaration_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5373;
        this.variable_declarators();
        this.state = 5374;
        this.match(CSharpParser.SEMICOLON);
        this.state = 5375;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Property_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_property_declaration_DropletFile;
    return this;
}

Property_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Property_declaration_DropletFileContext.prototype.constructor = Property_declaration_DropletFileContext;

Property_declaration_DropletFileContext.prototype.member_name = function() {
    return this.getTypedRuleContext(Member_nameContext,0);
};

Property_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Property_declaration_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Property_declaration_DropletFileContext.prototype.accessor_declarations = function() {
    return this.getTypedRuleContext(Accessor_declarationsContext,0);
};

Property_declaration_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Property_declaration_DropletFileContext.prototype.right_arrow = function() {
    return this.getTypedRuleContext(Right_arrowContext,0);
};

Property_declaration_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Property_declaration_DropletFileContext.prototype.variable_initializer = function() {
    return this.getTypedRuleContext(Variable_initializerContext,0);
};

Property_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterProperty_declaration_DropletFile(this);
	}
};

Property_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitProperty_declaration_DropletFile(this);
	}
};




CSharpParser.Property_declaration_DropletFileContext = Property_declaration_DropletFileContext;

CSharpParser.prototype.property_declaration_DropletFile = function() {

    var localctx = new Property_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 784, CSharpParser.RULE_property_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5377;
        this.member_name();
        this.state = 5391;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.state = 5378;
            this.match(CSharpParser.OPEN_BRACE);
            this.state = 5379;
            this.accessor_declarations();
            this.state = 5380;
            this.match(CSharpParser.CLOSE_BRACE);
            this.state = 5385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.ASSIGNMENT) {
                this.state = 5381;
                this.match(CSharpParser.ASSIGNMENT);
                this.state = 5382;
                this.variable_initializer();
                this.state = 5383;
                this.match(CSharpParser.SEMICOLON);
            }

            break;
        case CSharpParser.ASSIGNMENT:
            this.state = 5387;
            this.right_arrow();
            this.state = 5388;
            this.expression();
            this.state = 5389;
            this.match(CSharpParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 5393;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constant_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_constant_declaration_DropletFile;
    return this;
}

Constant_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_declaration_DropletFileContext.prototype.constructor = Constant_declaration_DropletFileContext;

Constant_declaration_DropletFileContext.prototype.CONST = function() {
    return this.getToken(CSharpParser.CONST, 0);
};

Constant_declaration_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Constant_declaration_DropletFileContext.prototype.constant_declarators = function() {
    return this.getTypedRuleContext(Constant_declaratorsContext,0);
};

Constant_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Constant_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConstant_declaration_DropletFile(this);
	}
};

Constant_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConstant_declaration_DropletFile(this);
	}
};




CSharpParser.Constant_declaration_DropletFileContext = Constant_declaration_DropletFileContext;

CSharpParser.prototype.constant_declaration_DropletFile = function() {

    var localctx = new Constant_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 786, CSharpParser.RULE_constant_declaration_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5395;
        this.match(CSharpParser.CONST);
        this.state = 5396;
        this.var_type();
        this.state = 5397;
        this.constant_declarators();
        this.state = 5398;
        this.match(CSharpParser.SEMICOLON);
        this.state = 5399;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Indexer_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_indexer_declaration_DropletFile;
    return this;
}

Indexer_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Indexer_declaration_DropletFileContext.prototype.constructor = Indexer_declaration_DropletFileContext;

Indexer_declaration_DropletFileContext.prototype.THIS = function() {
    return this.getToken(CSharpParser.THIS, 0);
};

Indexer_declaration_DropletFileContext.prototype.formal_parameter_list = function() {
    return this.getTypedRuleContext(Formal_parameter_listContext,0);
};

Indexer_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Indexer_declaration_DropletFileContext.prototype.OPEN_BRACE = function() {
    return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Indexer_declaration_DropletFileContext.prototype.accessor_declarations = function() {
    return this.getTypedRuleContext(Accessor_declarationsContext,0);
};

Indexer_declaration_DropletFileContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Indexer_declaration_DropletFileContext.prototype.right_arrow = function() {
    return this.getTypedRuleContext(Right_arrowContext,0);
};

Indexer_declaration_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Indexer_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIndexer_declaration_DropletFile(this);
	}
};

Indexer_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIndexer_declaration_DropletFile(this);
	}
};




CSharpParser.Indexer_declaration_DropletFileContext = Indexer_declaration_DropletFileContext;

CSharpParser.prototype.indexer_declaration_DropletFile = function() {

    var localctx = new Indexer_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 788, CSharpParser.RULE_indexer_declaration_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5401;
        this.match(CSharpParser.THIS);
        this.state = 5402;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 5403;
        this.formal_parameter_list();
        this.state = 5404;
        this.match(CSharpParser.CLOSE_BRACKET);
        this.state = 5413;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
            this.state = 5405;
            this.match(CSharpParser.OPEN_BRACE);
            this.state = 5406;
            this.accessor_declarations();
            this.state = 5407;
            this.match(CSharpParser.CLOSE_BRACE);
            break;
        case CSharpParser.ASSIGNMENT:
            this.state = 5409;
            this.right_arrow();
            this.state = 5410;
            this.expression();
            this.state = 5411;
            this.match(CSharpParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 5415;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Destructor_definition_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_destructor_definition_DropletFile;
    return this;
}

Destructor_definition_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Destructor_definition_DropletFileContext.prototype.constructor = Destructor_definition_DropletFileContext;

Destructor_definition_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Destructor_definition_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Destructor_definition_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Destructor_definition_DropletFileContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Destructor_definition_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Destructor_definition_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterDestructor_definition_DropletFile(this);
	}
};

Destructor_definition_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitDestructor_definition_DropletFile(this);
	}
};




CSharpParser.Destructor_definition_DropletFileContext = Destructor_definition_DropletFileContext;

CSharpParser.prototype.destructor_definition_DropletFile = function() {

    var localctx = new Destructor_definition_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 790, CSharpParser.RULE_destructor_definition_DropletFile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5417;
        this.match(CSharpParser.TILDE);
        this.state = 5418;
        this.identifier();
        this.state = 5419;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 5420;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 5421;
        this.body();
        this.state = 5422;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_constructor_declaration_DropletFile;
    return this;
}

Constructor_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_declaration_DropletFileContext.prototype.constructor = Constructor_declaration_DropletFileContext;

Constructor_declaration_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Constructor_declaration_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Constructor_declaration_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Constructor_declaration_DropletFileContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Constructor_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Constructor_declaration_DropletFileContext.prototype.formal_parameter_list = function() {
    return this.getTypedRuleContext(Formal_parameter_listContext,0);
};

Constructor_declaration_DropletFileContext.prototype.constructor_initializer = function() {
    return this.getTypedRuleContext(Constructor_initializerContext,0);
};

Constructor_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterConstructor_declaration_DropletFile(this);
	}
};

Constructor_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitConstructor_declaration_DropletFile(this);
	}
};




CSharpParser.Constructor_declaration_DropletFileContext = Constructor_declaration_DropletFileContext;

CSharpParser.prototype.constructor_declaration_DropletFile = function() {

    var localctx = new Constructor_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 792, CSharpParser.RULE_constructor_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5424;
        this.identifier();
        this.state = 5425;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 5427;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CSharpParser.OBJECT - 67)) | (1 << (CSharpParser.ON - 67)) | (1 << (CSharpParser.ORDERBY - 67)) | (1 << (CSharpParser.OUT - 67)) | (1 << (CSharpParser.PARAMS - 67)) | (1 << (CSharpParser.PARTIAL - 67)) | (1 << (CSharpParser.REF - 67)) | (1 << (CSharpParser.REMOVE - 67)) | (1 << (CSharpParser.SBYTE - 67)) | (1 << (CSharpParser.SELECT - 67)) | (1 << (CSharpParser.SET - 67)) | (1 << (CSharpParser.SHORT - 67)) | (1 << (CSharpParser.STRING - 67)) | (1 << (CSharpParser.THIS - 67)) | (1 << (CSharpParser.UINT - 67)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)))) !== 0)) {
            this.state = 5426;
            this.formal_parameter_list();
        }

        this.state = 5429;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 5431;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COLON) {
            this.state = 5430;
            this.constructor_initializer();
        }

        this.state = 5433;
        this.body();
        this.state = 5434;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_method_declaration_DropletFile;
    return this;
}

Method_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_declaration_DropletFileContext.prototype.constructor = Method_declaration_DropletFileContext;

Method_declaration_DropletFileContext.prototype.method_member_name = function() {
    return this.getTypedRuleContext(Method_member_nameContext,0);
};

Method_declaration_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Method_declaration_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Method_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Method_declaration_DropletFileContext.prototype.method_body = function() {
    return this.getTypedRuleContext(Method_bodyContext,0);
};

Method_declaration_DropletFileContext.prototype.right_arrow = function() {
    return this.getTypedRuleContext(Right_arrowContext,0);
};

Method_declaration_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Method_declaration_DropletFileContext.prototype.type_parameter_list = function() {
    return this.getTypedRuleContext(Type_parameter_listContext,0);
};

Method_declaration_DropletFileContext.prototype.formal_parameter_list = function() {
    return this.getTypedRuleContext(Formal_parameter_listContext,0);
};

Method_declaration_DropletFileContext.prototype.type_parameter_constraints_clauses = function() {
    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
};

Method_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMethod_declaration_DropletFile(this);
	}
};

Method_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMethod_declaration_DropletFile(this);
	}
};




CSharpParser.Method_declaration_DropletFileContext = Method_declaration_DropletFileContext;

CSharpParser.prototype.method_declaration_DropletFile = function() {

    var localctx = new Method_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 794, CSharpParser.RULE_method_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5436;
        this.method_member_name();
        this.state = 5438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.LT) {
            this.state = 5437;
            this.type_parameter_list();
        }

        this.state = 5440;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 5442;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CSharpParser.OBJECT - 67)) | (1 << (CSharpParser.ON - 67)) | (1 << (CSharpParser.ORDERBY - 67)) | (1 << (CSharpParser.OUT - 67)) | (1 << (CSharpParser.PARAMS - 67)) | (1 << (CSharpParser.PARTIAL - 67)) | (1 << (CSharpParser.REF - 67)) | (1 << (CSharpParser.REMOVE - 67)) | (1 << (CSharpParser.SBYTE - 67)) | (1 << (CSharpParser.SELECT - 67)) | (1 << (CSharpParser.SET - 67)) | (1 << (CSharpParser.SHORT - 67)) | (1 << (CSharpParser.STRING - 67)) | (1 << (CSharpParser.THIS - 67)) | (1 << (CSharpParser.UINT - 67)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)))) !== 0)) {
            this.state = 5441;
            this.formal_parameter_list();
        }

        this.state = 5444;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 5446;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.WHERE) {
            this.state = 5445;
            this.type_parameter_constraints_clauses();
        }

        this.state = 5453;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
        case CSharpParser.SEMICOLON:
            this.state = 5448;
            this.method_body();
            break;
        case CSharpParser.ASSIGNMENT:
            this.state = 5449;
            this.right_arrow();
            this.state = 5450;
            this.expression();
            this.state = 5451;
            this.match(CSharpParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 5455;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_member_name_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_method_member_name_DropletFile;
    return this;
}

Method_member_name_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_member_name_DropletFileContext.prototype.constructor = Method_member_name_DropletFileContext;

Method_member_name_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Method_member_name_DropletFileContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Method_member_name_DropletFileContext.prototype.type_argument_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_argument_listContext);
    } else {
        return this.getTypedRuleContext(Type_argument_listContext,i);
    }
};

Method_member_name_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMethod_member_name_DropletFile(this);
	}
};

Method_member_name_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMethod_member_name_DropletFile(this);
	}
};




CSharpParser.Method_member_name_DropletFileContext = Method_member_name_DropletFileContext;

CSharpParser.prototype.method_member_name_DropletFile = function() {

    var localctx = new Method_member_name_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 796, CSharpParser.RULE_method_member_name_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5462;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,595,this._ctx);
        switch(la_) {
        case 1:
            this.state = 5457;
            this.identifier();
            break;

        case 2:
            this.state = 5458;
            this.identifier();
            this.state = 5459;
            this.match(CSharpParser.DOUBLE_COLON);
            this.state = 5460;
            this.identifier();
            break;

        }
        this.state = 5471;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CSharpParser.DOT || _la===CSharpParser.LT) {
            this.state = 5465;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CSharpParser.LT) {
                this.state = 5464;
                this.type_argument_list();
            }

            this.state = 5467;
            this.match(CSharpParser.DOT);
            this.state = 5468;
            this.identifier();
            this.state = 5473;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5474;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operator_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_operator_declaration_DropletFile;
    return this;
}

Operator_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_declaration_DropletFileContext.prototype.constructor = Operator_declaration_DropletFileContext;

Operator_declaration_DropletFileContext.prototype.OPERATOR = function() {
    return this.getToken(CSharpParser.OPERATOR, 0);
};

Operator_declaration_DropletFileContext.prototype.overloadable_operator = function() {
    return this.getTypedRuleContext(Overloadable_operatorContext,0);
};

Operator_declaration_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Operator_declaration_DropletFileContext.prototype.arg_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Arg_declarationContext);
    } else {
        return this.getTypedRuleContext(Arg_declarationContext,i);
    }
};

Operator_declaration_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Operator_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Operator_declaration_DropletFileContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Operator_declaration_DropletFileContext.prototype.right_arrow = function() {
    return this.getTypedRuleContext(Right_arrowContext,0);
};

Operator_declaration_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Operator_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterOperator_declaration_DropletFile(this);
	}
};

Operator_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitOperator_declaration_DropletFile(this);
	}
};




CSharpParser.Operator_declaration_DropletFileContext = Operator_declaration_DropletFileContext;

CSharpParser.prototype.operator_declaration_DropletFile = function() {

    var localctx = new Operator_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 798, CSharpParser.RULE_operator_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5476;
        this.match(CSharpParser.OPERATOR);
        this.state = 5477;
        this.overloadable_operator();
        this.state = 5478;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 5479;
        this.arg_declaration();
        this.state = 5482;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.COMMA) {
            this.state = 5480;
            this.match(CSharpParser.COMMA);
            this.state = 5481;
            this.arg_declaration();
        }

        this.state = 5484;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 5490;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.OPEN_BRACE:
        case CSharpParser.SEMICOLON:
            this.state = 5485;
            this.body();
            break;
        case CSharpParser.ASSIGNMENT:
            this.state = 5486;
            this.right_arrow();
            this.state = 5487;
            this.expression();
            this.state = 5488;
            this.match(CSharpParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 5492;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Arg_declaration_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_arg_declaration_DropletFile;
    return this;
}

Arg_declaration_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arg_declaration_DropletFileContext.prototype.constructor = Arg_declaration_DropletFileContext;

Arg_declaration_DropletFileContext.prototype.var_type = function() {
    return this.getTypedRuleContext(Var_typeContext,0);
};

Arg_declaration_DropletFileContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Arg_declaration_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Arg_declaration_DropletFileContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Arg_declaration_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterArg_declaration_DropletFile(this);
	}
};

Arg_declaration_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitArg_declaration_DropletFile(this);
	}
};




CSharpParser.Arg_declaration_DropletFileContext = Arg_declaration_DropletFileContext;

CSharpParser.prototype.arg_declaration_DropletFile = function() {

    var localctx = new Arg_declaration_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 800, CSharpParser.RULE_arg_declaration_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5494;
        this.var_type();
        this.state = 5495;
        this.identifier();
        this.state = 5498;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.ASSIGNMENT) {
            this.state = 5496;
            this.match(CSharpParser.ASSIGNMENT);
            this.state = 5497;
            this.expression();
        }

        this.state = 5500;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_invocation_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_method_invocation_DropletFile;
    return this;
}

Method_invocation_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_invocation_DropletFileContext.prototype.constructor = Method_invocation_DropletFileContext;

Method_invocation_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Method_invocation_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Method_invocation_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Method_invocation_DropletFileContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Method_invocation_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterMethod_invocation_DropletFile(this);
	}
};

Method_invocation_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitMethod_invocation_DropletFile(this);
	}
};




CSharpParser.Method_invocation_DropletFileContext = Method_invocation_DropletFileContext;

CSharpParser.prototype.method_invocation_DropletFile = function() {

    var localctx = new Method_invocation_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 802, CSharpParser.RULE_method_invocation_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5502;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 5504;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.OUT - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REF - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.VOID - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
            this.state = 5503;
            this.argument_list();
        }

        this.state = 5506;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 5507;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_creation_expression_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_object_creation_expression_DropletFile;
    return this;
}

Object_creation_expression_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_creation_expression_DropletFileContext.prototype.constructor = Object_creation_expression_DropletFileContext;

Object_creation_expression_DropletFileContext.prototype.OPEN_PARENS = function() {
    return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Object_creation_expression_DropletFileContext.prototype.CLOSE_PARENS = function() {
    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Object_creation_expression_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Object_creation_expression_DropletFileContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Object_creation_expression_DropletFileContext.prototype.object_or_collection_initializer = function() {
    return this.getTypedRuleContext(Object_or_collection_initializerContext,0);
};

Object_creation_expression_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterObject_creation_expression_DropletFile(this);
	}
};

Object_creation_expression_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitObject_creation_expression_DropletFile(this);
	}
};




CSharpParser.Object_creation_expression_DropletFileContext = Object_creation_expression_DropletFileContext;

CSharpParser.prototype.object_creation_expression_DropletFile = function() {

    var localctx = new Object_creation_expression_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 804, CSharpParser.RULE_object_creation_expression_DropletFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5509;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 5511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE) | (1 << CSharpParser.DESCENDING))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.DYNAMIC - 33)) | (1 << (CSharpParser.EQUALS - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FROM - 33)) | (1 << (CSharpParser.GET - 33)) | (1 << (CSharpParser.GROUP - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTO - 33)) | (1 << (CSharpParser.JOIN - 33)) | (1 << (CSharpParser.LET - 33)) | (1 << (CSharpParser.LONG - 33)) | (1 << (CSharpParser.NAMEOF - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.ON - 65)) | (1 << (CSharpParser.ORDERBY - 65)) | (1 << (CSharpParser.OUT - 65)) | (1 << (CSharpParser.PARTIAL - 65)) | (1 << (CSharpParser.REF - 65)) | (1 << (CSharpParser.REMOVE - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SELECT - 65)) | (1 << (CSharpParser.SET - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.VAR - 97)) | (1 << (CSharpParser.VOID - 97)) | (1 << (CSharpParser.WHEN - 97)) | (1 << (CSharpParser.WHERE - 97)) | (1 << (CSharpParser.YIELD - 97)) | (1 << (CSharpParser.IDENTIFIER - 97)) | (1 << (CSharpParser.LITERAL_ACCESS - 97)) | (1 << (CSharpParser.INTEGER_LITERAL - 97)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) | (1 << (CSharpParser.REAL_LITERAL - 97)) | (1 << (CSharpParser.CHARACTER_LITERAL - 97)) | (1 << (CSharpParser.REGULAR_STRING - 97)) | (1 << (CSharpParser.VERBATIUM_STRING - 97)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) | (1 << (CSharpParser.OPEN_PARENS - 97)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (CSharpParser.PLUS - 132)) | (1 << (CSharpParser.MINUS - 132)) | (1 << (CSharpParser.STAR - 132)) | (1 << (CSharpParser.AMP - 132)) | (1 << (CSharpParser.BANG - 132)) | (1 << (CSharpParser.TILDE - 132)) | (1 << (CSharpParser.OP_INC - 132)) | (1 << (CSharpParser.OP_DEC - 132)))) !== 0)) {
            this.state = 5510;
            this.argument_list();
        }

        this.state = 5513;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 5515;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CSharpParser.OPEN_BRACE) {
            this.state = 5514;
            this.object_or_collection_initializer();
        }

        this.state = 5517;
        this.match(CSharpParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Identifier_DropletFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CSharpParser.RULE_identifier_DropletFile;
    return this;
}

Identifier_DropletFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Identifier_DropletFileContext.prototype.constructor = Identifier_DropletFileContext;

Identifier_DropletFileContext.prototype.IDENTIFIER = function() {
    return this.getToken(CSharpParser.IDENTIFIER, 0);
};

Identifier_DropletFileContext.prototype.EOF = function() {
    return this.getToken(CSharpParser.EOF, 0);
};

Identifier_DropletFileContext.prototype.ADD = function() {
    return this.getToken(CSharpParser.ADD, 0);
};

Identifier_DropletFileContext.prototype.ALIAS = function() {
    return this.getToken(CSharpParser.ALIAS, 0);
};

Identifier_DropletFileContext.prototype.ARGLIST = function() {
    return this.getToken(CSharpParser.ARGLIST, 0);
};

Identifier_DropletFileContext.prototype.ASCENDING = function() {
    return this.getToken(CSharpParser.ASCENDING, 0);
};

Identifier_DropletFileContext.prototype.ASYNC = function() {
    return this.getToken(CSharpParser.ASYNC, 0);
};

Identifier_DropletFileContext.prototype.AWAIT = function() {
    return this.getToken(CSharpParser.AWAIT, 0);
};

Identifier_DropletFileContext.prototype.BY = function() {
    return this.getToken(CSharpParser.BY, 0);
};

Identifier_DropletFileContext.prototype.DESCENDING = function() {
    return this.getToken(CSharpParser.DESCENDING, 0);
};

Identifier_DropletFileContext.prototype.DYNAMIC = function() {
    return this.getToken(CSharpParser.DYNAMIC, 0);
};

Identifier_DropletFileContext.prototype.EQUALS = function() {
    return this.getToken(CSharpParser.EQUALS, 0);
};

Identifier_DropletFileContext.prototype.FROM = function() {
    return this.getToken(CSharpParser.FROM, 0);
};

Identifier_DropletFileContext.prototype.GET = function() {
    return this.getToken(CSharpParser.GET, 0);
};

Identifier_DropletFileContext.prototype.GROUP = function() {
    return this.getToken(CSharpParser.GROUP, 0);
};

Identifier_DropletFileContext.prototype.INTO = function() {
    return this.getToken(CSharpParser.INTO, 0);
};

Identifier_DropletFileContext.prototype.JOIN = function() {
    return this.getToken(CSharpParser.JOIN, 0);
};

Identifier_DropletFileContext.prototype.LET = function() {
    return this.getToken(CSharpParser.LET, 0);
};

Identifier_DropletFileContext.prototype.NAMEOF = function() {
    return this.getToken(CSharpParser.NAMEOF, 0);
};

Identifier_DropletFileContext.prototype.ON = function() {
    return this.getToken(CSharpParser.ON, 0);
};

Identifier_DropletFileContext.prototype.ORDERBY = function() {
    return this.getToken(CSharpParser.ORDERBY, 0);
};

Identifier_DropletFileContext.prototype.PARTIAL = function() {
    return this.getToken(CSharpParser.PARTIAL, 0);
};

Identifier_DropletFileContext.prototype.REMOVE = function() {
    return this.getToken(CSharpParser.REMOVE, 0);
};

Identifier_DropletFileContext.prototype.SELECT = function() {
    return this.getToken(CSharpParser.SELECT, 0);
};

Identifier_DropletFileContext.prototype.SET = function() {
    return this.getToken(CSharpParser.SET, 0);
};

Identifier_DropletFileContext.prototype.VAR = function() {
    return this.getToken(CSharpParser.VAR, 0);
};

Identifier_DropletFileContext.prototype.WHEN = function() {
    return this.getToken(CSharpParser.WHEN, 0);
};

Identifier_DropletFileContext.prototype.WHERE = function() {
    return this.getToken(CSharpParser.WHERE, 0);
};

Identifier_DropletFileContext.prototype.YIELD = function() {
    return this.getToken(CSharpParser.YIELD, 0);
};

Identifier_DropletFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.enterIdentifier_DropletFile(this);
	}
};

Identifier_DropletFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CSharpParserListener ) {
        listener.exitIdentifier_DropletFile(this);
	}
};




CSharpParser.Identifier_DropletFileContext = Identifier_DropletFileContext;

CSharpParser.prototype.identifier_DropletFile = function() {

    var localctx = new Identifier_DropletFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 806, CSharpParser.RULE_identifier_DropletFile);
    try {
        this.state = 5575;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CSharpParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 5519;
            this.match(CSharpParser.IDENTIFIER);
            this.state = 5520;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ADD:
            this.enterOuterAlt(localctx, 2);
            this.state = 5521;
            this.match(CSharpParser.ADD);
            this.state = 5522;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ALIAS:
            this.enterOuterAlt(localctx, 3);
            this.state = 5523;
            this.match(CSharpParser.ALIAS);
            this.state = 5524;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ARGLIST:
            this.enterOuterAlt(localctx, 4);
            this.state = 5525;
            this.match(CSharpParser.ARGLIST);
            this.state = 5526;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ASCENDING:
            this.enterOuterAlt(localctx, 5);
            this.state = 5527;
            this.match(CSharpParser.ASCENDING);
            this.state = 5528;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ASYNC:
            this.enterOuterAlt(localctx, 6);
            this.state = 5529;
            this.match(CSharpParser.ASYNC);
            this.state = 5530;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.AWAIT:
            this.enterOuterAlt(localctx, 7);
            this.state = 5531;
            this.match(CSharpParser.AWAIT);
            this.state = 5532;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.BY:
            this.enterOuterAlt(localctx, 8);
            this.state = 5533;
            this.match(CSharpParser.BY);
            this.state = 5534;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DESCENDING:
            this.enterOuterAlt(localctx, 9);
            this.state = 5535;
            this.match(CSharpParser.DESCENDING);
            this.state = 5536;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.DYNAMIC:
            this.enterOuterAlt(localctx, 10);
            this.state = 5537;
            this.match(CSharpParser.DYNAMIC);
            this.state = 5538;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.EQUALS:
            this.enterOuterAlt(localctx, 11);
            this.state = 5539;
            this.match(CSharpParser.EQUALS);
            this.state = 5540;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.FROM:
            this.enterOuterAlt(localctx, 12);
            this.state = 5541;
            this.match(CSharpParser.FROM);
            this.state = 5542;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.GET:
            this.enterOuterAlt(localctx, 13);
            this.state = 5543;
            this.match(CSharpParser.GET);
            this.state = 5544;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.GROUP:
            this.enterOuterAlt(localctx, 14);
            this.state = 5545;
            this.match(CSharpParser.GROUP);
            this.state = 5546;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.INTO:
            this.enterOuterAlt(localctx, 15);
            this.state = 5547;
            this.match(CSharpParser.INTO);
            this.state = 5548;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.JOIN:
            this.enterOuterAlt(localctx, 16);
            this.state = 5549;
            this.match(CSharpParser.JOIN);
            this.state = 5550;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.LET:
            this.enterOuterAlt(localctx, 17);
            this.state = 5551;
            this.match(CSharpParser.LET);
            this.state = 5552;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.NAMEOF:
            this.enterOuterAlt(localctx, 18);
            this.state = 5553;
            this.match(CSharpParser.NAMEOF);
            this.state = 5554;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ON:
            this.enterOuterAlt(localctx, 19);
            this.state = 5555;
            this.match(CSharpParser.ON);
            this.state = 5556;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.ORDERBY:
            this.enterOuterAlt(localctx, 20);
            this.state = 5557;
            this.match(CSharpParser.ORDERBY);
            this.state = 5558;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.PARTIAL:
            this.enterOuterAlt(localctx, 21);
            this.state = 5559;
            this.match(CSharpParser.PARTIAL);
            this.state = 5560;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.REMOVE:
            this.enterOuterAlt(localctx, 22);
            this.state = 5561;
            this.match(CSharpParser.REMOVE);
            this.state = 5562;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SELECT:
            this.enterOuterAlt(localctx, 23);
            this.state = 5563;
            this.match(CSharpParser.SELECT);
            this.state = 5564;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.SET:
            this.enterOuterAlt(localctx, 24);
            this.state = 5565;
            this.match(CSharpParser.SET);
            this.state = 5566;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.VAR:
            this.enterOuterAlt(localctx, 25);
            this.state = 5567;
            this.match(CSharpParser.VAR);
            this.state = 5568;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.WHEN:
            this.enterOuterAlt(localctx, 26);
            this.state = 5569;
            this.match(CSharpParser.WHEN);
            this.state = 5570;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.WHERE:
            this.enterOuterAlt(localctx, 27);
            this.state = 5571;
            this.match(CSharpParser.WHERE);
            this.state = 5572;
            this.match(CSharpParser.EOF);
            break;
        case CSharpParser.YIELD:
            this.enterOuterAlt(localctx, 28);
            this.state = 5573;
            this.match(CSharpParser.YIELD);
            this.state = 5574;
            this.match(CSharpParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


CSharpParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 171:
			return this.right_arrow_sempred(localctx, predIndex);
	case 172:
			return this.right_shift_sempred(localctx, predIndex);
	case 173:
			return this.right_shift_assignment_sempred(localctx, predIndex);
	case 373:
			return this.right_arrow_DropletFile_sempred(localctx, predIndex);
	case 374:
			return this.right_shift_DropletFile_sempred(localctx, predIndex);
	case 375:
			return this.right_shift_assignment_DropletFile_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

CSharpParser.prototype.right_arrow_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CSharpParser.prototype.right_shift_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CSharpParser.prototype.right_shift_assignment_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CSharpParser.prototype.right_arrow_DropletFile_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CSharpParser.prototype.right_shift_DropletFile_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CSharpParser.prototype.right_shift_assignment_DropletFile_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.CSharpParser = CSharpParser;
