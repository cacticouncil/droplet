
// Generated from Java.g4 by ANTLR 4.7.1


#include "JavaListener.h"

#include "JavaParser.h"


using namespace antlrcpp;
using namespace antlr4;

JavaParser::JavaParser(TokenStream *input) : Parser(input) {
  _interpreter = new atn::ParserATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

JavaParser::~JavaParser() {
  delete _interpreter;
}

std::string JavaParser::getGrammarFileName() const {
  return "Java.g4";
}

const std::vector<std::string>& JavaParser::getRuleNames() const {
  return _ruleNames;
}

dfa::Vocabulary& JavaParser::getVocabulary() const {
  return _vocabulary;
}


//----------------- LiteralContext ------------------------------------------------------------------

JavaParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::LiteralContext::IntegerLiteral() {
  return getToken(JavaParser::IntegerLiteral, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::FloatingPointLiteral() {
  return getToken(JavaParser::FloatingPointLiteral, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::BooleanLiteral() {
  return getToken(JavaParser::BooleanLiteral, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::CharacterLiteral() {
  return getToken(JavaParser::CharacterLiteral, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::StringLiteral() {
  return getToken(JavaParser::StringLiteral, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::NullLiteral() {
  return getToken(JavaParser::NullLiteral, 0);
}


size_t JavaParser::LiteralContext::getRuleIndex() const {
  return JavaParser::RuleLiteral;
}

void JavaParser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void JavaParser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

JavaParser::LiteralContext* JavaParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 0, JavaParser::RuleLiteral);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(978);
    _la = _input->LA(1);
    if (!(((((_la - 62) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 62)) & ((1ULL << (JavaParser::IntegerLiteral - 62))
      | (1ULL << (JavaParser::FloatingPointLiteral - 62))
      | (1ULL << (JavaParser::BooleanLiteral - 62))
      | (1ULL << (JavaParser::CharacterLiteral - 62))
      | (1ULL << (JavaParser::StringLiteral - 62))
      | (1ULL << (JavaParser::NullLiteral - 62)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveTypeContext ------------------------------------------------------------------

JavaParser::PrimitiveTypeContext::PrimitiveTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NumericTypeContext* JavaParser::PrimitiveTypeContext::numericType() {
  return getRuleContext<JavaParser::NumericTypeContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::PrimitiveTypeContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::PrimitiveTypeContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::PrimitiveTypeContext::getRuleIndex() const {
  return JavaParser::RulePrimitiveType;
}

void JavaParser::PrimitiveTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimitiveType(this);
}

void JavaParser::PrimitiveTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimitiveType(this);
}

JavaParser::PrimitiveTypeContext* JavaParser::primitiveType() {
  PrimitiveTypeContext *_localctx = _tracker.createInstance<PrimitiveTypeContext>(_ctx, getState());
  enterRule(_localctx, 2, JavaParser::RulePrimitiveType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(994);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(983);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(980);
        annotation();
        setState(985);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(986);
      numericType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(990);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(987);
        annotation();
        setState(992);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(993);
      match(JavaParser::BOOLEAN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericTypeContext ------------------------------------------------------------------

JavaParser::NumericTypeContext::NumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IntegralTypeContext* JavaParser::NumericTypeContext::integralType() {
  return getRuleContext<JavaParser::IntegralTypeContext>(0);
}

JavaParser::FloatingPointTypeContext* JavaParser::NumericTypeContext::floatingPointType() {
  return getRuleContext<JavaParser::FloatingPointTypeContext>(0);
}


size_t JavaParser::NumericTypeContext::getRuleIndex() const {
  return JavaParser::RuleNumericType;
}

void JavaParser::NumericTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumericType(this);
}

void JavaParser::NumericTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumericType(this);
}

JavaParser::NumericTypeContext* JavaParser::numericType() {
  NumericTypeContext *_localctx = _tracker.createInstance<NumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 4, JavaParser::RuleNumericType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(998);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT: {
        enterOuterAlt(_localctx, 1);
        setState(996);
        integralType();
        break;
      }

      case JavaParser::DOUBLE:
      case JavaParser::FLOAT: {
        enterOuterAlt(_localctx, 2);
        setState(997);
        floatingPointType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegralTypeContext ------------------------------------------------------------------

JavaParser::IntegralTypeContext::IntegralTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::IntegralTypeContext::getRuleIndex() const {
  return JavaParser::RuleIntegralType;
}

void JavaParser::IntegralTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntegralType(this);
}

void JavaParser::IntegralTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntegralType(this);
}

JavaParser::IntegralTypeContext* JavaParser::integralType() {
  IntegralTypeContext *_localctx = _tracker.createInstance<IntegralTypeContext>(_ctx, getState());
  enterRule(_localctx, 6, JavaParser::RuleIntegralType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1000);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::SHORT))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatingPointTypeContext ------------------------------------------------------------------

JavaParser::FloatingPointTypeContext::FloatingPointTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::FloatingPointTypeContext::getRuleIndex() const {
  return JavaParser::RuleFloatingPointType;
}

void JavaParser::FloatingPointTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFloatingPointType(this);
}

void JavaParser::FloatingPointTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFloatingPointType(this);
}

JavaParser::FloatingPointTypeContext* JavaParser::floatingPointType() {
  FloatingPointTypeContext *_localctx = _tracker.createInstance<FloatingPointTypeContext>(_ctx, getState());
  enterRule(_localctx, 8, JavaParser::RuleFloatingPointType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1002);
    _la = _input->LA(1);
    if (!(_la == JavaParser::DOUBLE

    || _la == JavaParser::FLOAT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceTypeContext ------------------------------------------------------------------

JavaParser::ReferenceTypeContext::ReferenceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ReferenceTypeContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

JavaParser::TypeVariableContext* JavaParser::ReferenceTypeContext::typeVariable() {
  return getRuleContext<JavaParser::TypeVariableContext>(0);
}

JavaParser::ArrayTypeContext* JavaParser::ReferenceTypeContext::arrayType() {
  return getRuleContext<JavaParser::ArrayTypeContext>(0);
}


size_t JavaParser::ReferenceTypeContext::getRuleIndex() const {
  return JavaParser::RuleReferenceType;
}

void JavaParser::ReferenceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReferenceType(this);
}

void JavaParser::ReferenceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReferenceType(this);
}

JavaParser::ReferenceTypeContext* JavaParser::referenceType() {
  ReferenceTypeContext *_localctx = _tracker.createInstance<ReferenceTypeContext>(_ctx, getState());
  enterRule(_localctx, 10, JavaParser::RuleReferenceType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1007);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1004);
      classOrInterfaceType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1005);
      typeVariable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1006);
      arrayType();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassOrInterfaceTypeContext ------------------------------------------------------------------

JavaParser::ClassOrInterfaceTypeContext::ClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassType_lfno_classOrInterfaceTypeContext* JavaParser::ClassOrInterfaceTypeContext::classType_lfno_classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassType_lfno_classOrInterfaceTypeContext>(0);
}

JavaParser::InterfaceType_lfno_classOrInterfaceTypeContext* JavaParser::ClassOrInterfaceTypeContext::interfaceType_lfno_classOrInterfaceType() {
  return getRuleContext<JavaParser::InterfaceType_lfno_classOrInterfaceTypeContext>(0);
}

std::vector<JavaParser::ClassType_lf_classOrInterfaceTypeContext *> JavaParser::ClassOrInterfaceTypeContext::classType_lf_classOrInterfaceType() {
  return getRuleContexts<JavaParser::ClassType_lf_classOrInterfaceTypeContext>();
}

JavaParser::ClassType_lf_classOrInterfaceTypeContext* JavaParser::ClassOrInterfaceTypeContext::classType_lf_classOrInterfaceType(size_t i) {
  return getRuleContext<JavaParser::ClassType_lf_classOrInterfaceTypeContext>(i);
}

std::vector<JavaParser::InterfaceType_lf_classOrInterfaceTypeContext *> JavaParser::ClassOrInterfaceTypeContext::interfaceType_lf_classOrInterfaceType() {
  return getRuleContexts<JavaParser::InterfaceType_lf_classOrInterfaceTypeContext>();
}

JavaParser::InterfaceType_lf_classOrInterfaceTypeContext* JavaParser::ClassOrInterfaceTypeContext::interfaceType_lf_classOrInterfaceType(size_t i) {
  return getRuleContext<JavaParser::InterfaceType_lf_classOrInterfaceTypeContext>(i);
}


size_t JavaParser::ClassOrInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleClassOrInterfaceType;
}

void JavaParser::ClassOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassOrInterfaceType(this);
}

void JavaParser::ClassOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassOrInterfaceType(this);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::classOrInterfaceType() {
  ClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<ClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 12, JavaParser::RuleClassOrInterfaceType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1011);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      setState(1009);
      classType_lfno_classOrInterfaceType();
      break;
    }

    case 2: {
      setState(1010);
      interfaceType_lfno_classOrInterfaceType();
      break;
    }

    }
    setState(1017);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1015);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
        case 1: {
          setState(1013);
          classType_lf_classOrInterfaceType();
          break;
        }

        case 2: {
          setState(1014);
          interfaceType_lf_classOrInterfaceType();
          break;
        }

        } 
      }
      setState(1019);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassTypeContext ------------------------------------------------------------------

JavaParser::ClassTypeContext::ClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ClassTypeContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassTypeContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassTypeContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassTypeContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ClassTypeContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}


size_t JavaParser::ClassTypeContext::getRuleIndex() const {
  return JavaParser::RuleClassType;
}

void JavaParser::ClassTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassType(this);
}

void JavaParser::ClassTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassType(this);
}

JavaParser::ClassTypeContext* JavaParser::classType() {
  ClassTypeContext *_localctx = _tracker.createInstance<ClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 14, JavaParser::RuleClassType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1042);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1023);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(1020);
        annotation();
        setState(1025);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1026);
      identifier();
      setState(1028);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(1027);
        typeArguments();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1030);
      classOrInterfaceType();
      setState(1031);
      match(JavaParser::DOT);
      setState(1035);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(1032);
        annotation();
        setState(1037);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1038);
      identifier();
      setState(1040);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(1039);
        typeArguments();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassType_lf_classOrInterfaceTypeContext ------------------------------------------------------------------

JavaParser::ClassType_lf_classOrInterfaceTypeContext::ClassType_lf_classOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ClassType_lf_classOrInterfaceTypeContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassType_lf_classOrInterfaceTypeContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassType_lf_classOrInterfaceTypeContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassType_lf_classOrInterfaceTypeContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::ClassType_lf_classOrInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleClassType_lf_classOrInterfaceType;
}

void JavaParser::ClassType_lf_classOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassType_lf_classOrInterfaceType(this);
}

void JavaParser::ClassType_lf_classOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassType_lf_classOrInterfaceType(this);
}

JavaParser::ClassType_lf_classOrInterfaceTypeContext* JavaParser::classType_lf_classOrInterfaceType() {
  ClassType_lf_classOrInterfaceTypeContext *_localctx = _tracker.createInstance<ClassType_lf_classOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 16, JavaParser::RuleClassType_lf_classOrInterfaceType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1044);
    match(JavaParser::DOT);
    setState(1048);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1045);
      annotation();
      setState(1050);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1051);
    identifier();
    setState(1053);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      setState(1052);
      typeArguments();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassType_lfno_classOrInterfaceTypeContext ------------------------------------------------------------------

JavaParser::ClassType_lfno_classOrInterfaceTypeContext::ClassType_lfno_classOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ClassType_lfno_classOrInterfaceTypeContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassType_lfno_classOrInterfaceTypeContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassType_lfno_classOrInterfaceTypeContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassType_lfno_classOrInterfaceTypeContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::ClassType_lfno_classOrInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleClassType_lfno_classOrInterfaceType;
}

void JavaParser::ClassType_lfno_classOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassType_lfno_classOrInterfaceType(this);
}

void JavaParser::ClassType_lfno_classOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassType_lfno_classOrInterfaceType(this);
}

JavaParser::ClassType_lfno_classOrInterfaceTypeContext* JavaParser::classType_lfno_classOrInterfaceType() {
  ClassType_lfno_classOrInterfaceTypeContext *_localctx = _tracker.createInstance<ClassType_lfno_classOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 18, JavaParser::RuleClassType_lfno_classOrInterfaceType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1058);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1055);
      annotation();
      setState(1060);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1061);
    identifier();
    setState(1063);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      setState(1062);
      typeArguments();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceTypeContext ------------------------------------------------------------------

JavaParser::InterfaceTypeContext::InterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassTypeContext* JavaParser::InterfaceTypeContext::classType() {
  return getRuleContext<JavaParser::ClassTypeContext>(0);
}


size_t JavaParser::InterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceType;
}

void JavaParser::InterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceType(this);
}

void JavaParser::InterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceType(this);
}

JavaParser::InterfaceTypeContext* JavaParser::interfaceType() {
  InterfaceTypeContext *_localctx = _tracker.createInstance<InterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 20, JavaParser::RuleInterfaceType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1065);
    classType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceType_lf_classOrInterfaceTypeContext ------------------------------------------------------------------

JavaParser::InterfaceType_lf_classOrInterfaceTypeContext::InterfaceType_lf_classOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassType_lf_classOrInterfaceTypeContext* JavaParser::InterfaceType_lf_classOrInterfaceTypeContext::classType_lf_classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassType_lf_classOrInterfaceTypeContext>(0);
}


size_t JavaParser::InterfaceType_lf_classOrInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceType_lf_classOrInterfaceType;
}

void JavaParser::InterfaceType_lf_classOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceType_lf_classOrInterfaceType(this);
}

void JavaParser::InterfaceType_lf_classOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceType_lf_classOrInterfaceType(this);
}

JavaParser::InterfaceType_lf_classOrInterfaceTypeContext* JavaParser::interfaceType_lf_classOrInterfaceType() {
  InterfaceType_lf_classOrInterfaceTypeContext *_localctx = _tracker.createInstance<InterfaceType_lf_classOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 22, JavaParser::RuleInterfaceType_lf_classOrInterfaceType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1067);
    classType_lf_classOrInterfaceType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceType_lfno_classOrInterfaceTypeContext ------------------------------------------------------------------

JavaParser::InterfaceType_lfno_classOrInterfaceTypeContext::InterfaceType_lfno_classOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassType_lfno_classOrInterfaceTypeContext* JavaParser::InterfaceType_lfno_classOrInterfaceTypeContext::classType_lfno_classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassType_lfno_classOrInterfaceTypeContext>(0);
}


size_t JavaParser::InterfaceType_lfno_classOrInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceType_lfno_classOrInterfaceType;
}

void JavaParser::InterfaceType_lfno_classOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceType_lfno_classOrInterfaceType(this);
}

void JavaParser::InterfaceType_lfno_classOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceType_lfno_classOrInterfaceType(this);
}

JavaParser::InterfaceType_lfno_classOrInterfaceTypeContext* JavaParser::interfaceType_lfno_classOrInterfaceType() {
  InterfaceType_lfno_classOrInterfaceTypeContext *_localctx = _tracker.createInstance<InterfaceType_lfno_classOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 24, JavaParser::RuleInterfaceType_lfno_classOrInterfaceType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1069);
    classType_lfno_classOrInterfaceType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeVariableContext ------------------------------------------------------------------

JavaParser::TypeVariableContext::TypeVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::TypeVariableContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::TypeVariableContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::TypeVariableContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::TypeVariableContext::getRuleIndex() const {
  return JavaParser::RuleTypeVariable;
}

void JavaParser::TypeVariableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeVariable(this);
}

void JavaParser::TypeVariableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeVariable(this);
}

JavaParser::TypeVariableContext* JavaParser::typeVariable() {
  TypeVariableContext *_localctx = _tracker.createInstance<TypeVariableContext>(_ctx, getState());
  enterRule(_localctx, 26, JavaParser::RuleTypeVariable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1074);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1071);
      annotation();
      setState(1076);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1077);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayTypeContext ------------------------------------------------------------------

JavaParser::ArrayTypeContext::ArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimitiveTypeContext* JavaParser::ArrayTypeContext::primitiveType() {
  return getRuleContext<JavaParser::PrimitiveTypeContext>(0);
}

JavaParser::DimsContext* JavaParser::ArrayTypeContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ArrayTypeContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

JavaParser::TypeVariableContext* JavaParser::ArrayTypeContext::typeVariable() {
  return getRuleContext<JavaParser::TypeVariableContext>(0);
}


size_t JavaParser::ArrayTypeContext::getRuleIndex() const {
  return JavaParser::RuleArrayType;
}

void JavaParser::ArrayTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayType(this);
}

void JavaParser::ArrayTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayType(this);
}

JavaParser::ArrayTypeContext* JavaParser::arrayType() {
  ArrayTypeContext *_localctx = _tracker.createInstance<ArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 28, JavaParser::RuleArrayType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1088);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1079);
      primitiveType();
      setState(1080);
      dims();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1082);
      classOrInterfaceType();
      setState(1083);
      dims();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1085);
      typeVariable();
      setState(1086);
      dims();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimsContext ------------------------------------------------------------------

JavaParser::DimsContext::DimsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::AnnotationContext *> JavaParser::DimsContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::DimsContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::DimsContext::getRuleIndex() const {
  return JavaParser::RuleDims;
}

void JavaParser::DimsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDims(this);
}

void JavaParser::DimsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDims(this);
}

JavaParser::DimsContext* JavaParser::dims() {
  DimsContext *_localctx = _tracker.createInstance<DimsContext>(_ctx, getState());
  enterRule(_localctx, 30, JavaParser::RuleDims);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1093);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1090);
      annotation();
      setState(1095);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1096);
    match(JavaParser::LBRACK);
    setState(1097);
    match(JavaParser::RBRACK);
    setState(1108);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1101);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::AT) {
          setState(1098);
          annotation();
          setState(1103);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1104);
        match(JavaParser::LBRACK);
        setState(1105);
        match(JavaParser::RBRACK); 
      }
      setState(1110);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterContext ------------------------------------------------------------------

JavaParser::TypeParameterContext::TypeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::TypeParameterContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::TypeParameterModifierContext *> JavaParser::TypeParameterContext::typeParameterModifier() {
  return getRuleContexts<JavaParser::TypeParameterModifierContext>();
}

JavaParser::TypeParameterModifierContext* JavaParser::TypeParameterContext::typeParameterModifier(size_t i) {
  return getRuleContext<JavaParser::TypeParameterModifierContext>(i);
}

JavaParser::TypeBoundContext* JavaParser::TypeParameterContext::typeBound() {
  return getRuleContext<JavaParser::TypeBoundContext>(0);
}


size_t JavaParser::TypeParameterContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameter;
}

void JavaParser::TypeParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameter(this);
}

void JavaParser::TypeParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameter(this);
}

JavaParser::TypeParameterContext* JavaParser::typeParameter() {
  TypeParameterContext *_localctx = _tracker.createInstance<TypeParameterContext>(_ctx, getState());
  enterRule(_localctx, 32, JavaParser::RuleTypeParameter);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1114);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1111);
      typeParameterModifier();
      setState(1116);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1117);
    identifier();
    setState(1119);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(1118);
      typeBound();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterModifierContext ------------------------------------------------------------------

JavaParser::TypeParameterModifierContext::TypeParameterModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::TypeParameterModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::TypeParameterModifierContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameterModifier;
}

void JavaParser::TypeParameterModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameterModifier(this);
}

void JavaParser::TypeParameterModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameterModifier(this);
}

JavaParser::TypeParameterModifierContext* JavaParser::typeParameterModifier() {
  TypeParameterModifierContext *_localctx = _tracker.createInstance<TypeParameterModifierContext>(_ctx, getState());
  enterRule(_localctx, 34, JavaParser::RuleTypeParameterModifier);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1121);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeBoundContext ------------------------------------------------------------------

JavaParser::TypeBoundContext::TypeBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeVariableContext* JavaParser::TypeBoundContext::typeVariable() {
  return getRuleContext<JavaParser::TypeVariableContext>(0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::TypeBoundContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

std::vector<JavaParser::AdditionalBoundContext *> JavaParser::TypeBoundContext::additionalBound() {
  return getRuleContexts<JavaParser::AdditionalBoundContext>();
}

JavaParser::AdditionalBoundContext* JavaParser::TypeBoundContext::additionalBound(size_t i) {
  return getRuleContext<JavaParser::AdditionalBoundContext>(i);
}


size_t JavaParser::TypeBoundContext::getRuleIndex() const {
  return JavaParser::RuleTypeBound;
}

void JavaParser::TypeBoundContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeBound(this);
}

void JavaParser::TypeBoundContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeBound(this);
}

JavaParser::TypeBoundContext* JavaParser::typeBound() {
  TypeBoundContext *_localctx = _tracker.createInstance<TypeBoundContext>(_ctx, getState());
  enterRule(_localctx, 36, JavaParser::RuleTypeBound);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1133);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1123);
      match(JavaParser::EXTENDS);
      setState(1124);
      typeVariable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1125);
      match(JavaParser::EXTENDS);
      setState(1126);
      classOrInterfaceType();
      setState(1130);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::BITAND) {
        setState(1127);
        additionalBound();
        setState(1132);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditionalBoundContext ------------------------------------------------------------------

JavaParser::AdditionalBoundContext::AdditionalBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::InterfaceTypeContext* JavaParser::AdditionalBoundContext::interfaceType() {
  return getRuleContext<JavaParser::InterfaceTypeContext>(0);
}


size_t JavaParser::AdditionalBoundContext::getRuleIndex() const {
  return JavaParser::RuleAdditionalBound;
}

void JavaParser::AdditionalBoundContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditionalBound(this);
}

void JavaParser::AdditionalBoundContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditionalBound(this);
}

JavaParser::AdditionalBoundContext* JavaParser::additionalBound() {
  AdditionalBoundContext *_localctx = _tracker.createInstance<AdditionalBoundContext>(_ctx, getState());
  enterRule(_localctx, 38, JavaParser::RuleAdditionalBound);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1135);
    match(JavaParser::BITAND);
    setState(1136);
    interfaceType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsContext ------------------------------------------------------------------

JavaParser::TypeArgumentsContext::TypeArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeArgumentListContext* JavaParser::TypeArgumentsContext::typeArgumentList() {
  return getRuleContext<JavaParser::TypeArgumentListContext>(0);
}


size_t JavaParser::TypeArgumentsContext::getRuleIndex() const {
  return JavaParser::RuleTypeArguments;
}

void JavaParser::TypeArgumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArguments(this);
}

void JavaParser::TypeArgumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArguments(this);
}

JavaParser::TypeArgumentsContext* JavaParser::typeArguments() {
  TypeArgumentsContext *_localctx = _tracker.createInstance<TypeArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 40, JavaParser::RuleTypeArguments);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1138);
    match(JavaParser::LT);
    setState(1139);
    typeArgumentList();
    setState(1140);
    match(JavaParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentListContext ------------------------------------------------------------------

JavaParser::TypeArgumentListContext::TypeArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::TypeArgumentContext *> JavaParser::TypeArgumentListContext::typeArgument() {
  return getRuleContexts<JavaParser::TypeArgumentContext>();
}

JavaParser::TypeArgumentContext* JavaParser::TypeArgumentListContext::typeArgument(size_t i) {
  return getRuleContext<JavaParser::TypeArgumentContext>(i);
}


size_t JavaParser::TypeArgumentListContext::getRuleIndex() const {
  return JavaParser::RuleTypeArgumentList;
}

void JavaParser::TypeArgumentListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgumentList(this);
}

void JavaParser::TypeArgumentListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgumentList(this);
}

JavaParser::TypeArgumentListContext* JavaParser::typeArgumentList() {
  TypeArgumentListContext *_localctx = _tracker.createInstance<TypeArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 42, JavaParser::RuleTypeArgumentList);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1142);
    typeArgument();
    setState(1147);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1143);
      match(JavaParser::COMMA);
      setState(1144);
      typeArgument();
      setState(1149);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentContext ------------------------------------------------------------------

JavaParser::TypeArgumentContext::TypeArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ReferenceTypeContext* JavaParser::TypeArgumentContext::referenceType() {
  return getRuleContext<JavaParser::ReferenceTypeContext>(0);
}

JavaParser::WildcardContext* JavaParser::TypeArgumentContext::wildcard() {
  return getRuleContext<JavaParser::WildcardContext>(0);
}


size_t JavaParser::TypeArgumentContext::getRuleIndex() const {
  return JavaParser::RuleTypeArgument;
}

void JavaParser::TypeArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgument(this);
}

void JavaParser::TypeArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgument(this);
}

JavaParser::TypeArgumentContext* JavaParser::typeArgument() {
  TypeArgumentContext *_localctx = _tracker.createInstance<TypeArgumentContext>(_ctx, getState());
  enterRule(_localctx, 44, JavaParser::RuleTypeArgument);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1152);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1150);
      referenceType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1151);
      wildcard();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WildcardContext ------------------------------------------------------------------

JavaParser::WildcardContext::WildcardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::AnnotationContext *> JavaParser::WildcardContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::WildcardContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::WildcardBoundsContext* JavaParser::WildcardContext::wildcardBounds() {
  return getRuleContext<JavaParser::WildcardBoundsContext>(0);
}


size_t JavaParser::WildcardContext::getRuleIndex() const {
  return JavaParser::RuleWildcard;
}

void JavaParser::WildcardContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWildcard(this);
}

void JavaParser::WildcardContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWildcard(this);
}

JavaParser::WildcardContext* JavaParser::wildcard() {
  WildcardContext *_localctx = _tracker.createInstance<WildcardContext>(_ctx, getState());
  enterRule(_localctx, 46, JavaParser::RuleWildcard);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1157);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1154);
      annotation();
      setState(1159);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1160);
    match(JavaParser::QUESTION);
    setState(1162);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS

    || _la == JavaParser::SUPER) {
      setState(1161);
      wildcardBounds();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WildcardBoundsContext ------------------------------------------------------------------

JavaParser::WildcardBoundsContext::WildcardBoundsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ReferenceTypeContext* JavaParser::WildcardBoundsContext::referenceType() {
  return getRuleContext<JavaParser::ReferenceTypeContext>(0);
}


size_t JavaParser::WildcardBoundsContext::getRuleIndex() const {
  return JavaParser::RuleWildcardBounds;
}

void JavaParser::WildcardBoundsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWildcardBounds(this);
}

void JavaParser::WildcardBoundsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWildcardBounds(this);
}

JavaParser::WildcardBoundsContext* JavaParser::wildcardBounds() {
  WildcardBoundsContext *_localctx = _tracker.createInstance<WildcardBoundsContext>(_ctx, getState());
  enterRule(_localctx, 48, JavaParser::RuleWildcardBounds);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1168);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::EXTENDS: {
        enterOuterAlt(_localctx, 1);
        setState(1164);
        match(JavaParser::EXTENDS);
        setState(1165);
        referenceType();
        break;
      }

      case JavaParser::SUPER: {
        enterOuterAlt(_localctx, 2);
        setState(1166);
        match(JavaParser::SUPER);
        setState(1167);
        referenceType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleNameContext ------------------------------------------------------------------

JavaParser::ModuleNameContext::ModuleNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ModuleNameContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ModuleNameContext* JavaParser::ModuleNameContext::moduleName() {
  return getRuleContext<JavaParser::ModuleNameContext>(0);
}


size_t JavaParser::ModuleNameContext::getRuleIndex() const {
  return JavaParser::RuleModuleName;
}

void JavaParser::ModuleNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleName(this);
}

void JavaParser::ModuleNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleName(this);
}


JavaParser::ModuleNameContext* JavaParser::moduleName() {
   return moduleName(0);
}

JavaParser::ModuleNameContext* JavaParser::moduleName(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::ModuleNameContext *_localctx = _tracker.createInstance<ModuleNameContext>(_ctx, parentState);
  JavaParser::ModuleNameContext *previousContext = _localctx;
  size_t startState = 50;
  enterRecursionRule(_localctx, 50, JavaParser::RuleModuleName, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1171);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(1178);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ModuleNameContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleModuleName);
        setState(1173);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1174);
        match(JavaParser::DOT);
        setState(1175);
        identifier(); 
      }
      setState(1180);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PackageNameContext ------------------------------------------------------------------

JavaParser::PackageNameContext::PackageNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::PackageNameContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::PackageNameContext* JavaParser::PackageNameContext::packageName() {
  return getRuleContext<JavaParser::PackageNameContext>(0);
}


size_t JavaParser::PackageNameContext::getRuleIndex() const {
  return JavaParser::RulePackageName;
}

void JavaParser::PackageNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageName(this);
}

void JavaParser::PackageNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageName(this);
}


JavaParser::PackageNameContext* JavaParser::packageName() {
   return packageName(0);
}

JavaParser::PackageNameContext* JavaParser::packageName(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::PackageNameContext *_localctx = _tracker.createInstance<PackageNameContext>(_ctx, parentState);
  JavaParser::PackageNameContext *previousContext = _localctx;
  size_t startState = 52;
  enterRecursionRule(_localctx, 52, JavaParser::RulePackageName, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1182);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(1189);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<PackageNameContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RulePackageName);
        setState(1184);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1185);
        match(JavaParser::DOT);
        setState(1186);
        identifier(); 
      }
      setState(1191);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TypeNameContext ------------------------------------------------------------------

JavaParser::TypeNameContext::TypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::TypeNameContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::PackageOrTypeNameContext* JavaParser::TypeNameContext::packageOrTypeName() {
  return getRuleContext<JavaParser::PackageOrTypeNameContext>(0);
}


size_t JavaParser::TypeNameContext::getRuleIndex() const {
  return JavaParser::RuleTypeName;
}

void JavaParser::TypeNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeName(this);
}

void JavaParser::TypeNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeName(this);
}

JavaParser::TypeNameContext* JavaParser::typeName() {
  TypeNameContext *_localctx = _tracker.createInstance<TypeNameContext>(_ctx, getState());
  enterRule(_localctx, 54, JavaParser::RuleTypeName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1197);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1192);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1193);
      packageOrTypeName(0);
      setState(1194);
      match(JavaParser::DOT);
      setState(1195);
      identifier();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageOrTypeNameContext ------------------------------------------------------------------

JavaParser::PackageOrTypeNameContext::PackageOrTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::PackageOrTypeNameContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::PackageOrTypeNameContext* JavaParser::PackageOrTypeNameContext::packageOrTypeName() {
  return getRuleContext<JavaParser::PackageOrTypeNameContext>(0);
}


size_t JavaParser::PackageOrTypeNameContext::getRuleIndex() const {
  return JavaParser::RulePackageOrTypeName;
}

void JavaParser::PackageOrTypeNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageOrTypeName(this);
}

void JavaParser::PackageOrTypeNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageOrTypeName(this);
}


JavaParser::PackageOrTypeNameContext* JavaParser::packageOrTypeName() {
   return packageOrTypeName(0);
}

JavaParser::PackageOrTypeNameContext* JavaParser::packageOrTypeName(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::PackageOrTypeNameContext *_localctx = _tracker.createInstance<PackageOrTypeNameContext>(_ctx, parentState);
  JavaParser::PackageOrTypeNameContext *previousContext = _localctx;
  size_t startState = 56;
  enterRecursionRule(_localctx, 56, JavaParser::RulePackageOrTypeName, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1200);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(1207);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<PackageOrTypeNameContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RulePackageOrTypeName);
        setState(1202);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1203);
        match(JavaParser::DOT);
        setState(1204);
        identifier(); 
      }
      setState(1209);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExpressionNameContext ------------------------------------------------------------------

JavaParser::ExpressionNameContext::ExpressionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ExpressionNameContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::AmbiguousNameContext* JavaParser::ExpressionNameContext::ambiguousName() {
  return getRuleContext<JavaParser::AmbiguousNameContext>(0);
}


size_t JavaParser::ExpressionNameContext::getRuleIndex() const {
  return JavaParser::RuleExpressionName;
}

void JavaParser::ExpressionNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionName(this);
}

void JavaParser::ExpressionNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionName(this);
}

JavaParser::ExpressionNameContext* JavaParser::expressionName() {
  ExpressionNameContext *_localctx = _tracker.createInstance<ExpressionNameContext>(_ctx, getState());
  enterRule(_localctx, 58, JavaParser::RuleExpressionName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1215);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1210);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1211);
      ambiguousName(0);
      setState(1212);
      match(JavaParser::DOT);
      setState(1213);
      identifier();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodNameContext ------------------------------------------------------------------

JavaParser::MethodNameContext::MethodNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::MethodNameContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::MethodNameContext::getRuleIndex() const {
  return JavaParser::RuleMethodName;
}

void JavaParser::MethodNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodName(this);
}

void JavaParser::MethodNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodName(this);
}

JavaParser::MethodNameContext* JavaParser::methodName() {
  MethodNameContext *_localctx = _tracker.createInstance<MethodNameContext>(_ctx, getState());
  enterRule(_localctx, 60, JavaParser::RuleMethodName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1217);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AmbiguousNameContext ------------------------------------------------------------------

JavaParser::AmbiguousNameContext::AmbiguousNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::AmbiguousNameContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::AmbiguousNameContext* JavaParser::AmbiguousNameContext::ambiguousName() {
  return getRuleContext<JavaParser::AmbiguousNameContext>(0);
}


size_t JavaParser::AmbiguousNameContext::getRuleIndex() const {
  return JavaParser::RuleAmbiguousName;
}

void JavaParser::AmbiguousNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAmbiguousName(this);
}

void JavaParser::AmbiguousNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAmbiguousName(this);
}


JavaParser::AmbiguousNameContext* JavaParser::ambiguousName() {
   return ambiguousName(0);
}

JavaParser::AmbiguousNameContext* JavaParser::ambiguousName(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::AmbiguousNameContext *_localctx = _tracker.createInstance<AmbiguousNameContext>(_ctx, parentState);
  JavaParser::AmbiguousNameContext *previousContext = _localctx;
  size_t startState = 62;
  enterRecursionRule(_localctx, 62, JavaParser::RuleAmbiguousName, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1220);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(1227);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<AmbiguousNameContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleAmbiguousName);
        setState(1222);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1223);
        match(JavaParser::DOT);
        setState(1224);
        identifier(); 
      }
      setState(1229);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- CompilationUnitContext ------------------------------------------------------------------

JavaParser::CompilationUnitContext::CompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::OrdinaryCompilationContext* JavaParser::CompilationUnitContext::ordinaryCompilation() {
  return getRuleContext<JavaParser::OrdinaryCompilationContext>(0);
}

JavaParser::ModularCompilationContext* JavaParser::CompilationUnitContext::modularCompilation() {
  return getRuleContext<JavaParser::ModularCompilationContext>(0);
}


size_t JavaParser::CompilationUnitContext::getRuleIndex() const {
  return JavaParser::RuleCompilationUnit;
}

void JavaParser::CompilationUnitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompilationUnit(this);
}

void JavaParser::CompilationUnitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompilationUnit(this);
}

JavaParser::CompilationUnitContext* JavaParser::compilationUnit() {
  CompilationUnitContext *_localctx = _tracker.createInstance<CompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 64, JavaParser::RuleCompilationUnit);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1232);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1230);
      ordinaryCompilation();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1231);
      modularCompilation();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrdinaryCompilationContext ------------------------------------------------------------------

JavaParser::OrdinaryCompilationContext::OrdinaryCompilationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::OrdinaryCompilationContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::PackageDeclarationContext* JavaParser::OrdinaryCompilationContext::packageDeclaration() {
  return getRuleContext<JavaParser::PackageDeclarationContext>(0);
}

std::vector<JavaParser::ImportDeclarationContext *> JavaParser::OrdinaryCompilationContext::importDeclaration() {
  return getRuleContexts<JavaParser::ImportDeclarationContext>();
}

JavaParser::ImportDeclarationContext* JavaParser::OrdinaryCompilationContext::importDeclaration(size_t i) {
  return getRuleContext<JavaParser::ImportDeclarationContext>(i);
}

std::vector<JavaParser::TypeDeclarationContext *> JavaParser::OrdinaryCompilationContext::typeDeclaration() {
  return getRuleContexts<JavaParser::TypeDeclarationContext>();
}

JavaParser::TypeDeclarationContext* JavaParser::OrdinaryCompilationContext::typeDeclaration(size_t i) {
  return getRuleContext<JavaParser::TypeDeclarationContext>(i);
}


size_t JavaParser::OrdinaryCompilationContext::getRuleIndex() const {
  return JavaParser::RuleOrdinaryCompilation;
}

void JavaParser::OrdinaryCompilationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrdinaryCompilation(this);
}

void JavaParser::OrdinaryCompilationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrdinaryCompilation(this);
}

JavaParser::OrdinaryCompilationContext* JavaParser::ordinaryCompilation() {
  OrdinaryCompilationContext *_localctx = _tracker.createInstance<OrdinaryCompilationContext>(_ctx, getState());
  enterRule(_localctx, 66, JavaParser::RuleOrdinaryCompilation);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1235);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(1234);
      packageDeclaration();
      break;
    }

    }
    setState(1240);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::IMPORT) {
      setState(1237);
      importDeclaration();
      setState(1242);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1246);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::INTERFACE)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP))) != 0) || _la == JavaParser::SEMI

    || _la == JavaParser::AT) {
      setState(1243);
      typeDeclaration();
      setState(1248);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1249);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModularCompilationContext ------------------------------------------------------------------

JavaParser::ModularCompilationContext::ModularCompilationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ModuleDeclarationContext* JavaParser::ModularCompilationContext::moduleDeclaration() {
  return getRuleContext<JavaParser::ModuleDeclarationContext>(0);
}

std::vector<JavaParser::ImportDeclarationContext *> JavaParser::ModularCompilationContext::importDeclaration() {
  return getRuleContexts<JavaParser::ImportDeclarationContext>();
}

JavaParser::ImportDeclarationContext* JavaParser::ModularCompilationContext::importDeclaration(size_t i) {
  return getRuleContext<JavaParser::ImportDeclarationContext>(i);
}


size_t JavaParser::ModularCompilationContext::getRuleIndex() const {
  return JavaParser::RuleModularCompilation;
}

void JavaParser::ModularCompilationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModularCompilation(this);
}

void JavaParser::ModularCompilationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModularCompilation(this);
}

JavaParser::ModularCompilationContext* JavaParser::modularCompilation() {
  ModularCompilationContext *_localctx = _tracker.createInstance<ModularCompilationContext>(_ctx, getState());
  enterRule(_localctx, 68, JavaParser::RuleModularCompilation);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1254);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::IMPORT) {
      setState(1251);
      importDeclaration();
      setState(1256);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1257);
    moduleDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageDeclarationContext ------------------------------------------------------------------

JavaParser::PackageDeclarationContext::PackageDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PackageNameContext* JavaParser::PackageDeclarationContext::packageName() {
  return getRuleContext<JavaParser::PackageNameContext>(0);
}

std::vector<JavaParser::PackageModifierContext *> JavaParser::PackageDeclarationContext::packageModifier() {
  return getRuleContexts<JavaParser::PackageModifierContext>();
}

JavaParser::PackageModifierContext* JavaParser::PackageDeclarationContext::packageModifier(size_t i) {
  return getRuleContext<JavaParser::PackageModifierContext>(i);
}


size_t JavaParser::PackageDeclarationContext::getRuleIndex() const {
  return JavaParser::RulePackageDeclaration;
}

void JavaParser::PackageDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageDeclaration(this);
}

void JavaParser::PackageDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageDeclaration(this);
}

JavaParser::PackageDeclarationContext* JavaParser::packageDeclaration() {
  PackageDeclarationContext *_localctx = _tracker.createInstance<PackageDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 70, JavaParser::RulePackageDeclaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1262);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1259);
      packageModifier();
      setState(1264);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1265);
    match(JavaParser::PACKAGE);
    setState(1266);
    packageName(0);
    setState(1267);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageModifierContext ------------------------------------------------------------------

JavaParser::PackageModifierContext::PackageModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::PackageModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::PackageModifierContext::getRuleIndex() const {
  return JavaParser::RulePackageModifier;
}

void JavaParser::PackageModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageModifier(this);
}

void JavaParser::PackageModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageModifier(this);
}

JavaParser::PackageModifierContext* JavaParser::packageModifier() {
  PackageModifierContext *_localctx = _tracker.createInstance<PackageModifierContext>(_ctx, getState());
  enterRule(_localctx, 72, JavaParser::RulePackageModifier);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1269);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportDeclarationContext ------------------------------------------------------------------

JavaParser::ImportDeclarationContext::ImportDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::SingleTypeImportDeclarationContext* JavaParser::ImportDeclarationContext::singleTypeImportDeclaration() {
  return getRuleContext<JavaParser::SingleTypeImportDeclarationContext>(0);
}

JavaParser::TypeImportOnDemandDeclarationContext* JavaParser::ImportDeclarationContext::typeImportOnDemandDeclaration() {
  return getRuleContext<JavaParser::TypeImportOnDemandDeclarationContext>(0);
}

JavaParser::SingleStaticImportDeclarationContext* JavaParser::ImportDeclarationContext::singleStaticImportDeclaration() {
  return getRuleContext<JavaParser::SingleStaticImportDeclarationContext>(0);
}

JavaParser::StaticImportOnDemandDeclarationContext* JavaParser::ImportDeclarationContext::staticImportOnDemandDeclaration() {
  return getRuleContext<JavaParser::StaticImportOnDemandDeclarationContext>(0);
}


size_t JavaParser::ImportDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleImportDeclaration;
}

void JavaParser::ImportDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportDeclaration(this);
}

void JavaParser::ImportDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportDeclaration(this);
}

JavaParser::ImportDeclarationContext* JavaParser::importDeclaration() {
  ImportDeclarationContext *_localctx = _tracker.createInstance<ImportDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 74, JavaParser::RuleImportDeclaration);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1275);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1271);
      singleTypeImportDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1272);
      typeImportOnDemandDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1273);
      singleStaticImportDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1274);
      staticImportOnDemandDeclaration();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleTypeImportDeclarationContext ------------------------------------------------------------------

JavaParser::SingleTypeImportDeclarationContext::SingleTypeImportDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeNameContext* JavaParser::SingleTypeImportDeclarationContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}


size_t JavaParser::SingleTypeImportDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleSingleTypeImportDeclaration;
}

void JavaParser::SingleTypeImportDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleTypeImportDeclaration(this);
}

void JavaParser::SingleTypeImportDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleTypeImportDeclaration(this);
}

JavaParser::SingleTypeImportDeclarationContext* JavaParser::singleTypeImportDeclaration() {
  SingleTypeImportDeclarationContext *_localctx = _tracker.createInstance<SingleTypeImportDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 76, JavaParser::RuleSingleTypeImportDeclaration);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1277);
    match(JavaParser::IMPORT);
    setState(1278);
    typeName();
    setState(1279);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeImportOnDemandDeclarationContext ------------------------------------------------------------------

JavaParser::TypeImportOnDemandDeclarationContext::TypeImportOnDemandDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PackageOrTypeNameContext* JavaParser::TypeImportOnDemandDeclarationContext::packageOrTypeName() {
  return getRuleContext<JavaParser::PackageOrTypeNameContext>(0);
}


size_t JavaParser::TypeImportOnDemandDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleTypeImportOnDemandDeclaration;
}

void JavaParser::TypeImportOnDemandDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeImportOnDemandDeclaration(this);
}

void JavaParser::TypeImportOnDemandDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeImportOnDemandDeclaration(this);
}

JavaParser::TypeImportOnDemandDeclarationContext* JavaParser::typeImportOnDemandDeclaration() {
  TypeImportOnDemandDeclarationContext *_localctx = _tracker.createInstance<TypeImportOnDemandDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 78, JavaParser::RuleTypeImportOnDemandDeclaration);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1281);
    match(JavaParser::IMPORT);
    setState(1282);
    packageOrTypeName(0);
    setState(1283);
    match(JavaParser::DOT);
    setState(1284);
    match(JavaParser::MUL);
    setState(1285);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleStaticImportDeclarationContext ------------------------------------------------------------------

JavaParser::SingleStaticImportDeclarationContext::SingleStaticImportDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeNameContext* JavaParser::SingleStaticImportDeclarationContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::IdentifierContext* JavaParser::SingleStaticImportDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::SingleStaticImportDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleSingleStaticImportDeclaration;
}

void JavaParser::SingleStaticImportDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleStaticImportDeclaration(this);
}

void JavaParser::SingleStaticImportDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleStaticImportDeclaration(this);
}

JavaParser::SingleStaticImportDeclarationContext* JavaParser::singleStaticImportDeclaration() {
  SingleStaticImportDeclarationContext *_localctx = _tracker.createInstance<SingleStaticImportDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 80, JavaParser::RuleSingleStaticImportDeclaration);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1287);
    match(JavaParser::IMPORT);
    setState(1288);
    match(JavaParser::STATIC);
    setState(1289);
    typeName();
    setState(1290);
    match(JavaParser::DOT);
    setState(1291);
    identifier();
    setState(1292);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StaticImportOnDemandDeclarationContext ------------------------------------------------------------------

JavaParser::StaticImportOnDemandDeclarationContext::StaticImportOnDemandDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeNameContext* JavaParser::StaticImportOnDemandDeclarationContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}


size_t JavaParser::StaticImportOnDemandDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleStaticImportOnDemandDeclaration;
}

void JavaParser::StaticImportOnDemandDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStaticImportOnDemandDeclaration(this);
}

void JavaParser::StaticImportOnDemandDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStaticImportOnDemandDeclaration(this);
}

JavaParser::StaticImportOnDemandDeclarationContext* JavaParser::staticImportOnDemandDeclaration() {
  StaticImportOnDemandDeclarationContext *_localctx = _tracker.createInstance<StaticImportOnDemandDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 82, JavaParser::RuleStaticImportOnDemandDeclaration);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1294);
    match(JavaParser::IMPORT);
    setState(1295);
    match(JavaParser::STATIC);
    setState(1296);
    typeName();
    setState(1297);
    match(JavaParser::DOT);
    setState(1298);
    match(JavaParser::MUL);
    setState(1299);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclarationContext ------------------------------------------------------------------

JavaParser::TypeDeclarationContext::TypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassDeclarationContext* JavaParser::TypeDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::TypeDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}


size_t JavaParser::TypeDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleTypeDeclaration;
}

void JavaParser::TypeDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDeclaration(this);
}

void JavaParser::TypeDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDeclaration(this);
}

JavaParser::TypeDeclarationContext* JavaParser::typeDeclaration() {
  TypeDeclarationContext *_localctx = _tracker.createInstance<TypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 84, JavaParser::RuleTypeDeclaration);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1304);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1301);
      classDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1302);
      interfaceDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1303);
      match(JavaParser::SEMI);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDeclarationContext ------------------------------------------------------------------

JavaParser::ModuleDeclarationContext::ModuleDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ModuleNameContext* JavaParser::ModuleDeclarationContext::moduleName() {
  return getRuleContext<JavaParser::ModuleNameContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ModuleDeclarationContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ModuleDeclarationContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

std::vector<JavaParser::ModuleDirectiveContext *> JavaParser::ModuleDeclarationContext::moduleDirective() {
  return getRuleContexts<JavaParser::ModuleDirectiveContext>();
}

JavaParser::ModuleDirectiveContext* JavaParser::ModuleDeclarationContext::moduleDirective(size_t i) {
  return getRuleContext<JavaParser::ModuleDirectiveContext>(i);
}


size_t JavaParser::ModuleDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleModuleDeclaration;
}

void JavaParser::ModuleDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleDeclaration(this);
}

void JavaParser::ModuleDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleDeclaration(this);
}

JavaParser::ModuleDeclarationContext* JavaParser::moduleDeclaration() {
  ModuleDeclarationContext *_localctx = _tracker.createInstance<ModuleDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 86, JavaParser::RuleModuleDeclaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1309);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1306);
      annotation();
      setState(1311);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1313);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::T__0) {
      setState(1312);
      match(JavaParser::T__0);
    }
    setState(1315);
    match(JavaParser::T__1);
    setState(1316);
    moduleName(0);
    setState(1317);
    match(JavaParser::LBRACE);
    setState(1321);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__2)
      | (1ULL << JavaParser::T__3)
      | (1ULL << JavaParser::T__5)
      | (1ULL << JavaParser::T__6)
      | (1ULL << JavaParser::T__7))) != 0)) {
      setState(1318);
      moduleDirective();
      setState(1323);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1324);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDirectiveContext ------------------------------------------------------------------

JavaParser::ModuleDirectiveContext::ModuleDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ModuleNameContext *> JavaParser::ModuleDirectiveContext::moduleName() {
  return getRuleContexts<JavaParser::ModuleNameContext>();
}

JavaParser::ModuleNameContext* JavaParser::ModuleDirectiveContext::moduleName(size_t i) {
  return getRuleContext<JavaParser::ModuleNameContext>(i);
}

std::vector<JavaParser::RequiresModifierContext *> JavaParser::ModuleDirectiveContext::requiresModifier() {
  return getRuleContexts<JavaParser::RequiresModifierContext>();
}

JavaParser::RequiresModifierContext* JavaParser::ModuleDirectiveContext::requiresModifier(size_t i) {
  return getRuleContext<JavaParser::RequiresModifierContext>(i);
}

JavaParser::PackageNameContext* JavaParser::ModuleDirectiveContext::packageName() {
  return getRuleContext<JavaParser::PackageNameContext>(0);
}

std::vector<JavaParser::TypeNameContext *> JavaParser::ModuleDirectiveContext::typeName() {
  return getRuleContexts<JavaParser::TypeNameContext>();
}

JavaParser::TypeNameContext* JavaParser::ModuleDirectiveContext::typeName(size_t i) {
  return getRuleContext<JavaParser::TypeNameContext>(i);
}


size_t JavaParser::ModuleDirectiveContext::getRuleIndex() const {
  return JavaParser::RuleModuleDirective;
}

void JavaParser::ModuleDirectiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleDirective(this);
}

void JavaParser::ModuleDirectiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleDirective(this);
}

JavaParser::ModuleDirectiveContext* JavaParser::moduleDirective() {
  ModuleDirectiveContext *_localctx = _tracker.createInstance<ModuleDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 88, JavaParser::RuleModuleDirective);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1383);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::T__2: {
        enterOuterAlt(_localctx, 1);
        setState(1326);
        match(JavaParser::T__2);
        setState(1330);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::T__9

        || _la == JavaParser::STATIC) {
          setState(1327);
          requiresModifier();
          setState(1332);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1333);
        moduleName(0);
        setState(1334);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::T__3: {
        enterOuterAlt(_localctx, 2);
        setState(1336);
        match(JavaParser::T__3);
        setState(1337);
        packageName(0);
        setState(1347);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::T__4) {
          setState(1338);
          match(JavaParser::T__4);
          setState(1339);
          moduleName(0);
          setState(1344);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == JavaParser::COMMA) {
            setState(1340);
            match(JavaParser::COMMA);
            setState(1341);
            moduleName(0);
            setState(1346);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(1349);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::T__5: {
        enterOuterAlt(_localctx, 3);
        setState(1351);
        match(JavaParser::T__5);
        setState(1352);
        packageName(0);
        setState(1362);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::T__4) {
          setState(1353);
          match(JavaParser::T__4);
          setState(1354);
          moduleName(0);
          setState(1359);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == JavaParser::COMMA) {
            setState(1355);
            match(JavaParser::COMMA);
            setState(1356);
            moduleName(0);
            setState(1361);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(1364);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::T__6: {
        enterOuterAlt(_localctx, 4);
        setState(1366);
        match(JavaParser::T__6);
        setState(1367);
        typeName();
        setState(1368);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::T__7: {
        enterOuterAlt(_localctx, 5);
        setState(1370);
        match(JavaParser::T__7);
        setState(1371);
        typeName();
        setState(1372);
        match(JavaParser::T__8);
        setState(1373);
        typeName();
        setState(1378);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::COMMA) {
          setState(1374);
          match(JavaParser::COMMA);
          setState(1375);
          typeName();
          setState(1380);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1381);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RequiresModifierContext ------------------------------------------------------------------

JavaParser::RequiresModifierContext::RequiresModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::RequiresModifierContext::getRuleIndex() const {
  return JavaParser::RuleRequiresModifier;
}

void JavaParser::RequiresModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequiresModifier(this);
}

void JavaParser::RequiresModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequiresModifier(this);
}

JavaParser::RequiresModifierContext* JavaParser::requiresModifier() {
  RequiresModifierContext *_localctx = _tracker.createInstance<RequiresModifierContext>(_ctx, getState());
  enterRule(_localctx, 90, JavaParser::RuleRequiresModifier);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1385);
    _la = _input->LA(1);
    if (!(_la == JavaParser::T__9

    || _la == JavaParser::STATIC)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDeclarationContext ------------------------------------------------------------------

JavaParser::ClassDeclarationContext::ClassDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NormalClassDeclarationContext* JavaParser::ClassDeclarationContext::normalClassDeclaration() {
  return getRuleContext<JavaParser::NormalClassDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::ClassDeclarationContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}


size_t JavaParser::ClassDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleClassDeclaration;
}

void JavaParser::ClassDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassDeclaration(this);
}

void JavaParser::ClassDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassDeclaration(this);
}

JavaParser::ClassDeclarationContext* JavaParser::classDeclaration() {
  ClassDeclarationContext *_localctx = _tracker.createInstance<ClassDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 92, JavaParser::RuleClassDeclaration);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1389);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1387);
      normalClassDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1388);
      enumDeclaration();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalClassDeclarationContext ------------------------------------------------------------------

JavaParser::NormalClassDeclarationContext::NormalClassDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::NormalClassDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::NormalClassDeclarationContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}

std::vector<JavaParser::ClassModifierContext *> JavaParser::NormalClassDeclarationContext::classModifier() {
  return getRuleContexts<JavaParser::ClassModifierContext>();
}

JavaParser::ClassModifierContext* JavaParser::NormalClassDeclarationContext::classModifier(size_t i) {
  return getRuleContext<JavaParser::ClassModifierContext>(i);
}

JavaParser::TypeParametersContext* JavaParser::NormalClassDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::SuperclassContext* JavaParser::NormalClassDeclarationContext::superclass() {
  return getRuleContext<JavaParser::SuperclassContext>(0);
}

JavaParser::SuperinterfacesContext* JavaParser::NormalClassDeclarationContext::superinterfaces() {
  return getRuleContext<JavaParser::SuperinterfacesContext>(0);
}


size_t JavaParser::NormalClassDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleNormalClassDeclaration;
}

void JavaParser::NormalClassDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalClassDeclaration(this);
}

void JavaParser::NormalClassDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalClassDeclaration(this);
}

JavaParser::NormalClassDeclarationContext* JavaParser::normalClassDeclaration() {
  NormalClassDeclarationContext *_localctx = _tracker.createInstance<NormalClassDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 94, JavaParser::RuleNormalClassDeclaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1394);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP))) != 0) || _la == JavaParser::AT) {
      setState(1391);
      classModifier();
      setState(1396);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1397);
    match(JavaParser::CLASS);
    setState(1398);
    identifier();
    setState(1400);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1399);
      typeParameters();
    }
    setState(1403);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(1402);
      superclass();
    }
    setState(1406);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(1405);
      superinterfaces();
    }
    setState(1408);
    classBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassModifierContext ------------------------------------------------------------------

JavaParser::ClassModifierContext::ClassModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::ClassModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::ClassModifierContext::getRuleIndex() const {
  return JavaParser::RuleClassModifier;
}

void JavaParser::ClassModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassModifier(this);
}

void JavaParser::ClassModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassModifier(this);
}

JavaParser::ClassModifierContext* JavaParser::classModifier() {
  ClassModifierContext *_localctx = _tracker.createInstance<ClassModifierContext>(_ctx, getState());
  enterRule(_localctx, 96, JavaParser::RuleClassModifier);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1418);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1410);
        annotation();
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1411);
        match(JavaParser::PUBLIC);
        break;
      }

      case JavaParser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(1412);
        match(JavaParser::PROTECTED);
        break;
      }

      case JavaParser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(1413);
        match(JavaParser::PRIVATE);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 5);
        setState(1414);
        match(JavaParser::ABSTRACT);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(1415);
        match(JavaParser::STATIC);
        break;
      }

      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 7);
        setState(1416);
        match(JavaParser::FINAL);
        break;
      }

      case JavaParser::STRICTFP: {
        enterOuterAlt(_localctx, 8);
        setState(1417);
        match(JavaParser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParametersContext ------------------------------------------------------------------

JavaParser::TypeParametersContext::TypeParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeParameterListContext* JavaParser::TypeParametersContext::typeParameterList() {
  return getRuleContext<JavaParser::TypeParameterListContext>(0);
}


size_t JavaParser::TypeParametersContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameters;
}

void JavaParser::TypeParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameters(this);
}

void JavaParser::TypeParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameters(this);
}

JavaParser::TypeParametersContext* JavaParser::typeParameters() {
  TypeParametersContext *_localctx = _tracker.createInstance<TypeParametersContext>(_ctx, getState());
  enterRule(_localctx, 98, JavaParser::RuleTypeParameters);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1420);
    match(JavaParser::LT);
    setState(1421);
    typeParameterList();
    setState(1422);
    match(JavaParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterListContext ------------------------------------------------------------------

JavaParser::TypeParameterListContext::TypeParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::TypeParameterContext *> JavaParser::TypeParameterListContext::typeParameter() {
  return getRuleContexts<JavaParser::TypeParameterContext>();
}

JavaParser::TypeParameterContext* JavaParser::TypeParameterListContext::typeParameter(size_t i) {
  return getRuleContext<JavaParser::TypeParameterContext>(i);
}


size_t JavaParser::TypeParameterListContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameterList;
}

void JavaParser::TypeParameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameterList(this);
}

void JavaParser::TypeParameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameterList(this);
}

JavaParser::TypeParameterListContext* JavaParser::typeParameterList() {
  TypeParameterListContext *_localctx = _tracker.createInstance<TypeParameterListContext>(_ctx, getState());
  enterRule(_localctx, 100, JavaParser::RuleTypeParameterList);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1424);
    typeParameter();
    setState(1429);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1425);
      match(JavaParser::COMMA);
      setState(1426);
      typeParameter();
      setState(1431);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuperclassContext ------------------------------------------------------------------

JavaParser::SuperclassContext::SuperclassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassTypeContext* JavaParser::SuperclassContext::classType() {
  return getRuleContext<JavaParser::ClassTypeContext>(0);
}


size_t JavaParser::SuperclassContext::getRuleIndex() const {
  return JavaParser::RuleSuperclass;
}

void JavaParser::SuperclassContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperclass(this);
}

void JavaParser::SuperclassContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperclass(this);
}

JavaParser::SuperclassContext* JavaParser::superclass() {
  SuperclassContext *_localctx = _tracker.createInstance<SuperclassContext>(_ctx, getState());
  enterRule(_localctx, 102, JavaParser::RuleSuperclass);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1432);
    match(JavaParser::EXTENDS);
    setState(1433);
    classType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuperinterfacesContext ------------------------------------------------------------------

JavaParser::SuperinterfacesContext::SuperinterfacesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::InterfaceTypeListContext* JavaParser::SuperinterfacesContext::interfaceTypeList() {
  return getRuleContext<JavaParser::InterfaceTypeListContext>(0);
}


size_t JavaParser::SuperinterfacesContext::getRuleIndex() const {
  return JavaParser::RuleSuperinterfaces;
}

void JavaParser::SuperinterfacesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperinterfaces(this);
}

void JavaParser::SuperinterfacesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperinterfaces(this);
}

JavaParser::SuperinterfacesContext* JavaParser::superinterfaces() {
  SuperinterfacesContext *_localctx = _tracker.createInstance<SuperinterfacesContext>(_ctx, getState());
  enterRule(_localctx, 104, JavaParser::RuleSuperinterfaces);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1435);
    match(JavaParser::IMPLEMENTS);
    setState(1436);
    interfaceTypeList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceTypeListContext ------------------------------------------------------------------

JavaParser::InterfaceTypeListContext::InterfaceTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::InterfaceTypeContext *> JavaParser::InterfaceTypeListContext::interfaceType() {
  return getRuleContexts<JavaParser::InterfaceTypeContext>();
}

JavaParser::InterfaceTypeContext* JavaParser::InterfaceTypeListContext::interfaceType(size_t i) {
  return getRuleContext<JavaParser::InterfaceTypeContext>(i);
}


size_t JavaParser::InterfaceTypeListContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceTypeList;
}

void JavaParser::InterfaceTypeListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceTypeList(this);
}

void JavaParser::InterfaceTypeListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceTypeList(this);
}

JavaParser::InterfaceTypeListContext* JavaParser::interfaceTypeList() {
  InterfaceTypeListContext *_localctx = _tracker.createInstance<InterfaceTypeListContext>(_ctx, getState());
  enterRule(_localctx, 106, JavaParser::RuleInterfaceTypeList);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1438);
    interfaceType();
    setState(1443);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1439);
      match(JavaParser::COMMA);
      setState(1440);
      interfaceType();
      setState(1445);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyContext ------------------------------------------------------------------

JavaParser::ClassBodyContext::ClassBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ClassBodyDeclarationContext *> JavaParser::ClassBodyContext::classBodyDeclaration() {
  return getRuleContexts<JavaParser::ClassBodyDeclarationContext>();
}

JavaParser::ClassBodyDeclarationContext* JavaParser::ClassBodyContext::classBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::ClassBodyDeclarationContext>(i);
}


size_t JavaParser::ClassBodyContext::getRuleIndex() const {
  return JavaParser::RuleClassBody;
}

void JavaParser::ClassBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassBody(this);
}

void JavaParser::ClassBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassBody(this);
}

JavaParser::ClassBodyContext* JavaParser::classBody() {
  ClassBodyContext *_localctx = _tracker.createInstance<ClassBodyContext>(_ctx, getState());
  enterRule(_localctx, 108, JavaParser::RuleClassBody);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1446);
    match(JavaParser::LBRACE);
    setState(1450);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::INTERFACE)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NATIVE)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::SYNCHRONIZED)
      | (1ULL << JavaParser::TRANSIENT)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::VOLATILE))) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & ((1ULL << (JavaParser::LBRACE - 70))
      | (1ULL << (JavaParser::SEMI - 70))
      | (1ULL << (JavaParser::AT - 70))
      | (1ULL << (JavaParser::LT - 70))
      | (1ULL << (JavaParser::Identifier - 70)))) != 0)) {
      setState(1447);
      classBodyDeclaration();
      setState(1452);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1453);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyDeclarationContext ------------------------------------------------------------------

JavaParser::ClassBodyDeclarationContext::ClassBodyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassMemberDeclarationContext* JavaParser::ClassBodyDeclarationContext::classMemberDeclaration() {
  return getRuleContext<JavaParser::ClassMemberDeclarationContext>(0);
}

JavaParser::InstanceInitializerContext* JavaParser::ClassBodyDeclarationContext::instanceInitializer() {
  return getRuleContext<JavaParser::InstanceInitializerContext>(0);
}

JavaParser::StaticInitializerContext* JavaParser::ClassBodyDeclarationContext::staticInitializer() {
  return getRuleContext<JavaParser::StaticInitializerContext>(0);
}

JavaParser::ConstructorDeclarationContext* JavaParser::ClassBodyDeclarationContext::constructorDeclaration() {
  return getRuleContext<JavaParser::ConstructorDeclarationContext>(0);
}


size_t JavaParser::ClassBodyDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleClassBodyDeclaration;
}

void JavaParser::ClassBodyDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassBodyDeclaration(this);
}

void JavaParser::ClassBodyDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassBodyDeclaration(this);
}

JavaParser::ClassBodyDeclarationContext* JavaParser::classBodyDeclaration() {
  ClassBodyDeclarationContext *_localctx = _tracker.createInstance<ClassBodyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 110, JavaParser::RuleClassBodyDeclaration);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1459);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1455);
      classMemberDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1456);
      instanceInitializer();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1457);
      staticInitializer();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1458);
      constructorDeclaration();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassMemberDeclarationContext ------------------------------------------------------------------

JavaParser::ClassMemberDeclarationContext::ClassMemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::FieldDeclarationContext* JavaParser::ClassMemberDeclarationContext::fieldDeclaration() {
  return getRuleContext<JavaParser::FieldDeclarationContext>(0);
}

JavaParser::MethodDeclarationContext* JavaParser::ClassMemberDeclarationContext::methodDeclaration() {
  return getRuleContext<JavaParser::MethodDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::ClassMemberDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::ClassMemberDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}


size_t JavaParser::ClassMemberDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleClassMemberDeclaration;
}

void JavaParser::ClassMemberDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassMemberDeclaration(this);
}

void JavaParser::ClassMemberDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassMemberDeclaration(this);
}

JavaParser::ClassMemberDeclarationContext* JavaParser::classMemberDeclaration() {
  ClassMemberDeclarationContext *_localctx = _tracker.createInstance<ClassMemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 112, JavaParser::RuleClassMemberDeclaration);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1466);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1461);
      fieldDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1462);
      methodDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1463);
      classDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1464);
      interfaceDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1465);
      match(JavaParser::SEMI);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclarationContext ------------------------------------------------------------------

JavaParser::FieldDeclarationContext::FieldDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::FieldDeclarationContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorListContext* JavaParser::FieldDeclarationContext::variableDeclaratorList() {
  return getRuleContext<JavaParser::VariableDeclaratorListContext>(0);
}

std::vector<JavaParser::FieldModifierContext *> JavaParser::FieldDeclarationContext::fieldModifier() {
  return getRuleContexts<JavaParser::FieldModifierContext>();
}

JavaParser::FieldModifierContext* JavaParser::FieldDeclarationContext::fieldModifier(size_t i) {
  return getRuleContext<JavaParser::FieldModifierContext>(i);
}


size_t JavaParser::FieldDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleFieldDeclaration;
}

void JavaParser::FieldDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldDeclaration(this);
}

void JavaParser::FieldDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldDeclaration(this);
}

JavaParser::FieldDeclarationContext* JavaParser::fieldDeclaration() {
  FieldDeclarationContext *_localctx = _tracker.createInstance<FieldDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 114, JavaParser::RuleFieldDeclaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1471);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & ((1ULL << (JavaParser::FINAL - 28))
      | (1ULL << (JavaParser::PRIVATE - 28))
      | (1ULL << (JavaParser::PROTECTED - 28))
      | (1ULL << (JavaParser::PUBLIC - 28))
      | (1ULL << (JavaParser::STATIC - 28))
      | (1ULL << (JavaParser::TRANSIENT - 28))
      | (1ULL << (JavaParser::VOLATILE - 28))
      | (1ULL << (JavaParser::AT - 28)))) != 0)) {
      setState(1468);
      fieldModifier();
      setState(1473);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1474);
    unannType();
    setState(1475);
    variableDeclaratorList();
    setState(1476);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldModifierContext ------------------------------------------------------------------

JavaParser::FieldModifierContext::FieldModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::FieldModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::FieldModifierContext::getRuleIndex() const {
  return JavaParser::RuleFieldModifier;
}

void JavaParser::FieldModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldModifier(this);
}

void JavaParser::FieldModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldModifier(this);
}

JavaParser::FieldModifierContext* JavaParser::fieldModifier() {
  FieldModifierContext *_localctx = _tracker.createInstance<FieldModifierContext>(_ctx, getState());
  enterRule(_localctx, 116, JavaParser::RuleFieldModifier);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1486);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1478);
        annotation();
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1479);
        match(JavaParser::PUBLIC);
        break;
      }

      case JavaParser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(1480);
        match(JavaParser::PROTECTED);
        break;
      }

      case JavaParser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(1481);
        match(JavaParser::PRIVATE);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 5);
        setState(1482);
        match(JavaParser::STATIC);
        break;
      }

      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 6);
        setState(1483);
        match(JavaParser::FINAL);
        break;
      }

      case JavaParser::TRANSIENT: {
        enterOuterAlt(_localctx, 7);
        setState(1484);
        match(JavaParser::TRANSIENT);
        break;
      }

      case JavaParser::VOLATILE: {
        enterOuterAlt(_localctx, 8);
        setState(1485);
        match(JavaParser::VOLATILE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorListContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorListContext::VariableDeclaratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::VariableDeclaratorContext *> JavaParser::VariableDeclaratorListContext::variableDeclarator() {
  return getRuleContexts<JavaParser::VariableDeclaratorContext>();
}

JavaParser::VariableDeclaratorContext* JavaParser::VariableDeclaratorListContext::variableDeclarator(size_t i) {
  return getRuleContext<JavaParser::VariableDeclaratorContext>(i);
}


size_t JavaParser::VariableDeclaratorListContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclaratorList;
}

void JavaParser::VariableDeclaratorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclaratorList(this);
}

void JavaParser::VariableDeclaratorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclaratorList(this);
}

JavaParser::VariableDeclaratorListContext* JavaParser::variableDeclaratorList() {
  VariableDeclaratorListContext *_localctx = _tracker.createInstance<VariableDeclaratorListContext>(_ctx, getState());
  enterRule(_localctx, 118, JavaParser::RuleVariableDeclaratorList);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1488);
    variableDeclarator();
    setState(1493);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1489);
      match(JavaParser::COMMA);
      setState(1490);
      variableDeclarator();
      setState(1495);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorContext::VariableDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::VariableDeclaratorIdContext* JavaParser::VariableDeclaratorContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

JavaParser::VariableInitializerContext* JavaParser::VariableDeclaratorContext::variableInitializer() {
  return getRuleContext<JavaParser::VariableInitializerContext>(0);
}


size_t JavaParser::VariableDeclaratorContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclarator;
}

void JavaParser::VariableDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclarator(this);
}

void JavaParser::VariableDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclarator(this);
}

JavaParser::VariableDeclaratorContext* JavaParser::variableDeclarator() {
  VariableDeclaratorContext *_localctx = _tracker.createInstance<VariableDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 120, JavaParser::RuleVariableDeclarator);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1496);
    variableDeclaratorId();
    setState(1499);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::ASSIGN) {
      setState(1497);
      match(JavaParser::ASSIGN);
      setState(1498);
      variableInitializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorIdContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorIdContext::VariableDeclaratorIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::VariableDeclaratorIdContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::DimsContext* JavaParser::VariableDeclaratorIdContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}


size_t JavaParser::VariableDeclaratorIdContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclaratorId;
}

void JavaParser::VariableDeclaratorIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclaratorId(this);
}

void JavaParser::VariableDeclaratorIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclaratorId(this);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::variableDeclaratorId() {
  VariableDeclaratorIdContext *_localctx = _tracker.createInstance<VariableDeclaratorIdContext>(_ctx, getState());
  enterRule(_localctx, 122, JavaParser::RuleVariableDeclaratorId);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1501);
    identifier();
    setState(1503);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACK

    || _la == JavaParser::AT) {
      setState(1502);
      dims();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializerContext ------------------------------------------------------------------

JavaParser::VariableInitializerContext::VariableInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::VariableInitializerContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ArrayInitializerContext* JavaParser::VariableInitializerContext::arrayInitializer() {
  return getRuleContext<JavaParser::ArrayInitializerContext>(0);
}


size_t JavaParser::VariableInitializerContext::getRuleIndex() const {
  return JavaParser::RuleVariableInitializer;
}

void JavaParser::VariableInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableInitializer(this);
}

void JavaParser::VariableInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableInitializer(this);
}

JavaParser::VariableInitializerContext* JavaParser::variableInitializer() {
  VariableInitializerContext *_localctx = _tracker.createInstance<VariableInitializerContext>(_ctx, getState());
  enterRule(_localctx, 124, JavaParser::RuleVariableInitializer);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1507);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::IntegerLiteral:
      case JavaParser::FloatingPointLiteral:
      case JavaParser::BooleanLiteral:
      case JavaParser::CharacterLiteral:
      case JavaParser::StringLiteral:
      case JavaParser::NullLiteral:
      case JavaParser::LPAREN:
      case JavaParser::AT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::ADD:
      case JavaParser::SUB:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1505);
        expression();
        break;
      }

      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1506);
        arrayInitializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannTypeContext ------------------------------------------------------------------

JavaParser::UnannTypeContext::UnannTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannPrimitiveTypeContext* JavaParser::UnannTypeContext::unannPrimitiveType() {
  return getRuleContext<JavaParser::UnannPrimitiveTypeContext>(0);
}

JavaParser::UnannReferenceTypeContext* JavaParser::UnannTypeContext::unannReferenceType() {
  return getRuleContext<JavaParser::UnannReferenceTypeContext>(0);
}


size_t JavaParser::UnannTypeContext::getRuleIndex() const {
  return JavaParser::RuleUnannType;
}

void JavaParser::UnannTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannType(this);
}

void JavaParser::UnannTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannType(this);
}

JavaParser::UnannTypeContext* JavaParser::unannType() {
  UnannTypeContext *_localctx = _tracker.createInstance<UnannTypeContext>(_ctx, getState());
  enterRule(_localctx, 126, JavaParser::RuleUnannType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1511);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1509);
      unannPrimitiveType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1510);
      unannReferenceType();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannPrimitiveTypeContext ------------------------------------------------------------------

JavaParser::UnannPrimitiveTypeContext::UnannPrimitiveTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NumericTypeContext* JavaParser::UnannPrimitiveTypeContext::numericType() {
  return getRuleContext<JavaParser::NumericTypeContext>(0);
}


size_t JavaParser::UnannPrimitiveTypeContext::getRuleIndex() const {
  return JavaParser::RuleUnannPrimitiveType;
}

void JavaParser::UnannPrimitiveTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannPrimitiveType(this);
}

void JavaParser::UnannPrimitiveTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannPrimitiveType(this);
}

JavaParser::UnannPrimitiveTypeContext* JavaParser::unannPrimitiveType() {
  UnannPrimitiveTypeContext *_localctx = _tracker.createInstance<UnannPrimitiveTypeContext>(_ctx, getState());
  enterRule(_localctx, 128, JavaParser::RuleUnannPrimitiveType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1515);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT: {
        enterOuterAlt(_localctx, 1);
        setState(1513);
        numericType();
        break;
      }

      case JavaParser::BOOLEAN: {
        enterOuterAlt(_localctx, 2);
        setState(1514);
        match(JavaParser::BOOLEAN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannReferenceTypeContext ------------------------------------------------------------------

JavaParser::UnannReferenceTypeContext::UnannReferenceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannClassOrInterfaceTypeContext* JavaParser::UnannReferenceTypeContext::unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannClassOrInterfaceTypeContext>(0);
}

JavaParser::UnannTypeVariableContext* JavaParser::UnannReferenceTypeContext::unannTypeVariable() {
  return getRuleContext<JavaParser::UnannTypeVariableContext>(0);
}

JavaParser::UnannArrayTypeContext* JavaParser::UnannReferenceTypeContext::unannArrayType() {
  return getRuleContext<JavaParser::UnannArrayTypeContext>(0);
}


size_t JavaParser::UnannReferenceTypeContext::getRuleIndex() const {
  return JavaParser::RuleUnannReferenceType;
}

void JavaParser::UnannReferenceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannReferenceType(this);
}

void JavaParser::UnannReferenceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannReferenceType(this);
}

JavaParser::UnannReferenceTypeContext* JavaParser::unannReferenceType() {
  UnannReferenceTypeContext *_localctx = _tracker.createInstance<UnannReferenceTypeContext>(_ctx, getState());
  enterRule(_localctx, 130, JavaParser::RuleUnannReferenceType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1520);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1517);
      unannClassOrInterfaceType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1518);
      unannTypeVariable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1519);
      unannArrayType();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassOrInterfaceTypeContext ------------------------------------------------------------------

JavaParser::UnannClassOrInterfaceTypeContext::UnannClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext* JavaParser::UnannClassOrInterfaceTypeContext::unannClassType_lfno_unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
}

JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext* JavaParser::UnannClassOrInterfaceTypeContext::unannInterfaceType_lfno_unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext>(0);
}

std::vector<JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext *> JavaParser::UnannClassOrInterfaceTypeContext::unannClassType_lf_unannClassOrInterfaceType() {
  return getRuleContexts<JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext>();
}

JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext* JavaParser::UnannClassOrInterfaceTypeContext::unannClassType_lf_unannClassOrInterfaceType(size_t i) {
  return getRuleContext<JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext>(i);
}

std::vector<JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext *> JavaParser::UnannClassOrInterfaceTypeContext::unannInterfaceType_lf_unannClassOrInterfaceType() {
  return getRuleContexts<JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>();
}

JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext* JavaParser::UnannClassOrInterfaceTypeContext::unannInterfaceType_lf_unannClassOrInterfaceType(size_t i) {
  return getRuleContext<JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>(i);
}


size_t JavaParser::UnannClassOrInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleUnannClassOrInterfaceType;
}

void JavaParser::UnannClassOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannClassOrInterfaceType(this);
}

void JavaParser::UnannClassOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannClassOrInterfaceType(this);
}

JavaParser::UnannClassOrInterfaceTypeContext* JavaParser::unannClassOrInterfaceType() {
  UnannClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<UnannClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 132, JavaParser::RuleUnannClassOrInterfaceType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1524);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      setState(1522);
      unannClassType_lfno_unannClassOrInterfaceType();
      break;
    }

    case 2: {
      setState(1523);
      unannInterfaceType_lfno_unannClassOrInterfaceType();
      break;
    }

    }
    setState(1530);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1528);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
        case 1: {
          setState(1526);
          unannClassType_lf_unannClassOrInterfaceType();
          break;
        }

        case 2: {
          setState(1527);
          unannInterfaceType_lf_unannClassOrInterfaceType();
          break;
        }

        } 
      }
      setState(1532);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassTypeContext ------------------------------------------------------------------

JavaParser::UnannClassTypeContext::UnannClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::UnannClassTypeContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::UnannClassTypeContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::UnannClassOrInterfaceTypeContext* JavaParser::UnannClassTypeContext::unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannClassOrInterfaceTypeContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::UnannClassTypeContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::UnannClassTypeContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::UnannClassTypeContext::getRuleIndex() const {
  return JavaParser::RuleUnannClassType;
}

void JavaParser::UnannClassTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannClassType(this);
}

void JavaParser::UnannClassTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannClassType(this);
}

JavaParser::UnannClassTypeContext* JavaParser::unannClassType() {
  UnannClassTypeContext *_localctx = _tracker.createInstance<UnannClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 134, JavaParser::RuleUnannClassType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1549);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1533);
      identifier();
      setState(1535);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(1534);
        typeArguments();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1537);
      unannClassOrInterfaceType();
      setState(1538);
      match(JavaParser::DOT);
      setState(1542);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(1539);
        annotation();
        setState(1544);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1545);
      identifier();
      setState(1547);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(1546);
        typeArguments();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassType_lf_unannClassOrInterfaceTypeContext ------------------------------------------------------------------

JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext::UnannClassType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsContext* JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleUnannClassType_lf_unannClassOrInterfaceType;
}

void JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannClassType_lf_unannClassOrInterfaceType(this);
}

void JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannClassType_lf_unannClassOrInterfaceType(this);
}

JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext* JavaParser::unannClassType_lf_unannClassOrInterfaceType() {
  UnannClassType_lf_unannClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<UnannClassType_lf_unannClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 136, JavaParser::RuleUnannClassType_lf_unannClassOrInterfaceType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1551);
    match(JavaParser::DOT);
    setState(1555);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1552);
      annotation();
      setState(1557);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1558);
    identifier();
    setState(1560);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1559);
      typeArguments();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassType_lfno_unannClassOrInterfaceTypeContext ------------------------------------------------------------------

JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext::UnannClassType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleUnannClassType_lfno_unannClassOrInterfaceType;
}

void JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannClassType_lfno_unannClassOrInterfaceType(this);
}

void JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannClassType_lfno_unannClassOrInterfaceType(this);
}

JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext* JavaParser::unannClassType_lfno_unannClassOrInterfaceType() {
  UnannClassType_lfno_unannClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 138, JavaParser::RuleUnannClassType_lfno_unannClassOrInterfaceType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1562);
    identifier();
    setState(1564);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1563);
      typeArguments();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannInterfaceTypeContext ------------------------------------------------------------------

JavaParser::UnannInterfaceTypeContext::UnannInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannClassTypeContext* JavaParser::UnannInterfaceTypeContext::unannClassType() {
  return getRuleContext<JavaParser::UnannClassTypeContext>(0);
}


size_t JavaParser::UnannInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleUnannInterfaceType;
}

void JavaParser::UnannInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannInterfaceType(this);
}

void JavaParser::UnannInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannInterfaceType(this);
}

JavaParser::UnannInterfaceTypeContext* JavaParser::unannInterfaceType() {
  UnannInterfaceTypeContext *_localctx = _tracker.createInstance<UnannInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 140, JavaParser::RuleUnannInterfaceType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1566);
    unannClassType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannInterfaceType_lf_unannClassOrInterfaceTypeContext ------------------------------------------------------------------

JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext* JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext::unannClassType_lf_unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext>(0);
}


size_t JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleUnannInterfaceType_lf_unannClassOrInterfaceType;
}

void JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannInterfaceType_lf_unannClassOrInterfaceType(this);
}

void JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
}

JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext* JavaParser::unannInterfaceType_lf_unannClassOrInterfaceType() {
  UnannInterfaceType_lf_unannClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 142, JavaParser::RuleUnannInterfaceType_lf_unannClassOrInterfaceType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1568);
    unannClassType_lf_unannClassOrInterfaceType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext ------------------------------------------------------------------

JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext* JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext::unannClassType_lfno_unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
}


size_t JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleUnannInterfaceType_lfno_unannClassOrInterfaceType;
}

void JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
}

void JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
}

JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext* JavaParser::unannInterfaceType_lfno_unannClassOrInterfaceType() {
  UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 144, JavaParser::RuleUnannInterfaceType_lfno_unannClassOrInterfaceType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1570);
    unannClassType_lfno_unannClassOrInterfaceType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannTypeVariableContext ------------------------------------------------------------------

JavaParser::UnannTypeVariableContext::UnannTypeVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::UnannTypeVariableContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::UnannTypeVariableContext::getRuleIndex() const {
  return JavaParser::RuleUnannTypeVariable;
}

void JavaParser::UnannTypeVariableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannTypeVariable(this);
}

void JavaParser::UnannTypeVariableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannTypeVariable(this);
}

JavaParser::UnannTypeVariableContext* JavaParser::unannTypeVariable() {
  UnannTypeVariableContext *_localctx = _tracker.createInstance<UnannTypeVariableContext>(_ctx, getState());
  enterRule(_localctx, 146, JavaParser::RuleUnannTypeVariable);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1572);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannArrayTypeContext ------------------------------------------------------------------

JavaParser::UnannArrayTypeContext::UnannArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannPrimitiveTypeContext* JavaParser::UnannArrayTypeContext::unannPrimitiveType() {
  return getRuleContext<JavaParser::UnannPrimitiveTypeContext>(0);
}

JavaParser::DimsContext* JavaParser::UnannArrayTypeContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}

JavaParser::UnannClassOrInterfaceTypeContext* JavaParser::UnannArrayTypeContext::unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannClassOrInterfaceTypeContext>(0);
}

JavaParser::UnannTypeVariableContext* JavaParser::UnannArrayTypeContext::unannTypeVariable() {
  return getRuleContext<JavaParser::UnannTypeVariableContext>(0);
}


size_t JavaParser::UnannArrayTypeContext::getRuleIndex() const {
  return JavaParser::RuleUnannArrayType;
}

void JavaParser::UnannArrayTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannArrayType(this);
}

void JavaParser::UnannArrayTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannArrayType(this);
}

JavaParser::UnannArrayTypeContext* JavaParser::unannArrayType() {
  UnannArrayTypeContext *_localctx = _tracker.createInstance<UnannArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 148, JavaParser::RuleUnannArrayType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1583);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1574);
      unannPrimitiveType();
      setState(1575);
      dims();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1577);
      unannClassOrInterfaceType();
      setState(1578);
      dims();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1580);
      unannTypeVariable();
      setState(1581);
      dims();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDeclarationContext ------------------------------------------------------------------

JavaParser::MethodDeclarationContext::MethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::MethodHeaderContext* JavaParser::MethodDeclarationContext::methodHeader() {
  return getRuleContext<JavaParser::MethodHeaderContext>(0);
}

JavaParser::MethodBodyContext* JavaParser::MethodDeclarationContext::methodBody() {
  return getRuleContext<JavaParser::MethodBodyContext>(0);
}

std::vector<JavaParser::MethodModifierContext *> JavaParser::MethodDeclarationContext::methodModifier() {
  return getRuleContexts<JavaParser::MethodModifierContext>();
}

JavaParser::MethodModifierContext* JavaParser::MethodDeclarationContext::methodModifier(size_t i) {
  return getRuleContext<JavaParser::MethodModifierContext>(i);
}


size_t JavaParser::MethodDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleMethodDeclaration;
}

void JavaParser::MethodDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodDeclaration(this);
}

void JavaParser::MethodDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodDeclaration(this);
}

JavaParser::MethodDeclarationContext* JavaParser::methodDeclaration() {
  MethodDeclarationContext *_localctx = _tracker.createInstance<MethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 150, JavaParser::RuleMethodDeclaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1588);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::NATIVE)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::SYNCHRONIZED))) != 0) || _la == JavaParser::AT) {
      setState(1585);
      methodModifier();
      setState(1590);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1591);
    methodHeader();
    setState(1592);
    methodBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodModifierContext ------------------------------------------------------------------

JavaParser::MethodModifierContext::MethodModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::MethodModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::MethodModifierContext::getRuleIndex() const {
  return JavaParser::RuleMethodModifier;
}

void JavaParser::MethodModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodModifier(this);
}

void JavaParser::MethodModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodModifier(this);
}

JavaParser::MethodModifierContext* JavaParser::methodModifier() {
  MethodModifierContext *_localctx = _tracker.createInstance<MethodModifierContext>(_ctx, getState());
  enterRule(_localctx, 152, JavaParser::RuleMethodModifier);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1604);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1594);
        annotation();
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1595);
        match(JavaParser::PUBLIC);
        break;
      }

      case JavaParser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(1596);
        match(JavaParser::PROTECTED);
        break;
      }

      case JavaParser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(1597);
        match(JavaParser::PRIVATE);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 5);
        setState(1598);
        match(JavaParser::ABSTRACT);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(1599);
        match(JavaParser::STATIC);
        break;
      }

      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 7);
        setState(1600);
        match(JavaParser::FINAL);
        break;
      }

      case JavaParser::SYNCHRONIZED: {
        enterOuterAlt(_localctx, 8);
        setState(1601);
        match(JavaParser::SYNCHRONIZED);
        break;
      }

      case JavaParser::NATIVE: {
        enterOuterAlt(_localctx, 9);
        setState(1602);
        match(JavaParser::NATIVE);
        break;
      }

      case JavaParser::STRICTFP: {
        enterOuterAlt(_localctx, 10);
        setState(1603);
        match(JavaParser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodHeaderContext ------------------------------------------------------------------

JavaParser::MethodHeaderContext::MethodHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ResultContext* JavaParser::MethodHeaderContext::result() {
  return getRuleContext<JavaParser::ResultContext>(0);
}

JavaParser::MethodDeclaratorContext* JavaParser::MethodHeaderContext::methodDeclarator() {
  return getRuleContext<JavaParser::MethodDeclaratorContext>(0);
}

JavaParser::Throws_Context* JavaParser::MethodHeaderContext::throws_() {
  return getRuleContext<JavaParser::Throws_Context>(0);
}

JavaParser::TypeParametersContext* JavaParser::MethodHeaderContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::MethodHeaderContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::MethodHeaderContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::MethodHeaderContext::getRuleIndex() const {
  return JavaParser::RuleMethodHeader;
}

void JavaParser::MethodHeaderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodHeader(this);
}

void JavaParser::MethodHeaderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodHeader(this);
}

JavaParser::MethodHeaderContext* JavaParser::methodHeader() {
  MethodHeaderContext *_localctx = _tracker.createInstance<MethodHeaderContext>(_ctx, getState());
  enterRule(_localctx, 154, JavaParser::RuleMethodHeader);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1623);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::VOID:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1606);
        result();
        setState(1607);
        methodDeclarator();
        setState(1609);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::THROWS) {
          setState(1608);
          throws_();
        }
        break;
      }

      case JavaParser::LT: {
        enterOuterAlt(_localctx, 2);
        setState(1611);
        typeParameters();
        setState(1615);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::AT) {
          setState(1612);
          annotation();
          setState(1617);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1618);
        result();
        setState(1619);
        methodDeclarator();
        setState(1621);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::THROWS) {
          setState(1620);
          throws_();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResultContext ------------------------------------------------------------------

JavaParser::ResultContext::ResultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::ResultContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}


size_t JavaParser::ResultContext::getRuleIndex() const {
  return JavaParser::RuleResult;
}

void JavaParser::ResultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResult(this);
}

void JavaParser::ResultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResult(this);
}

JavaParser::ResultContext* JavaParser::result() {
  ResultContext *_localctx = _tracker.createInstance<ResultContext>(_ctx, getState());
  enterRule(_localctx, 156, JavaParser::RuleResult);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1627);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1625);
        unannType();
        break;
      }

      case JavaParser::VOID: {
        enterOuterAlt(_localctx, 2);
        setState(1626);
        match(JavaParser::VOID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDeclaratorContext ------------------------------------------------------------------

JavaParser::MethodDeclaratorContext::MethodDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::MethodDeclaratorContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::FormalParameterListContext* JavaParser::MethodDeclaratorContext::formalParameterList() {
  return getRuleContext<JavaParser::FormalParameterListContext>(0);
}

JavaParser::DimsContext* JavaParser::MethodDeclaratorContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}


size_t JavaParser::MethodDeclaratorContext::getRuleIndex() const {
  return JavaParser::RuleMethodDeclarator;
}

void JavaParser::MethodDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodDeclarator(this);
}

void JavaParser::MethodDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodDeclarator(this);
}

JavaParser::MethodDeclaratorContext* JavaParser::methodDeclarator() {
  MethodDeclaratorContext *_localctx = _tracker.createInstance<MethodDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 158, JavaParser::RuleMethodDeclarator);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1629);
    identifier();
    setState(1630);
    match(JavaParser::LPAREN);
    setState(1632);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::SHORT))) != 0) || _la == JavaParser::AT

    || _la == JavaParser::Identifier) {
      setState(1631);
      formalParameterList();
    }
    setState(1634);
    match(JavaParser::RPAREN);
    setState(1636);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACK

    || _la == JavaParser::AT) {
      setState(1635);
      dims();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterListContext ------------------------------------------------------------------

JavaParser::FormalParameterListContext::FormalParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::FormalParametersContext* JavaParser::FormalParameterListContext::formalParameters() {
  return getRuleContext<JavaParser::FormalParametersContext>(0);
}

JavaParser::LastFormalParameterContext* JavaParser::FormalParameterListContext::lastFormalParameter() {
  return getRuleContext<JavaParser::LastFormalParameterContext>(0);
}

JavaParser::ReceiverParameterContext* JavaParser::FormalParameterListContext::receiverParameter() {
  return getRuleContext<JavaParser::ReceiverParameterContext>(0);
}


size_t JavaParser::FormalParameterListContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameterList;
}

void JavaParser::FormalParameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameterList(this);
}

void JavaParser::FormalParameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameterList(this);
}

JavaParser::FormalParameterListContext* JavaParser::formalParameterList() {
  FormalParameterListContext *_localctx = _tracker.createInstance<FormalParameterListContext>(_ctx, getState());
  enterRule(_localctx, 160, JavaParser::RuleFormalParameterList);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1644);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1638);
      formalParameters();
      setState(1639);
      match(JavaParser::COMMA);
      setState(1640);
      lastFormalParameter();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1642);
      lastFormalParameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1643);
      receiverParameter();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParametersContext ------------------------------------------------------------------

JavaParser::FormalParametersContext::FormalParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::FormalParameterContext *> JavaParser::FormalParametersContext::formalParameter() {
  return getRuleContexts<JavaParser::FormalParameterContext>();
}

JavaParser::FormalParameterContext* JavaParser::FormalParametersContext::formalParameter(size_t i) {
  return getRuleContext<JavaParser::FormalParameterContext>(i);
}

JavaParser::ReceiverParameterContext* JavaParser::FormalParametersContext::receiverParameter() {
  return getRuleContext<JavaParser::ReceiverParameterContext>(0);
}


size_t JavaParser::FormalParametersContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameters;
}

void JavaParser::FormalParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameters(this);
}

void JavaParser::FormalParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameters(this);
}

JavaParser::FormalParametersContext* JavaParser::formalParameters() {
  FormalParametersContext *_localctx = _tracker.createInstance<FormalParametersContext>(_ctx, getState());
  enterRule(_localctx, 162, JavaParser::RuleFormalParameters);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(1662);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1646);
      formalParameter();
      setState(1651);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1647);
          match(JavaParser::COMMA);
          setState(1648);
          formalParameter(); 
        }
        setState(1653);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1654);
      receiverParameter();
      setState(1659);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1655);
          match(JavaParser::COMMA);
          setState(1656);
          formalParameter(); 
        }
        setState(1661);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterContext ------------------------------------------------------------------

JavaParser::FormalParameterContext::FormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::FormalParameterContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::FormalParameterContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::FormalParameterContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::FormalParameterContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::FormalParameterContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameter;
}

void JavaParser::FormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameter(this);
}

void JavaParser::FormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameter(this);
}

JavaParser::FormalParameterContext* JavaParser::formalParameter() {
  FormalParameterContext *_localctx = _tracker.createInstance<FormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 164, JavaParser::RuleFormalParameter);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1667);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::FINAL

    || _la == JavaParser::AT) {
      setState(1664);
      variableModifier();
      setState(1669);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1670);
    unannType();
    setState(1671);
    variableDeclaratorId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableModifierContext ------------------------------------------------------------------

JavaParser::VariableModifierContext::VariableModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::VariableModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::VariableModifierContext::getRuleIndex() const {
  return JavaParser::RuleVariableModifier;
}

void JavaParser::VariableModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableModifier(this);
}

void JavaParser::VariableModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableModifier(this);
}

JavaParser::VariableModifierContext* JavaParser::variableModifier() {
  VariableModifierContext *_localctx = _tracker.createInstance<VariableModifierContext>(_ctx, getState());
  enterRule(_localctx, 166, JavaParser::RuleVariableModifier);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1675);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1673);
        annotation();
        break;
      }

      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 2);
        setState(1674);
        match(JavaParser::FINAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LastFormalParameterContext ------------------------------------------------------------------

JavaParser::LastFormalParameterContext::LastFormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::LastFormalParameterContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::LastFormalParameterContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::LastFormalParameterContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::LastFormalParameterContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::LastFormalParameterContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::LastFormalParameterContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::FormalParameterContext* JavaParser::LastFormalParameterContext::formalParameter() {
  return getRuleContext<JavaParser::FormalParameterContext>(0);
}


size_t JavaParser::LastFormalParameterContext::getRuleIndex() const {
  return JavaParser::RuleLastFormalParameter;
}

void JavaParser::LastFormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLastFormalParameter(this);
}

void JavaParser::LastFormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLastFormalParameter(this);
}

JavaParser::LastFormalParameterContext* JavaParser::lastFormalParameter() {
  LastFormalParameterContext *_localctx = _tracker.createInstance<LastFormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 168, JavaParser::RuleLastFormalParameter);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1694);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1680);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::FINAL

      || _la == JavaParser::AT) {
        setState(1677);
        variableModifier();
        setState(1682);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1683);
      unannType();
      setState(1687);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(1684);
        annotation();
        setState(1689);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1690);
      match(JavaParser::ELLIPSIS);
      setState(1691);
      variableDeclaratorId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1693);
      formalParameter();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiverParameterContext ------------------------------------------------------------------

JavaParser::ReceiverParameterContext::ReceiverParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::ReceiverParameterContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ReceiverParameterContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ReceiverParameterContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::IdentifierContext* JavaParser::ReceiverParameterContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::ReceiverParameterContext::getRuleIndex() const {
  return JavaParser::RuleReceiverParameter;
}

void JavaParser::ReceiverParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiverParameter(this);
}

void JavaParser::ReceiverParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiverParameter(this);
}

JavaParser::ReceiverParameterContext* JavaParser::receiverParameter() {
  ReceiverParameterContext *_localctx = _tracker.createInstance<ReceiverParameterContext>(_ctx, getState());
  enterRule(_localctx, 170, JavaParser::RuleReceiverParameter);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1699);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1696);
      annotation();
      setState(1701);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1702);
    unannType();
    setState(1706);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8))) != 0) || _la == JavaParser::Identifier) {
      setState(1703);
      identifier();
      setState(1704);
      match(JavaParser::DOT);
    }
    setState(1708);
    match(JavaParser::THIS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Throws_Context ------------------------------------------------------------------

JavaParser::Throws_Context::Throws_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExceptionTypeListContext* JavaParser::Throws_Context::exceptionTypeList() {
  return getRuleContext<JavaParser::ExceptionTypeListContext>(0);
}


size_t JavaParser::Throws_Context::getRuleIndex() const {
  return JavaParser::RuleThrows_;
}

void JavaParser::Throws_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrows_(this);
}

void JavaParser::Throws_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrows_(this);
}

JavaParser::Throws_Context* JavaParser::throws_() {
  Throws_Context *_localctx = _tracker.createInstance<Throws_Context>(_ctx, getState());
  enterRule(_localctx, 172, JavaParser::RuleThrows_);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1710);
    match(JavaParser::THROWS);
    setState(1711);
    exceptionTypeList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionTypeListContext ------------------------------------------------------------------

JavaParser::ExceptionTypeListContext::ExceptionTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ExceptionTypeContext *> JavaParser::ExceptionTypeListContext::exceptionType() {
  return getRuleContexts<JavaParser::ExceptionTypeContext>();
}

JavaParser::ExceptionTypeContext* JavaParser::ExceptionTypeListContext::exceptionType(size_t i) {
  return getRuleContext<JavaParser::ExceptionTypeContext>(i);
}


size_t JavaParser::ExceptionTypeListContext::getRuleIndex() const {
  return JavaParser::RuleExceptionTypeList;
}

void JavaParser::ExceptionTypeListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExceptionTypeList(this);
}

void JavaParser::ExceptionTypeListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExceptionTypeList(this);
}

JavaParser::ExceptionTypeListContext* JavaParser::exceptionTypeList() {
  ExceptionTypeListContext *_localctx = _tracker.createInstance<ExceptionTypeListContext>(_ctx, getState());
  enterRule(_localctx, 174, JavaParser::RuleExceptionTypeList);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1713);
    exceptionType();
    setState(1718);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1714);
      match(JavaParser::COMMA);
      setState(1715);
      exceptionType();
      setState(1720);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionTypeContext ------------------------------------------------------------------

JavaParser::ExceptionTypeContext::ExceptionTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassTypeContext* JavaParser::ExceptionTypeContext::classType() {
  return getRuleContext<JavaParser::ClassTypeContext>(0);
}

JavaParser::TypeVariableContext* JavaParser::ExceptionTypeContext::typeVariable() {
  return getRuleContext<JavaParser::TypeVariableContext>(0);
}


size_t JavaParser::ExceptionTypeContext::getRuleIndex() const {
  return JavaParser::RuleExceptionType;
}

void JavaParser::ExceptionTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExceptionType(this);
}

void JavaParser::ExceptionTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExceptionType(this);
}

JavaParser::ExceptionTypeContext* JavaParser::exceptionType() {
  ExceptionTypeContext *_localctx = _tracker.createInstance<ExceptionTypeContext>(_ctx, getState());
  enterRule(_localctx, 176, JavaParser::RuleExceptionType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1723);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1721);
      classType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1722);
      typeVariable();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodBodyContext ------------------------------------------------------------------

JavaParser::MethodBodyContext::MethodBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::MethodBodyContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::MethodBodyContext::getRuleIndex() const {
  return JavaParser::RuleMethodBody;
}

void JavaParser::MethodBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodBody(this);
}

void JavaParser::MethodBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodBody(this);
}

JavaParser::MethodBodyContext* JavaParser::methodBody() {
  MethodBodyContext *_localctx = _tracker.createInstance<MethodBodyContext>(_ctx, getState());
  enterRule(_localctx, 178, JavaParser::RuleMethodBody);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1727);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1725);
        block();
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(1726);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstanceInitializerContext ------------------------------------------------------------------

JavaParser::InstanceInitializerContext::InstanceInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::InstanceInitializerContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::InstanceInitializerContext::getRuleIndex() const {
  return JavaParser::RuleInstanceInitializer;
}

void JavaParser::InstanceInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstanceInitializer(this);
}

void JavaParser::InstanceInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstanceInitializer(this);
}

JavaParser::InstanceInitializerContext* JavaParser::instanceInitializer() {
  InstanceInitializerContext *_localctx = _tracker.createInstance<InstanceInitializerContext>(_ctx, getState());
  enterRule(_localctx, 180, JavaParser::RuleInstanceInitializer);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1729);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StaticInitializerContext ------------------------------------------------------------------

JavaParser::StaticInitializerContext::StaticInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::StaticInitializerContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::StaticInitializerContext::getRuleIndex() const {
  return JavaParser::RuleStaticInitializer;
}

void JavaParser::StaticInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStaticInitializer(this);
}

void JavaParser::StaticInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStaticInitializer(this);
}

JavaParser::StaticInitializerContext* JavaParser::staticInitializer() {
  StaticInitializerContext *_localctx = _tracker.createInstance<StaticInitializerContext>(_ctx, getState());
  enterRule(_localctx, 182, JavaParser::RuleStaticInitializer);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1731);
    match(JavaParser::STATIC);
    setState(1732);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDeclarationContext ------------------------------------------------------------------

JavaParser::ConstructorDeclarationContext::ConstructorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConstructorDeclaratorContext* JavaParser::ConstructorDeclarationContext::constructorDeclarator() {
  return getRuleContext<JavaParser::ConstructorDeclaratorContext>(0);
}

JavaParser::ConstructorBodyContext* JavaParser::ConstructorDeclarationContext::constructorBody() {
  return getRuleContext<JavaParser::ConstructorBodyContext>(0);
}

std::vector<JavaParser::ConstructorModifierContext *> JavaParser::ConstructorDeclarationContext::constructorModifier() {
  return getRuleContexts<JavaParser::ConstructorModifierContext>();
}

JavaParser::ConstructorModifierContext* JavaParser::ConstructorDeclarationContext::constructorModifier(size_t i) {
  return getRuleContext<JavaParser::ConstructorModifierContext>(i);
}

JavaParser::Throws_Context* JavaParser::ConstructorDeclarationContext::throws_() {
  return getRuleContext<JavaParser::Throws_Context>(0);
}


size_t JavaParser::ConstructorDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleConstructorDeclaration;
}

void JavaParser::ConstructorDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorDeclaration(this);
}

void JavaParser::ConstructorDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorDeclaration(this);
}

JavaParser::ConstructorDeclarationContext* JavaParser::constructorDeclaration() {
  ConstructorDeclarationContext *_localctx = _tracker.createInstance<ConstructorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 184, JavaParser::RuleConstructorDeclaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1737);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & ((1ULL << (JavaParser::PRIVATE - 43))
      | (1ULL << (JavaParser::PROTECTED - 43))
      | (1ULL << (JavaParser::PUBLIC - 43))
      | (1ULL << (JavaParser::AT - 43)))) != 0)) {
      setState(1734);
      constructorModifier();
      setState(1739);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1740);
    constructorDeclarator();
    setState(1742);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::THROWS) {
      setState(1741);
      throws_();
    }
    setState(1744);
    constructorBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorModifierContext ------------------------------------------------------------------

JavaParser::ConstructorModifierContext::ConstructorModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::ConstructorModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::ConstructorModifierContext::getRuleIndex() const {
  return JavaParser::RuleConstructorModifier;
}

void JavaParser::ConstructorModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorModifier(this);
}

void JavaParser::ConstructorModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorModifier(this);
}

JavaParser::ConstructorModifierContext* JavaParser::constructorModifier() {
  ConstructorModifierContext *_localctx = _tracker.createInstance<ConstructorModifierContext>(_ctx, getState());
  enterRule(_localctx, 186, JavaParser::RuleConstructorModifier);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1750);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1746);
        annotation();
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1747);
        match(JavaParser::PUBLIC);
        break;
      }

      case JavaParser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(1748);
        match(JavaParser::PROTECTED);
        break;
      }

      case JavaParser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(1749);
        match(JavaParser::PRIVATE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDeclaratorContext ------------------------------------------------------------------

JavaParser::ConstructorDeclaratorContext::ConstructorDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::SimpleTypeNameContext* JavaParser::ConstructorDeclaratorContext::simpleTypeName() {
  return getRuleContext<JavaParser::SimpleTypeNameContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::ConstructorDeclaratorContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::FormalParameterListContext* JavaParser::ConstructorDeclaratorContext::formalParameterList() {
  return getRuleContext<JavaParser::FormalParameterListContext>(0);
}


size_t JavaParser::ConstructorDeclaratorContext::getRuleIndex() const {
  return JavaParser::RuleConstructorDeclarator;
}

void JavaParser::ConstructorDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorDeclarator(this);
}

void JavaParser::ConstructorDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorDeclarator(this);
}

JavaParser::ConstructorDeclaratorContext* JavaParser::constructorDeclarator() {
  ConstructorDeclaratorContext *_localctx = _tracker.createInstance<ConstructorDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 188, JavaParser::RuleConstructorDeclarator);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1753);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1752);
      typeParameters();
    }
    setState(1755);
    simpleTypeName();
    setState(1756);
    match(JavaParser::LPAREN);
    setState(1758);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::SHORT))) != 0) || _la == JavaParser::AT

    || _la == JavaParser::Identifier) {
      setState(1757);
      formalParameterList();
    }
    setState(1760);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeNameContext ------------------------------------------------------------------

JavaParser::SimpleTypeNameContext::SimpleTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::SimpleTypeNameContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::SimpleTypeNameContext::getRuleIndex() const {
  return JavaParser::RuleSimpleTypeName;
}

void JavaParser::SimpleTypeNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleTypeName(this);
}

void JavaParser::SimpleTypeNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleTypeName(this);
}

JavaParser::SimpleTypeNameContext* JavaParser::simpleTypeName() {
  SimpleTypeNameContext *_localctx = _tracker.createInstance<SimpleTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 190, JavaParser::RuleSimpleTypeName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1762);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorBodyContext ------------------------------------------------------------------

JavaParser::ConstructorBodyContext::ConstructorBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExplicitConstructorInvocationContext* JavaParser::ConstructorBodyContext::explicitConstructorInvocation() {
  return getRuleContext<JavaParser::ExplicitConstructorInvocationContext>(0);
}

JavaParser::BlockStatementsContext* JavaParser::ConstructorBodyContext::blockStatements() {
  return getRuleContext<JavaParser::BlockStatementsContext>(0);
}


size_t JavaParser::ConstructorBodyContext::getRuleIndex() const {
  return JavaParser::RuleConstructorBody;
}

void JavaParser::ConstructorBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorBody(this);
}

void JavaParser::ConstructorBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorBody(this);
}

JavaParser::ConstructorBodyContext* JavaParser::constructorBody() {
  ConstructorBodyContext *_localctx = _tracker.createInstance<ConstructorBodyContext>(_ctx, getState());
  enterRule(_localctx, 192, JavaParser::RuleConstructorBody);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1764);
    match(JavaParser::LBRACE);
    setState(1766);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      setState(1765);
      explicitConstructorInvocation();
      break;
    }

    }
    setState(1769);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::ASSERT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BREAK)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::CONTINUE)
      | (1ULL << JavaParser::DO)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::FOR)
      | (1ULL << JavaParser::IF)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::RETURN)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::SWITCH)
      | (1ULL << JavaParser::SYNCHRONIZED)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::THROW)
      | (1ULL << JavaParser::TRY)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::WHILE)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::LBRACE - 64))
      | (1ULL << (JavaParser::SEMI - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(1768);
      blockStatements();
    }
    setState(1771);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitConstructorInvocationContext ------------------------------------------------------------------

JavaParser::ExplicitConstructorInvocationContext::ExplicitConstructorInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeArgumentsContext* JavaParser::ExplicitConstructorInvocationContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::ExplicitConstructorInvocationContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}

JavaParser::ExpressionNameContext* JavaParser::ExplicitConstructorInvocationContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

JavaParser::PrimaryContext* JavaParser::ExplicitConstructorInvocationContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}


size_t JavaParser::ExplicitConstructorInvocationContext::getRuleIndex() const {
  return JavaParser::RuleExplicitConstructorInvocation;
}

void JavaParser::ExplicitConstructorInvocationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicitConstructorInvocation(this);
}

void JavaParser::ExplicitConstructorInvocationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicitConstructorInvocation(this);
}

JavaParser::ExplicitConstructorInvocationContext* JavaParser::explicitConstructorInvocation() {
  ExplicitConstructorInvocationContext *_localctx = _tracker.createInstance<ExplicitConstructorInvocationContext>(_ctx, getState());
  enterRule(_localctx, 194, JavaParser::RuleExplicitConstructorInvocation);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1819);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1774);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(1773);
        typeArguments();
      }
      setState(1776);
      match(JavaParser::THIS);
      setState(1777);
      match(JavaParser::LPAREN);
      setState(1779);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(1778);
        argumentList();
      }
      setState(1781);
      match(JavaParser::RPAREN);
      setState(1782);
      match(JavaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1784);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(1783);
        typeArguments();
      }
      setState(1786);
      match(JavaParser::SUPER);
      setState(1787);
      match(JavaParser::LPAREN);
      setState(1789);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(1788);
        argumentList();
      }
      setState(1791);
      match(JavaParser::RPAREN);
      setState(1792);
      match(JavaParser::SEMI);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1793);
      expressionName();
      setState(1794);
      match(JavaParser::DOT);
      setState(1796);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(1795);
        typeArguments();
      }
      setState(1798);
      match(JavaParser::SUPER);
      setState(1799);
      match(JavaParser::LPAREN);
      setState(1801);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(1800);
        argumentList();
      }
      setState(1803);
      match(JavaParser::RPAREN);
      setState(1804);
      match(JavaParser::SEMI);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1806);
      primary();
      setState(1807);
      match(JavaParser::DOT);
      setState(1809);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(1808);
        typeArguments();
      }
      setState(1811);
      match(JavaParser::SUPER);
      setState(1812);
      match(JavaParser::LPAREN);
      setState(1814);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(1813);
        argumentList();
      }
      setState(1816);
      match(JavaParser::RPAREN);
      setState(1817);
      match(JavaParser::SEMI);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumDeclarationContext ------------------------------------------------------------------

JavaParser::EnumDeclarationContext::EnumDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::EnumDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::EnumBodyContext* JavaParser::EnumDeclarationContext::enumBody() {
  return getRuleContext<JavaParser::EnumBodyContext>(0);
}

std::vector<JavaParser::ClassModifierContext *> JavaParser::EnumDeclarationContext::classModifier() {
  return getRuleContexts<JavaParser::ClassModifierContext>();
}

JavaParser::ClassModifierContext* JavaParser::EnumDeclarationContext::classModifier(size_t i) {
  return getRuleContext<JavaParser::ClassModifierContext>(i);
}

JavaParser::SuperinterfacesContext* JavaParser::EnumDeclarationContext::superinterfaces() {
  return getRuleContext<JavaParser::SuperinterfacesContext>(0);
}


size_t JavaParser::EnumDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleEnumDeclaration;
}

void JavaParser::EnumDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumDeclaration(this);
}

void JavaParser::EnumDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumDeclaration(this);
}

JavaParser::EnumDeclarationContext* JavaParser::enumDeclaration() {
  EnumDeclarationContext *_localctx = _tracker.createInstance<EnumDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 196, JavaParser::RuleEnumDeclaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1824);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP))) != 0) || _la == JavaParser::AT) {
      setState(1821);
      classModifier();
      setState(1826);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1827);
    match(JavaParser::ENUM);
    setState(1828);
    identifier();
    setState(1830);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(1829);
      superinterfaces();
    }
    setState(1832);
    enumBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumBodyContext ------------------------------------------------------------------

JavaParser::EnumBodyContext::EnumBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::EnumConstantListContext* JavaParser::EnumBodyContext::enumConstantList() {
  return getRuleContext<JavaParser::EnumConstantListContext>(0);
}

JavaParser::EnumBodyDeclarationsContext* JavaParser::EnumBodyContext::enumBodyDeclarations() {
  return getRuleContext<JavaParser::EnumBodyDeclarationsContext>(0);
}


size_t JavaParser::EnumBodyContext::getRuleIndex() const {
  return JavaParser::RuleEnumBody;
}

void JavaParser::EnumBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumBody(this);
}

void JavaParser::EnumBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumBody(this);
}

JavaParser::EnumBodyContext* JavaParser::enumBody() {
  EnumBodyContext *_localctx = _tracker.createInstance<EnumBodyContext>(_ctx, getState());
  enterRule(_localctx, 198, JavaParser::RuleEnumBody);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1834);
    match(JavaParser::LBRACE);
    setState(1836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8))) != 0) || _la == JavaParser::AT

    || _la == JavaParser::Identifier) {
      setState(1835);
      enumConstantList();
    }
    setState(1839);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::COMMA) {
      setState(1838);
      match(JavaParser::COMMA);
    }
    setState(1842);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::SEMI) {
      setState(1841);
      enumBodyDeclarations();
    }
    setState(1844);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantListContext ------------------------------------------------------------------

JavaParser::EnumConstantListContext::EnumConstantListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::EnumConstantContext *> JavaParser::EnumConstantListContext::enumConstant() {
  return getRuleContexts<JavaParser::EnumConstantContext>();
}

JavaParser::EnumConstantContext* JavaParser::EnumConstantListContext::enumConstant(size_t i) {
  return getRuleContext<JavaParser::EnumConstantContext>(i);
}


size_t JavaParser::EnumConstantListContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstantList;
}

void JavaParser::EnumConstantListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstantList(this);
}

void JavaParser::EnumConstantListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstantList(this);
}

JavaParser::EnumConstantListContext* JavaParser::enumConstantList() {
  EnumConstantListContext *_localctx = _tracker.createInstance<EnumConstantListContext>(_ctx, getState());
  enterRule(_localctx, 200, JavaParser::RuleEnumConstantList);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1846);
    enumConstant();
    setState(1851);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1847);
        match(JavaParser::COMMA);
        setState(1848);
        enumConstant(); 
      }
      setState(1853);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantContext ------------------------------------------------------------------

JavaParser::EnumConstantContext::EnumConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::EnumConstantContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::EnumConstantModifierContext *> JavaParser::EnumConstantContext::enumConstantModifier() {
  return getRuleContexts<JavaParser::EnumConstantModifierContext>();
}

JavaParser::EnumConstantModifierContext* JavaParser::EnumConstantContext::enumConstantModifier(size_t i) {
  return getRuleContext<JavaParser::EnumConstantModifierContext>(i);
}

JavaParser::ClassBodyContext* JavaParser::EnumConstantContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::EnumConstantContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}


size_t JavaParser::EnumConstantContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstant;
}

void JavaParser::EnumConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstant(this);
}

void JavaParser::EnumConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstant(this);
}

JavaParser::EnumConstantContext* JavaParser::enumConstant() {
  EnumConstantContext *_localctx = _tracker.createInstance<EnumConstantContext>(_ctx, getState());
  enterRule(_localctx, 202, JavaParser::RuleEnumConstant);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1857);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(1854);
      enumConstantModifier();
      setState(1859);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1860);
    identifier();
    setState(1866);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LPAREN) {
      setState(1861);
      match(JavaParser::LPAREN);
      setState(1863);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(1862);
        argumentList();
      }
      setState(1865);
      match(JavaParser::RPAREN);
    }
    setState(1869);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACE) {
      setState(1868);
      classBody();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantModifierContext ------------------------------------------------------------------

JavaParser::EnumConstantModifierContext::EnumConstantModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::EnumConstantModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::EnumConstantModifierContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstantModifier;
}

void JavaParser::EnumConstantModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstantModifier(this);
}

void JavaParser::EnumConstantModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstantModifier(this);
}

JavaParser::EnumConstantModifierContext* JavaParser::enumConstantModifier() {
  EnumConstantModifierContext *_localctx = _tracker.createInstance<EnumConstantModifierContext>(_ctx, getState());
  enterRule(_localctx, 204, JavaParser::RuleEnumConstantModifier);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1871);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumBodyDeclarationsContext ------------------------------------------------------------------

JavaParser::EnumBodyDeclarationsContext::EnumBodyDeclarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ClassBodyDeclarationContext *> JavaParser::EnumBodyDeclarationsContext::classBodyDeclaration() {
  return getRuleContexts<JavaParser::ClassBodyDeclarationContext>();
}

JavaParser::ClassBodyDeclarationContext* JavaParser::EnumBodyDeclarationsContext::classBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::ClassBodyDeclarationContext>(i);
}


size_t JavaParser::EnumBodyDeclarationsContext::getRuleIndex() const {
  return JavaParser::RuleEnumBodyDeclarations;
}

void JavaParser::EnumBodyDeclarationsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumBodyDeclarations(this);
}

void JavaParser::EnumBodyDeclarationsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumBodyDeclarations(this);
}

JavaParser::EnumBodyDeclarationsContext* JavaParser::enumBodyDeclarations() {
  EnumBodyDeclarationsContext *_localctx = _tracker.createInstance<EnumBodyDeclarationsContext>(_ctx, getState());
  enterRule(_localctx, 206, JavaParser::RuleEnumBodyDeclarations);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1873);
    match(JavaParser::SEMI);
    setState(1877);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::INTERFACE)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NATIVE)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::SYNCHRONIZED)
      | (1ULL << JavaParser::TRANSIENT)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::VOLATILE))) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & ((1ULL << (JavaParser::LBRACE - 70))
      | (1ULL << (JavaParser::SEMI - 70))
      | (1ULL << (JavaParser::AT - 70))
      | (1ULL << (JavaParser::LT - 70))
      | (1ULL << (JavaParser::Identifier - 70)))) != 0)) {
      setState(1874);
      classBodyDeclaration();
      setState(1879);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceDeclarationContext::InterfaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NormalInterfaceDeclarationContext* JavaParser::InterfaceDeclarationContext::normalInterfaceDeclaration() {
  return getRuleContext<JavaParser::NormalInterfaceDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::InterfaceDeclarationContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}


size_t JavaParser::InterfaceDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceDeclaration;
}

void JavaParser::InterfaceDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceDeclaration(this);
}

void JavaParser::InterfaceDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceDeclaration(this);
}

JavaParser::InterfaceDeclarationContext* JavaParser::interfaceDeclaration() {
  InterfaceDeclarationContext *_localctx = _tracker.createInstance<InterfaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 208, JavaParser::RuleInterfaceDeclaration);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1882);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1880);
      normalInterfaceDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1881);
      annotationTypeDeclaration();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalInterfaceDeclarationContext ------------------------------------------------------------------

JavaParser::NormalInterfaceDeclarationContext::NormalInterfaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::NormalInterfaceDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::InterfaceBodyContext* JavaParser::NormalInterfaceDeclarationContext::interfaceBody() {
  return getRuleContext<JavaParser::InterfaceBodyContext>(0);
}

std::vector<JavaParser::InterfaceModifierContext *> JavaParser::NormalInterfaceDeclarationContext::interfaceModifier() {
  return getRuleContexts<JavaParser::InterfaceModifierContext>();
}

JavaParser::InterfaceModifierContext* JavaParser::NormalInterfaceDeclarationContext::interfaceModifier(size_t i) {
  return getRuleContext<JavaParser::InterfaceModifierContext>(i);
}

JavaParser::TypeParametersContext* JavaParser::NormalInterfaceDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::ExtendsInterfacesContext* JavaParser::NormalInterfaceDeclarationContext::extendsInterfaces() {
  return getRuleContext<JavaParser::ExtendsInterfacesContext>(0);
}


size_t JavaParser::NormalInterfaceDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleNormalInterfaceDeclaration;
}

void JavaParser::NormalInterfaceDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalInterfaceDeclaration(this);
}

void JavaParser::NormalInterfaceDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalInterfaceDeclaration(this);
}

JavaParser::NormalInterfaceDeclarationContext* JavaParser::normalInterfaceDeclaration() {
  NormalInterfaceDeclarationContext *_localctx = _tracker.createInstance<NormalInterfaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 210, JavaParser::RuleNormalInterfaceDeclaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1887);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP))) != 0) || _la == JavaParser::AT) {
      setState(1884);
      interfaceModifier();
      setState(1889);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1890);
    match(JavaParser::INTERFACE);
    setState(1891);
    identifier();
    setState(1893);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1892);
      typeParameters();
    }
    setState(1896);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(1895);
      extendsInterfaces();
    }
    setState(1898);
    interfaceBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceModifierContext ------------------------------------------------------------------

JavaParser::InterfaceModifierContext::InterfaceModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::InterfaceModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::InterfaceModifierContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceModifier;
}

void JavaParser::InterfaceModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceModifier(this);
}

void JavaParser::InterfaceModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceModifier(this);
}

JavaParser::InterfaceModifierContext* JavaParser::interfaceModifier() {
  InterfaceModifierContext *_localctx = _tracker.createInstance<InterfaceModifierContext>(_ctx, getState());
  enterRule(_localctx, 212, JavaParser::RuleInterfaceModifier);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1907);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1900);
        annotation();
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1901);
        match(JavaParser::PUBLIC);
        break;
      }

      case JavaParser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(1902);
        match(JavaParser::PROTECTED);
        break;
      }

      case JavaParser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(1903);
        match(JavaParser::PRIVATE);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 5);
        setState(1904);
        match(JavaParser::ABSTRACT);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(1905);
        match(JavaParser::STATIC);
        break;
      }

      case JavaParser::STRICTFP: {
        enterOuterAlt(_localctx, 7);
        setState(1906);
        match(JavaParser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtendsInterfacesContext ------------------------------------------------------------------

JavaParser::ExtendsInterfacesContext::ExtendsInterfacesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::InterfaceTypeListContext* JavaParser::ExtendsInterfacesContext::interfaceTypeList() {
  return getRuleContext<JavaParser::InterfaceTypeListContext>(0);
}


size_t JavaParser::ExtendsInterfacesContext::getRuleIndex() const {
  return JavaParser::RuleExtendsInterfaces;
}

void JavaParser::ExtendsInterfacesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtendsInterfaces(this);
}

void JavaParser::ExtendsInterfacesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtendsInterfaces(this);
}

JavaParser::ExtendsInterfacesContext* JavaParser::extendsInterfaces() {
  ExtendsInterfacesContext *_localctx = _tracker.createInstance<ExtendsInterfacesContext>(_ctx, getState());
  enterRule(_localctx, 214, JavaParser::RuleExtendsInterfaces);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1909);
    match(JavaParser::EXTENDS);
    setState(1910);
    interfaceTypeList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceBodyContext ------------------------------------------------------------------

JavaParser::InterfaceBodyContext::InterfaceBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::InterfaceMemberDeclarationContext *> JavaParser::InterfaceBodyContext::interfaceMemberDeclaration() {
  return getRuleContexts<JavaParser::InterfaceMemberDeclarationContext>();
}

JavaParser::InterfaceMemberDeclarationContext* JavaParser::InterfaceBodyContext::interfaceMemberDeclaration(size_t i) {
  return getRuleContext<JavaParser::InterfaceMemberDeclarationContext>(i);
}


size_t JavaParser::InterfaceBodyContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceBody;
}

void JavaParser::InterfaceBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceBody(this);
}

void JavaParser::InterfaceBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceBody(this);
}

JavaParser::InterfaceBodyContext* JavaParser::interfaceBody() {
  InterfaceBodyContext *_localctx = _tracker.createInstance<InterfaceBodyContext>(_ctx, getState());
  enterRule(_localctx, 216, JavaParser::RuleInterfaceBody);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1912);
    match(JavaParser::LBRACE);
    setState(1916);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::DEFAULT)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::INTERFACE)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::VOID))) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & ((1ULL << (JavaParser::SEMI - 74))
      | (1ULL << (JavaParser::AT - 74))
      | (1ULL << (JavaParser::LT - 74))
      | (1ULL << (JavaParser::Identifier - 74)))) != 0)) {
      setState(1913);
      interfaceMemberDeclaration();
      setState(1918);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1919);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMemberDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceMemberDeclarationContext::InterfaceMemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConstantDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::constantDeclaration() {
  return getRuleContext<JavaParser::ConstantDeclarationContext>(0);
}

JavaParser::InterfaceMethodDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::interfaceMethodDeclaration() {
  return getRuleContext<JavaParser::InterfaceMethodDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}


size_t JavaParser::InterfaceMemberDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMemberDeclaration;
}

void JavaParser::InterfaceMemberDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMemberDeclaration(this);
}

void JavaParser::InterfaceMemberDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMemberDeclaration(this);
}

JavaParser::InterfaceMemberDeclarationContext* JavaParser::interfaceMemberDeclaration() {
  InterfaceMemberDeclarationContext *_localctx = _tracker.createInstance<InterfaceMemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 218, JavaParser::RuleInterfaceMemberDeclaration);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1926);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1921);
      constantDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1922);
      interfaceMethodDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1923);
      classDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1924);
      interfaceDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1925);
      match(JavaParser::SEMI);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantDeclarationContext ------------------------------------------------------------------

JavaParser::ConstantDeclarationContext::ConstantDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::ConstantDeclarationContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorListContext* JavaParser::ConstantDeclarationContext::variableDeclaratorList() {
  return getRuleContext<JavaParser::VariableDeclaratorListContext>(0);
}

std::vector<JavaParser::ConstantModifierContext *> JavaParser::ConstantDeclarationContext::constantModifier() {
  return getRuleContexts<JavaParser::ConstantModifierContext>();
}

JavaParser::ConstantModifierContext* JavaParser::ConstantDeclarationContext::constantModifier(size_t i) {
  return getRuleContext<JavaParser::ConstantModifierContext>(i);
}


size_t JavaParser::ConstantDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleConstantDeclaration;
}

void JavaParser::ConstantDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantDeclaration(this);
}

void JavaParser::ConstantDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantDeclaration(this);
}

JavaParser::ConstantDeclarationContext* JavaParser::constantDeclaration() {
  ConstantDeclarationContext *_localctx = _tracker.createInstance<ConstantDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 220, JavaParser::RuleConstantDeclaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1931);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & ((1ULL << (JavaParser::FINAL - 28))
      | (1ULL << (JavaParser::PUBLIC - 28))
      | (1ULL << (JavaParser::STATIC - 28))
      | (1ULL << (JavaParser::AT - 28)))) != 0)) {
      setState(1928);
      constantModifier();
      setState(1933);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1934);
    unannType();
    setState(1935);
    variableDeclaratorList();
    setState(1936);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantModifierContext ------------------------------------------------------------------

JavaParser::ConstantModifierContext::ConstantModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::ConstantModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::ConstantModifierContext::getRuleIndex() const {
  return JavaParser::RuleConstantModifier;
}

void JavaParser::ConstantModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantModifier(this);
}

void JavaParser::ConstantModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantModifier(this);
}

JavaParser::ConstantModifierContext* JavaParser::constantModifier() {
  ConstantModifierContext *_localctx = _tracker.createInstance<ConstantModifierContext>(_ctx, getState());
  enterRule(_localctx, 222, JavaParser::RuleConstantModifier);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1942);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1938);
        annotation();
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1939);
        match(JavaParser::PUBLIC);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 3);
        setState(1940);
        match(JavaParser::STATIC);
        break;
      }

      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 4);
        setState(1941);
        match(JavaParser::FINAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceMethodDeclarationContext::InterfaceMethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::MethodHeaderContext* JavaParser::InterfaceMethodDeclarationContext::methodHeader() {
  return getRuleContext<JavaParser::MethodHeaderContext>(0);
}

JavaParser::MethodBodyContext* JavaParser::InterfaceMethodDeclarationContext::methodBody() {
  return getRuleContext<JavaParser::MethodBodyContext>(0);
}

std::vector<JavaParser::InterfaceMethodModifierContext *> JavaParser::InterfaceMethodDeclarationContext::interfaceMethodModifier() {
  return getRuleContexts<JavaParser::InterfaceMethodModifierContext>();
}

JavaParser::InterfaceMethodModifierContext* JavaParser::InterfaceMethodDeclarationContext::interfaceMethodModifier(size_t i) {
  return getRuleContext<JavaParser::InterfaceMethodModifierContext>(i);
}


size_t JavaParser::InterfaceMethodDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMethodDeclaration;
}

void JavaParser::InterfaceMethodDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMethodDeclaration(this);
}

void JavaParser::InterfaceMethodDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMethodDeclaration(this);
}

JavaParser::InterfaceMethodDeclarationContext* JavaParser::interfaceMethodDeclaration() {
  InterfaceMethodDeclarationContext *_localctx = _tracker.createInstance<InterfaceMethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 224, JavaParser::RuleInterfaceMethodDeclaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1947);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::DEFAULT)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP))) != 0) || _la == JavaParser::AT) {
      setState(1944);
      interfaceMethodModifier();
      setState(1949);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1950);
    methodHeader();
    setState(1951);
    methodBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodModifierContext ------------------------------------------------------------------

JavaParser::InterfaceMethodModifierContext::InterfaceMethodModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::InterfaceMethodModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::InterfaceMethodModifierContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMethodModifier;
}

void JavaParser::InterfaceMethodModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMethodModifier(this);
}

void JavaParser::InterfaceMethodModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMethodModifier(this);
}

JavaParser::InterfaceMethodModifierContext* JavaParser::interfaceMethodModifier() {
  InterfaceMethodModifierContext *_localctx = _tracker.createInstance<InterfaceMethodModifierContext>(_ctx, getState());
  enterRule(_localctx, 226, JavaParser::RuleInterfaceMethodModifier);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1960);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1953);
        annotation();
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1954);
        match(JavaParser::PUBLIC);
        break;
      }

      case JavaParser::PRIVATE: {
        enterOuterAlt(_localctx, 3);
        setState(1955);
        match(JavaParser::PRIVATE);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 4);
        setState(1956);
        match(JavaParser::ABSTRACT);
        break;
      }

      case JavaParser::DEFAULT: {
        enterOuterAlt(_localctx, 5);
        setState(1957);
        match(JavaParser::DEFAULT);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(1958);
        match(JavaParser::STATIC);
        break;
      }

      case JavaParser::STRICTFP: {
        enterOuterAlt(_localctx, 7);
        setState(1959);
        match(JavaParser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeDeclarationContext ------------------------------------------------------------------

JavaParser::AnnotationTypeDeclarationContext::AnnotationTypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::AnnotationTypeDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::AnnotationTypeBodyContext* JavaParser::AnnotationTypeDeclarationContext::annotationTypeBody() {
  return getRuleContext<JavaParser::AnnotationTypeBodyContext>(0);
}

std::vector<JavaParser::InterfaceModifierContext *> JavaParser::AnnotationTypeDeclarationContext::interfaceModifier() {
  return getRuleContexts<JavaParser::InterfaceModifierContext>();
}

JavaParser::InterfaceModifierContext* JavaParser::AnnotationTypeDeclarationContext::interfaceModifier(size_t i) {
  return getRuleContext<JavaParser::InterfaceModifierContext>(i);
}


size_t JavaParser::AnnotationTypeDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeDeclaration;
}

void JavaParser::AnnotationTypeDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeDeclaration(this);
}

void JavaParser::AnnotationTypeDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeDeclaration(this);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::annotationTypeDeclaration() {
  AnnotationTypeDeclarationContext *_localctx = _tracker.createInstance<AnnotationTypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 228, JavaParser::RuleAnnotationTypeDeclaration);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1965);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1962);
        interfaceModifier(); 
      }
      setState(1967);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx);
    }
    setState(1968);
    match(JavaParser::AT);
    setState(1969);
    match(JavaParser::INTERFACE);
    setState(1970);
    identifier();
    setState(1971);
    annotationTypeBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeBodyContext ------------------------------------------------------------------

JavaParser::AnnotationTypeBodyContext::AnnotationTypeBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::AnnotationTypeMemberDeclarationContext *> JavaParser::AnnotationTypeBodyContext::annotationTypeMemberDeclaration() {
  return getRuleContexts<JavaParser::AnnotationTypeMemberDeclarationContext>();
}

JavaParser::AnnotationTypeMemberDeclarationContext* JavaParser::AnnotationTypeBodyContext::annotationTypeMemberDeclaration(size_t i) {
  return getRuleContext<JavaParser::AnnotationTypeMemberDeclarationContext>(i);
}


size_t JavaParser::AnnotationTypeBodyContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeBody;
}

void JavaParser::AnnotationTypeBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeBody(this);
}

void JavaParser::AnnotationTypeBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeBody(this);
}

JavaParser::AnnotationTypeBodyContext* JavaParser::annotationTypeBody() {
  AnnotationTypeBodyContext *_localctx = _tracker.createInstance<AnnotationTypeBodyContext>(_ctx, getState());
  enterRule(_localctx, 230, JavaParser::RuleAnnotationTypeBody);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1973);
    match(JavaParser::LBRACE);
    setState(1977);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::INTERFACE)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP))) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & ((1ULL << (JavaParser::SEMI - 74))
      | (1ULL << (JavaParser::AT - 74))
      | (1ULL << (JavaParser::Identifier - 74)))) != 0)) {
      setState(1974);
      annotationTypeMemberDeclaration();
      setState(1979);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1980);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeMemberDeclarationContext ------------------------------------------------------------------

JavaParser::AnnotationTypeMemberDeclarationContext::AnnotationTypeMemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationTypeElementDeclarationContext* JavaParser::AnnotationTypeMemberDeclarationContext::annotationTypeElementDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeElementDeclarationContext>(0);
}

JavaParser::ConstantDeclarationContext* JavaParser::AnnotationTypeMemberDeclarationContext::constantDeclaration() {
  return getRuleContext<JavaParser::ConstantDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::AnnotationTypeMemberDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::AnnotationTypeMemberDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}


size_t JavaParser::AnnotationTypeMemberDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeMemberDeclaration;
}

void JavaParser::AnnotationTypeMemberDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeMemberDeclaration(this);
}

void JavaParser::AnnotationTypeMemberDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeMemberDeclaration(this);
}

JavaParser::AnnotationTypeMemberDeclarationContext* JavaParser::annotationTypeMemberDeclaration() {
  AnnotationTypeMemberDeclarationContext *_localctx = _tracker.createInstance<AnnotationTypeMemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 232, JavaParser::RuleAnnotationTypeMemberDeclaration);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1987);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1982);
      annotationTypeElementDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1983);
      constantDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1984);
      classDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1985);
      interfaceDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1986);
      match(JavaParser::SEMI);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeElementDeclarationContext ------------------------------------------------------------------

JavaParser::AnnotationTypeElementDeclarationContext::AnnotationTypeElementDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::AnnotationTypeElementDeclarationContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::AnnotationTypeElementDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::AnnotationTypeElementModifierContext *> JavaParser::AnnotationTypeElementDeclarationContext::annotationTypeElementModifier() {
  return getRuleContexts<JavaParser::AnnotationTypeElementModifierContext>();
}

JavaParser::AnnotationTypeElementModifierContext* JavaParser::AnnotationTypeElementDeclarationContext::annotationTypeElementModifier(size_t i) {
  return getRuleContext<JavaParser::AnnotationTypeElementModifierContext>(i);
}

JavaParser::DimsContext* JavaParser::AnnotationTypeElementDeclarationContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}

JavaParser::DefaultValueContext* JavaParser::AnnotationTypeElementDeclarationContext::defaultValue() {
  return getRuleContext<JavaParser::DefaultValueContext>(0);
}


size_t JavaParser::AnnotationTypeElementDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeElementDeclaration;
}

void JavaParser::AnnotationTypeElementDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeElementDeclaration(this);
}

void JavaParser::AnnotationTypeElementDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeElementDeclaration(this);
}

JavaParser::AnnotationTypeElementDeclarationContext* JavaParser::annotationTypeElementDeclaration() {
  AnnotationTypeElementDeclarationContext *_localctx = _tracker.createInstance<AnnotationTypeElementDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 234, JavaParser::RuleAnnotationTypeElementDeclaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1992);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::ABSTRACT

    || _la == JavaParser::PUBLIC || _la == JavaParser::AT) {
      setState(1989);
      annotationTypeElementModifier();
      setState(1994);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1995);
    unannType();
    setState(1996);
    identifier();
    setState(1997);
    match(JavaParser::LPAREN);
    setState(1998);
    match(JavaParser::RPAREN);
    setState(2000);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACK

    || _la == JavaParser::AT) {
      setState(1999);
      dims();
    }
    setState(2003);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::DEFAULT) {
      setState(2002);
      defaultValue();
    }
    setState(2005);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeElementModifierContext ------------------------------------------------------------------

JavaParser::AnnotationTypeElementModifierContext::AnnotationTypeElementModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::AnnotationTypeElementModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::AnnotationTypeElementModifierContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeElementModifier;
}

void JavaParser::AnnotationTypeElementModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeElementModifier(this);
}

void JavaParser::AnnotationTypeElementModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeElementModifier(this);
}

JavaParser::AnnotationTypeElementModifierContext* JavaParser::annotationTypeElementModifier() {
  AnnotationTypeElementModifierContext *_localctx = _tracker.createInstance<AnnotationTypeElementModifierContext>(_ctx, getState());
  enterRule(_localctx, 236, JavaParser::RuleAnnotationTypeElementModifier);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2010);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(2007);
        annotation();
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(2008);
        match(JavaParser::PUBLIC);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 3);
        setState(2009);
        match(JavaParser::ABSTRACT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultValueContext ------------------------------------------------------------------

JavaParser::DefaultValueContext::DefaultValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ElementValueContext* JavaParser::DefaultValueContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}


size_t JavaParser::DefaultValueContext::getRuleIndex() const {
  return JavaParser::RuleDefaultValue;
}

void JavaParser::DefaultValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultValue(this);
}

void JavaParser::DefaultValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultValue(this);
}

JavaParser::DefaultValueContext* JavaParser::defaultValue() {
  DefaultValueContext *_localctx = _tracker.createInstance<DefaultValueContext>(_ctx, getState());
  enterRule(_localctx, 238, JavaParser::RuleDefaultValue);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2012);
    match(JavaParser::DEFAULT);
    setState(2013);
    elementValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

JavaParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NormalAnnotationContext* JavaParser::AnnotationContext::normalAnnotation() {
  return getRuleContext<JavaParser::NormalAnnotationContext>(0);
}

JavaParser::MarkerAnnotationContext* JavaParser::AnnotationContext::markerAnnotation() {
  return getRuleContext<JavaParser::MarkerAnnotationContext>(0);
}

JavaParser::SingleElementAnnotationContext* JavaParser::AnnotationContext::singleElementAnnotation() {
  return getRuleContext<JavaParser::SingleElementAnnotationContext>(0);
}


size_t JavaParser::AnnotationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotation;
}

void JavaParser::AnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation(this);
}

void JavaParser::AnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation(this);
}

JavaParser::AnnotationContext* JavaParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 240, JavaParser::RuleAnnotation);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2018);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2015);
      normalAnnotation();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2016);
      markerAnnotation();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2017);
      singleElementAnnotation();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalAnnotationContext ------------------------------------------------------------------

JavaParser::NormalAnnotationContext::NormalAnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeNameContext* JavaParser::NormalAnnotationContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::ElementValuePairListContext* JavaParser::NormalAnnotationContext::elementValuePairList() {
  return getRuleContext<JavaParser::ElementValuePairListContext>(0);
}


size_t JavaParser::NormalAnnotationContext::getRuleIndex() const {
  return JavaParser::RuleNormalAnnotation;
}

void JavaParser::NormalAnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalAnnotation(this);
}

void JavaParser::NormalAnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalAnnotation(this);
}

JavaParser::NormalAnnotationContext* JavaParser::normalAnnotation() {
  NormalAnnotationContext *_localctx = _tracker.createInstance<NormalAnnotationContext>(_ctx, getState());
  enterRule(_localctx, 242, JavaParser::RuleNormalAnnotation);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2020);
    match(JavaParser::AT);
    setState(2021);
    typeName();
    setState(2022);
    match(JavaParser::LPAREN);
    setState(2024);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8))) != 0) || _la == JavaParser::Identifier) {
      setState(2023);
      elementValuePairList();
    }
    setState(2026);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePairListContext ------------------------------------------------------------------

JavaParser::ElementValuePairListContext::ElementValuePairListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ElementValuePairContext *> JavaParser::ElementValuePairListContext::elementValuePair() {
  return getRuleContexts<JavaParser::ElementValuePairContext>();
}

JavaParser::ElementValuePairContext* JavaParser::ElementValuePairListContext::elementValuePair(size_t i) {
  return getRuleContext<JavaParser::ElementValuePairContext>(i);
}


size_t JavaParser::ElementValuePairListContext::getRuleIndex() const {
  return JavaParser::RuleElementValuePairList;
}

void JavaParser::ElementValuePairListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValuePairList(this);
}

void JavaParser::ElementValuePairListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValuePairList(this);
}

JavaParser::ElementValuePairListContext* JavaParser::elementValuePairList() {
  ElementValuePairListContext *_localctx = _tracker.createInstance<ElementValuePairListContext>(_ctx, getState());
  enterRule(_localctx, 244, JavaParser::RuleElementValuePairList);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2028);
    elementValuePair();
    setState(2033);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(2029);
      match(JavaParser::COMMA);
      setState(2030);
      elementValuePair();
      setState(2035);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePairContext ------------------------------------------------------------------

JavaParser::ElementValuePairContext::ElementValuePairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ElementValuePairContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ElementValueContext* JavaParser::ElementValuePairContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}


size_t JavaParser::ElementValuePairContext::getRuleIndex() const {
  return JavaParser::RuleElementValuePair;
}

void JavaParser::ElementValuePairContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValuePair(this);
}

void JavaParser::ElementValuePairContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValuePair(this);
}

JavaParser::ElementValuePairContext* JavaParser::elementValuePair() {
  ElementValuePairContext *_localctx = _tracker.createInstance<ElementValuePairContext>(_ctx, getState());
  enterRule(_localctx, 246, JavaParser::RuleElementValuePair);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2036);
    identifier();
    setState(2037);
    match(JavaParser::ASSIGN);
    setState(2038);
    elementValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueContext ------------------------------------------------------------------

JavaParser::ElementValueContext::ElementValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConditionalExpressionContext* JavaParser::ElementValueContext::conditionalExpression() {
  return getRuleContext<JavaParser::ConditionalExpressionContext>(0);
}

JavaParser::ElementValueArrayInitializerContext* JavaParser::ElementValueContext::elementValueArrayInitializer() {
  return getRuleContext<JavaParser::ElementValueArrayInitializerContext>(0);
}

JavaParser::AnnotationContext* JavaParser::ElementValueContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::ElementValueContext::getRuleIndex() const {
  return JavaParser::RuleElementValue;
}

void JavaParser::ElementValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValue(this);
}

void JavaParser::ElementValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValue(this);
}

JavaParser::ElementValueContext* JavaParser::elementValue() {
  ElementValueContext *_localctx = _tracker.createInstance<ElementValueContext>(_ctx, getState());
  enterRule(_localctx, 248, JavaParser::RuleElementValue);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2043);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2040);
      conditionalExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2041);
      elementValueArrayInitializer();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2042);
      annotation();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueArrayInitializerContext ------------------------------------------------------------------

JavaParser::ElementValueArrayInitializerContext::ElementValueArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ElementValueListContext* JavaParser::ElementValueArrayInitializerContext::elementValueList() {
  return getRuleContext<JavaParser::ElementValueListContext>(0);
}


size_t JavaParser::ElementValueArrayInitializerContext::getRuleIndex() const {
  return JavaParser::RuleElementValueArrayInitializer;
}

void JavaParser::ElementValueArrayInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValueArrayInitializer(this);
}

void JavaParser::ElementValueArrayInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValueArrayInitializer(this);
}

JavaParser::ElementValueArrayInitializerContext* JavaParser::elementValueArrayInitializer() {
  ElementValueArrayInitializerContext *_localctx = _tracker.createInstance<ElementValueArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 250, JavaParser::RuleElementValueArrayInitializer);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2045);
    match(JavaParser::LBRACE);
    setState(2047);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::LBRACE - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(2046);
      elementValueList();
    }
    setState(2050);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::COMMA) {
      setState(2049);
      match(JavaParser::COMMA);
    }
    setState(2052);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueListContext ------------------------------------------------------------------

JavaParser::ElementValueListContext::ElementValueListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ElementValueContext *> JavaParser::ElementValueListContext::elementValue() {
  return getRuleContexts<JavaParser::ElementValueContext>();
}

JavaParser::ElementValueContext* JavaParser::ElementValueListContext::elementValue(size_t i) {
  return getRuleContext<JavaParser::ElementValueContext>(i);
}


size_t JavaParser::ElementValueListContext::getRuleIndex() const {
  return JavaParser::RuleElementValueList;
}

void JavaParser::ElementValueListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValueList(this);
}

void JavaParser::ElementValueListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValueList(this);
}

JavaParser::ElementValueListContext* JavaParser::elementValueList() {
  ElementValueListContext *_localctx = _tracker.createInstance<ElementValueListContext>(_ctx, getState());
  enterRule(_localctx, 252, JavaParser::RuleElementValueList);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2054);
    elementValue();
    setState(2059);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2055);
        match(JavaParser::COMMA);
        setState(2056);
        elementValue(); 
      }
      setState(2061);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MarkerAnnotationContext ------------------------------------------------------------------

JavaParser::MarkerAnnotationContext::MarkerAnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeNameContext* JavaParser::MarkerAnnotationContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}


size_t JavaParser::MarkerAnnotationContext::getRuleIndex() const {
  return JavaParser::RuleMarkerAnnotation;
}

void JavaParser::MarkerAnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMarkerAnnotation(this);
}

void JavaParser::MarkerAnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMarkerAnnotation(this);
}

JavaParser::MarkerAnnotationContext* JavaParser::markerAnnotation() {
  MarkerAnnotationContext *_localctx = _tracker.createInstance<MarkerAnnotationContext>(_ctx, getState());
  enterRule(_localctx, 254, JavaParser::RuleMarkerAnnotation);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2062);
    match(JavaParser::AT);
    setState(2063);
    typeName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleElementAnnotationContext ------------------------------------------------------------------

JavaParser::SingleElementAnnotationContext::SingleElementAnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeNameContext* JavaParser::SingleElementAnnotationContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::ElementValueContext* JavaParser::SingleElementAnnotationContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}


size_t JavaParser::SingleElementAnnotationContext::getRuleIndex() const {
  return JavaParser::RuleSingleElementAnnotation;
}

void JavaParser::SingleElementAnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleElementAnnotation(this);
}

void JavaParser::SingleElementAnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleElementAnnotation(this);
}

JavaParser::SingleElementAnnotationContext* JavaParser::singleElementAnnotation() {
  SingleElementAnnotationContext *_localctx = _tracker.createInstance<SingleElementAnnotationContext>(_ctx, getState());
  enterRule(_localctx, 256, JavaParser::RuleSingleElementAnnotation);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2065);
    match(JavaParser::AT);
    setState(2066);
    typeName();
    setState(2067);
    match(JavaParser::LPAREN);
    setState(2068);
    elementValue();
    setState(2069);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayInitializerContext ------------------------------------------------------------------

JavaParser::ArrayInitializerContext::ArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::VariableInitializerListContext* JavaParser::ArrayInitializerContext::variableInitializerList() {
  return getRuleContext<JavaParser::VariableInitializerListContext>(0);
}


size_t JavaParser::ArrayInitializerContext::getRuleIndex() const {
  return JavaParser::RuleArrayInitializer;
}

void JavaParser::ArrayInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayInitializer(this);
}

void JavaParser::ArrayInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayInitializer(this);
}

JavaParser::ArrayInitializerContext* JavaParser::arrayInitializer() {
  ArrayInitializerContext *_localctx = _tracker.createInstance<ArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 258, JavaParser::RuleArrayInitializer);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2071);
    match(JavaParser::LBRACE);
    setState(2073);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::LBRACE - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(2072);
      variableInitializerList();
    }
    setState(2076);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::COMMA) {
      setState(2075);
      match(JavaParser::COMMA);
    }
    setState(2078);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializerListContext ------------------------------------------------------------------

JavaParser::VariableInitializerListContext::VariableInitializerListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::VariableInitializerContext *> JavaParser::VariableInitializerListContext::variableInitializer() {
  return getRuleContexts<JavaParser::VariableInitializerContext>();
}

JavaParser::VariableInitializerContext* JavaParser::VariableInitializerListContext::variableInitializer(size_t i) {
  return getRuleContext<JavaParser::VariableInitializerContext>(i);
}


size_t JavaParser::VariableInitializerListContext::getRuleIndex() const {
  return JavaParser::RuleVariableInitializerList;
}

void JavaParser::VariableInitializerListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableInitializerList(this);
}

void JavaParser::VariableInitializerListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableInitializerList(this);
}

JavaParser::VariableInitializerListContext* JavaParser::variableInitializerList() {
  VariableInitializerListContext *_localctx = _tracker.createInstance<VariableInitializerListContext>(_ctx, getState());
  enterRule(_localctx, 260, JavaParser::RuleVariableInitializerList);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2080);
    variableInitializer();
    setState(2085);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2081);
        match(JavaParser::COMMA);
        setState(2082);
        variableInitializer(); 
      }
      setState(2087);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

JavaParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockStatementsContext* JavaParser::BlockContext::blockStatements() {
  return getRuleContext<JavaParser::BlockStatementsContext>(0);
}


size_t JavaParser::BlockContext::getRuleIndex() const {
  return JavaParser::RuleBlock;
}

void JavaParser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void JavaParser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}

JavaParser::BlockContext* JavaParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 262, JavaParser::RuleBlock);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2088);
    match(JavaParser::LBRACE);
    setState(2090);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::ASSERT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BREAK)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::CONTINUE)
      | (1ULL << JavaParser::DO)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::FOR)
      | (1ULL << JavaParser::IF)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::RETURN)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::SWITCH)
      | (1ULL << JavaParser::SYNCHRONIZED)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::THROW)
      | (1ULL << JavaParser::TRY)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::WHILE)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::LBRACE - 64))
      | (1ULL << (JavaParser::SEMI - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(2089);
      blockStatements();
    }
    setState(2092);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatementsContext ------------------------------------------------------------------

JavaParser::BlockStatementsContext::BlockStatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::BlockStatementContext *> JavaParser::BlockStatementsContext::blockStatement() {
  return getRuleContexts<JavaParser::BlockStatementContext>();
}

JavaParser::BlockStatementContext* JavaParser::BlockStatementsContext::blockStatement(size_t i) {
  return getRuleContext<JavaParser::BlockStatementContext>(i);
}


size_t JavaParser::BlockStatementsContext::getRuleIndex() const {
  return JavaParser::RuleBlockStatements;
}

void JavaParser::BlockStatementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStatements(this);
}

void JavaParser::BlockStatementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStatements(this);
}

JavaParser::BlockStatementsContext* JavaParser::blockStatements() {
  BlockStatementsContext *_localctx = _tracker.createInstance<BlockStatementsContext>(_ctx, getState());
  enterRule(_localctx, 264, JavaParser::RuleBlockStatements);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2095); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2094);
      blockStatement();
      setState(2097); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::ASSERT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BREAK)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::CONTINUE)
      | (1ULL << JavaParser::DO)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::FOR)
      | (1ULL << JavaParser::IF)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::RETURN)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::SWITCH)
      | (1ULL << JavaParser::SYNCHRONIZED)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::THROW)
      | (1ULL << JavaParser::TRY)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::WHILE)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::LBRACE - 64))
      | (1ULL << (JavaParser::SEMI - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatementContext ------------------------------------------------------------------

JavaParser::BlockStatementContext::BlockStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LocalVariableDeclarationStatementContext* JavaParser::BlockStatementContext::localVariableDeclarationStatement() {
  return getRuleContext<JavaParser::LocalVariableDeclarationStatementContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::BlockStatementContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::StatementContext* JavaParser::BlockStatementContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}


size_t JavaParser::BlockStatementContext::getRuleIndex() const {
  return JavaParser::RuleBlockStatement;
}

void JavaParser::BlockStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStatement(this);
}

void JavaParser::BlockStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStatement(this);
}

JavaParser::BlockStatementContext* JavaParser::blockStatement() {
  BlockStatementContext *_localctx = _tracker.createInstance<BlockStatementContext>(_ctx, getState());
  enterRule(_localctx, 266, JavaParser::RuleBlockStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2102);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2099);
      localVariableDeclarationStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2100);
      classDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2101);
      statement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalVariableDeclarationStatementContext ------------------------------------------------------------------

JavaParser::LocalVariableDeclarationStatementContext::LocalVariableDeclarationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LocalVariableDeclarationContext* JavaParser::LocalVariableDeclarationStatementContext::localVariableDeclaration() {
  return getRuleContext<JavaParser::LocalVariableDeclarationContext>(0);
}


size_t JavaParser::LocalVariableDeclarationStatementContext::getRuleIndex() const {
  return JavaParser::RuleLocalVariableDeclarationStatement;
}

void JavaParser::LocalVariableDeclarationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocalVariableDeclarationStatement(this);
}

void JavaParser::LocalVariableDeclarationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocalVariableDeclarationStatement(this);
}

JavaParser::LocalVariableDeclarationStatementContext* JavaParser::localVariableDeclarationStatement() {
  LocalVariableDeclarationStatementContext *_localctx = _tracker.createInstance<LocalVariableDeclarationStatementContext>(_ctx, getState());
  enterRule(_localctx, 268, JavaParser::RuleLocalVariableDeclarationStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2104);
    localVariableDeclaration();
    setState(2105);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalVariableDeclarationContext ------------------------------------------------------------------

JavaParser::LocalVariableDeclarationContext::LocalVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::LocalVariableDeclarationContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorListContext* JavaParser::LocalVariableDeclarationContext::variableDeclaratorList() {
  return getRuleContext<JavaParser::VariableDeclaratorListContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::LocalVariableDeclarationContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::LocalVariableDeclarationContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::LocalVariableDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleLocalVariableDeclaration;
}

void JavaParser::LocalVariableDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocalVariableDeclaration(this);
}

void JavaParser::LocalVariableDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocalVariableDeclaration(this);
}

JavaParser::LocalVariableDeclarationContext* JavaParser::localVariableDeclaration() {
  LocalVariableDeclarationContext *_localctx = _tracker.createInstance<LocalVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 270, JavaParser::RuleLocalVariableDeclaration);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2110);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::FINAL

    || _la == JavaParser::AT) {
      setState(2107);
      variableModifier();
      setState(2112);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2113);
    unannType();
    setState(2114);
    variableDeclaratorList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

JavaParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementWithoutTrailingSubstatementContext* JavaParser::StatementContext::statementWithoutTrailingSubstatement() {
  return getRuleContext<JavaParser::StatementWithoutTrailingSubstatementContext>(0);
}

JavaParser::LabeledStatementContext* JavaParser::StatementContext::labeledStatement() {
  return getRuleContext<JavaParser::LabeledStatementContext>(0);
}

JavaParser::IfThenStatementContext* JavaParser::StatementContext::ifThenStatement() {
  return getRuleContext<JavaParser::IfThenStatementContext>(0);
}

JavaParser::IfThenElseStatementContext* JavaParser::StatementContext::ifThenElseStatement() {
  return getRuleContext<JavaParser::IfThenElseStatementContext>(0);
}

JavaParser::WhileStatementContext* JavaParser::StatementContext::whileStatement() {
  return getRuleContext<JavaParser::WhileStatementContext>(0);
}

JavaParser::ForStatementContext* JavaParser::StatementContext::forStatement() {
  return getRuleContext<JavaParser::ForStatementContext>(0);
}


size_t JavaParser::StatementContext::getRuleIndex() const {
  return JavaParser::RuleStatement;
}

void JavaParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void JavaParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

JavaParser::StatementContext* JavaParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 272, JavaParser::RuleStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2122);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2116);
      statementWithoutTrailingSubstatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2117);
      labeledStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2118);
      ifThenStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2119);
      ifThenElseStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2120);
      whileStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2121);
      forStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementNoShortIfContext ------------------------------------------------------------------

JavaParser::StatementNoShortIfContext::StatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementWithoutTrailingSubstatementContext* JavaParser::StatementNoShortIfContext::statementWithoutTrailingSubstatement() {
  return getRuleContext<JavaParser::StatementWithoutTrailingSubstatementContext>(0);
}

JavaParser::LabeledStatementNoShortIfContext* JavaParser::StatementNoShortIfContext::labeledStatementNoShortIf() {
  return getRuleContext<JavaParser::LabeledStatementNoShortIfContext>(0);
}

JavaParser::IfThenElseStatementNoShortIfContext* JavaParser::StatementNoShortIfContext::ifThenElseStatementNoShortIf() {
  return getRuleContext<JavaParser::IfThenElseStatementNoShortIfContext>(0);
}

JavaParser::WhileStatementNoShortIfContext* JavaParser::StatementNoShortIfContext::whileStatementNoShortIf() {
  return getRuleContext<JavaParser::WhileStatementNoShortIfContext>(0);
}

JavaParser::ForStatementNoShortIfContext* JavaParser::StatementNoShortIfContext::forStatementNoShortIf() {
  return getRuleContext<JavaParser::ForStatementNoShortIfContext>(0);
}


size_t JavaParser::StatementNoShortIfContext::getRuleIndex() const {
  return JavaParser::RuleStatementNoShortIf;
}

void JavaParser::StatementNoShortIfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementNoShortIf(this);
}

void JavaParser::StatementNoShortIfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementNoShortIf(this);
}

JavaParser::StatementNoShortIfContext* JavaParser::statementNoShortIf() {
  StatementNoShortIfContext *_localctx = _tracker.createInstance<StatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 274, JavaParser::RuleStatementNoShortIf);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2129);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2124);
      statementWithoutTrailingSubstatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2125);
      labeledStatementNoShortIf();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2126);
      ifThenElseStatementNoShortIf();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2127);
      whileStatementNoShortIf();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2128);
      forStatementNoShortIf();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementWithoutTrailingSubstatementContext ------------------------------------------------------------------

JavaParser::StatementWithoutTrailingSubstatementContext::StatementWithoutTrailingSubstatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::StatementWithoutTrailingSubstatementContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

JavaParser::EmptyStatementContext* JavaParser::StatementWithoutTrailingSubstatementContext::emptyStatement() {
  return getRuleContext<JavaParser::EmptyStatementContext>(0);
}

JavaParser::ExpressionStatementContext* JavaParser::StatementWithoutTrailingSubstatementContext::expressionStatement() {
  return getRuleContext<JavaParser::ExpressionStatementContext>(0);
}

JavaParser::AssertStatementContext* JavaParser::StatementWithoutTrailingSubstatementContext::assertStatement() {
  return getRuleContext<JavaParser::AssertStatementContext>(0);
}

JavaParser::SwitchStatementContext* JavaParser::StatementWithoutTrailingSubstatementContext::switchStatement() {
  return getRuleContext<JavaParser::SwitchStatementContext>(0);
}

JavaParser::DoStatementContext* JavaParser::StatementWithoutTrailingSubstatementContext::doStatement() {
  return getRuleContext<JavaParser::DoStatementContext>(0);
}

JavaParser::BreakStatementContext* JavaParser::StatementWithoutTrailingSubstatementContext::breakStatement() {
  return getRuleContext<JavaParser::BreakStatementContext>(0);
}

JavaParser::ContinueStatementContext* JavaParser::StatementWithoutTrailingSubstatementContext::continueStatement() {
  return getRuleContext<JavaParser::ContinueStatementContext>(0);
}

JavaParser::ReturnStatementContext* JavaParser::StatementWithoutTrailingSubstatementContext::returnStatement() {
  return getRuleContext<JavaParser::ReturnStatementContext>(0);
}

JavaParser::SynchronizedStatementContext* JavaParser::StatementWithoutTrailingSubstatementContext::synchronizedStatement() {
  return getRuleContext<JavaParser::SynchronizedStatementContext>(0);
}

JavaParser::ThrowStatementContext* JavaParser::StatementWithoutTrailingSubstatementContext::throwStatement() {
  return getRuleContext<JavaParser::ThrowStatementContext>(0);
}

JavaParser::TryStatementContext* JavaParser::StatementWithoutTrailingSubstatementContext::tryStatement() {
  return getRuleContext<JavaParser::TryStatementContext>(0);
}


size_t JavaParser::StatementWithoutTrailingSubstatementContext::getRuleIndex() const {
  return JavaParser::RuleStatementWithoutTrailingSubstatement;
}

void JavaParser::StatementWithoutTrailingSubstatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement(this);
}

void JavaParser::StatementWithoutTrailingSubstatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement(this);
}

JavaParser::StatementWithoutTrailingSubstatementContext* JavaParser::statementWithoutTrailingSubstatement() {
  StatementWithoutTrailingSubstatementContext *_localctx = _tracker.createInstance<StatementWithoutTrailingSubstatementContext>(_ctx, getState());
  enterRule(_localctx, 276, JavaParser::RuleStatementWithoutTrailingSubstatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2143);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(2131);
        block();
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(2132);
        emptyStatement();
        break;
      }

      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::IntegerLiteral:
      case JavaParser::FloatingPointLiteral:
      case JavaParser::BooleanLiteral:
      case JavaParser::CharacterLiteral:
      case JavaParser::StringLiteral:
      case JavaParser::NullLiteral:
      case JavaParser::LPAREN:
      case JavaParser::AT:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 3);
        setState(2133);
        expressionStatement();
        break;
      }

      case JavaParser::ASSERT: {
        enterOuterAlt(_localctx, 4);
        setState(2134);
        assertStatement();
        break;
      }

      case JavaParser::SWITCH: {
        enterOuterAlt(_localctx, 5);
        setState(2135);
        switchStatement();
        break;
      }

      case JavaParser::DO: {
        enterOuterAlt(_localctx, 6);
        setState(2136);
        doStatement();
        break;
      }

      case JavaParser::BREAK: {
        enterOuterAlt(_localctx, 7);
        setState(2137);
        breakStatement();
        break;
      }

      case JavaParser::CONTINUE: {
        enterOuterAlt(_localctx, 8);
        setState(2138);
        continueStatement();
        break;
      }

      case JavaParser::RETURN: {
        enterOuterAlt(_localctx, 9);
        setState(2139);
        returnStatement();
        break;
      }

      case JavaParser::SYNCHRONIZED: {
        enterOuterAlt(_localctx, 10);
        setState(2140);
        synchronizedStatement();
        break;
      }

      case JavaParser::THROW: {
        enterOuterAlt(_localctx, 11);
        setState(2141);
        throwStatement();
        break;
      }

      case JavaParser::TRY: {
        enterOuterAlt(_localctx, 12);
        setState(2142);
        tryStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyStatementContext ------------------------------------------------------------------

JavaParser::EmptyStatementContext::EmptyStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::EmptyStatementContext::getRuleIndex() const {
  return JavaParser::RuleEmptyStatement;
}

void JavaParser::EmptyStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmptyStatement(this);
}

void JavaParser::EmptyStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmptyStatement(this);
}

JavaParser::EmptyStatementContext* JavaParser::emptyStatement() {
  EmptyStatementContext *_localctx = _tracker.createInstance<EmptyStatementContext>(_ctx, getState());
  enterRule(_localctx, 278, JavaParser::RuleEmptyStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2145);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledStatementContext ------------------------------------------------------------------

JavaParser::LabeledStatementContext::LabeledStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::LabeledStatementContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::StatementContext* JavaParser::LabeledStatementContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}


size_t JavaParser::LabeledStatementContext::getRuleIndex() const {
  return JavaParser::RuleLabeledStatement;
}

void JavaParser::LabeledStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabeledStatement(this);
}

void JavaParser::LabeledStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabeledStatement(this);
}

JavaParser::LabeledStatementContext* JavaParser::labeledStatement() {
  LabeledStatementContext *_localctx = _tracker.createInstance<LabeledStatementContext>(_ctx, getState());
  enterRule(_localctx, 280, JavaParser::RuleLabeledStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2147);
    identifier();
    setState(2148);
    match(JavaParser::COLON);
    setState(2149);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledStatementNoShortIfContext ------------------------------------------------------------------

JavaParser::LabeledStatementNoShortIfContext::LabeledStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::LabeledStatementNoShortIfContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::StatementNoShortIfContext* JavaParser::LabeledStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContext<JavaParser::StatementNoShortIfContext>(0);
}


size_t JavaParser::LabeledStatementNoShortIfContext::getRuleIndex() const {
  return JavaParser::RuleLabeledStatementNoShortIf;
}

void JavaParser::LabeledStatementNoShortIfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabeledStatementNoShortIf(this);
}

void JavaParser::LabeledStatementNoShortIfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabeledStatementNoShortIf(this);
}

JavaParser::LabeledStatementNoShortIfContext* JavaParser::labeledStatementNoShortIf() {
  LabeledStatementNoShortIfContext *_localctx = _tracker.createInstance<LabeledStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 282, JavaParser::RuleLabeledStatementNoShortIf);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2151);
    identifier();
    setState(2152);
    match(JavaParser::COLON);
    setState(2153);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

JavaParser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementExpressionContext* JavaParser::ExpressionStatementContext::statementExpression() {
  return getRuleContext<JavaParser::StatementExpressionContext>(0);
}


size_t JavaParser::ExpressionStatementContext::getRuleIndex() const {
  return JavaParser::RuleExpressionStatement;
}

void JavaParser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}

void JavaParser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}

JavaParser::ExpressionStatementContext* JavaParser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 284, JavaParser::RuleExpressionStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2155);
    statementExpression();
    setState(2156);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementExpressionContext ------------------------------------------------------------------

JavaParser::StatementExpressionContext::StatementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AssignmentContext* JavaParser::StatementExpressionContext::assignment() {
  return getRuleContext<JavaParser::AssignmentContext>(0);
}

JavaParser::PreIncrementExpressionContext* JavaParser::StatementExpressionContext::preIncrementExpression() {
  return getRuleContext<JavaParser::PreIncrementExpressionContext>(0);
}

JavaParser::PreDecrementExpressionContext* JavaParser::StatementExpressionContext::preDecrementExpression() {
  return getRuleContext<JavaParser::PreDecrementExpressionContext>(0);
}

JavaParser::PostIncrementExpressionContext* JavaParser::StatementExpressionContext::postIncrementExpression() {
  return getRuleContext<JavaParser::PostIncrementExpressionContext>(0);
}

JavaParser::PostDecrementExpressionContext* JavaParser::StatementExpressionContext::postDecrementExpression() {
  return getRuleContext<JavaParser::PostDecrementExpressionContext>(0);
}

JavaParser::MethodInvocationContext* JavaParser::StatementExpressionContext::methodInvocation() {
  return getRuleContext<JavaParser::MethodInvocationContext>(0);
}

JavaParser::ClassInstanceCreationExpressionContext* JavaParser::StatementExpressionContext::classInstanceCreationExpression() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpressionContext>(0);
}


size_t JavaParser::StatementExpressionContext::getRuleIndex() const {
  return JavaParser::RuleStatementExpression;
}

void JavaParser::StatementExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementExpression(this);
}

void JavaParser::StatementExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementExpression(this);
}

JavaParser::StatementExpressionContext* JavaParser::statementExpression() {
  StatementExpressionContext *_localctx = _tracker.createInstance<StatementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 286, JavaParser::RuleStatementExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2165);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2158);
      assignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2159);
      preIncrementExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2160);
      preDecrementExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2161);
      postIncrementExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2162);
      postDecrementExpression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2163);
      methodInvocation();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2164);
      classInstanceCreationExpression();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenStatementContext ------------------------------------------------------------------

JavaParser::IfThenStatementContext::IfThenStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::IfThenStatementContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::StatementContext* JavaParser::IfThenStatementContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}


size_t JavaParser::IfThenStatementContext::getRuleIndex() const {
  return JavaParser::RuleIfThenStatement;
}

void JavaParser::IfThenStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfThenStatement(this);
}

void JavaParser::IfThenStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfThenStatement(this);
}

JavaParser::IfThenStatementContext* JavaParser::ifThenStatement() {
  IfThenStatementContext *_localctx = _tracker.createInstance<IfThenStatementContext>(_ctx, getState());
  enterRule(_localctx, 288, JavaParser::RuleIfThenStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2167);
    match(JavaParser::IF);
    setState(2168);
    match(JavaParser::LPAREN);
    setState(2169);
    expression();
    setState(2170);
    match(JavaParser::RPAREN);
    setState(2171);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenElseStatementContext ------------------------------------------------------------------

JavaParser::IfThenElseStatementContext::IfThenElseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::IfThenElseStatementContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::StatementNoShortIfContext* JavaParser::IfThenElseStatementContext::statementNoShortIf() {
  return getRuleContext<JavaParser::StatementNoShortIfContext>(0);
}

JavaParser::StatementContext* JavaParser::IfThenElseStatementContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}


size_t JavaParser::IfThenElseStatementContext::getRuleIndex() const {
  return JavaParser::RuleIfThenElseStatement;
}

void JavaParser::IfThenElseStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfThenElseStatement(this);
}

void JavaParser::IfThenElseStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfThenElseStatement(this);
}

JavaParser::IfThenElseStatementContext* JavaParser::ifThenElseStatement() {
  IfThenElseStatementContext *_localctx = _tracker.createInstance<IfThenElseStatementContext>(_ctx, getState());
  enterRule(_localctx, 290, JavaParser::RuleIfThenElseStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2173);
    match(JavaParser::IF);
    setState(2174);
    match(JavaParser::LPAREN);
    setState(2175);
    expression();
    setState(2176);
    match(JavaParser::RPAREN);
    setState(2177);
    statementNoShortIf();
    setState(2178);
    match(JavaParser::ELSE);
    setState(2179);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenElseStatementNoShortIfContext ------------------------------------------------------------------

JavaParser::IfThenElseStatementNoShortIfContext::IfThenElseStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::IfThenElseStatementNoShortIfContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

std::vector<JavaParser::StatementNoShortIfContext *> JavaParser::IfThenElseStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContexts<JavaParser::StatementNoShortIfContext>();
}

JavaParser::StatementNoShortIfContext* JavaParser::IfThenElseStatementNoShortIfContext::statementNoShortIf(size_t i) {
  return getRuleContext<JavaParser::StatementNoShortIfContext>(i);
}


size_t JavaParser::IfThenElseStatementNoShortIfContext::getRuleIndex() const {
  return JavaParser::RuleIfThenElseStatementNoShortIf;
}

void JavaParser::IfThenElseStatementNoShortIfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfThenElseStatementNoShortIf(this);
}

void JavaParser::IfThenElseStatementNoShortIfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfThenElseStatementNoShortIf(this);
}

JavaParser::IfThenElseStatementNoShortIfContext* JavaParser::ifThenElseStatementNoShortIf() {
  IfThenElseStatementNoShortIfContext *_localctx = _tracker.createInstance<IfThenElseStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 292, JavaParser::RuleIfThenElseStatementNoShortIf);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2181);
    match(JavaParser::IF);
    setState(2182);
    match(JavaParser::LPAREN);
    setState(2183);
    expression();
    setState(2184);
    match(JavaParser::RPAREN);
    setState(2185);
    statementNoShortIf();
    setState(2186);
    match(JavaParser::ELSE);
    setState(2187);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssertStatementContext ------------------------------------------------------------------

JavaParser::AssertStatementContext::AssertStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ExpressionContext *> JavaParser::AssertStatementContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::AssertStatementContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}


size_t JavaParser::AssertStatementContext::getRuleIndex() const {
  return JavaParser::RuleAssertStatement;
}

void JavaParser::AssertStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssertStatement(this);
}

void JavaParser::AssertStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssertStatement(this);
}

JavaParser::AssertStatementContext* JavaParser::assertStatement() {
  AssertStatementContext *_localctx = _tracker.createInstance<AssertStatementContext>(_ctx, getState());
  enterRule(_localctx, 294, JavaParser::RuleAssertStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2199);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2189);
      match(JavaParser::ASSERT);
      setState(2190);
      expression();
      setState(2191);
      match(JavaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2193);
      match(JavaParser::ASSERT);
      setState(2194);
      expression();
      setState(2195);
      match(JavaParser::COLON);
      setState(2196);
      expression();
      setState(2197);
      match(JavaParser::SEMI);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStatementContext ------------------------------------------------------------------

JavaParser::SwitchStatementContext::SwitchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::SwitchStatementContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::SwitchBlockContext* JavaParser::SwitchStatementContext::switchBlock() {
  return getRuleContext<JavaParser::SwitchBlockContext>(0);
}


size_t JavaParser::SwitchStatementContext::getRuleIndex() const {
  return JavaParser::RuleSwitchStatement;
}

void JavaParser::SwitchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement(this);
}

void JavaParser::SwitchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement(this);
}

JavaParser::SwitchStatementContext* JavaParser::switchStatement() {
  SwitchStatementContext *_localctx = _tracker.createInstance<SwitchStatementContext>(_ctx, getState());
  enterRule(_localctx, 296, JavaParser::RuleSwitchStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2201);
    match(JavaParser::SWITCH);
    setState(2202);
    match(JavaParser::LPAREN);
    setState(2203);
    expression();
    setState(2204);
    match(JavaParser::RPAREN);
    setState(2205);
    switchBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchBlockContext ------------------------------------------------------------------

JavaParser::SwitchBlockContext::SwitchBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::SwitchBlockStatementGroupContext *> JavaParser::SwitchBlockContext::switchBlockStatementGroup() {
  return getRuleContexts<JavaParser::SwitchBlockStatementGroupContext>();
}

JavaParser::SwitchBlockStatementGroupContext* JavaParser::SwitchBlockContext::switchBlockStatementGroup(size_t i) {
  return getRuleContext<JavaParser::SwitchBlockStatementGroupContext>(i);
}

std::vector<JavaParser::SwitchLabelContext *> JavaParser::SwitchBlockContext::switchLabel() {
  return getRuleContexts<JavaParser::SwitchLabelContext>();
}

JavaParser::SwitchLabelContext* JavaParser::SwitchBlockContext::switchLabel(size_t i) {
  return getRuleContext<JavaParser::SwitchLabelContext>(i);
}


size_t JavaParser::SwitchBlockContext::getRuleIndex() const {
  return JavaParser::RuleSwitchBlock;
}

void JavaParser::SwitchBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchBlock(this);
}

void JavaParser::SwitchBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchBlock(this);
}

JavaParser::SwitchBlockContext* JavaParser::switchBlock() {
  SwitchBlockContext *_localctx = _tracker.createInstance<SwitchBlockContext>(_ctx, getState());
  enterRule(_localctx, 298, JavaParser::RuleSwitchBlock);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2207);
    match(JavaParser::LBRACE);
    setState(2211);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2208);
        switchBlockStatementGroup(); 
      }
      setState(2213);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    }
    setState(2217);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::CASE

    || _la == JavaParser::DEFAULT) {
      setState(2214);
      switchLabel();
      setState(2219);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2220);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchBlockStatementGroupContext ------------------------------------------------------------------

JavaParser::SwitchBlockStatementGroupContext::SwitchBlockStatementGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::SwitchLabelsContext* JavaParser::SwitchBlockStatementGroupContext::switchLabels() {
  return getRuleContext<JavaParser::SwitchLabelsContext>(0);
}

JavaParser::BlockStatementsContext* JavaParser::SwitchBlockStatementGroupContext::blockStatements() {
  return getRuleContext<JavaParser::BlockStatementsContext>(0);
}


size_t JavaParser::SwitchBlockStatementGroupContext::getRuleIndex() const {
  return JavaParser::RuleSwitchBlockStatementGroup;
}

void JavaParser::SwitchBlockStatementGroupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchBlockStatementGroup(this);
}

void JavaParser::SwitchBlockStatementGroupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchBlockStatementGroup(this);
}

JavaParser::SwitchBlockStatementGroupContext* JavaParser::switchBlockStatementGroup() {
  SwitchBlockStatementGroupContext *_localctx = _tracker.createInstance<SwitchBlockStatementGroupContext>(_ctx, getState());
  enterRule(_localctx, 300, JavaParser::RuleSwitchBlockStatementGroup);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2222);
    switchLabels();
    setState(2223);
    blockStatements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabelsContext ------------------------------------------------------------------

JavaParser::SwitchLabelsContext::SwitchLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::SwitchLabelContext *> JavaParser::SwitchLabelsContext::switchLabel() {
  return getRuleContexts<JavaParser::SwitchLabelContext>();
}

JavaParser::SwitchLabelContext* JavaParser::SwitchLabelsContext::switchLabel(size_t i) {
  return getRuleContext<JavaParser::SwitchLabelContext>(i);
}


size_t JavaParser::SwitchLabelsContext::getRuleIndex() const {
  return JavaParser::RuleSwitchLabels;
}

void JavaParser::SwitchLabelsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchLabels(this);
}

void JavaParser::SwitchLabelsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchLabels(this);
}

JavaParser::SwitchLabelsContext* JavaParser::switchLabels() {
  SwitchLabelsContext *_localctx = _tracker.createInstance<SwitchLabelsContext>(_ctx, getState());
  enterRule(_localctx, 302, JavaParser::RuleSwitchLabels);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2226); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2225);
      switchLabel();
      setState(2228); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == JavaParser::CASE

    || _la == JavaParser::DEFAULT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabelContext ------------------------------------------------------------------

JavaParser::SwitchLabelContext::SwitchLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConstantExpressionContext* JavaParser::SwitchLabelContext::constantExpression() {
  return getRuleContext<JavaParser::ConstantExpressionContext>(0);
}

JavaParser::EnumConstantNameContext* JavaParser::SwitchLabelContext::enumConstantName() {
  return getRuleContext<JavaParser::EnumConstantNameContext>(0);
}


size_t JavaParser::SwitchLabelContext::getRuleIndex() const {
  return JavaParser::RuleSwitchLabel;
}

void JavaParser::SwitchLabelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchLabel(this);
}

void JavaParser::SwitchLabelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchLabel(this);
}

JavaParser::SwitchLabelContext* JavaParser::switchLabel() {
  SwitchLabelContext *_localctx = _tracker.createInstance<SwitchLabelContext>(_ctx, getState());
  enterRule(_localctx, 304, JavaParser::RuleSwitchLabel);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2240);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2230);
      match(JavaParser::CASE);
      setState(2231);
      constantExpression();
      setState(2232);
      match(JavaParser::COLON);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2234);
      match(JavaParser::CASE);
      setState(2235);
      enumConstantName();
      setState(2236);
      match(JavaParser::COLON);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2238);
      match(JavaParser::DEFAULT);
      setState(2239);
      match(JavaParser::COLON);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantNameContext ------------------------------------------------------------------

JavaParser::EnumConstantNameContext::EnumConstantNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::EnumConstantNameContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::EnumConstantNameContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstantName;
}

void JavaParser::EnumConstantNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstantName(this);
}

void JavaParser::EnumConstantNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstantName(this);
}

JavaParser::EnumConstantNameContext* JavaParser::enumConstantName() {
  EnumConstantNameContext *_localctx = _tracker.createInstance<EnumConstantNameContext>(_ctx, getState());
  enterRule(_localctx, 306, JavaParser::RuleEnumConstantName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2242);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

JavaParser::WhileStatementContext::WhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::WhileStatementContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::StatementContext* JavaParser::WhileStatementContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}


size_t JavaParser::WhileStatementContext::getRuleIndex() const {
  return JavaParser::RuleWhileStatement;
}

void JavaParser::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}

void JavaParser::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}

JavaParser::WhileStatementContext* JavaParser::whileStatement() {
  WhileStatementContext *_localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 308, JavaParser::RuleWhileStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2244);
    match(JavaParser::WHILE);
    setState(2245);
    match(JavaParser::LPAREN);
    setState(2246);
    expression();
    setState(2247);
    match(JavaParser::RPAREN);
    setState(2248);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementNoShortIfContext ------------------------------------------------------------------

JavaParser::WhileStatementNoShortIfContext::WhileStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::WhileStatementNoShortIfContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::StatementNoShortIfContext* JavaParser::WhileStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContext<JavaParser::StatementNoShortIfContext>(0);
}


size_t JavaParser::WhileStatementNoShortIfContext::getRuleIndex() const {
  return JavaParser::RuleWhileStatementNoShortIf;
}

void JavaParser::WhileStatementNoShortIfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatementNoShortIf(this);
}

void JavaParser::WhileStatementNoShortIfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatementNoShortIf(this);
}

JavaParser::WhileStatementNoShortIfContext* JavaParser::whileStatementNoShortIf() {
  WhileStatementNoShortIfContext *_localctx = _tracker.createInstance<WhileStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 310, JavaParser::RuleWhileStatementNoShortIf);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2250);
    match(JavaParser::WHILE);
    setState(2251);
    match(JavaParser::LPAREN);
    setState(2252);
    expression();
    setState(2253);
    match(JavaParser::RPAREN);
    setState(2254);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoStatementContext ------------------------------------------------------------------

JavaParser::DoStatementContext::DoStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementContext* JavaParser::DoStatementContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

JavaParser::ExpressionContext* JavaParser::DoStatementContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}


size_t JavaParser::DoStatementContext::getRuleIndex() const {
  return JavaParser::RuleDoStatement;
}

void JavaParser::DoStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoStatement(this);
}

void JavaParser::DoStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoStatement(this);
}

JavaParser::DoStatementContext* JavaParser::doStatement() {
  DoStatementContext *_localctx = _tracker.createInstance<DoStatementContext>(_ctx, getState());
  enterRule(_localctx, 312, JavaParser::RuleDoStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2256);
    match(JavaParser::DO);
    setState(2257);
    statement();
    setState(2258);
    match(JavaParser::WHILE);
    setState(2259);
    match(JavaParser::LPAREN);
    setState(2260);
    expression();
    setState(2261);
    match(JavaParser::RPAREN);
    setState(2262);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementContext ------------------------------------------------------------------

JavaParser::ForStatementContext::ForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BasicForStatementContext* JavaParser::ForStatementContext::basicForStatement() {
  return getRuleContext<JavaParser::BasicForStatementContext>(0);
}

JavaParser::EnhancedForStatementContext* JavaParser::ForStatementContext::enhancedForStatement() {
  return getRuleContext<JavaParser::EnhancedForStatementContext>(0);
}


size_t JavaParser::ForStatementContext::getRuleIndex() const {
  return JavaParser::RuleForStatement;
}

void JavaParser::ForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement(this);
}

void JavaParser::ForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement(this);
}

JavaParser::ForStatementContext* JavaParser::forStatement() {
  ForStatementContext *_localctx = _tracker.createInstance<ForStatementContext>(_ctx, getState());
  enterRule(_localctx, 314, JavaParser::RuleForStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2266);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2264);
      basicForStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2265);
      enhancedForStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementNoShortIfContext ------------------------------------------------------------------

JavaParser::ForStatementNoShortIfContext::ForStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BasicForStatementNoShortIfContext* JavaParser::ForStatementNoShortIfContext::basicForStatementNoShortIf() {
  return getRuleContext<JavaParser::BasicForStatementNoShortIfContext>(0);
}

JavaParser::EnhancedForStatementNoShortIfContext* JavaParser::ForStatementNoShortIfContext::enhancedForStatementNoShortIf() {
  return getRuleContext<JavaParser::EnhancedForStatementNoShortIfContext>(0);
}


size_t JavaParser::ForStatementNoShortIfContext::getRuleIndex() const {
  return JavaParser::RuleForStatementNoShortIf;
}

void JavaParser::ForStatementNoShortIfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatementNoShortIf(this);
}

void JavaParser::ForStatementNoShortIfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatementNoShortIf(this);
}

JavaParser::ForStatementNoShortIfContext* JavaParser::forStatementNoShortIf() {
  ForStatementNoShortIfContext *_localctx = _tracker.createInstance<ForStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 316, JavaParser::RuleForStatementNoShortIf);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2270);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2268);
      basicForStatementNoShortIf();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2269);
      enhancedForStatementNoShortIf();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasicForStatementContext ------------------------------------------------------------------

JavaParser::BasicForStatementContext::BasicForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementContext* JavaParser::BasicForStatementContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

JavaParser::ForInitContext* JavaParser::BasicForStatementContext::forInit() {
  return getRuleContext<JavaParser::ForInitContext>(0);
}

JavaParser::ExpressionContext* JavaParser::BasicForStatementContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ForUpdateContext* JavaParser::BasicForStatementContext::forUpdate() {
  return getRuleContext<JavaParser::ForUpdateContext>(0);
}


size_t JavaParser::BasicForStatementContext::getRuleIndex() const {
  return JavaParser::RuleBasicForStatement;
}

void JavaParser::BasicForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasicForStatement(this);
}

void JavaParser::BasicForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasicForStatement(this);
}

JavaParser::BasicForStatementContext* JavaParser::basicForStatement() {
  BasicForStatementContext *_localctx = _tracker.createInstance<BasicForStatementContext>(_ctx, getState());
  enterRule(_localctx, 318, JavaParser::RuleBasicForStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2272);
    match(JavaParser::FOR);
    setState(2273);
    match(JavaParser::LPAREN);
    setState(2275);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(2274);
      forInit();
    }
    setState(2277);
    match(JavaParser::SEMI);
    setState(2279);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(2278);
      expression();
    }
    setState(2281);
    match(JavaParser::SEMI);
    setState(2283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(2282);
      forUpdate();
    }
    setState(2285);
    match(JavaParser::RPAREN);
    setState(2286);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasicForStatementNoShortIfContext ------------------------------------------------------------------

JavaParser::BasicForStatementNoShortIfContext::BasicForStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementNoShortIfContext* JavaParser::BasicForStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContext<JavaParser::StatementNoShortIfContext>(0);
}

JavaParser::ForInitContext* JavaParser::BasicForStatementNoShortIfContext::forInit() {
  return getRuleContext<JavaParser::ForInitContext>(0);
}

JavaParser::ExpressionContext* JavaParser::BasicForStatementNoShortIfContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ForUpdateContext* JavaParser::BasicForStatementNoShortIfContext::forUpdate() {
  return getRuleContext<JavaParser::ForUpdateContext>(0);
}


size_t JavaParser::BasicForStatementNoShortIfContext::getRuleIndex() const {
  return JavaParser::RuleBasicForStatementNoShortIf;
}

void JavaParser::BasicForStatementNoShortIfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasicForStatementNoShortIf(this);
}

void JavaParser::BasicForStatementNoShortIfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasicForStatementNoShortIf(this);
}

JavaParser::BasicForStatementNoShortIfContext* JavaParser::basicForStatementNoShortIf() {
  BasicForStatementNoShortIfContext *_localctx = _tracker.createInstance<BasicForStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 320, JavaParser::RuleBasicForStatementNoShortIf);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2288);
    match(JavaParser::FOR);
    setState(2289);
    match(JavaParser::LPAREN);
    setState(2291);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(2290);
      forInit();
    }
    setState(2293);
    match(JavaParser::SEMI);
    setState(2295);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(2294);
      expression();
    }
    setState(2297);
    match(JavaParser::SEMI);
    setState(2299);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(2298);
      forUpdate();
    }
    setState(2301);
    match(JavaParser::RPAREN);
    setState(2302);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInitContext ------------------------------------------------------------------

JavaParser::ForInitContext::ForInitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementExpressionListContext* JavaParser::ForInitContext::statementExpressionList() {
  return getRuleContext<JavaParser::StatementExpressionListContext>(0);
}

JavaParser::LocalVariableDeclarationContext* JavaParser::ForInitContext::localVariableDeclaration() {
  return getRuleContext<JavaParser::LocalVariableDeclarationContext>(0);
}


size_t JavaParser::ForInitContext::getRuleIndex() const {
  return JavaParser::RuleForInit;
}

void JavaParser::ForInitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInit(this);
}

void JavaParser::ForInitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInit(this);
}

JavaParser::ForInitContext* JavaParser::forInit() {
  ForInitContext *_localctx = _tracker.createInstance<ForInitContext>(_ctx, getState());
  enterRule(_localctx, 322, JavaParser::RuleForInit);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2306);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2304);
      statementExpressionList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2305);
      localVariableDeclaration();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForUpdateContext ------------------------------------------------------------------

JavaParser::ForUpdateContext::ForUpdateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementExpressionListContext* JavaParser::ForUpdateContext::statementExpressionList() {
  return getRuleContext<JavaParser::StatementExpressionListContext>(0);
}


size_t JavaParser::ForUpdateContext::getRuleIndex() const {
  return JavaParser::RuleForUpdate;
}

void JavaParser::ForUpdateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForUpdate(this);
}

void JavaParser::ForUpdateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForUpdate(this);
}

JavaParser::ForUpdateContext* JavaParser::forUpdate() {
  ForUpdateContext *_localctx = _tracker.createInstance<ForUpdateContext>(_ctx, getState());
  enterRule(_localctx, 324, JavaParser::RuleForUpdate);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2308);
    statementExpressionList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementExpressionListContext ------------------------------------------------------------------

JavaParser::StatementExpressionListContext::StatementExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::StatementExpressionContext *> JavaParser::StatementExpressionListContext::statementExpression() {
  return getRuleContexts<JavaParser::StatementExpressionContext>();
}

JavaParser::StatementExpressionContext* JavaParser::StatementExpressionListContext::statementExpression(size_t i) {
  return getRuleContext<JavaParser::StatementExpressionContext>(i);
}


size_t JavaParser::StatementExpressionListContext::getRuleIndex() const {
  return JavaParser::RuleStatementExpressionList;
}

void JavaParser::StatementExpressionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementExpressionList(this);
}

void JavaParser::StatementExpressionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementExpressionList(this);
}

JavaParser::StatementExpressionListContext* JavaParser::statementExpressionList() {
  StatementExpressionListContext *_localctx = _tracker.createInstance<StatementExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 326, JavaParser::RuleStatementExpressionList);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2310);
    statementExpression();
    setState(2315);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(2311);
      match(JavaParser::COMMA);
      setState(2312);
      statementExpression();
      setState(2317);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnhancedForStatementContext ------------------------------------------------------------------

JavaParser::EnhancedForStatementContext::EnhancedForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::EnhancedForStatementContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::EnhancedForStatementContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

JavaParser::ExpressionContext* JavaParser::EnhancedForStatementContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::StatementContext* JavaParser::EnhancedForStatementContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::EnhancedForStatementContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::EnhancedForStatementContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::EnhancedForStatementContext::getRuleIndex() const {
  return JavaParser::RuleEnhancedForStatement;
}

void JavaParser::EnhancedForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnhancedForStatement(this);
}

void JavaParser::EnhancedForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnhancedForStatement(this);
}

JavaParser::EnhancedForStatementContext* JavaParser::enhancedForStatement() {
  EnhancedForStatementContext *_localctx = _tracker.createInstance<EnhancedForStatementContext>(_ctx, getState());
  enterRule(_localctx, 328, JavaParser::RuleEnhancedForStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2318);
    match(JavaParser::FOR);
    setState(2319);
    match(JavaParser::LPAREN);
    setState(2323);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::FINAL

    || _la == JavaParser::AT) {
      setState(2320);
      variableModifier();
      setState(2325);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2326);
    unannType();
    setState(2327);
    variableDeclaratorId();
    setState(2328);
    match(JavaParser::COLON);
    setState(2329);
    expression();
    setState(2330);
    match(JavaParser::RPAREN);
    setState(2331);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnhancedForStatementNoShortIfContext ------------------------------------------------------------------

JavaParser::EnhancedForStatementNoShortIfContext::EnhancedForStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::EnhancedForStatementNoShortIfContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::EnhancedForStatementNoShortIfContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

JavaParser::ExpressionContext* JavaParser::EnhancedForStatementNoShortIfContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::StatementNoShortIfContext* JavaParser::EnhancedForStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContext<JavaParser::StatementNoShortIfContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::EnhancedForStatementNoShortIfContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::EnhancedForStatementNoShortIfContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::EnhancedForStatementNoShortIfContext::getRuleIndex() const {
  return JavaParser::RuleEnhancedForStatementNoShortIf;
}

void JavaParser::EnhancedForStatementNoShortIfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnhancedForStatementNoShortIf(this);
}

void JavaParser::EnhancedForStatementNoShortIfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnhancedForStatementNoShortIf(this);
}

JavaParser::EnhancedForStatementNoShortIfContext* JavaParser::enhancedForStatementNoShortIf() {
  EnhancedForStatementNoShortIfContext *_localctx = _tracker.createInstance<EnhancedForStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 330, JavaParser::RuleEnhancedForStatementNoShortIf);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2333);
    match(JavaParser::FOR);
    setState(2334);
    match(JavaParser::LPAREN);
    setState(2338);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::FINAL

    || _la == JavaParser::AT) {
      setState(2335);
      variableModifier();
      setState(2340);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2341);
    unannType();
    setState(2342);
    variableDeclaratorId();
    setState(2343);
    match(JavaParser::COLON);
    setState(2344);
    expression();
    setState(2345);
    match(JavaParser::RPAREN);
    setState(2346);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BreakStatementContext ------------------------------------------------------------------

JavaParser::BreakStatementContext::BreakStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::BreakStatementContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::BreakStatementContext::getRuleIndex() const {
  return JavaParser::RuleBreakStatement;
}

void JavaParser::BreakStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreakStatement(this);
}

void JavaParser::BreakStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreakStatement(this);
}

JavaParser::BreakStatementContext* JavaParser::breakStatement() {
  BreakStatementContext *_localctx = _tracker.createInstance<BreakStatementContext>(_ctx, getState());
  enterRule(_localctx, 332, JavaParser::RuleBreakStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2348);
    match(JavaParser::BREAK);
    setState(2350);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8))) != 0) || _la == JavaParser::Identifier) {
      setState(2349);
      identifier();
    }
    setState(2352);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStatementContext ------------------------------------------------------------------

JavaParser::ContinueStatementContext::ContinueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ContinueStatementContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::ContinueStatementContext::getRuleIndex() const {
  return JavaParser::RuleContinueStatement;
}

void JavaParser::ContinueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement(this);
}

void JavaParser::ContinueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement(this);
}

JavaParser::ContinueStatementContext* JavaParser::continueStatement() {
  ContinueStatementContext *_localctx = _tracker.createInstance<ContinueStatementContext>(_ctx, getState());
  enterRule(_localctx, 334, JavaParser::RuleContinueStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2354);
    match(JavaParser::CONTINUE);
    setState(2356);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8))) != 0) || _la == JavaParser::Identifier) {
      setState(2355);
      identifier();
    }
    setState(2358);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

JavaParser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::ReturnStatementContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}


size_t JavaParser::ReturnStatementContext::getRuleIndex() const {
  return JavaParser::RuleReturnStatement;
}

void JavaParser::ReturnStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStatement(this);
}

void JavaParser::ReturnStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStatement(this);
}

JavaParser::ReturnStatementContext* JavaParser::returnStatement() {
  ReturnStatementContext *_localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
  enterRule(_localctx, 336, JavaParser::RuleReturnStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2360);
    match(JavaParser::RETURN);
    setState(2362);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(2361);
      expression();
    }
    setState(2364);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowStatementContext ------------------------------------------------------------------

JavaParser::ThrowStatementContext::ThrowStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::ThrowStatementContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}


size_t JavaParser::ThrowStatementContext::getRuleIndex() const {
  return JavaParser::RuleThrowStatement;
}

void JavaParser::ThrowStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowStatement(this);
}

void JavaParser::ThrowStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowStatement(this);
}

JavaParser::ThrowStatementContext* JavaParser::throwStatement() {
  ThrowStatementContext *_localctx = _tracker.createInstance<ThrowStatementContext>(_ctx, getState());
  enterRule(_localctx, 338, JavaParser::RuleThrowStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2366);
    match(JavaParser::THROW);
    setState(2367);
    expression();
    setState(2368);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SynchronizedStatementContext ------------------------------------------------------------------

JavaParser::SynchronizedStatementContext::SynchronizedStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::SynchronizedStatementContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::BlockContext* JavaParser::SynchronizedStatementContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::SynchronizedStatementContext::getRuleIndex() const {
  return JavaParser::RuleSynchronizedStatement;
}

void JavaParser::SynchronizedStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSynchronizedStatement(this);
}

void JavaParser::SynchronizedStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSynchronizedStatement(this);
}

JavaParser::SynchronizedStatementContext* JavaParser::synchronizedStatement() {
  SynchronizedStatementContext *_localctx = _tracker.createInstance<SynchronizedStatementContext>(_ctx, getState());
  enterRule(_localctx, 340, JavaParser::RuleSynchronizedStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2370);
    match(JavaParser::SYNCHRONIZED);
    setState(2371);
    match(JavaParser::LPAREN);
    setState(2372);
    expression();
    setState(2373);
    match(JavaParser::RPAREN);
    setState(2374);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryStatementContext ------------------------------------------------------------------

JavaParser::TryStatementContext::TryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::TryStatementContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

JavaParser::CatchesContext* JavaParser::TryStatementContext::catches() {
  return getRuleContext<JavaParser::CatchesContext>(0);
}

JavaParser::Finally_Context* JavaParser::TryStatementContext::finally_() {
  return getRuleContext<JavaParser::Finally_Context>(0);
}

JavaParser::TryWithResourcesStatementContext* JavaParser::TryStatementContext::tryWithResourcesStatement() {
  return getRuleContext<JavaParser::TryWithResourcesStatementContext>(0);
}


size_t JavaParser::TryStatementContext::getRuleIndex() const {
  return JavaParser::RuleTryStatement;
}

void JavaParser::TryStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryStatement(this);
}

void JavaParser::TryStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryStatement(this);
}

JavaParser::TryStatementContext* JavaParser::tryStatement() {
  TryStatementContext *_localctx = _tracker.createInstance<TryStatementContext>(_ctx, getState());
  enterRule(_localctx, 342, JavaParser::RuleTryStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2388);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2376);
      match(JavaParser::TRY);
      setState(2377);
      block();
      setState(2378);
      catches();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2380);
      match(JavaParser::TRY);
      setState(2381);
      block();
      setState(2383);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::CATCH) {
        setState(2382);
        catches();
      }
      setState(2385);
      finally_();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2387);
      tryWithResourcesStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchesContext ------------------------------------------------------------------

JavaParser::CatchesContext::CatchesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::CatchClauseContext *> JavaParser::CatchesContext::catchClause() {
  return getRuleContexts<JavaParser::CatchClauseContext>();
}

JavaParser::CatchClauseContext* JavaParser::CatchesContext::catchClause(size_t i) {
  return getRuleContext<JavaParser::CatchClauseContext>(i);
}


size_t JavaParser::CatchesContext::getRuleIndex() const {
  return JavaParser::RuleCatches;
}

void JavaParser::CatchesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatches(this);
}

void JavaParser::CatchesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatches(this);
}

JavaParser::CatchesContext* JavaParser::catches() {
  CatchesContext *_localctx = _tracker.createInstance<CatchesContext>(_ctx, getState());
  enterRule(_localctx, 344, JavaParser::RuleCatches);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2391); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2390);
      catchClause();
      setState(2393); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == JavaParser::CATCH);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchClauseContext ------------------------------------------------------------------

JavaParser::CatchClauseContext::CatchClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::CatchFormalParameterContext* JavaParser::CatchClauseContext::catchFormalParameter() {
  return getRuleContext<JavaParser::CatchFormalParameterContext>(0);
}

JavaParser::BlockContext* JavaParser::CatchClauseContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::CatchClauseContext::getRuleIndex() const {
  return JavaParser::RuleCatchClause;
}

void JavaParser::CatchClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchClause(this);
}

void JavaParser::CatchClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchClause(this);
}

JavaParser::CatchClauseContext* JavaParser::catchClause() {
  CatchClauseContext *_localctx = _tracker.createInstance<CatchClauseContext>(_ctx, getState());
  enterRule(_localctx, 346, JavaParser::RuleCatchClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2395);
    match(JavaParser::CATCH);
    setState(2396);
    match(JavaParser::LPAREN);
    setState(2397);
    catchFormalParameter();
    setState(2398);
    match(JavaParser::RPAREN);
    setState(2399);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchFormalParameterContext ------------------------------------------------------------------

JavaParser::CatchFormalParameterContext::CatchFormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::CatchTypeContext* JavaParser::CatchFormalParameterContext::catchType() {
  return getRuleContext<JavaParser::CatchTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::CatchFormalParameterContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::CatchFormalParameterContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::CatchFormalParameterContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::CatchFormalParameterContext::getRuleIndex() const {
  return JavaParser::RuleCatchFormalParameter;
}

void JavaParser::CatchFormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchFormalParameter(this);
}

void JavaParser::CatchFormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchFormalParameter(this);
}

JavaParser::CatchFormalParameterContext* JavaParser::catchFormalParameter() {
  CatchFormalParameterContext *_localctx = _tracker.createInstance<CatchFormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 348, JavaParser::RuleCatchFormalParameter);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2404);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::FINAL

    || _la == JavaParser::AT) {
      setState(2401);
      variableModifier();
      setState(2406);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2407);
    catchType();
    setState(2408);
    variableDeclaratorId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchTypeContext ------------------------------------------------------------------

JavaParser::CatchTypeContext::CatchTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannClassTypeContext* JavaParser::CatchTypeContext::unannClassType() {
  return getRuleContext<JavaParser::UnannClassTypeContext>(0);
}

std::vector<JavaParser::ClassTypeContext *> JavaParser::CatchTypeContext::classType() {
  return getRuleContexts<JavaParser::ClassTypeContext>();
}

JavaParser::ClassTypeContext* JavaParser::CatchTypeContext::classType(size_t i) {
  return getRuleContext<JavaParser::ClassTypeContext>(i);
}


size_t JavaParser::CatchTypeContext::getRuleIndex() const {
  return JavaParser::RuleCatchType;
}

void JavaParser::CatchTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchType(this);
}

void JavaParser::CatchTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchType(this);
}

JavaParser::CatchTypeContext* JavaParser::catchType() {
  CatchTypeContext *_localctx = _tracker.createInstance<CatchTypeContext>(_ctx, getState());
  enterRule(_localctx, 350, JavaParser::RuleCatchType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2410);
    unannClassType();
    setState(2415);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::BITOR) {
      setState(2411);
      match(JavaParser::BITOR);
      setState(2412);
      classType();
      setState(2417);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Finally_Context ------------------------------------------------------------------

JavaParser::Finally_Context::Finally_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::Finally_Context::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::Finally_Context::getRuleIndex() const {
  return JavaParser::RuleFinally_;
}

void JavaParser::Finally_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFinally_(this);
}

void JavaParser::Finally_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFinally_(this);
}

JavaParser::Finally_Context* JavaParser::finally_() {
  Finally_Context *_localctx = _tracker.createInstance<Finally_Context>(_ctx, getState());
  enterRule(_localctx, 352, JavaParser::RuleFinally_);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2418);
    match(JavaParser::FINALLY);
    setState(2419);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryWithResourcesStatementContext ------------------------------------------------------------------

JavaParser::TryWithResourcesStatementContext::TryWithResourcesStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ResourceSpecificationContext* JavaParser::TryWithResourcesStatementContext::resourceSpecification() {
  return getRuleContext<JavaParser::ResourceSpecificationContext>(0);
}

JavaParser::BlockContext* JavaParser::TryWithResourcesStatementContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

JavaParser::CatchesContext* JavaParser::TryWithResourcesStatementContext::catches() {
  return getRuleContext<JavaParser::CatchesContext>(0);
}

JavaParser::Finally_Context* JavaParser::TryWithResourcesStatementContext::finally_() {
  return getRuleContext<JavaParser::Finally_Context>(0);
}


size_t JavaParser::TryWithResourcesStatementContext::getRuleIndex() const {
  return JavaParser::RuleTryWithResourcesStatement;
}

void JavaParser::TryWithResourcesStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryWithResourcesStatement(this);
}

void JavaParser::TryWithResourcesStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryWithResourcesStatement(this);
}

JavaParser::TryWithResourcesStatementContext* JavaParser::tryWithResourcesStatement() {
  TryWithResourcesStatementContext *_localctx = _tracker.createInstance<TryWithResourcesStatementContext>(_ctx, getState());
  enterRule(_localctx, 354, JavaParser::RuleTryWithResourcesStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2421);
    match(JavaParser::TRY);
    setState(2422);
    resourceSpecification();
    setState(2423);
    block();
    setState(2425);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::CATCH) {
      setState(2424);
      catches();
    }
    setState(2428);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::FINALLY) {
      setState(2427);
      finally_();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceSpecificationContext ------------------------------------------------------------------

JavaParser::ResourceSpecificationContext::ResourceSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ResourceListContext* JavaParser::ResourceSpecificationContext::resourceList() {
  return getRuleContext<JavaParser::ResourceListContext>(0);
}


size_t JavaParser::ResourceSpecificationContext::getRuleIndex() const {
  return JavaParser::RuleResourceSpecification;
}

void JavaParser::ResourceSpecificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResourceSpecification(this);
}

void JavaParser::ResourceSpecificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResourceSpecification(this);
}

JavaParser::ResourceSpecificationContext* JavaParser::resourceSpecification() {
  ResourceSpecificationContext *_localctx = _tracker.createInstance<ResourceSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 356, JavaParser::RuleResourceSpecification);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2430);
    match(JavaParser::LPAREN);
    setState(2431);
    resourceList();
    setState(2433);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::SEMI) {
      setState(2432);
      match(JavaParser::SEMI);
    }
    setState(2435);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceListContext ------------------------------------------------------------------

JavaParser::ResourceListContext::ResourceListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ResourceContext *> JavaParser::ResourceListContext::resource() {
  return getRuleContexts<JavaParser::ResourceContext>();
}

JavaParser::ResourceContext* JavaParser::ResourceListContext::resource(size_t i) {
  return getRuleContext<JavaParser::ResourceContext>(i);
}


size_t JavaParser::ResourceListContext::getRuleIndex() const {
  return JavaParser::RuleResourceList;
}

void JavaParser::ResourceListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResourceList(this);
}

void JavaParser::ResourceListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResourceList(this);
}

JavaParser::ResourceListContext* JavaParser::resourceList() {
  ResourceListContext *_localctx = _tracker.createInstance<ResourceListContext>(_ctx, getState());
  enterRule(_localctx, 358, JavaParser::RuleResourceList);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2437);
    resource();
    setState(2442);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2438);
        match(JavaParser::SEMI);
        setState(2439);
        resource(); 
      }
      setState(2444);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceContext ------------------------------------------------------------------

JavaParser::ResourceContext::ResourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::ResourceContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::ResourceContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

JavaParser::ExpressionContext* JavaParser::ResourceContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::ResourceContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::ResourceContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

JavaParser::VariableAccessContext* JavaParser::ResourceContext::variableAccess() {
  return getRuleContext<JavaParser::VariableAccessContext>(0);
}


size_t JavaParser::ResourceContext::getRuleIndex() const {
  return JavaParser::RuleResource;
}

void JavaParser::ResourceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResource(this);
}

void JavaParser::ResourceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResource(this);
}

JavaParser::ResourceContext* JavaParser::resource() {
  ResourceContext *_localctx = _tracker.createInstance<ResourceContext>(_ctx, getState());
  enterRule(_localctx, 360, JavaParser::RuleResource);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2457);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2448);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::FINAL

      || _la == JavaParser::AT) {
        setState(2445);
        variableModifier();
        setState(2450);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2451);
      unannType();
      setState(2452);
      variableDeclaratorId();
      setState(2453);
      match(JavaParser::ASSIGN);
      setState(2454);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2456);
      variableAccess();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableAccessContext ------------------------------------------------------------------

JavaParser::VariableAccessContext::VariableAccessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionNameContext* JavaParser::VariableAccessContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

JavaParser::FieldAccessContext* JavaParser::VariableAccessContext::fieldAccess() {
  return getRuleContext<JavaParser::FieldAccessContext>(0);
}


size_t JavaParser::VariableAccessContext::getRuleIndex() const {
  return JavaParser::RuleVariableAccess;
}

void JavaParser::VariableAccessContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableAccess(this);
}

void JavaParser::VariableAccessContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableAccess(this);
}

JavaParser::VariableAccessContext* JavaParser::variableAccess() {
  VariableAccessContext *_localctx = _tracker.createInstance<VariableAccessContext>(_ctx, getState());
  enterRule(_localctx, 362, JavaParser::RuleVariableAccess);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2461);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2459);
      expressionName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2460);
      fieldAccess();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

JavaParser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimaryNoNewArray_lfno_primaryContext* JavaParser::PrimaryContext::primaryNoNewArray_lfno_primary() {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lfno_primaryContext>(0);
}

JavaParser::ArrayCreationExpressionContext* JavaParser::PrimaryContext::arrayCreationExpression() {
  return getRuleContext<JavaParser::ArrayCreationExpressionContext>(0);
}

std::vector<JavaParser::PrimaryNoNewArray_lf_primaryContext *> JavaParser::PrimaryContext::primaryNoNewArray_lf_primary() {
  return getRuleContexts<JavaParser::PrimaryNoNewArray_lf_primaryContext>();
}

JavaParser::PrimaryNoNewArray_lf_primaryContext* JavaParser::PrimaryContext::primaryNoNewArray_lf_primary(size_t i) {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lf_primaryContext>(i);
}


size_t JavaParser::PrimaryContext::getRuleIndex() const {
  return JavaParser::RulePrimary;
}

void JavaParser::PrimaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary(this);
}

void JavaParser::PrimaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary(this);
}

JavaParser::PrimaryContext* JavaParser::primary() {
  PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, getState());
  enterRule(_localctx, 364, JavaParser::RulePrimary);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2465);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
    case 1: {
      setState(2463);
      primaryNoNewArray_lfno_primary();
      break;
    }

    case 2: {
      setState(2464);
      arrayCreationExpression();
      break;
    }

    }
    setState(2470);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2467);
        primaryNoNewArray_lf_primary(); 
      }
      setState(2472);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArrayContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArrayContext::PrimaryNoNewArrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LiteralContext* JavaParser::PrimaryNoNewArrayContext::literal() {
  return getRuleContext<JavaParser::LiteralContext>(0);
}

JavaParser::ClassLiteralContext* JavaParser::PrimaryNoNewArrayContext::classLiteral() {
  return getRuleContext<JavaParser::ClassLiteralContext>(0);
}

JavaParser::TypeNameContext* JavaParser::PrimaryNoNewArrayContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::ExpressionContext* JavaParser::PrimaryNoNewArrayContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ClassInstanceCreationExpressionContext* JavaParser::PrimaryNoNewArrayContext::classInstanceCreationExpression() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpressionContext>(0);
}

JavaParser::FieldAccessContext* JavaParser::PrimaryNoNewArrayContext::fieldAccess() {
  return getRuleContext<JavaParser::FieldAccessContext>(0);
}

JavaParser::ArrayAccessContext* JavaParser::PrimaryNoNewArrayContext::arrayAccess() {
  return getRuleContext<JavaParser::ArrayAccessContext>(0);
}

JavaParser::MethodInvocationContext* JavaParser::PrimaryNoNewArrayContext::methodInvocation() {
  return getRuleContext<JavaParser::MethodInvocationContext>(0);
}

JavaParser::MethodReferenceContext* JavaParser::PrimaryNoNewArrayContext::methodReference() {
  return getRuleContext<JavaParser::MethodReferenceContext>(0);
}


size_t JavaParser::PrimaryNoNewArrayContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray;
}

void JavaParser::PrimaryNoNewArrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray(this);
}

void JavaParser::PrimaryNoNewArrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray(this);
}

JavaParser::PrimaryNoNewArrayContext* JavaParser::primaryNoNewArray() {
  PrimaryNoNewArrayContext *_localctx = _tracker.createInstance<PrimaryNoNewArrayContext>(_ctx, getState());
  enterRule(_localctx, 366, JavaParser::RulePrimaryNoNewArray);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2489);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2473);
      literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2474);
      classLiteral();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2475);
      match(JavaParser::THIS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2476);
      typeName();
      setState(2477);
      match(JavaParser::DOT);
      setState(2478);
      match(JavaParser::THIS);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2480);
      match(JavaParser::LPAREN);
      setState(2481);
      expression();
      setState(2482);
      match(JavaParser::RPAREN);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2484);
      classInstanceCreationExpression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2485);
      fieldAccess();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2486);
      arrayAccess();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2487);
      methodInvocation();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2488);
      methodReference();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lf_arrayAccessContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lf_arrayAccessContext::PrimaryNoNewArray_lf_arrayAccessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::PrimaryNoNewArray_lf_arrayAccessContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lf_arrayAccess;
}

void JavaParser::PrimaryNoNewArray_lf_arrayAccessContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_arrayAccess(this);
}

void JavaParser::PrimaryNoNewArray_lf_arrayAccessContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_arrayAccess(this);
}

JavaParser::PrimaryNoNewArray_lf_arrayAccessContext* JavaParser::primaryNoNewArray_lf_arrayAccess() {
  PrimaryNoNewArray_lf_arrayAccessContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lf_arrayAccessContext>(_ctx, getState());
  enterRule(_localctx, 368, JavaParser::RulePrimaryNoNewArray_lf_arrayAccess);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);

   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lfno_arrayAccessContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext::PrimaryNoNewArray_lfno_arrayAccessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LiteralContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext::literal() {
  return getRuleContext<JavaParser::LiteralContext>(0);
}

JavaParser::TypeNameContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::ExpressionContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ClassInstanceCreationExpressionContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext::classInstanceCreationExpression() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpressionContext>(0);
}

JavaParser::FieldAccessContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext::fieldAccess() {
  return getRuleContext<JavaParser::FieldAccessContext>(0);
}

JavaParser::MethodInvocationContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext::methodInvocation() {
  return getRuleContext<JavaParser::MethodInvocationContext>(0);
}

JavaParser::MethodReferenceContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext::methodReference() {
  return getRuleContext<JavaParser::MethodReferenceContext>(0);
}


size_t JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lfno_arrayAccess;
}

void JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_arrayAccess(this);
}

void JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_arrayAccess(this);
}

JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext* JavaParser::primaryNoNewArray_lfno_arrayAccess() {
  PrimaryNoNewArray_lfno_arrayAccessContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lfno_arrayAccessContext>(_ctx, getState());
  enterRule(_localctx, 370, JavaParser::RulePrimaryNoNewArray_lfno_arrayAccess);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2521);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2493);
      literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2494);
      typeName();
      setState(2499);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::LBRACK) {
        setState(2495);
        match(JavaParser::LBRACK);
        setState(2496);
        match(JavaParser::RBRACK);
        setState(2501);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2502);
      match(JavaParser::DOT);
      setState(2503);
      match(JavaParser::CLASS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2505);
      match(JavaParser::VOID);
      setState(2506);
      match(JavaParser::DOT);
      setState(2507);
      match(JavaParser::CLASS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2508);
      match(JavaParser::THIS);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2509);
      typeName();
      setState(2510);
      match(JavaParser::DOT);
      setState(2511);
      match(JavaParser::THIS);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2513);
      match(JavaParser::LPAREN);
      setState(2514);
      expression();
      setState(2515);
      match(JavaParser::RPAREN);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2517);
      classInstanceCreationExpression();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2518);
      fieldAccess();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2519);
      methodInvocation();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2520);
      methodReference();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lf_primaryContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lf_primaryContext::PrimaryNoNewArray_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassInstanceCreationExpression_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primaryContext::classInstanceCreationExpression_lf_primary() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpression_lf_primaryContext>(0);
}

JavaParser::FieldAccess_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primaryContext::fieldAccess_lf_primary() {
  return getRuleContext<JavaParser::FieldAccess_lf_primaryContext>(0);
}

JavaParser::ArrayAccess_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primaryContext::arrayAccess_lf_primary() {
  return getRuleContext<JavaParser::ArrayAccess_lf_primaryContext>(0);
}

JavaParser::MethodInvocation_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primaryContext::methodInvocation_lf_primary() {
  return getRuleContext<JavaParser::MethodInvocation_lf_primaryContext>(0);
}

JavaParser::MethodReference_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primaryContext::methodReference_lf_primary() {
  return getRuleContext<JavaParser::MethodReference_lf_primaryContext>(0);
}


size_t JavaParser::PrimaryNoNewArray_lf_primaryContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lf_primary;
}

void JavaParser::PrimaryNoNewArray_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary(this);
}

void JavaParser::PrimaryNoNewArray_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary(this);
}

JavaParser::PrimaryNoNewArray_lf_primaryContext* JavaParser::primaryNoNewArray_lf_primary() {
  PrimaryNoNewArray_lf_primaryContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 372, JavaParser::RulePrimaryNoNewArray_lf_primary);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2528);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2523);
      classInstanceCreationExpression_lf_primary();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2524);
      fieldAccess_lf_primary();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2525);
      arrayAccess_lf_primary();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2526);
      methodInvocation_lf_primary();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2527);
      methodReference_lf_primary();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary;
}

void JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
}

void JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
}

JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext* JavaParser::primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
  PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 374, JavaParser::RulePrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);

   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassInstanceCreationExpression_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext::classInstanceCreationExpression_lf_primary() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpression_lf_primaryContext>(0);
}

JavaParser::FieldAccess_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext::fieldAccess_lf_primary() {
  return getRuleContext<JavaParser::FieldAccess_lf_primaryContext>(0);
}

JavaParser::MethodInvocation_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext::methodInvocation_lf_primary() {
  return getRuleContext<JavaParser::MethodInvocation_lf_primaryContext>(0);
}

JavaParser::MethodReference_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext::methodReference_lf_primary() {
  return getRuleContext<JavaParser::MethodReference_lf_primaryContext>(0);
}


size_t JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary;
}

void JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
}

void JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
}

JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext* JavaParser::primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
  PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 376, JavaParser::RulePrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2536);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2532);
      classInstanceCreationExpression_lf_primary();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2533);
      fieldAccess_lf_primary();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2534);
      methodInvocation_lf_primary();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2535);
      methodReference_lf_primary();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lfno_primaryContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lfno_primaryContext::PrimaryNoNewArray_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LiteralContext* JavaParser::PrimaryNoNewArray_lfno_primaryContext::literal() {
  return getRuleContext<JavaParser::LiteralContext>(0);
}

JavaParser::TypeNameContext* JavaParser::PrimaryNoNewArray_lfno_primaryContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::UnannPrimitiveTypeContext* JavaParser::PrimaryNoNewArray_lfno_primaryContext::unannPrimitiveType() {
  return getRuleContext<JavaParser::UnannPrimitiveTypeContext>(0);
}

JavaParser::ExpressionContext* JavaParser::PrimaryNoNewArray_lfno_primaryContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ClassInstanceCreationExpression_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primaryContext::classInstanceCreationExpression_lfno_primary() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpression_lfno_primaryContext>(0);
}

JavaParser::FieldAccess_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primaryContext::fieldAccess_lfno_primary() {
  return getRuleContext<JavaParser::FieldAccess_lfno_primaryContext>(0);
}

JavaParser::ArrayAccess_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primaryContext::arrayAccess_lfno_primary() {
  return getRuleContext<JavaParser::ArrayAccess_lfno_primaryContext>(0);
}

JavaParser::MethodInvocation_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primaryContext::methodInvocation_lfno_primary() {
  return getRuleContext<JavaParser::MethodInvocation_lfno_primaryContext>(0);
}

JavaParser::MethodReference_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primaryContext::methodReference_lfno_primary() {
  return getRuleContext<JavaParser::MethodReference_lfno_primaryContext>(0);
}


size_t JavaParser::PrimaryNoNewArray_lfno_primaryContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lfno_primary;
}

void JavaParser::PrimaryNoNewArray_lfno_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary(this);
}

void JavaParser::PrimaryNoNewArray_lfno_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary(this);
}

JavaParser::PrimaryNoNewArray_lfno_primaryContext* JavaParser::primaryNoNewArray_lfno_primary() {
  PrimaryNoNewArray_lfno_primaryContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 378, JavaParser::RulePrimaryNoNewArray_lfno_primary);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2578);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2538);
      literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2539);
      typeName();
      setState(2544);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::LBRACK) {
        setState(2540);
        match(JavaParser::LBRACK);
        setState(2541);
        match(JavaParser::RBRACK);
        setState(2546);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2547);
      match(JavaParser::DOT);
      setState(2548);
      match(JavaParser::CLASS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2550);
      unannPrimitiveType();
      setState(2555);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::LBRACK) {
        setState(2551);
        match(JavaParser::LBRACK);
        setState(2552);
        match(JavaParser::RBRACK);
        setState(2557);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2558);
      match(JavaParser::DOT);
      setState(2559);
      match(JavaParser::CLASS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2561);
      match(JavaParser::VOID);
      setState(2562);
      match(JavaParser::DOT);
      setState(2563);
      match(JavaParser::CLASS);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2564);
      match(JavaParser::THIS);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2565);
      typeName();
      setState(2566);
      match(JavaParser::DOT);
      setState(2567);
      match(JavaParser::THIS);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2569);
      match(JavaParser::LPAREN);
      setState(2570);
      expression();
      setState(2571);
      match(JavaParser::RPAREN);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2573);
      classInstanceCreationExpression_lfno_primary();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2574);
      fieldAccess_lfno_primary();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2575);
      arrayAccess_lfno_primary();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2576);
      methodInvocation_lfno_primary();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(2577);
      methodReference_lfno_primary();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary;
}

void JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
}

void JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
}

JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext* JavaParser::primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
  PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 380, JavaParser::RulePrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);

   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LiteralContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::literal() {
  return getRuleContext<JavaParser::LiteralContext>(0);
}

JavaParser::TypeNameContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::UnannPrimitiveTypeContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::unannPrimitiveType() {
  return getRuleContext<JavaParser::UnannPrimitiveTypeContext>(0);
}

JavaParser::ExpressionContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ClassInstanceCreationExpression_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::classInstanceCreationExpression_lfno_primary() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpression_lfno_primaryContext>(0);
}

JavaParser::FieldAccess_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::fieldAccess_lfno_primary() {
  return getRuleContext<JavaParser::FieldAccess_lfno_primaryContext>(0);
}

JavaParser::MethodInvocation_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::methodInvocation_lfno_primary() {
  return getRuleContext<JavaParser::MethodInvocation_lfno_primaryContext>(0);
}

JavaParser::MethodReference_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::methodReference_lfno_primary() {
  return getRuleContext<JavaParser::MethodReference_lfno_primaryContext>(0);
}


size_t JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary;
}

void JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
}

void JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
}

JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext* JavaParser::primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
  PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 382, JavaParser::RulePrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2621);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2582);
      literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2583);
      typeName();
      setState(2588);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::LBRACK) {
        setState(2584);
        match(JavaParser::LBRACK);
        setState(2585);
        match(JavaParser::RBRACK);
        setState(2590);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2591);
      match(JavaParser::DOT);
      setState(2592);
      match(JavaParser::CLASS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2594);
      unannPrimitiveType();
      setState(2599);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::LBRACK) {
        setState(2595);
        match(JavaParser::LBRACK);
        setState(2596);
        match(JavaParser::RBRACK);
        setState(2601);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2602);
      match(JavaParser::DOT);
      setState(2603);
      match(JavaParser::CLASS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2605);
      match(JavaParser::VOID);
      setState(2606);
      match(JavaParser::DOT);
      setState(2607);
      match(JavaParser::CLASS);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2608);
      match(JavaParser::THIS);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2609);
      typeName();
      setState(2610);
      match(JavaParser::DOT);
      setState(2611);
      match(JavaParser::THIS);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2613);
      match(JavaParser::LPAREN);
      setState(2614);
      expression();
      setState(2615);
      match(JavaParser::RPAREN);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2617);
      classInstanceCreationExpression_lfno_primary();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2618);
      fieldAccess_lfno_primary();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2619);
      methodInvocation_lfno_primary();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2620);
      methodReference_lfno_primary();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassLiteralContext ------------------------------------------------------------------

JavaParser::ClassLiteralContext::ClassLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeNameContext* JavaParser::ClassLiteralContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::NumericTypeContext* JavaParser::ClassLiteralContext::numericType() {
  return getRuleContext<JavaParser::NumericTypeContext>(0);
}


size_t JavaParser::ClassLiteralContext::getRuleIndex() const {
  return JavaParser::RuleClassLiteral;
}

void JavaParser::ClassLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassLiteral(this);
}

void JavaParser::ClassLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassLiteral(this);
}

JavaParser::ClassLiteralContext* JavaParser::classLiteral() {
  ClassLiteralContext *_localctx = _tracker.createInstance<ClassLiteralContext>(_ctx, getState());
  enterRule(_localctx, 384, JavaParser::RuleClassLiteral);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2640);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(2626);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case JavaParser::T__0:
          case JavaParser::T__1:
          case JavaParser::T__4:
          case JavaParser::T__8:
          case JavaParser::Identifier: {
            setState(2623);
            typeName();
            break;
          }

          case JavaParser::BYTE:
          case JavaParser::CHAR:
          case JavaParser::DOUBLE:
          case JavaParser::FLOAT:
          case JavaParser::INT:
          case JavaParser::LONG:
          case JavaParser::SHORT: {
            setState(2624);
            numericType();
            break;
          }

          case JavaParser::BOOLEAN: {
            setState(2625);
            match(JavaParser::BOOLEAN);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(2632);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::LBRACK) {
          setState(2628);
          match(JavaParser::LBRACK);
          setState(2629);
          match(JavaParser::RBRACK);
          setState(2634);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2635);
        match(JavaParser::DOT);
        setState(2636);
        match(JavaParser::CLASS);
        break;
      }

      case JavaParser::VOID: {
        enterOuterAlt(_localctx, 2);
        setState(2637);
        match(JavaParser::VOID);
        setState(2638);
        match(JavaParser::DOT);
        setState(2639);
        match(JavaParser::CLASS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassInstanceCreationExpressionContext ------------------------------------------------------------------

JavaParser::ClassInstanceCreationExpressionContext::ClassInstanceCreationExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::ClassInstanceCreationExpressionContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::ClassInstanceCreationExpressionContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassInstanceCreationExpressionContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassInstanceCreationExpressionContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassInstanceCreationExpressionContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsOrDiamondContext* JavaParser::ClassInstanceCreationExpressionContext::typeArgumentsOrDiamond() {
  return getRuleContext<JavaParser::TypeArgumentsOrDiamondContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::ClassInstanceCreationExpressionContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::ClassInstanceCreationExpressionContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}

JavaParser::ExpressionNameContext* JavaParser::ClassInstanceCreationExpressionContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

JavaParser::PrimaryContext* JavaParser::ClassInstanceCreationExpressionContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}


size_t JavaParser::ClassInstanceCreationExpressionContext::getRuleIndex() const {
  return JavaParser::RuleClassInstanceCreationExpression;
}

void JavaParser::ClassInstanceCreationExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassInstanceCreationExpression(this);
}

void JavaParser::ClassInstanceCreationExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassInstanceCreationExpression(this);
}

JavaParser::ClassInstanceCreationExpressionContext* JavaParser::classInstanceCreationExpression() {
  ClassInstanceCreationExpressionContext *_localctx = _tracker.createInstance<ClassInstanceCreationExpressionContext>(_ctx, getState());
  enterRule(_localctx, 386, JavaParser::RuleClassInstanceCreationExpression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2725);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2642);
      match(JavaParser::NEW);
      setState(2644);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(2643);
        typeArguments();
      }
      setState(2649);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(2646);
        annotation();
        setState(2651);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2652);
      identifier();
      setState(2663);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::DOT) {
        setState(2653);
        match(JavaParser::DOT);
        setState(2657);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::AT) {
          setState(2654);
          annotation();
          setState(2659);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2660);
        identifier();
        setState(2665);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2667);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(2666);
        typeArgumentsOrDiamond();
      }
      setState(2669);
      match(JavaParser::LPAREN);
      setState(2671);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(2670);
        argumentList();
      }
      setState(2673);
      match(JavaParser::RPAREN);
      setState(2675);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LBRACE) {
        setState(2674);
        classBody();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2677);
      expressionName();
      setState(2678);
      match(JavaParser::DOT);
      setState(2679);
      match(JavaParser::NEW);
      setState(2681);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(2680);
        typeArguments();
      }
      setState(2686);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(2683);
        annotation();
        setState(2688);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2689);
      identifier();
      setState(2691);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(2690);
        typeArgumentsOrDiamond();
      }
      setState(2693);
      match(JavaParser::LPAREN);
      setState(2695);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(2694);
        argumentList();
      }
      setState(2697);
      match(JavaParser::RPAREN);
      setState(2699);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LBRACE) {
        setState(2698);
        classBody();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2701);
      primary();
      setState(2702);
      match(JavaParser::DOT);
      setState(2703);
      match(JavaParser::NEW);
      setState(2705);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(2704);
        typeArguments();
      }
      setState(2710);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(2707);
        annotation();
        setState(2712);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2713);
      identifier();
      setState(2715);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(2714);
        typeArgumentsOrDiamond();
      }
      setState(2717);
      match(JavaParser::LPAREN);
      setState(2719);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(2718);
        argumentList();
      }
      setState(2721);
      match(JavaParser::RPAREN);
      setState(2723);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LBRACE) {
        setState(2722);
        classBody();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassInstanceCreationExpression_lf_primaryContext ------------------------------------------------------------------

JavaParser::ClassInstanceCreationExpression_lf_primaryContext::ClassInstanceCreationExpression_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ClassInstanceCreationExpression_lf_primaryContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassInstanceCreationExpression_lf_primaryContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassInstanceCreationExpression_lf_primaryContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassInstanceCreationExpression_lf_primaryContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsOrDiamondContext* JavaParser::ClassInstanceCreationExpression_lf_primaryContext::typeArgumentsOrDiamond() {
  return getRuleContext<JavaParser::TypeArgumentsOrDiamondContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::ClassInstanceCreationExpression_lf_primaryContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::ClassInstanceCreationExpression_lf_primaryContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}


size_t JavaParser::ClassInstanceCreationExpression_lf_primaryContext::getRuleIndex() const {
  return JavaParser::RuleClassInstanceCreationExpression_lf_primary;
}

void JavaParser::ClassInstanceCreationExpression_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassInstanceCreationExpression_lf_primary(this);
}

void JavaParser::ClassInstanceCreationExpression_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassInstanceCreationExpression_lf_primary(this);
}

JavaParser::ClassInstanceCreationExpression_lf_primaryContext* JavaParser::classInstanceCreationExpression_lf_primary() {
  ClassInstanceCreationExpression_lf_primaryContext *_localctx = _tracker.createInstance<ClassInstanceCreationExpression_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 388, JavaParser::RuleClassInstanceCreationExpression_lf_primary);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2727);
    match(JavaParser::DOT);
    setState(2728);
    match(JavaParser::NEW);
    setState(2730);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(2729);
      typeArguments();
    }
    setState(2735);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(2732);
      annotation();
      setState(2737);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2738);
    identifier();
    setState(2740);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(2739);
      typeArgumentsOrDiamond();
    }
    setState(2742);
    match(JavaParser::LPAREN);
    setState(2744);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(2743);
      argumentList();
    }
    setState(2746);
    match(JavaParser::RPAREN);
    setState(2748);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx)) {
    case 1: {
      setState(2747);
      classBody();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassInstanceCreationExpression_lfno_primaryContext ------------------------------------------------------------------

JavaParser::ClassInstanceCreationExpression_lfno_primaryContext::ClassInstanceCreationExpression_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::ClassInstanceCreationExpression_lfno_primaryContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::ClassInstanceCreationExpression_lfno_primaryContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassInstanceCreationExpression_lfno_primaryContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassInstanceCreationExpression_lfno_primaryContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassInstanceCreationExpression_lfno_primaryContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsOrDiamondContext* JavaParser::ClassInstanceCreationExpression_lfno_primaryContext::typeArgumentsOrDiamond() {
  return getRuleContext<JavaParser::TypeArgumentsOrDiamondContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::ClassInstanceCreationExpression_lfno_primaryContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::ClassInstanceCreationExpression_lfno_primaryContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}

JavaParser::ExpressionNameContext* JavaParser::ClassInstanceCreationExpression_lfno_primaryContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}


size_t JavaParser::ClassInstanceCreationExpression_lfno_primaryContext::getRuleIndex() const {
  return JavaParser::RuleClassInstanceCreationExpression_lfno_primary;
}

void JavaParser::ClassInstanceCreationExpression_lfno_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassInstanceCreationExpression_lfno_primary(this);
}

void JavaParser::ClassInstanceCreationExpression_lfno_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassInstanceCreationExpression_lfno_primary(this);
}

JavaParser::ClassInstanceCreationExpression_lfno_primaryContext* JavaParser::classInstanceCreationExpression_lfno_primary() {
  ClassInstanceCreationExpression_lfno_primaryContext *_localctx = _tracker.createInstance<ClassInstanceCreationExpression_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 390, JavaParser::RuleClassInstanceCreationExpression_lfno_primary);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2809);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::NEW: {
        enterOuterAlt(_localctx, 1);
        setState(2750);
        match(JavaParser::NEW);
        setState(2752);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LT) {
          setState(2751);
          typeArguments();
        }
        setState(2757);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::AT) {
          setState(2754);
          annotation();
          setState(2759);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2760);
        identifier();
        setState(2771);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::DOT) {
          setState(2761);
          match(JavaParser::DOT);
          setState(2765);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == JavaParser::AT) {
            setState(2762);
            annotation();
            setState(2767);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(2768);
          identifier();
          setState(2773);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2775);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LT) {
          setState(2774);
          typeArgumentsOrDiamond();
        }
        setState(2777);
        match(JavaParser::LPAREN);
        setState(2779);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << JavaParser::T__0)
          | (1ULL << JavaParser::T__1)
          | (1ULL << JavaParser::T__4)
          | (1ULL << JavaParser::T__8)
          | (1ULL << JavaParser::BOOLEAN)
          | (1ULL << JavaParser::BYTE)
          | (1ULL << JavaParser::CHAR)
          | (1ULL << JavaParser::DOUBLE)
          | (1ULL << JavaParser::FLOAT)
          | (1ULL << JavaParser::INT)
          | (1ULL << JavaParser::LONG)
          | (1ULL << JavaParser::NEW)
          | (1ULL << JavaParser::SHORT)
          | (1ULL << JavaParser::SUPER)
          | (1ULL << JavaParser::THIS)
          | (1ULL << JavaParser::VOID)
          | (1ULL << JavaParser::IntegerLiteral)
          | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
          | (1ULL << (JavaParser::CharacterLiteral - 64))
          | (1ULL << (JavaParser::StringLiteral - 64))
          | (1ULL << (JavaParser::NullLiteral - 64))
          | (1ULL << (JavaParser::LPAREN - 64))
          | (1ULL << (JavaParser::AT - 64))
          | (1ULL << (JavaParser::BANG - 64))
          | (1ULL << (JavaParser::TILDE - 64))
          | (1ULL << (JavaParser::INC - 64))
          | (1ULL << (JavaParser::DEC - 64))
          | (1ULL << (JavaParser::ADD - 64))
          | (1ULL << (JavaParser::SUB - 64))
          | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
          setState(2778);
          argumentList();
        }
        setState(2781);
        match(JavaParser::RPAREN);
        setState(2783);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 249, _ctx)) {
        case 1: {
          setState(2782);
          classBody();
          break;
        }

        }
        break;
      }

      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 2);
        setState(2785);
        expressionName();
        setState(2786);
        match(JavaParser::DOT);
        setState(2787);
        match(JavaParser::NEW);
        setState(2789);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LT) {
          setState(2788);
          typeArguments();
        }
        setState(2794);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::AT) {
          setState(2791);
          annotation();
          setState(2796);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2797);
        identifier();
        setState(2799);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LT) {
          setState(2798);
          typeArgumentsOrDiamond();
        }
        setState(2801);
        match(JavaParser::LPAREN);
        setState(2803);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << JavaParser::T__0)
          | (1ULL << JavaParser::T__1)
          | (1ULL << JavaParser::T__4)
          | (1ULL << JavaParser::T__8)
          | (1ULL << JavaParser::BOOLEAN)
          | (1ULL << JavaParser::BYTE)
          | (1ULL << JavaParser::CHAR)
          | (1ULL << JavaParser::DOUBLE)
          | (1ULL << JavaParser::FLOAT)
          | (1ULL << JavaParser::INT)
          | (1ULL << JavaParser::LONG)
          | (1ULL << JavaParser::NEW)
          | (1ULL << JavaParser::SHORT)
          | (1ULL << JavaParser::SUPER)
          | (1ULL << JavaParser::THIS)
          | (1ULL << JavaParser::VOID)
          | (1ULL << JavaParser::IntegerLiteral)
          | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
          | (1ULL << (JavaParser::CharacterLiteral - 64))
          | (1ULL << (JavaParser::StringLiteral - 64))
          | (1ULL << (JavaParser::NullLiteral - 64))
          | (1ULL << (JavaParser::LPAREN - 64))
          | (1ULL << (JavaParser::AT - 64))
          | (1ULL << (JavaParser::BANG - 64))
          | (1ULL << (JavaParser::TILDE - 64))
          | (1ULL << (JavaParser::INC - 64))
          | (1ULL << (JavaParser::DEC - 64))
          | (1ULL << (JavaParser::ADD - 64))
          | (1ULL << (JavaParser::SUB - 64))
          | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
          setState(2802);
          argumentList();
        }
        setState(2805);
        match(JavaParser::RPAREN);
        setState(2807);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
        case 1: {
          setState(2806);
          classBody();
          break;
        }

        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsOrDiamondContext ------------------------------------------------------------------

JavaParser::TypeArgumentsOrDiamondContext::TypeArgumentsOrDiamondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeArgumentsContext* JavaParser::TypeArgumentsOrDiamondContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::TypeArgumentsOrDiamondContext::getRuleIndex() const {
  return JavaParser::RuleTypeArgumentsOrDiamond;
}

void JavaParser::TypeArgumentsOrDiamondContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgumentsOrDiamond(this);
}

void JavaParser::TypeArgumentsOrDiamondContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgumentsOrDiamond(this);
}

JavaParser::TypeArgumentsOrDiamondContext* JavaParser::typeArgumentsOrDiamond() {
  TypeArgumentsOrDiamondContext *_localctx = _tracker.createInstance<TypeArgumentsOrDiamondContext>(_ctx, getState());
  enterRule(_localctx, 392, JavaParser::RuleTypeArgumentsOrDiamond);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2814);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2811);
      typeArguments();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2812);
      match(JavaParser::LT);
      setState(2813);
      match(JavaParser::GT);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldAccessContext ------------------------------------------------------------------

JavaParser::FieldAccessContext::FieldAccessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimaryContext* JavaParser::FieldAccessContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}

JavaParser::IdentifierContext* JavaParser::FieldAccessContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeNameContext* JavaParser::FieldAccessContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}


size_t JavaParser::FieldAccessContext::getRuleIndex() const {
  return JavaParser::RuleFieldAccess;
}

void JavaParser::FieldAccessContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldAccess(this);
}

void JavaParser::FieldAccessContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldAccess(this);
}

JavaParser::FieldAccessContext* JavaParser::fieldAccess() {
  FieldAccessContext *_localctx = _tracker.createInstance<FieldAccessContext>(_ctx, getState());
  enterRule(_localctx, 394, JavaParser::RuleFieldAccess);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2829);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2816);
      primary();
      setState(2817);
      match(JavaParser::DOT);
      setState(2818);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2820);
      match(JavaParser::SUPER);
      setState(2821);
      match(JavaParser::DOT);
      setState(2822);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2823);
      typeName();
      setState(2824);
      match(JavaParser::DOT);
      setState(2825);
      match(JavaParser::SUPER);
      setState(2826);
      match(JavaParser::DOT);
      setState(2827);
      identifier();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldAccess_lf_primaryContext ------------------------------------------------------------------

JavaParser::FieldAccess_lf_primaryContext::FieldAccess_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::FieldAccess_lf_primaryContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::FieldAccess_lf_primaryContext::getRuleIndex() const {
  return JavaParser::RuleFieldAccess_lf_primary;
}

void JavaParser::FieldAccess_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldAccess_lf_primary(this);
}

void JavaParser::FieldAccess_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldAccess_lf_primary(this);
}

JavaParser::FieldAccess_lf_primaryContext* JavaParser::fieldAccess_lf_primary() {
  FieldAccess_lf_primaryContext *_localctx = _tracker.createInstance<FieldAccess_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 396, JavaParser::RuleFieldAccess_lf_primary);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2831);
    match(JavaParser::DOT);
    setState(2832);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldAccess_lfno_primaryContext ------------------------------------------------------------------

JavaParser::FieldAccess_lfno_primaryContext::FieldAccess_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::FieldAccess_lfno_primaryContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeNameContext* JavaParser::FieldAccess_lfno_primaryContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}


size_t JavaParser::FieldAccess_lfno_primaryContext::getRuleIndex() const {
  return JavaParser::RuleFieldAccess_lfno_primary;
}

void JavaParser::FieldAccess_lfno_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldAccess_lfno_primary(this);
}

void JavaParser::FieldAccess_lfno_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldAccess_lfno_primary(this);
}

JavaParser::FieldAccess_lfno_primaryContext* JavaParser::fieldAccess_lfno_primary() {
  FieldAccess_lfno_primaryContext *_localctx = _tracker.createInstance<FieldAccess_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 398, JavaParser::RuleFieldAccess_lfno_primary);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2843);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::SUPER: {
        enterOuterAlt(_localctx, 1);
        setState(2834);
        match(JavaParser::SUPER);
        setState(2835);
        match(JavaParser::DOT);
        setState(2836);
        identifier();
        break;
      }

      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 2);
        setState(2837);
        typeName();
        setState(2838);
        match(JavaParser::DOT);
        setState(2839);
        match(JavaParser::SUPER);
        setState(2840);
        match(JavaParser::DOT);
        setState(2841);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayAccessContext ------------------------------------------------------------------

JavaParser::ArrayAccessContext::ArrayAccessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionNameContext* JavaParser::ArrayAccessContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ArrayAccessContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ArrayAccessContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext* JavaParser::ArrayAccessContext::primaryNoNewArray_lfno_arrayAccess() {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext>(0);
}

std::vector<JavaParser::PrimaryNoNewArray_lf_arrayAccessContext *> JavaParser::ArrayAccessContext::primaryNoNewArray_lf_arrayAccess() {
  return getRuleContexts<JavaParser::PrimaryNoNewArray_lf_arrayAccessContext>();
}

JavaParser::PrimaryNoNewArray_lf_arrayAccessContext* JavaParser::ArrayAccessContext::primaryNoNewArray_lf_arrayAccess(size_t i) {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lf_arrayAccessContext>(i);
}


size_t JavaParser::ArrayAccessContext::getRuleIndex() const {
  return JavaParser::RuleArrayAccess;
}

void JavaParser::ArrayAccessContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayAccess(this);
}

void JavaParser::ArrayAccessContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayAccess(this);
}

JavaParser::ArrayAccessContext* JavaParser::arrayAccess() {
  ArrayAccessContext *_localctx = _tracker.createInstance<ArrayAccessContext>(_ctx, getState());
  enterRule(_localctx, 400, JavaParser::RuleArrayAccess);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2855);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx)) {
    case 1: {
      setState(2845);
      expressionName();
      setState(2846);
      match(JavaParser::LBRACK);
      setState(2847);
      expression();
      setState(2848);
      match(JavaParser::RBRACK);
      break;
    }

    case 2: {
      setState(2850);
      primaryNoNewArray_lfno_arrayAccess();
      setState(2851);
      match(JavaParser::LBRACK);
      setState(2852);
      expression();
      setState(2853);
      match(JavaParser::RBRACK);
      break;
    }

    }
    setState(2864);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::LBRACK) {
      setState(2857);
      primaryNoNewArray_lf_arrayAccess();
      setState(2858);
      match(JavaParser::LBRACK);
      setState(2859);
      expression();
      setState(2860);
      match(JavaParser::RBRACK);
      setState(2866);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayAccess_lf_primaryContext ------------------------------------------------------------------

JavaParser::ArrayAccess_lf_primaryContext::ArrayAccess_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext* JavaParser::ArrayAccess_lf_primaryContext::primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext>(0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ArrayAccess_lf_primaryContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ArrayAccess_lf_primaryContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

std::vector<JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext *> JavaParser::ArrayAccess_lf_primaryContext::primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
  return getRuleContexts<JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>();
}

JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext* JavaParser::ArrayAccess_lf_primaryContext::primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(size_t i) {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>(i);
}


size_t JavaParser::ArrayAccess_lf_primaryContext::getRuleIndex() const {
  return JavaParser::RuleArrayAccess_lf_primary;
}

void JavaParser::ArrayAccess_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayAccess_lf_primary(this);
}

void JavaParser::ArrayAccess_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayAccess_lf_primary(this);
}

JavaParser::ArrayAccess_lf_primaryContext* JavaParser::arrayAccess_lf_primary() {
  ArrayAccess_lf_primaryContext *_localctx = _tracker.createInstance<ArrayAccess_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 402, JavaParser::RuleArrayAccess_lf_primary);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2867);
    primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();
    setState(2868);
    match(JavaParser::LBRACK);
    setState(2869);
    expression();
    setState(2870);
    match(JavaParser::RBRACK);
    setState(2879);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2872);
        primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();
        setState(2873);
        match(JavaParser::LBRACK);
        setState(2874);
        expression();
        setState(2875);
        match(JavaParser::RBRACK); 
      }
      setState(2881);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayAccess_lfno_primaryContext ------------------------------------------------------------------

JavaParser::ArrayAccess_lfno_primaryContext::ArrayAccess_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionNameContext* JavaParser::ArrayAccess_lfno_primaryContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ArrayAccess_lfno_primaryContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ArrayAccess_lfno_primaryContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext* JavaParser::ArrayAccess_lfno_primaryContext::primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext>(0);
}

std::vector<JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext *> JavaParser::ArrayAccess_lfno_primaryContext::primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
  return getRuleContexts<JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>();
}

JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext* JavaParser::ArrayAccess_lfno_primaryContext::primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(size_t i) {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>(i);
}


size_t JavaParser::ArrayAccess_lfno_primaryContext::getRuleIndex() const {
  return JavaParser::RuleArrayAccess_lfno_primary;
}

void JavaParser::ArrayAccess_lfno_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayAccess_lfno_primary(this);
}

void JavaParser::ArrayAccess_lfno_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayAccess_lfno_primary(this);
}

JavaParser::ArrayAccess_lfno_primaryContext* JavaParser::arrayAccess_lfno_primary() {
  ArrayAccess_lfno_primaryContext *_localctx = _tracker.createInstance<ArrayAccess_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 404, JavaParser::RuleArrayAccess_lfno_primary);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2892);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx)) {
    case 1: {
      setState(2882);
      expressionName();
      setState(2883);
      match(JavaParser::LBRACK);
      setState(2884);
      expression();
      setState(2885);
      match(JavaParser::RBRACK);
      break;
    }

    case 2: {
      setState(2887);
      primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();
      setState(2888);
      match(JavaParser::LBRACK);
      setState(2889);
      expression();
      setState(2890);
      match(JavaParser::RBRACK);
      break;
    }

    }
    setState(2901);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2894);
        primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();
        setState(2895);
        match(JavaParser::LBRACK);
        setState(2896);
        expression();
        setState(2897);
        match(JavaParser::RBRACK); 
      }
      setState(2903);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodInvocationContext ------------------------------------------------------------------

JavaParser::MethodInvocationContext::MethodInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::MethodNameContext* JavaParser::MethodInvocationContext::methodName() {
  return getRuleContext<JavaParser::MethodNameContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::MethodInvocationContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}

JavaParser::TypeNameContext* JavaParser::MethodInvocationContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::IdentifierContext* JavaParser::MethodInvocationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::MethodInvocationContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ExpressionNameContext* JavaParser::MethodInvocationContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

JavaParser::PrimaryContext* JavaParser::MethodInvocationContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}


size_t JavaParser::MethodInvocationContext::getRuleIndex() const {
  return JavaParser::RuleMethodInvocation;
}

void JavaParser::MethodInvocationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation(this);
}

void JavaParser::MethodInvocationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation(this);
}

JavaParser::MethodInvocationContext* JavaParser::methodInvocation() {
  MethodInvocationContext *_localctx = _tracker.createInstance<MethodInvocationContext>(_ctx, getState());
  enterRule(_localctx, 406, JavaParser::RuleMethodInvocation);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2973);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2904);
      methodName();
      setState(2905);
      match(JavaParser::LPAREN);
      setState(2907);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(2906);
        argumentList();
      }
      setState(2909);
      match(JavaParser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2911);
      typeName();
      setState(2912);
      match(JavaParser::DOT);
      setState(2914);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(2913);
        typeArguments();
      }
      setState(2916);
      identifier();
      setState(2917);
      match(JavaParser::LPAREN);
      setState(2919);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(2918);
        argumentList();
      }
      setState(2921);
      match(JavaParser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2923);
      expressionName();
      setState(2924);
      match(JavaParser::DOT);
      setState(2926);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(2925);
        typeArguments();
      }
      setState(2928);
      identifier();
      setState(2929);
      match(JavaParser::LPAREN);
      setState(2931);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(2930);
        argumentList();
      }
      setState(2933);
      match(JavaParser::RPAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2935);
      primary();
      setState(2936);
      match(JavaParser::DOT);
      setState(2938);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(2937);
        typeArguments();
      }
      setState(2940);
      identifier();
      setState(2941);
      match(JavaParser::LPAREN);
      setState(2943);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(2942);
        argumentList();
      }
      setState(2945);
      match(JavaParser::RPAREN);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2947);
      match(JavaParser::SUPER);
      setState(2948);
      match(JavaParser::DOT);
      setState(2950);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(2949);
        typeArguments();
      }
      setState(2952);
      identifier();
      setState(2953);
      match(JavaParser::LPAREN);
      setState(2955);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(2954);
        argumentList();
      }
      setState(2957);
      match(JavaParser::RPAREN);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2959);
      typeName();
      setState(2960);
      match(JavaParser::DOT);
      setState(2961);
      match(JavaParser::SUPER);
      setState(2962);
      match(JavaParser::DOT);
      setState(2964);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(2963);
        typeArguments();
      }
      setState(2966);
      identifier();
      setState(2967);
      match(JavaParser::LPAREN);
      setState(2969);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(2968);
        argumentList();
      }
      setState(2971);
      match(JavaParser::RPAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodInvocation_lf_primaryContext ------------------------------------------------------------------

JavaParser::MethodInvocation_lf_primaryContext::MethodInvocation_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::MethodInvocation_lf_primaryContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::MethodInvocation_lf_primaryContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::MethodInvocation_lf_primaryContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}


size_t JavaParser::MethodInvocation_lf_primaryContext::getRuleIndex() const {
  return JavaParser::RuleMethodInvocation_lf_primary;
}

void JavaParser::MethodInvocation_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation_lf_primary(this);
}

void JavaParser::MethodInvocation_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation_lf_primary(this);
}

JavaParser::MethodInvocation_lf_primaryContext* JavaParser::methodInvocation_lf_primary() {
  MethodInvocation_lf_primaryContext *_localctx = _tracker.createInstance<MethodInvocation_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 408, JavaParser::RuleMethodInvocation_lf_primary);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2975);
    match(JavaParser::DOT);
    setState(2977);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(2976);
      typeArguments();
    }
    setState(2979);
    identifier();
    setState(2980);
    match(JavaParser::LPAREN);
    setState(2982);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(2981);
      argumentList();
    }
    setState(2984);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodInvocation_lfno_primaryContext ------------------------------------------------------------------

JavaParser::MethodInvocation_lfno_primaryContext::MethodInvocation_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::MethodNameContext* JavaParser::MethodInvocation_lfno_primaryContext::methodName() {
  return getRuleContext<JavaParser::MethodNameContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::MethodInvocation_lfno_primaryContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}

JavaParser::TypeNameContext* JavaParser::MethodInvocation_lfno_primaryContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::IdentifierContext* JavaParser::MethodInvocation_lfno_primaryContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::MethodInvocation_lfno_primaryContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ExpressionNameContext* JavaParser::MethodInvocation_lfno_primaryContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}


size_t JavaParser::MethodInvocation_lfno_primaryContext::getRuleIndex() const {
  return JavaParser::RuleMethodInvocation_lfno_primary;
}

void JavaParser::MethodInvocation_lfno_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation_lfno_primary(this);
}

void JavaParser::MethodInvocation_lfno_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation_lfno_primary(this);
}

JavaParser::MethodInvocation_lfno_primaryContext* JavaParser::methodInvocation_lfno_primary() {
  MethodInvocation_lfno_primaryContext *_localctx = _tracker.createInstance<MethodInvocation_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 410, JavaParser::RuleMethodInvocation_lfno_primary);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3043);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 287, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2986);
      methodName();
      setState(2987);
      match(JavaParser::LPAREN);
      setState(2989);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(2988);
        argumentList();
      }
      setState(2991);
      match(JavaParser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2993);
      typeName();
      setState(2994);
      match(JavaParser::DOT);
      setState(2996);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(2995);
        typeArguments();
      }
      setState(2998);
      identifier();
      setState(2999);
      match(JavaParser::LPAREN);
      setState(3001);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(3000);
        argumentList();
      }
      setState(3003);
      match(JavaParser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3005);
      expressionName();
      setState(3006);
      match(JavaParser::DOT);
      setState(3008);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3007);
        typeArguments();
      }
      setState(3010);
      identifier();
      setState(3011);
      match(JavaParser::LPAREN);
      setState(3013);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(3012);
        argumentList();
      }
      setState(3015);
      match(JavaParser::RPAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3017);
      match(JavaParser::SUPER);
      setState(3018);
      match(JavaParser::DOT);
      setState(3020);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3019);
        typeArguments();
      }
      setState(3022);
      identifier();
      setState(3023);
      match(JavaParser::LPAREN);
      setState(3025);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(3024);
        argumentList();
      }
      setState(3027);
      match(JavaParser::RPAREN);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3029);
      typeName();
      setState(3030);
      match(JavaParser::DOT);
      setState(3031);
      match(JavaParser::SUPER);
      setState(3032);
      match(JavaParser::DOT);
      setState(3034);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3033);
        typeArguments();
      }
      setState(3036);
      identifier();
      setState(3037);
      match(JavaParser::LPAREN);
      setState(3039);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(3038);
        argumentList();
      }
      setState(3041);
      match(JavaParser::RPAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentListContext ------------------------------------------------------------------

JavaParser::ArgumentListContext::ArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ArgumentListContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ArgumentListContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}


size_t JavaParser::ArgumentListContext::getRuleIndex() const {
  return JavaParser::RuleArgumentList;
}

void JavaParser::ArgumentListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgumentList(this);
}

void JavaParser::ArgumentListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgumentList(this);
}

JavaParser::ArgumentListContext* JavaParser::argumentList() {
  ArgumentListContext *_localctx = _tracker.createInstance<ArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 412, JavaParser::RuleArgumentList);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3045);
    expression();
    setState(3050);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(3046);
      match(JavaParser::COMMA);
      setState(3047);
      expression();
      setState(3052);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodReferenceContext ------------------------------------------------------------------

JavaParser::MethodReferenceContext::MethodReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionNameContext* JavaParser::MethodReferenceContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

JavaParser::IdentifierContext* JavaParser::MethodReferenceContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::MethodReferenceContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ReferenceTypeContext* JavaParser::MethodReferenceContext::referenceType() {
  return getRuleContext<JavaParser::ReferenceTypeContext>(0);
}

JavaParser::PrimaryContext* JavaParser::MethodReferenceContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}

JavaParser::TypeNameContext* JavaParser::MethodReferenceContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::ClassTypeContext* JavaParser::MethodReferenceContext::classType() {
  return getRuleContext<JavaParser::ClassTypeContext>(0);
}

JavaParser::ArrayTypeContext* JavaParser::MethodReferenceContext::arrayType() {
  return getRuleContext<JavaParser::ArrayTypeContext>(0);
}


size_t JavaParser::MethodReferenceContext::getRuleIndex() const {
  return JavaParser::RuleMethodReference;
}

void JavaParser::MethodReferenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference(this);
}

void JavaParser::MethodReferenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference(this);
}

JavaParser::MethodReferenceContext* JavaParser::methodReference() {
  MethodReferenceContext *_localctx = _tracker.createInstance<MethodReferenceContext>(_ctx, getState());
  enterRule(_localctx, 414, JavaParser::RuleMethodReference);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3100);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3053);
      expressionName();
      setState(3054);
      match(JavaParser::COLONCOLON);
      setState(3056);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3055);
        typeArguments();
      }
      setState(3058);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3060);
      referenceType();
      setState(3061);
      match(JavaParser::COLONCOLON);
      setState(3063);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3062);
        typeArguments();
      }
      setState(3065);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3067);
      primary();
      setState(3068);
      match(JavaParser::COLONCOLON);
      setState(3070);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3069);
        typeArguments();
      }
      setState(3072);
      identifier();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3074);
      match(JavaParser::SUPER);
      setState(3075);
      match(JavaParser::COLONCOLON);
      setState(3077);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3076);
        typeArguments();
      }
      setState(3079);
      identifier();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3080);
      typeName();
      setState(3081);
      match(JavaParser::DOT);
      setState(3082);
      match(JavaParser::SUPER);
      setState(3083);
      match(JavaParser::COLONCOLON);
      setState(3085);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3084);
        typeArguments();
      }
      setState(3087);
      identifier();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3089);
      classType();
      setState(3090);
      match(JavaParser::COLONCOLON);
      setState(3092);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3091);
        typeArguments();
      }
      setState(3094);
      match(JavaParser::NEW);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3096);
      arrayType();
      setState(3097);
      match(JavaParser::COLONCOLON);
      setState(3098);
      match(JavaParser::NEW);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodReference_lf_primaryContext ------------------------------------------------------------------

JavaParser::MethodReference_lf_primaryContext::MethodReference_lf_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::MethodReference_lf_primaryContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::MethodReference_lf_primaryContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::MethodReference_lf_primaryContext::getRuleIndex() const {
  return JavaParser::RuleMethodReference_lf_primary;
}

void JavaParser::MethodReference_lf_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference_lf_primary(this);
}

void JavaParser::MethodReference_lf_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference_lf_primary(this);
}

JavaParser::MethodReference_lf_primaryContext* JavaParser::methodReference_lf_primary() {
  MethodReference_lf_primaryContext *_localctx = _tracker.createInstance<MethodReference_lf_primaryContext>(_ctx, getState());
  enterRule(_localctx, 416, JavaParser::RuleMethodReference_lf_primary);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3102);
    match(JavaParser::COLONCOLON);
    setState(3104);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(3103);
      typeArguments();
    }
    setState(3106);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodReference_lfno_primaryContext ------------------------------------------------------------------

JavaParser::MethodReference_lfno_primaryContext::MethodReference_lfno_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionNameContext* JavaParser::MethodReference_lfno_primaryContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

JavaParser::IdentifierContext* JavaParser::MethodReference_lfno_primaryContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::MethodReference_lfno_primaryContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ReferenceTypeContext* JavaParser::MethodReference_lfno_primaryContext::referenceType() {
  return getRuleContext<JavaParser::ReferenceTypeContext>(0);
}

JavaParser::TypeNameContext* JavaParser::MethodReference_lfno_primaryContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::ClassTypeContext* JavaParser::MethodReference_lfno_primaryContext::classType() {
  return getRuleContext<JavaParser::ClassTypeContext>(0);
}

JavaParser::ArrayTypeContext* JavaParser::MethodReference_lfno_primaryContext::arrayType() {
  return getRuleContext<JavaParser::ArrayTypeContext>(0);
}


size_t JavaParser::MethodReference_lfno_primaryContext::getRuleIndex() const {
  return JavaParser::RuleMethodReference_lfno_primary;
}

void JavaParser::MethodReference_lfno_primaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference_lfno_primary(this);
}

void JavaParser::MethodReference_lfno_primaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference_lfno_primary(this);
}

JavaParser::MethodReference_lfno_primaryContext* JavaParser::methodReference_lfno_primary() {
  MethodReference_lfno_primaryContext *_localctx = _tracker.createInstance<MethodReference_lfno_primaryContext>(_ctx, getState());
  enterRule(_localctx, 418, JavaParser::RuleMethodReference_lfno_primary);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3148);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3108);
      expressionName();
      setState(3109);
      match(JavaParser::COLONCOLON);
      setState(3111);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3110);
        typeArguments();
      }
      setState(3113);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3115);
      referenceType();
      setState(3116);
      match(JavaParser::COLONCOLON);
      setState(3118);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3117);
        typeArguments();
      }
      setState(3120);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3122);
      match(JavaParser::SUPER);
      setState(3123);
      match(JavaParser::COLONCOLON);
      setState(3125);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3124);
        typeArguments();
      }
      setState(3127);
      identifier();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3128);
      typeName();
      setState(3129);
      match(JavaParser::DOT);
      setState(3130);
      match(JavaParser::SUPER);
      setState(3131);
      match(JavaParser::COLONCOLON);
      setState(3133);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3132);
        typeArguments();
      }
      setState(3135);
      identifier();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3137);
      classType();
      setState(3138);
      match(JavaParser::COLONCOLON);
      setState(3140);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3139);
        typeArguments();
      }
      setState(3142);
      match(JavaParser::NEW);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3144);
      arrayType();
      setState(3145);
      match(JavaParser::COLONCOLON);
      setState(3146);
      match(JavaParser::NEW);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayCreationExpressionContext ------------------------------------------------------------------

JavaParser::ArrayCreationExpressionContext::ArrayCreationExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimitiveTypeContext* JavaParser::ArrayCreationExpressionContext::primitiveType() {
  return getRuleContext<JavaParser::PrimitiveTypeContext>(0);
}

JavaParser::DimExprsContext* JavaParser::ArrayCreationExpressionContext::dimExprs() {
  return getRuleContext<JavaParser::DimExprsContext>(0);
}

JavaParser::DimsContext* JavaParser::ArrayCreationExpressionContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ArrayCreationExpressionContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

JavaParser::ArrayInitializerContext* JavaParser::ArrayCreationExpressionContext::arrayInitializer() {
  return getRuleContext<JavaParser::ArrayInitializerContext>(0);
}


size_t JavaParser::ArrayCreationExpressionContext::getRuleIndex() const {
  return JavaParser::RuleArrayCreationExpression;
}

void JavaParser::ArrayCreationExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayCreationExpression(this);
}

void JavaParser::ArrayCreationExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayCreationExpression(this);
}

JavaParser::ArrayCreationExpressionContext* JavaParser::arrayCreationExpression() {
  ArrayCreationExpressionContext *_localctx = _tracker.createInstance<ArrayCreationExpressionContext>(_ctx, getState());
  enterRule(_localctx, 420, JavaParser::RuleArrayCreationExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3172);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3150);
      match(JavaParser::NEW);
      setState(3151);
      primitiveType();
      setState(3152);
      dimExprs();
      setState(3154);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx)) {
      case 1: {
        setState(3153);
        dims();
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3156);
      match(JavaParser::NEW);
      setState(3157);
      classOrInterfaceType();
      setState(3158);
      dimExprs();
      setState(3160);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx)) {
      case 1: {
        setState(3159);
        dims();
        break;
      }

      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3162);
      match(JavaParser::NEW);
      setState(3163);
      primitiveType();
      setState(3164);
      dims();
      setState(3165);
      arrayInitializer();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3167);
      match(JavaParser::NEW);
      setState(3168);
      classOrInterfaceType();
      setState(3169);
      dims();
      setState(3170);
      arrayInitializer();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimExprsContext ------------------------------------------------------------------

JavaParser::DimExprsContext::DimExprsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::DimExprContext *> JavaParser::DimExprsContext::dimExpr() {
  return getRuleContexts<JavaParser::DimExprContext>();
}

JavaParser::DimExprContext* JavaParser::DimExprsContext::dimExpr(size_t i) {
  return getRuleContext<JavaParser::DimExprContext>(i);
}


size_t JavaParser::DimExprsContext::getRuleIndex() const {
  return JavaParser::RuleDimExprs;
}

void JavaParser::DimExprsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDimExprs(this);
}

void JavaParser::DimExprsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDimExprs(this);
}

JavaParser::DimExprsContext* JavaParser::dimExprs() {
  DimExprsContext *_localctx = _tracker.createInstance<DimExprsContext>(_ctx, getState());
  enterRule(_localctx, 422, JavaParser::RuleDimExprs);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3175); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3174);
              dimExpr();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3177); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimExprContext ------------------------------------------------------------------

JavaParser::DimExprContext::DimExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::DimExprContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::DimExprContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::DimExprContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::DimExprContext::getRuleIndex() const {
  return JavaParser::RuleDimExpr;
}

void JavaParser::DimExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDimExpr(this);
}

void JavaParser::DimExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDimExpr(this);
}

JavaParser::DimExprContext* JavaParser::dimExpr() {
  DimExprContext *_localctx = _tracker.createInstance<DimExprContext>(_ctx, getState());
  enterRule(_localctx, 424, JavaParser::RuleDimExpr);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3182);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(3179);
      annotation();
      setState(3184);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3185);
    match(JavaParser::LBRACK);
    setState(3186);
    expression();
    setState(3187);
    match(JavaParser::RBRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantExpressionContext ------------------------------------------------------------------

JavaParser::ConstantExpressionContext::ConstantExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::ConstantExpressionContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}


size_t JavaParser::ConstantExpressionContext::getRuleIndex() const {
  return JavaParser::RuleConstantExpression;
}

void JavaParser::ConstantExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantExpression(this);
}

void JavaParser::ConstantExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantExpression(this);
}

JavaParser::ConstantExpressionContext* JavaParser::constantExpression() {
  ConstantExpressionContext *_localctx = _tracker.createInstance<ConstantExpressionContext>(_ctx, getState());
  enterRule(_localctx, 426, JavaParser::RuleConstantExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3189);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

JavaParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LambdaExpressionContext* JavaParser::ExpressionContext::lambdaExpression() {
  return getRuleContext<JavaParser::LambdaExpressionContext>(0);
}

JavaParser::AssignmentExpressionContext* JavaParser::ExpressionContext::assignmentExpression() {
  return getRuleContext<JavaParser::AssignmentExpressionContext>(0);
}


size_t JavaParser::ExpressionContext::getRuleIndex() const {
  return JavaParser::RuleExpression;
}

void JavaParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void JavaParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

JavaParser::ExpressionContext* JavaParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 428, JavaParser::RuleExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3193);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3191);
      lambdaExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3192);
      assignmentExpression();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaExpressionContext ------------------------------------------------------------------

JavaParser::LambdaExpressionContext::LambdaExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LambdaParametersContext* JavaParser::LambdaExpressionContext::lambdaParameters() {
  return getRuleContext<JavaParser::LambdaParametersContext>(0);
}

JavaParser::LambdaBodyContext* JavaParser::LambdaExpressionContext::lambdaBody() {
  return getRuleContext<JavaParser::LambdaBodyContext>(0);
}


size_t JavaParser::LambdaExpressionContext::getRuleIndex() const {
  return JavaParser::RuleLambdaExpression;
}

void JavaParser::LambdaExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaExpression(this);
}

void JavaParser::LambdaExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaExpression(this);
}

JavaParser::LambdaExpressionContext* JavaParser::lambdaExpression() {
  LambdaExpressionContext *_localctx = _tracker.createInstance<LambdaExpressionContext>(_ctx, getState());
  enterRule(_localctx, 430, JavaParser::RuleLambdaExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3195);
    lambdaParameters();
    setState(3196);
    match(JavaParser::ARROW);
    setState(3197);
    lambdaBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaParametersContext ------------------------------------------------------------------

JavaParser::LambdaParametersContext::LambdaParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::LambdaParametersContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::FormalParameterListContext* JavaParser::LambdaParametersContext::formalParameterList() {
  return getRuleContext<JavaParser::FormalParameterListContext>(0);
}

JavaParser::InferredFormalParameterListContext* JavaParser::LambdaParametersContext::inferredFormalParameterList() {
  return getRuleContext<JavaParser::InferredFormalParameterListContext>(0);
}


size_t JavaParser::LambdaParametersContext::getRuleIndex() const {
  return JavaParser::RuleLambdaParameters;
}

void JavaParser::LambdaParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaParameters(this);
}

void JavaParser::LambdaParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaParameters(this);
}

JavaParser::LambdaParametersContext* JavaParser::lambdaParameters() {
  LambdaParametersContext *_localctx = _tracker.createInstance<LambdaParametersContext>(_ctx, getState());
  enterRule(_localctx, 432, JavaParser::RuleLambdaParameters);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3209);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3199);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3200);
      match(JavaParser::LPAREN);
      setState(3202);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FINAL)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::SHORT))) != 0) || _la == JavaParser::AT

      || _la == JavaParser::Identifier) {
        setState(3201);
        formalParameterList();
      }
      setState(3204);
      match(JavaParser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3205);
      match(JavaParser::LPAREN);
      setState(3206);
      inferredFormalParameterList();
      setState(3207);
      match(JavaParser::RPAREN);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InferredFormalParameterListContext ------------------------------------------------------------------

JavaParser::InferredFormalParameterListContext::InferredFormalParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::InferredFormalParameterListContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::InferredFormalParameterListContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}


size_t JavaParser::InferredFormalParameterListContext::getRuleIndex() const {
  return JavaParser::RuleInferredFormalParameterList;
}

void JavaParser::InferredFormalParameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInferredFormalParameterList(this);
}

void JavaParser::InferredFormalParameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInferredFormalParameterList(this);
}

JavaParser::InferredFormalParameterListContext* JavaParser::inferredFormalParameterList() {
  InferredFormalParameterListContext *_localctx = _tracker.createInstance<InferredFormalParameterListContext>(_ctx, getState());
  enterRule(_localctx, 434, JavaParser::RuleInferredFormalParameterList);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3211);
    identifier();
    setState(3216);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(3212);
      match(JavaParser::COMMA);
      setState(3213);
      identifier();
      setState(3218);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaBodyContext ------------------------------------------------------------------

JavaParser::LambdaBodyContext::LambdaBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::LambdaBodyContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::BlockContext* JavaParser::LambdaBodyContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::LambdaBodyContext::getRuleIndex() const {
  return JavaParser::RuleLambdaBody;
}

void JavaParser::LambdaBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaBody(this);
}

void JavaParser::LambdaBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaBody(this);
}

JavaParser::LambdaBodyContext* JavaParser::lambdaBody() {
  LambdaBodyContext *_localctx = _tracker.createInstance<LambdaBodyContext>(_ctx, getState());
  enterRule(_localctx, 436, JavaParser::RuleLambdaBody);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3221);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::IntegerLiteral:
      case JavaParser::FloatingPointLiteral:
      case JavaParser::BooleanLiteral:
      case JavaParser::CharacterLiteral:
      case JavaParser::StringLiteral:
      case JavaParser::NullLiteral:
      case JavaParser::LPAREN:
      case JavaParser::AT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::ADD:
      case JavaParser::SUB:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(3219);
        expression();
        break;
      }

      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 2);
        setState(3220);
        block();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentExpressionContext ------------------------------------------------------------------

JavaParser::AssignmentExpressionContext::AssignmentExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConditionalExpressionContext* JavaParser::AssignmentExpressionContext::conditionalExpression() {
  return getRuleContext<JavaParser::ConditionalExpressionContext>(0);
}

JavaParser::AssignmentContext* JavaParser::AssignmentExpressionContext::assignment() {
  return getRuleContext<JavaParser::AssignmentContext>(0);
}


size_t JavaParser::AssignmentExpressionContext::getRuleIndex() const {
  return JavaParser::RuleAssignmentExpression;
}

void JavaParser::AssignmentExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentExpression(this);
}

void JavaParser::AssignmentExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentExpression(this);
}

JavaParser::AssignmentExpressionContext* JavaParser::assignmentExpression() {
  AssignmentExpressionContext *_localctx = _tracker.createInstance<AssignmentExpressionContext>(_ctx, getState());
  enterRule(_localctx, 438, JavaParser::RuleAssignmentExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3225);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 313, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3223);
      conditionalExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3224);
      assignment();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentContext ------------------------------------------------------------------

JavaParser::AssignmentContext::AssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LeftHandSideContext* JavaParser::AssignmentContext::leftHandSide() {
  return getRuleContext<JavaParser::LeftHandSideContext>(0);
}

JavaParser::AssignmentOperatorContext* JavaParser::AssignmentContext::assignmentOperator() {
  return getRuleContext<JavaParser::AssignmentOperatorContext>(0);
}

JavaParser::ExpressionContext* JavaParser::AssignmentContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}


size_t JavaParser::AssignmentContext::getRuleIndex() const {
  return JavaParser::RuleAssignment;
}

void JavaParser::AssignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment(this);
}

void JavaParser::AssignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment(this);
}

JavaParser::AssignmentContext* JavaParser::assignment() {
  AssignmentContext *_localctx = _tracker.createInstance<AssignmentContext>(_ctx, getState());
  enterRule(_localctx, 440, JavaParser::RuleAssignment);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3227);
    leftHandSide();
    setState(3228);
    assignmentOperator();
    setState(3229);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LeftHandSideContext ------------------------------------------------------------------

JavaParser::LeftHandSideContext::LeftHandSideContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionNameContext* JavaParser::LeftHandSideContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

JavaParser::FieldAccessContext* JavaParser::LeftHandSideContext::fieldAccess() {
  return getRuleContext<JavaParser::FieldAccessContext>(0);
}

JavaParser::ArrayAccessContext* JavaParser::LeftHandSideContext::arrayAccess() {
  return getRuleContext<JavaParser::ArrayAccessContext>(0);
}


size_t JavaParser::LeftHandSideContext::getRuleIndex() const {
  return JavaParser::RuleLeftHandSide;
}

void JavaParser::LeftHandSideContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeftHandSide(this);
}

void JavaParser::LeftHandSideContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeftHandSide(this);
}

JavaParser::LeftHandSideContext* JavaParser::leftHandSide() {
  LeftHandSideContext *_localctx = _tracker.createInstance<LeftHandSideContext>(_ctx, getState());
  enterRule(_localctx, 442, JavaParser::RuleLeftHandSide);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3234);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3231);
      expressionName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3232);
      fieldAccess();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3233);
      arrayAccess();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentOperatorContext ------------------------------------------------------------------

JavaParser::AssignmentOperatorContext::AssignmentOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::AssignmentOperatorContext::getRuleIndex() const {
  return JavaParser::RuleAssignmentOperator;
}

void JavaParser::AssignmentOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentOperator(this);
}

void JavaParser::AssignmentOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentOperator(this);
}

JavaParser::AssignmentOperatorContext* JavaParser::assignmentOperator() {
  AssignmentOperatorContext *_localctx = _tracker.createInstance<AssignmentOperatorContext>(_ctx, getState());
  enterRule(_localctx, 444, JavaParser::RuleAssignmentOperator);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3236);
    _la = _input->LA(1);
    if (!(((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & ((1ULL << (JavaParser::ASSIGN - 80))
      | (1ULL << (JavaParser::ADD_ASSIGN - 80))
      | (1ULL << (JavaParser::SUB_ASSIGN - 80))
      | (1ULL << (JavaParser::MUL_ASSIGN - 80))
      | (1ULL << (JavaParser::DIV_ASSIGN - 80))
      | (1ULL << (JavaParser::AND_ASSIGN - 80))
      | (1ULL << (JavaParser::OR_ASSIGN - 80))
      | (1ULL << (JavaParser::XOR_ASSIGN - 80))
      | (1ULL << (JavaParser::MOD_ASSIGN - 80))
      | (1ULL << (JavaParser::LSHIFT_ASSIGN - 80))
      | (1ULL << (JavaParser::RSHIFT_ASSIGN - 80))
      | (1ULL << (JavaParser::URSHIFT_ASSIGN - 80)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

JavaParser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConditionalOrExpressionContext* JavaParser::ConditionalExpressionContext::conditionalOrExpression() {
  return getRuleContext<JavaParser::ConditionalOrExpressionContext>(0);
}

JavaParser::ExpressionContext* JavaParser::ConditionalExpressionContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ConditionalExpressionContext* JavaParser::ConditionalExpressionContext::conditionalExpression() {
  return getRuleContext<JavaParser::ConditionalExpressionContext>(0);
}

JavaParser::LambdaExpressionContext* JavaParser::ConditionalExpressionContext::lambdaExpression() {
  return getRuleContext<JavaParser::LambdaExpressionContext>(0);
}


size_t JavaParser::ConditionalExpressionContext::getRuleIndex() const {
  return JavaParser::RuleConditionalExpression;
}

void JavaParser::ConditionalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalExpression(this);
}

void JavaParser::ConditionalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalExpression(this);
}

JavaParser::ConditionalExpressionContext* JavaParser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 446, JavaParser::RuleConditionalExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3247);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 316, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3238);
      conditionalOrExpression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3239);
      conditionalOrExpression(0);
      setState(3240);
      match(JavaParser::QUESTION);
      setState(3241);
      expression();
      setState(3242);
      match(JavaParser::COLON);
      setState(3245);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx)) {
      case 1: {
        setState(3243);
        conditionalExpression();
        break;
      }

      case 2: {
        setState(3244);
        lambdaExpression();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalOrExpressionContext ------------------------------------------------------------------

JavaParser::ConditionalOrExpressionContext::ConditionalOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConditionalAndExpressionContext* JavaParser::ConditionalOrExpressionContext::conditionalAndExpression() {
  return getRuleContext<JavaParser::ConditionalAndExpressionContext>(0);
}

JavaParser::ConditionalOrExpressionContext* JavaParser::ConditionalOrExpressionContext::conditionalOrExpression() {
  return getRuleContext<JavaParser::ConditionalOrExpressionContext>(0);
}


size_t JavaParser::ConditionalOrExpressionContext::getRuleIndex() const {
  return JavaParser::RuleConditionalOrExpression;
}

void JavaParser::ConditionalOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalOrExpression(this);
}

void JavaParser::ConditionalOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalOrExpression(this);
}


JavaParser::ConditionalOrExpressionContext* JavaParser::conditionalOrExpression() {
   return conditionalOrExpression(0);
}

JavaParser::ConditionalOrExpressionContext* JavaParser::conditionalOrExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::ConditionalOrExpressionContext *_localctx = _tracker.createInstance<ConditionalOrExpressionContext>(_ctx, parentState);
  JavaParser::ConditionalOrExpressionContext *previousContext = _localctx;
  size_t startState = 448;
  enterRecursionRule(_localctx, 448, JavaParser::RuleConditionalOrExpression, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3250);
    conditionalAndExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(3257);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ConditionalOrExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleConditionalOrExpression);
        setState(3252);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3253);
        match(JavaParser::OR);
        setState(3254);
        conditionalAndExpression(0); 
      }
      setState(3259);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ConditionalAndExpressionContext ------------------------------------------------------------------

JavaParser::ConditionalAndExpressionContext::ConditionalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::InclusiveOrExpressionContext* JavaParser::ConditionalAndExpressionContext::inclusiveOrExpression() {
  return getRuleContext<JavaParser::InclusiveOrExpressionContext>(0);
}

JavaParser::ConditionalAndExpressionContext* JavaParser::ConditionalAndExpressionContext::conditionalAndExpression() {
  return getRuleContext<JavaParser::ConditionalAndExpressionContext>(0);
}


size_t JavaParser::ConditionalAndExpressionContext::getRuleIndex() const {
  return JavaParser::RuleConditionalAndExpression;
}

void JavaParser::ConditionalAndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalAndExpression(this);
}

void JavaParser::ConditionalAndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalAndExpression(this);
}


JavaParser::ConditionalAndExpressionContext* JavaParser::conditionalAndExpression() {
   return conditionalAndExpression(0);
}

JavaParser::ConditionalAndExpressionContext* JavaParser::conditionalAndExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::ConditionalAndExpressionContext *_localctx = _tracker.createInstance<ConditionalAndExpressionContext>(_ctx, parentState);
  JavaParser::ConditionalAndExpressionContext *previousContext = _localctx;
  size_t startState = 450;
  enterRecursionRule(_localctx, 450, JavaParser::RuleConditionalAndExpression, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3261);
    inclusiveOrExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(3268);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ConditionalAndExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleConditionalAndExpression);
        setState(3263);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3264);
        match(JavaParser::AND);
        setState(3265);
        inclusiveOrExpression(0); 
      }
      setState(3270);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- InclusiveOrExpressionContext ------------------------------------------------------------------

JavaParser::InclusiveOrExpressionContext::InclusiveOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExclusiveOrExpressionContext* JavaParser::InclusiveOrExpressionContext::exclusiveOrExpression() {
  return getRuleContext<JavaParser::ExclusiveOrExpressionContext>(0);
}

JavaParser::InclusiveOrExpressionContext* JavaParser::InclusiveOrExpressionContext::inclusiveOrExpression() {
  return getRuleContext<JavaParser::InclusiveOrExpressionContext>(0);
}


size_t JavaParser::InclusiveOrExpressionContext::getRuleIndex() const {
  return JavaParser::RuleInclusiveOrExpression;
}

void JavaParser::InclusiveOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInclusiveOrExpression(this);
}

void JavaParser::InclusiveOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInclusiveOrExpression(this);
}


JavaParser::InclusiveOrExpressionContext* JavaParser::inclusiveOrExpression() {
   return inclusiveOrExpression(0);
}

JavaParser::InclusiveOrExpressionContext* JavaParser::inclusiveOrExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::InclusiveOrExpressionContext *_localctx = _tracker.createInstance<InclusiveOrExpressionContext>(_ctx, parentState);
  JavaParser::InclusiveOrExpressionContext *previousContext = _localctx;
  size_t startState = 452;
  enterRecursionRule(_localctx, 452, JavaParser::RuleInclusiveOrExpression, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3272);
    exclusiveOrExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(3279);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<InclusiveOrExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleInclusiveOrExpression);
        setState(3274);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3275);
        match(JavaParser::BITOR);
        setState(3276);
        exclusiveOrExpression(0); 
      }
      setState(3281);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExclusiveOrExpressionContext ------------------------------------------------------------------

JavaParser::ExclusiveOrExpressionContext::ExclusiveOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AndExpressionContext* JavaParser::ExclusiveOrExpressionContext::andExpression() {
  return getRuleContext<JavaParser::AndExpressionContext>(0);
}

JavaParser::ExclusiveOrExpressionContext* JavaParser::ExclusiveOrExpressionContext::exclusiveOrExpression() {
  return getRuleContext<JavaParser::ExclusiveOrExpressionContext>(0);
}


size_t JavaParser::ExclusiveOrExpressionContext::getRuleIndex() const {
  return JavaParser::RuleExclusiveOrExpression;
}

void JavaParser::ExclusiveOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExclusiveOrExpression(this);
}

void JavaParser::ExclusiveOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExclusiveOrExpression(this);
}


JavaParser::ExclusiveOrExpressionContext* JavaParser::exclusiveOrExpression() {
   return exclusiveOrExpression(0);
}

JavaParser::ExclusiveOrExpressionContext* JavaParser::exclusiveOrExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::ExclusiveOrExpressionContext *_localctx = _tracker.createInstance<ExclusiveOrExpressionContext>(_ctx, parentState);
  JavaParser::ExclusiveOrExpressionContext *previousContext = _localctx;
  size_t startState = 454;
  enterRecursionRule(_localctx, 454, JavaParser::RuleExclusiveOrExpression, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3283);
    andExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(3290);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ExclusiveOrExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleExclusiveOrExpression);
        setState(3285);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3286);
        match(JavaParser::CARET);
        setState(3287);
        andExpression(0); 
      }
      setState(3292);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AndExpressionContext ------------------------------------------------------------------

JavaParser::AndExpressionContext::AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::EqualityExpressionContext* JavaParser::AndExpressionContext::equalityExpression() {
  return getRuleContext<JavaParser::EqualityExpressionContext>(0);
}

JavaParser::AndExpressionContext* JavaParser::AndExpressionContext::andExpression() {
  return getRuleContext<JavaParser::AndExpressionContext>(0);
}


size_t JavaParser::AndExpressionContext::getRuleIndex() const {
  return JavaParser::RuleAndExpression;
}

void JavaParser::AndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAndExpression(this);
}

void JavaParser::AndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAndExpression(this);
}


JavaParser::AndExpressionContext* JavaParser::andExpression() {
   return andExpression(0);
}

JavaParser::AndExpressionContext* JavaParser::andExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::AndExpressionContext *_localctx = _tracker.createInstance<AndExpressionContext>(_ctx, parentState);
  JavaParser::AndExpressionContext *previousContext = _localctx;
  size_t startState = 456;
  enterRecursionRule(_localctx, 456, JavaParser::RuleAndExpression, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3294);
    equalityExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(3301);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<AndExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleAndExpression);
        setState(3296);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(3297);
        match(JavaParser::BITAND);
        setState(3298);
        equalityExpression(0); 
      }
      setState(3303);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

JavaParser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::RelationalExpressionContext* JavaParser::EqualityExpressionContext::relationalExpression() {
  return getRuleContext<JavaParser::RelationalExpressionContext>(0);
}

JavaParser::EqualityExpressionContext* JavaParser::EqualityExpressionContext::equalityExpression() {
  return getRuleContext<JavaParser::EqualityExpressionContext>(0);
}


size_t JavaParser::EqualityExpressionContext::getRuleIndex() const {
  return JavaParser::RuleEqualityExpression;
}

void JavaParser::EqualityExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityExpression(this);
}

void JavaParser::EqualityExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityExpression(this);
}


JavaParser::EqualityExpressionContext* JavaParser::equalityExpression() {
   return equalityExpression(0);
}

JavaParser::EqualityExpressionContext* JavaParser::equalityExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, parentState);
  JavaParser::EqualityExpressionContext *previousContext = _localctx;
  size_t startState = 458;
  enterRecursionRule(_localctx, 458, JavaParser::RuleEqualityExpression, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3305);
    relationalExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(3315);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3313);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<EqualityExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleEqualityExpression);
          setState(3307);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(3308);
          match(JavaParser::EQUAL);
          setState(3309);
          relationalExpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<EqualityExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleEqualityExpression);
          setState(3310);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(3311);
          match(JavaParser::NOTEQUAL);
          setState(3312);
          relationalExpression(0);
          break;
        }

        } 
      }
      setState(3317);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

JavaParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ShiftExpressionContext* JavaParser::RelationalExpressionContext::shiftExpression() {
  return getRuleContext<JavaParser::ShiftExpressionContext>(0);
}

JavaParser::RelationalExpressionContext* JavaParser::RelationalExpressionContext::relationalExpression() {
  return getRuleContext<JavaParser::RelationalExpressionContext>(0);
}

JavaParser::ReferenceTypeContext* JavaParser::RelationalExpressionContext::referenceType() {
  return getRuleContext<JavaParser::ReferenceTypeContext>(0);
}


size_t JavaParser::RelationalExpressionContext::getRuleIndex() const {
  return JavaParser::RuleRelationalExpression;
}

void JavaParser::RelationalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression(this);
}

void JavaParser::RelationalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression(this);
}


JavaParser::RelationalExpressionContext* JavaParser::relationalExpression() {
   return relationalExpression(0);
}

JavaParser::RelationalExpressionContext* JavaParser::relationalExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, parentState);
  JavaParser::RelationalExpressionContext *previousContext = _localctx;
  size_t startState = 460;
  enterRecursionRule(_localctx, 460, JavaParser::RuleRelationalExpression, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3319);
    shiftExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(3338);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3336);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<RelationalExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalExpression);
          setState(3321);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(3322);
          match(JavaParser::LT);
          setState(3323);
          shiftExpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<RelationalExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalExpression);
          setState(3324);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(3325);
          match(JavaParser::GT);
          setState(3326);
          shiftExpression(0);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<RelationalExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalExpression);
          setState(3327);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(3328);
          match(JavaParser::LE);
          setState(3329);
          shiftExpression(0);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<RelationalExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalExpression);
          setState(3330);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(3331);
          match(JavaParser::GE);
          setState(3332);
          shiftExpression(0);
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<RelationalExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalExpression);
          setState(3333);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(3334);
          match(JavaParser::INSTANCEOF);
          setState(3335);
          referenceType();
          break;
        }

        } 
      }
      setState(3340);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ShiftExpressionContext ------------------------------------------------------------------

JavaParser::ShiftExpressionContext::ShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AdditiveExpressionContext* JavaParser::ShiftExpressionContext::additiveExpression() {
  return getRuleContext<JavaParser::AdditiveExpressionContext>(0);
}

JavaParser::ShiftExpressionContext* JavaParser::ShiftExpressionContext::shiftExpression() {
  return getRuleContext<JavaParser::ShiftExpressionContext>(0);
}


size_t JavaParser::ShiftExpressionContext::getRuleIndex() const {
  return JavaParser::RuleShiftExpression;
}

void JavaParser::ShiftExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftExpression(this);
}

void JavaParser::ShiftExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftExpression(this);
}


JavaParser::ShiftExpressionContext* JavaParser::shiftExpression() {
   return shiftExpression(0);
}

JavaParser::ShiftExpressionContext* JavaParser::shiftExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::ShiftExpressionContext *_localctx = _tracker.createInstance<ShiftExpressionContext>(_ctx, parentState);
  JavaParser::ShiftExpressionContext *previousContext = _localctx;
  size_t startState = 462;
  enterRecursionRule(_localctx, 462, JavaParser::RuleShiftExpression, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3342);
    additiveExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(3359);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3357);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ShiftExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShiftExpression);
          setState(3344);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(3345);
          match(JavaParser::LT);
          setState(3346);
          match(JavaParser::LT);
          setState(3347);
          additiveExpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ShiftExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShiftExpression);
          setState(3348);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(3349);
          match(JavaParser::GT);
          setState(3350);
          match(JavaParser::GT);
          setState(3351);
          additiveExpression(0);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ShiftExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShiftExpression);
          setState(3352);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(3353);
          match(JavaParser::GT);
          setState(3354);
          match(JavaParser::GT);
          setState(3355);
          match(JavaParser::GT);
          setState(3356);
          additiveExpression(0);
          break;
        }

        } 
      }
      setState(3361);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

JavaParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::MultiplicativeExpressionContext* JavaParser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContext<JavaParser::MultiplicativeExpressionContext>(0);
}

JavaParser::AdditiveExpressionContext* JavaParser::AdditiveExpressionContext::additiveExpression() {
  return getRuleContext<JavaParser::AdditiveExpressionContext>(0);
}


size_t JavaParser::AdditiveExpressionContext::getRuleIndex() const {
  return JavaParser::RuleAdditiveExpression;
}

void JavaParser::AdditiveExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveExpression(this);
}

void JavaParser::AdditiveExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveExpression(this);
}


JavaParser::AdditiveExpressionContext* JavaParser::additiveExpression() {
   return additiveExpression(0);
}

JavaParser::AdditiveExpressionContext* JavaParser::additiveExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, parentState);
  JavaParser::AdditiveExpressionContext *previousContext = _localctx;
  size_t startState = 464;
  enterRecursionRule(_localctx, 464, JavaParser::RuleAdditiveExpression, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3363);
    multiplicativeExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(3373);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3371);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleAdditiveExpression);
          setState(3365);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(3366);
          match(JavaParser::ADD);
          setState(3367);
          multiplicativeExpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleAdditiveExpression);
          setState(3368);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(3369);
          match(JavaParser::SUB);
          setState(3370);
          multiplicativeExpression(0);
          break;
        }

        } 
      }
      setState(3375);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

JavaParser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnaryExpressionContext* JavaParser::MultiplicativeExpressionContext::unaryExpression() {
  return getRuleContext<JavaParser::UnaryExpressionContext>(0);
}

JavaParser::MultiplicativeExpressionContext* JavaParser::MultiplicativeExpressionContext::multiplicativeExpression() {
  return getRuleContext<JavaParser::MultiplicativeExpressionContext>(0);
}


size_t JavaParser::MultiplicativeExpressionContext::getRuleIndex() const {
  return JavaParser::RuleMultiplicativeExpression;
}

void JavaParser::MultiplicativeExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeExpression(this);
}

void JavaParser::MultiplicativeExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeExpression(this);
}


JavaParser::MultiplicativeExpressionContext* JavaParser::multiplicativeExpression() {
   return multiplicativeExpression(0);
}

JavaParser::MultiplicativeExpressionContext* JavaParser::multiplicativeExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, parentState);
  JavaParser::MultiplicativeExpressionContext *previousContext = _localctx;
  size_t startState = 466;
  enterRecursionRule(_localctx, 466, JavaParser::RuleMultiplicativeExpression, precedence);

    

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3377);
    unaryExpression();
    _ctx->stop = _input->LT(-1);
    setState(3390);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3388);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<MultiplicativeExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMultiplicativeExpression);
          setState(3379);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(3380);
          match(JavaParser::MUL);
          setState(3381);
          unaryExpression();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<MultiplicativeExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMultiplicativeExpression);
          setState(3382);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(3383);
          match(JavaParser::DIV);
          setState(3384);
          unaryExpression();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<MultiplicativeExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMultiplicativeExpression);
          setState(3385);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(3386);
          match(JavaParser::MOD);
          setState(3387);
          unaryExpression();
          break;
        }

        } 
      }
      setState(3392);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

JavaParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PreIncrementExpressionContext* JavaParser::UnaryExpressionContext::preIncrementExpression() {
  return getRuleContext<JavaParser::PreIncrementExpressionContext>(0);
}

JavaParser::PreDecrementExpressionContext* JavaParser::UnaryExpressionContext::preDecrementExpression() {
  return getRuleContext<JavaParser::PreDecrementExpressionContext>(0);
}

JavaParser::UnaryExpressionContext* JavaParser::UnaryExpressionContext::unaryExpression() {
  return getRuleContext<JavaParser::UnaryExpressionContext>(0);
}

JavaParser::UnaryExpressionNotPlusMinusContext* JavaParser::UnaryExpressionContext::unaryExpressionNotPlusMinus() {
  return getRuleContext<JavaParser::UnaryExpressionNotPlusMinusContext>(0);
}


size_t JavaParser::UnaryExpressionContext::getRuleIndex() const {
  return JavaParser::RuleUnaryExpression;
}

void JavaParser::UnaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression(this);
}

void JavaParser::UnaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression(this);
}

JavaParser::UnaryExpressionContext* JavaParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 468, JavaParser::RuleUnaryExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3400);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::INC: {
        enterOuterAlt(_localctx, 1);
        setState(3393);
        preIncrementExpression();
        break;
      }

      case JavaParser::DEC: {
        enterOuterAlt(_localctx, 2);
        setState(3394);
        preDecrementExpression();
        break;
      }

      case JavaParser::ADD: {
        enterOuterAlt(_localctx, 3);
        setState(3395);
        match(JavaParser::ADD);
        setState(3396);
        unaryExpression();
        break;
      }

      case JavaParser::SUB: {
        enterOuterAlt(_localctx, 4);
        setState(3397);
        match(JavaParser::SUB);
        setState(3398);
        unaryExpression();
        break;
      }

      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::IntegerLiteral:
      case JavaParser::FloatingPointLiteral:
      case JavaParser::BooleanLiteral:
      case JavaParser::CharacterLiteral:
      case JavaParser::StringLiteral:
      case JavaParser::NullLiteral:
      case JavaParser::LPAREN:
      case JavaParser::AT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 5);
        setState(3399);
        unaryExpressionNotPlusMinus();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PreIncrementExpressionContext ------------------------------------------------------------------

JavaParser::PreIncrementExpressionContext::PreIncrementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnaryExpressionContext* JavaParser::PreIncrementExpressionContext::unaryExpression() {
  return getRuleContext<JavaParser::UnaryExpressionContext>(0);
}


size_t JavaParser::PreIncrementExpressionContext::getRuleIndex() const {
  return JavaParser::RulePreIncrementExpression;
}

void JavaParser::PreIncrementExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPreIncrementExpression(this);
}

void JavaParser::PreIncrementExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPreIncrementExpression(this);
}

JavaParser::PreIncrementExpressionContext* JavaParser::preIncrementExpression() {
  PreIncrementExpressionContext *_localctx = _tracker.createInstance<PreIncrementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 470, JavaParser::RulePreIncrementExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3402);
    match(JavaParser::INC);
    setState(3403);
    unaryExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PreDecrementExpressionContext ------------------------------------------------------------------

JavaParser::PreDecrementExpressionContext::PreDecrementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnaryExpressionContext* JavaParser::PreDecrementExpressionContext::unaryExpression() {
  return getRuleContext<JavaParser::UnaryExpressionContext>(0);
}


size_t JavaParser::PreDecrementExpressionContext::getRuleIndex() const {
  return JavaParser::RulePreDecrementExpression;
}

void JavaParser::PreDecrementExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPreDecrementExpression(this);
}

void JavaParser::PreDecrementExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPreDecrementExpression(this);
}

JavaParser::PreDecrementExpressionContext* JavaParser::preDecrementExpression() {
  PreDecrementExpressionContext *_localctx = _tracker.createInstance<PreDecrementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 472, JavaParser::RulePreDecrementExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3405);
    match(JavaParser::DEC);
    setState(3406);
    unaryExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionNotPlusMinusContext ------------------------------------------------------------------

JavaParser::UnaryExpressionNotPlusMinusContext::UnaryExpressionNotPlusMinusContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PostfixExpressionContext* JavaParser::UnaryExpressionNotPlusMinusContext::postfixExpression() {
  return getRuleContext<JavaParser::PostfixExpressionContext>(0);
}

JavaParser::UnaryExpressionContext* JavaParser::UnaryExpressionNotPlusMinusContext::unaryExpression() {
  return getRuleContext<JavaParser::UnaryExpressionContext>(0);
}

JavaParser::CastExpressionContext* JavaParser::UnaryExpressionNotPlusMinusContext::castExpression() {
  return getRuleContext<JavaParser::CastExpressionContext>(0);
}


size_t JavaParser::UnaryExpressionNotPlusMinusContext::getRuleIndex() const {
  return JavaParser::RuleUnaryExpressionNotPlusMinus;
}

void JavaParser::UnaryExpressionNotPlusMinusContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpressionNotPlusMinus(this);
}

void JavaParser::UnaryExpressionNotPlusMinusContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpressionNotPlusMinus(this);
}

JavaParser::UnaryExpressionNotPlusMinusContext* JavaParser::unaryExpressionNotPlusMinus() {
  UnaryExpressionNotPlusMinusContext *_localctx = _tracker.createInstance<UnaryExpressionNotPlusMinusContext>(_ctx, getState());
  enterRule(_localctx, 474, JavaParser::RuleUnaryExpressionNotPlusMinus);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3414);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3408);
      postfixExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3409);
      match(JavaParser::TILDE);
      setState(3410);
      unaryExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3411);
      match(JavaParser::BANG);
      setState(3412);
      unaryExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3413);
      castExpression();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExpressionContext ------------------------------------------------------------------

JavaParser::PostfixExpressionContext::PostfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimaryContext* JavaParser::PostfixExpressionContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}

JavaParser::ExpressionNameContext* JavaParser::PostfixExpressionContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

std::vector<JavaParser::PostIncrementExpression_lf_postfixExpressionContext *> JavaParser::PostfixExpressionContext::postIncrementExpression_lf_postfixExpression() {
  return getRuleContexts<JavaParser::PostIncrementExpression_lf_postfixExpressionContext>();
}

JavaParser::PostIncrementExpression_lf_postfixExpressionContext* JavaParser::PostfixExpressionContext::postIncrementExpression_lf_postfixExpression(size_t i) {
  return getRuleContext<JavaParser::PostIncrementExpression_lf_postfixExpressionContext>(i);
}

std::vector<JavaParser::PostDecrementExpression_lf_postfixExpressionContext *> JavaParser::PostfixExpressionContext::postDecrementExpression_lf_postfixExpression() {
  return getRuleContexts<JavaParser::PostDecrementExpression_lf_postfixExpressionContext>();
}

JavaParser::PostDecrementExpression_lf_postfixExpressionContext* JavaParser::PostfixExpressionContext::postDecrementExpression_lf_postfixExpression(size_t i) {
  return getRuleContext<JavaParser::PostDecrementExpression_lf_postfixExpressionContext>(i);
}


size_t JavaParser::PostfixExpressionContext::getRuleIndex() const {
  return JavaParser::RulePostfixExpression;
}

void JavaParser::PostfixExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostfixExpression(this);
}

void JavaParser::PostfixExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostfixExpression(this);
}

JavaParser::PostfixExpressionContext* JavaParser::postfixExpression() {
  PostfixExpressionContext *_localctx = _tracker.createInstance<PostfixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 476, JavaParser::RulePostfixExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3418);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
    case 1: {
      setState(3416);
      primary();
      break;
    }

    case 2: {
      setState(3417);
      expressionName();
      break;
    }

    }
    setState(3424);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3422);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case JavaParser::INC: {
            setState(3420);
            postIncrementExpression_lf_postfixExpression();
            break;
          }

          case JavaParser::DEC: {
            setState(3421);
            postDecrementExpression_lf_postfixExpression();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(3426);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostIncrementExpressionContext ------------------------------------------------------------------

JavaParser::PostIncrementExpressionContext::PostIncrementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PostfixExpressionContext* JavaParser::PostIncrementExpressionContext::postfixExpression() {
  return getRuleContext<JavaParser::PostfixExpressionContext>(0);
}


size_t JavaParser::PostIncrementExpressionContext::getRuleIndex() const {
  return JavaParser::RulePostIncrementExpression;
}

void JavaParser::PostIncrementExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostIncrementExpression(this);
}

void JavaParser::PostIncrementExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostIncrementExpression(this);
}

JavaParser::PostIncrementExpressionContext* JavaParser::postIncrementExpression() {
  PostIncrementExpressionContext *_localctx = _tracker.createInstance<PostIncrementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 478, JavaParser::RulePostIncrementExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3427);
    postfixExpression();
    setState(3428);
    match(JavaParser::INC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostIncrementExpression_lf_postfixExpressionContext ------------------------------------------------------------------

JavaParser::PostIncrementExpression_lf_postfixExpressionContext::PostIncrementExpression_lf_postfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::PostIncrementExpression_lf_postfixExpressionContext::getRuleIndex() const {
  return JavaParser::RulePostIncrementExpression_lf_postfixExpression;
}

void JavaParser::PostIncrementExpression_lf_postfixExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostIncrementExpression_lf_postfixExpression(this);
}

void JavaParser::PostIncrementExpression_lf_postfixExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostIncrementExpression_lf_postfixExpression(this);
}

JavaParser::PostIncrementExpression_lf_postfixExpressionContext* JavaParser::postIncrementExpression_lf_postfixExpression() {
  PostIncrementExpression_lf_postfixExpressionContext *_localctx = _tracker.createInstance<PostIncrementExpression_lf_postfixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 480, JavaParser::RulePostIncrementExpression_lf_postfixExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3430);
    match(JavaParser::INC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostDecrementExpressionContext ------------------------------------------------------------------

JavaParser::PostDecrementExpressionContext::PostDecrementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PostfixExpressionContext* JavaParser::PostDecrementExpressionContext::postfixExpression() {
  return getRuleContext<JavaParser::PostfixExpressionContext>(0);
}


size_t JavaParser::PostDecrementExpressionContext::getRuleIndex() const {
  return JavaParser::RulePostDecrementExpression;
}

void JavaParser::PostDecrementExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostDecrementExpression(this);
}

void JavaParser::PostDecrementExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostDecrementExpression(this);
}

JavaParser::PostDecrementExpressionContext* JavaParser::postDecrementExpression() {
  PostDecrementExpressionContext *_localctx = _tracker.createInstance<PostDecrementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 482, JavaParser::RulePostDecrementExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3432);
    postfixExpression();
    setState(3433);
    match(JavaParser::DEC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostDecrementExpression_lf_postfixExpressionContext ------------------------------------------------------------------

JavaParser::PostDecrementExpression_lf_postfixExpressionContext::PostDecrementExpression_lf_postfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::PostDecrementExpression_lf_postfixExpressionContext::getRuleIndex() const {
  return JavaParser::RulePostDecrementExpression_lf_postfixExpression;
}

void JavaParser::PostDecrementExpression_lf_postfixExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostDecrementExpression_lf_postfixExpression(this);
}

void JavaParser::PostDecrementExpression_lf_postfixExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostDecrementExpression_lf_postfixExpression(this);
}

JavaParser::PostDecrementExpression_lf_postfixExpressionContext* JavaParser::postDecrementExpression_lf_postfixExpression() {
  PostDecrementExpression_lf_postfixExpressionContext *_localctx = _tracker.createInstance<PostDecrementExpression_lf_postfixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 484, JavaParser::RulePostDecrementExpression_lf_postfixExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3435);
    match(JavaParser::DEC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastExpressionContext ------------------------------------------------------------------

JavaParser::CastExpressionContext::CastExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimitiveTypeContext* JavaParser::CastExpressionContext::primitiveType() {
  return getRuleContext<JavaParser::PrimitiveTypeContext>(0);
}

JavaParser::UnaryExpressionContext* JavaParser::CastExpressionContext::unaryExpression() {
  return getRuleContext<JavaParser::UnaryExpressionContext>(0);
}

JavaParser::ReferenceTypeContext* JavaParser::CastExpressionContext::referenceType() {
  return getRuleContext<JavaParser::ReferenceTypeContext>(0);
}

JavaParser::UnaryExpressionNotPlusMinusContext* JavaParser::CastExpressionContext::unaryExpressionNotPlusMinus() {
  return getRuleContext<JavaParser::UnaryExpressionNotPlusMinusContext>(0);
}

std::vector<JavaParser::AdditionalBoundContext *> JavaParser::CastExpressionContext::additionalBound() {
  return getRuleContexts<JavaParser::AdditionalBoundContext>();
}

JavaParser::AdditionalBoundContext* JavaParser::CastExpressionContext::additionalBound(size_t i) {
  return getRuleContext<JavaParser::AdditionalBoundContext>(i);
}

JavaParser::LambdaExpressionContext* JavaParser::CastExpressionContext::lambdaExpression() {
  return getRuleContext<JavaParser::LambdaExpressionContext>(0);
}


size_t JavaParser::CastExpressionContext::getRuleIndex() const {
  return JavaParser::RuleCastExpression;
}

void JavaParser::CastExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCastExpression(this);
}

void JavaParser::CastExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCastExpression(this);
}

JavaParser::CastExpressionContext* JavaParser::castExpression() {
  CastExpressionContext *_localctx = _tracker.createInstance<CastExpressionContext>(_ctx, getState());
  enterRule(_localctx, 486, JavaParser::RuleCastExpression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3464);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3437);
      match(JavaParser::LPAREN);
      setState(3438);
      primitiveType();
      setState(3439);
      match(JavaParser::RPAREN);
      setState(3440);
      unaryExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3442);
      match(JavaParser::LPAREN);
      setState(3443);
      referenceType();
      setState(3447);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::BITAND) {
        setState(3444);
        additionalBound();
        setState(3449);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3450);
      match(JavaParser::RPAREN);
      setState(3451);
      unaryExpressionNotPlusMinus();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3453);
      match(JavaParser::LPAREN);
      setState(3454);
      referenceType();
      setState(3458);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::BITAND) {
        setState(3455);
        additionalBound();
        setState(3460);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3461);
      match(JavaParser::RPAREN);
      setState(3462);
      lambdaExpression();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_DropletFileContext ------------------------------------------------------------------

JavaParser::Literal_DropletFileContext::Literal_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::Literal_DropletFileContext::IntegerLiteral() {
  return getToken(JavaParser::IntegerLiteral, 0);
}

tree::TerminalNode* JavaParser::Literal_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

tree::TerminalNode* JavaParser::Literal_DropletFileContext::FloatingPointLiteral() {
  return getToken(JavaParser::FloatingPointLiteral, 0);
}

tree::TerminalNode* JavaParser::Literal_DropletFileContext::BooleanLiteral() {
  return getToken(JavaParser::BooleanLiteral, 0);
}

tree::TerminalNode* JavaParser::Literal_DropletFileContext::CharacterLiteral() {
  return getToken(JavaParser::CharacterLiteral, 0);
}

tree::TerminalNode* JavaParser::Literal_DropletFileContext::StringLiteral() {
  return getToken(JavaParser::StringLiteral, 0);
}

tree::TerminalNode* JavaParser::Literal_DropletFileContext::NullLiteral() {
  return getToken(JavaParser::NullLiteral, 0);
}


size_t JavaParser::Literal_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleLiteral_DropletFile;
}

void JavaParser::Literal_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_DropletFile(this);
}

void JavaParser::Literal_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_DropletFile(this);
}

JavaParser::Literal_DropletFileContext* JavaParser::literal_DropletFile() {
  Literal_DropletFileContext *_localctx = _tracker.createInstance<Literal_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 488, JavaParser::RuleLiteral_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3478);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::IntegerLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(3466);
        match(JavaParser::IntegerLiteral);
        setState(3467);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::FloatingPointLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(3468);
        match(JavaParser::FloatingPointLiteral);
        setState(3469);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::BooleanLiteral: {
        enterOuterAlt(_localctx, 3);
        setState(3470);
        match(JavaParser::BooleanLiteral);
        setState(3471);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::CharacterLiteral: {
        enterOuterAlt(_localctx, 4);
        setState(3472);
        match(JavaParser::CharacterLiteral);
        setState(3473);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::StringLiteral: {
        enterOuterAlt(_localctx, 5);
        setState(3474);
        match(JavaParser::StringLiteral);
        setState(3475);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::NullLiteral: {
        enterOuterAlt(_localctx, 6);
        setState(3476);
        match(JavaParser::NullLiteral);
        setState(3477);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveType_DropletFileContext ------------------------------------------------------------------

JavaParser::PrimitiveType_DropletFileContext::PrimitiveType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NumericTypeContext* JavaParser::PrimitiveType_DropletFileContext::numericType() {
  return getRuleContext<JavaParser::NumericTypeContext>(0);
}

tree::TerminalNode* JavaParser::PrimitiveType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::PrimitiveType_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::PrimitiveType_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::PrimitiveType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePrimitiveType_DropletFile;
}

void JavaParser::PrimitiveType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimitiveType_DropletFile(this);
}

void JavaParser::PrimitiveType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimitiveType_DropletFile(this);
}

JavaParser::PrimitiveType_DropletFileContext* JavaParser::primitiveType_DropletFile() {
  PrimitiveType_DropletFileContext *_localctx = _tracker.createInstance<PrimitiveType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 490, JavaParser::RulePrimitiveType_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3497);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3483);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(3480);
        annotation();
        setState(3485);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3486);
      numericType();
      setState(3487);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3492);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(3489);
        annotation();
        setState(3494);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3495);
      match(JavaParser::BOOLEAN);
      setState(3496);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericType_DropletFileContext ------------------------------------------------------------------

JavaParser::NumericType_DropletFileContext::NumericType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IntegralTypeContext* JavaParser::NumericType_DropletFileContext::integralType() {
  return getRuleContext<JavaParser::IntegralTypeContext>(0);
}

tree::TerminalNode* JavaParser::NumericType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::FloatingPointTypeContext* JavaParser::NumericType_DropletFileContext::floatingPointType() {
  return getRuleContext<JavaParser::FloatingPointTypeContext>(0);
}


size_t JavaParser::NumericType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleNumericType_DropletFile;
}

void JavaParser::NumericType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumericType_DropletFile(this);
}

void JavaParser::NumericType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumericType_DropletFile(this);
}

JavaParser::NumericType_DropletFileContext* JavaParser::numericType_DropletFile() {
  NumericType_DropletFileContext *_localctx = _tracker.createInstance<NumericType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 492, JavaParser::RuleNumericType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3505);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT: {
        enterOuterAlt(_localctx, 1);
        setState(3499);
        integralType();
        setState(3500);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::DOUBLE:
      case JavaParser::FLOAT: {
        enterOuterAlt(_localctx, 2);
        setState(3502);
        floatingPointType();
        setState(3503);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegralType_DropletFileContext ------------------------------------------------------------------

JavaParser::IntegralType_DropletFileContext::IntegralType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::IntegralType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::IntegralType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleIntegralType_DropletFile;
}

void JavaParser::IntegralType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntegralType_DropletFile(this);
}

void JavaParser::IntegralType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntegralType_DropletFile(this);
}

JavaParser::IntegralType_DropletFileContext* JavaParser::integralType_DropletFile() {
  IntegralType_DropletFileContext *_localctx = _tracker.createInstance<IntegralType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 494, JavaParser::RuleIntegralType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3517);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::BYTE: {
        enterOuterAlt(_localctx, 1);
        setState(3507);
        match(JavaParser::BYTE);
        setState(3508);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::SHORT: {
        enterOuterAlt(_localctx, 2);
        setState(3509);
        match(JavaParser::SHORT);
        setState(3510);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::INT: {
        enterOuterAlt(_localctx, 3);
        setState(3511);
        match(JavaParser::INT);
        setState(3512);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::LONG: {
        enterOuterAlt(_localctx, 4);
        setState(3513);
        match(JavaParser::LONG);
        setState(3514);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::CHAR: {
        enterOuterAlt(_localctx, 5);
        setState(3515);
        match(JavaParser::CHAR);
        setState(3516);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatingPointType_DropletFileContext ------------------------------------------------------------------

JavaParser::FloatingPointType_DropletFileContext::FloatingPointType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::FloatingPointType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::FloatingPointType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleFloatingPointType_DropletFile;
}

void JavaParser::FloatingPointType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFloatingPointType_DropletFile(this);
}

void JavaParser::FloatingPointType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFloatingPointType_DropletFile(this);
}

JavaParser::FloatingPointType_DropletFileContext* JavaParser::floatingPointType_DropletFile() {
  FloatingPointType_DropletFileContext *_localctx = _tracker.createInstance<FloatingPointType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 496, JavaParser::RuleFloatingPointType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3523);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::FLOAT: {
        enterOuterAlt(_localctx, 1);
        setState(3519);
        match(JavaParser::FLOAT);
        setState(3520);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::DOUBLE: {
        enterOuterAlt(_localctx, 2);
        setState(3521);
        match(JavaParser::DOUBLE);
        setState(3522);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceType_DropletFileContext ------------------------------------------------------------------

JavaParser::ReferenceType_DropletFileContext::ReferenceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ReferenceType_DropletFileContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

tree::TerminalNode* JavaParser::ReferenceType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeVariableContext* JavaParser::ReferenceType_DropletFileContext::typeVariable() {
  return getRuleContext<JavaParser::TypeVariableContext>(0);
}

JavaParser::ArrayTypeContext* JavaParser::ReferenceType_DropletFileContext::arrayType() {
  return getRuleContext<JavaParser::ArrayTypeContext>(0);
}


size_t JavaParser::ReferenceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleReferenceType_DropletFile;
}

void JavaParser::ReferenceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReferenceType_DropletFile(this);
}

void JavaParser::ReferenceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReferenceType_DropletFile(this);
}

JavaParser::ReferenceType_DropletFileContext* JavaParser::referenceType_DropletFile() {
  ReferenceType_DropletFileContext *_localctx = _tracker.createInstance<ReferenceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 498, JavaParser::RuleReferenceType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3534);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3525);
      classOrInterfaceType();
      setState(3526);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3528);
      typeVariable();
      setState(3529);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3531);
      arrayType();
      setState(3532);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassOrInterfaceType_DropletFileContext ------------------------------------------------------------------

JavaParser::ClassOrInterfaceType_DropletFileContext::ClassOrInterfaceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassType_lfno_classOrInterfaceTypeContext* JavaParser::ClassOrInterfaceType_DropletFileContext::classType_lfno_classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassType_lfno_classOrInterfaceTypeContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::ClassOrInterfaceType_DropletFileContext::EOF() {
  return getTokens(JavaParser::EOF);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceType_DropletFileContext::EOF(size_t i) {
  return getToken(JavaParser::EOF, i);
}

JavaParser::InterfaceType_lfno_classOrInterfaceTypeContext* JavaParser::ClassOrInterfaceType_DropletFileContext::interfaceType_lfno_classOrInterfaceType() {
  return getRuleContext<JavaParser::InterfaceType_lfno_classOrInterfaceTypeContext>(0);
}

std::vector<JavaParser::ClassType_lf_classOrInterfaceTypeContext *> JavaParser::ClassOrInterfaceType_DropletFileContext::classType_lf_classOrInterfaceType() {
  return getRuleContexts<JavaParser::ClassType_lf_classOrInterfaceTypeContext>();
}

JavaParser::ClassType_lf_classOrInterfaceTypeContext* JavaParser::ClassOrInterfaceType_DropletFileContext::classType_lf_classOrInterfaceType(size_t i) {
  return getRuleContext<JavaParser::ClassType_lf_classOrInterfaceTypeContext>(i);
}

std::vector<JavaParser::InterfaceType_lf_classOrInterfaceTypeContext *> JavaParser::ClassOrInterfaceType_DropletFileContext::interfaceType_lf_classOrInterfaceType() {
  return getRuleContexts<JavaParser::InterfaceType_lf_classOrInterfaceTypeContext>();
}

JavaParser::InterfaceType_lf_classOrInterfaceTypeContext* JavaParser::ClassOrInterfaceType_DropletFileContext::interfaceType_lf_classOrInterfaceType(size_t i) {
  return getRuleContext<JavaParser::InterfaceType_lf_classOrInterfaceTypeContext>(i);
}


size_t JavaParser::ClassOrInterfaceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleClassOrInterfaceType_DropletFile;
}

void JavaParser::ClassOrInterfaceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassOrInterfaceType_DropletFile(this);
}

void JavaParser::ClassOrInterfaceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassOrInterfaceType_DropletFile(this);
}

JavaParser::ClassOrInterfaceType_DropletFileContext* JavaParser::classOrInterfaceType_DropletFile() {
  ClassOrInterfaceType_DropletFileContext *_localctx = _tracker.createInstance<ClassOrInterfaceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 500, JavaParser::RuleClassOrInterfaceType_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3542);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx)) {
    case 1: {
      setState(3536);
      classType_lfno_classOrInterfaceType();
      setState(3537);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      setState(3539);
      interfaceType_lfno_classOrInterfaceType();
      setState(3540);
      match(JavaParser::EOF);
      break;
    }

    }
    setState(3552);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::DOT) {
      setState(3550);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx)) {
      case 1: {
        setState(3544);
        classType_lf_classOrInterfaceType();
        setState(3545);
        match(JavaParser::EOF);
        break;
      }

      case 2: {
        setState(3547);
        interfaceType_lf_classOrInterfaceType();
        setState(3548);
        match(JavaParser::EOF);
        break;
      }

      }
      setState(3554);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassType_DropletFileContext ------------------------------------------------------------------

JavaParser::ClassType_DropletFileContext::ClassType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ClassType_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::ClassType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassType_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassType_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassType_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ClassType_DropletFileContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}


size_t JavaParser::ClassType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleClassType_DropletFile;
}

void JavaParser::ClassType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassType_DropletFile(this);
}

void JavaParser::ClassType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassType_DropletFile(this);
}

JavaParser::ClassType_DropletFileContext* JavaParser::classType_DropletFile() {
  ClassType_DropletFileContext *_localctx = _tracker.createInstance<ClassType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 502, JavaParser::RuleClassType_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3581);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3558);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(3555);
        annotation();
        setState(3560);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3561);
      identifier();
      setState(3563);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3562);
        typeArguments();
      }
      setState(3565);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3567);
      classOrInterfaceType();
      setState(3568);
      match(JavaParser::DOT);
      setState(3572);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(3569);
        annotation();
        setState(3574);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3575);
      identifier();
      setState(3577);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(3576);
        typeArguments();
      }
      setState(3579);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassType_lf_classOrInterfaceType_DropletFileContext ------------------------------------------------------------------

JavaParser::ClassType_lf_classOrInterfaceType_DropletFileContext::ClassType_lf_classOrInterfaceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ClassType_lf_classOrInterfaceType_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::ClassType_lf_classOrInterfaceType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassType_lf_classOrInterfaceType_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassType_lf_classOrInterfaceType_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassType_lf_classOrInterfaceType_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::ClassType_lf_classOrInterfaceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleClassType_lf_classOrInterfaceType_DropletFile;
}

void JavaParser::ClassType_lf_classOrInterfaceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassType_lf_classOrInterfaceType_DropletFile(this);
}

void JavaParser::ClassType_lf_classOrInterfaceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassType_lf_classOrInterfaceType_DropletFile(this);
}

JavaParser::ClassType_lf_classOrInterfaceType_DropletFileContext* JavaParser::classType_lf_classOrInterfaceType_DropletFile() {
  ClassType_lf_classOrInterfaceType_DropletFileContext *_localctx = _tracker.createInstance<ClassType_lf_classOrInterfaceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 504, JavaParser::RuleClassType_lf_classOrInterfaceType_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3583);
    match(JavaParser::DOT);
    setState(3587);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(3584);
      annotation();
      setState(3589);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3590);
    identifier();
    setState(3592);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(3591);
      typeArguments();
    }
    setState(3594);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassType_lfno_classOrInterfaceType_DropletFileContext ------------------------------------------------------------------

JavaParser::ClassType_lfno_classOrInterfaceType_DropletFileContext::ClassType_lfno_classOrInterfaceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ClassType_lfno_classOrInterfaceType_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::ClassType_lfno_classOrInterfaceType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassType_lfno_classOrInterfaceType_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassType_lfno_classOrInterfaceType_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassType_lfno_classOrInterfaceType_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::ClassType_lfno_classOrInterfaceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleClassType_lfno_classOrInterfaceType_DropletFile;
}

void JavaParser::ClassType_lfno_classOrInterfaceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassType_lfno_classOrInterfaceType_DropletFile(this);
}

void JavaParser::ClassType_lfno_classOrInterfaceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassType_lfno_classOrInterfaceType_DropletFile(this);
}

JavaParser::ClassType_lfno_classOrInterfaceType_DropletFileContext* JavaParser::classType_lfno_classOrInterfaceType_DropletFile() {
  ClassType_lfno_classOrInterfaceType_DropletFileContext *_localctx = _tracker.createInstance<ClassType_lfno_classOrInterfaceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 506, JavaParser::RuleClassType_lfno_classOrInterfaceType_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3599);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(3596);
      annotation();
      setState(3601);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3602);
    identifier();
    setState(3604);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(3603);
      typeArguments();
    }
    setState(3606);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceType_DropletFileContext ------------------------------------------------------------------

JavaParser::InterfaceType_DropletFileContext::InterfaceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassTypeContext* JavaParser::InterfaceType_DropletFileContext::classType() {
  return getRuleContext<JavaParser::ClassTypeContext>(0);
}

tree::TerminalNode* JavaParser::InterfaceType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::InterfaceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceType_DropletFile;
}

void JavaParser::InterfaceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceType_DropletFile(this);
}

void JavaParser::InterfaceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceType_DropletFile(this);
}

JavaParser::InterfaceType_DropletFileContext* JavaParser::interfaceType_DropletFile() {
  InterfaceType_DropletFileContext *_localctx = _tracker.createInstance<InterfaceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 508, JavaParser::RuleInterfaceType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3608);
    classType();
    setState(3609);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceType_lf_classOrInterfaceType_DropletFileContext ------------------------------------------------------------------

JavaParser::InterfaceType_lf_classOrInterfaceType_DropletFileContext::InterfaceType_lf_classOrInterfaceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassType_lf_classOrInterfaceTypeContext* JavaParser::InterfaceType_lf_classOrInterfaceType_DropletFileContext::classType_lf_classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassType_lf_classOrInterfaceTypeContext>(0);
}

tree::TerminalNode* JavaParser::InterfaceType_lf_classOrInterfaceType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::InterfaceType_lf_classOrInterfaceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceType_lf_classOrInterfaceType_DropletFile;
}

void JavaParser::InterfaceType_lf_classOrInterfaceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceType_lf_classOrInterfaceType_DropletFile(this);
}

void JavaParser::InterfaceType_lf_classOrInterfaceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceType_lf_classOrInterfaceType_DropletFile(this);
}

JavaParser::InterfaceType_lf_classOrInterfaceType_DropletFileContext* JavaParser::interfaceType_lf_classOrInterfaceType_DropletFile() {
  InterfaceType_lf_classOrInterfaceType_DropletFileContext *_localctx = _tracker.createInstance<InterfaceType_lf_classOrInterfaceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 510, JavaParser::RuleInterfaceType_lf_classOrInterfaceType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3611);
    classType_lf_classOrInterfaceType();
    setState(3612);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceType_lfno_classOrInterfaceType_DropletFileContext ------------------------------------------------------------------

JavaParser::InterfaceType_lfno_classOrInterfaceType_DropletFileContext::InterfaceType_lfno_classOrInterfaceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassType_lfno_classOrInterfaceTypeContext* JavaParser::InterfaceType_lfno_classOrInterfaceType_DropletFileContext::classType_lfno_classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassType_lfno_classOrInterfaceTypeContext>(0);
}

tree::TerminalNode* JavaParser::InterfaceType_lfno_classOrInterfaceType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::InterfaceType_lfno_classOrInterfaceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceType_lfno_classOrInterfaceType_DropletFile;
}

void JavaParser::InterfaceType_lfno_classOrInterfaceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceType_lfno_classOrInterfaceType_DropletFile(this);
}

void JavaParser::InterfaceType_lfno_classOrInterfaceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceType_lfno_classOrInterfaceType_DropletFile(this);
}

JavaParser::InterfaceType_lfno_classOrInterfaceType_DropletFileContext* JavaParser::interfaceType_lfno_classOrInterfaceType_DropletFile() {
  InterfaceType_lfno_classOrInterfaceType_DropletFileContext *_localctx = _tracker.createInstance<InterfaceType_lfno_classOrInterfaceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 512, JavaParser::RuleInterfaceType_lfno_classOrInterfaceType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3614);
    classType_lfno_classOrInterfaceType();
    setState(3615);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeVariable_DropletFileContext ------------------------------------------------------------------

JavaParser::TypeVariable_DropletFileContext::TypeVariable_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::TypeVariable_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::TypeVariable_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::TypeVariable_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::TypeVariable_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::TypeVariable_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTypeVariable_DropletFile;
}

void JavaParser::TypeVariable_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeVariable_DropletFile(this);
}

void JavaParser::TypeVariable_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeVariable_DropletFile(this);
}

JavaParser::TypeVariable_DropletFileContext* JavaParser::typeVariable_DropletFile() {
  TypeVariable_DropletFileContext *_localctx = _tracker.createInstance<TypeVariable_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 514, JavaParser::RuleTypeVariable_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3620);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(3617);
      annotation();
      setState(3622);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3623);
    identifier();
    setState(3624);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayType_DropletFileContext ------------------------------------------------------------------

JavaParser::ArrayType_DropletFileContext::ArrayType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimitiveTypeContext* JavaParser::ArrayType_DropletFileContext::primitiveType() {
  return getRuleContext<JavaParser::PrimitiveTypeContext>(0);
}

JavaParser::DimsContext* JavaParser::ArrayType_DropletFileContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}

tree::TerminalNode* JavaParser::ArrayType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ArrayType_DropletFileContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

JavaParser::TypeVariableContext* JavaParser::ArrayType_DropletFileContext::typeVariable() {
  return getRuleContext<JavaParser::TypeVariableContext>(0);
}


size_t JavaParser::ArrayType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleArrayType_DropletFile;
}

void JavaParser::ArrayType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayType_DropletFile(this);
}

void JavaParser::ArrayType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayType_DropletFile(this);
}

JavaParser::ArrayType_DropletFileContext* JavaParser::arrayType_DropletFile() {
  ArrayType_DropletFileContext *_localctx = _tracker.createInstance<ArrayType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 516, JavaParser::RuleArrayType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3638);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 361, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3626);
      primitiveType();
      setState(3627);
      dims();
      setState(3628);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3630);
      classOrInterfaceType();
      setState(3631);
      dims();
      setState(3632);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3634);
      typeVariable();
      setState(3635);
      dims();
      setState(3636);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dims_DropletFileContext ------------------------------------------------------------------

JavaParser::Dims_DropletFileContext::Dims_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::Dims_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::Dims_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::Dims_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::Dims_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleDims_DropletFile;
}

void JavaParser::Dims_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDims_DropletFile(this);
}

void JavaParser::Dims_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDims_DropletFile(this);
}

JavaParser::Dims_DropletFileContext* JavaParser::dims_DropletFile() {
  Dims_DropletFileContext *_localctx = _tracker.createInstance<Dims_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 518, JavaParser::RuleDims_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3643);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(3640);
      annotation();
      setState(3645);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3646);
    match(JavaParser::LBRACK);
    setState(3647);
    match(JavaParser::RBRACK);
    setState(3658);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::LBRACK

    || _la == JavaParser::AT) {
      setState(3651);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(3648);
        annotation();
        setState(3653);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3654);
      match(JavaParser::LBRACK);
      setState(3655);
      match(JavaParser::RBRACK);
      setState(3660);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3661);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameter_DropletFileContext ------------------------------------------------------------------

JavaParser::TypeParameter_DropletFileContext::TypeParameter_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::TypeParameter_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::TypeParameterModifierContext *> JavaParser::TypeParameter_DropletFileContext::typeParameterModifier() {
  return getRuleContexts<JavaParser::TypeParameterModifierContext>();
}

JavaParser::TypeParameterModifierContext* JavaParser::TypeParameter_DropletFileContext::typeParameterModifier(size_t i) {
  return getRuleContext<JavaParser::TypeParameterModifierContext>(i);
}

JavaParser::TypeBoundContext* JavaParser::TypeParameter_DropletFileContext::typeBound() {
  return getRuleContext<JavaParser::TypeBoundContext>(0);
}


size_t JavaParser::TypeParameter_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameter_DropletFile;
}

void JavaParser::TypeParameter_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameter_DropletFile(this);
}

void JavaParser::TypeParameter_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameter_DropletFile(this);
}

JavaParser::TypeParameter_DropletFileContext* JavaParser::typeParameter_DropletFile() {
  TypeParameter_DropletFileContext *_localctx = _tracker.createInstance<TypeParameter_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 520, JavaParser::RuleTypeParameter_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3666);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(3663);
      typeParameterModifier();
      setState(3668);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3669);
    identifier();
    setState(3671);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(3670);
      typeBound();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterModifier_DropletFileContext ------------------------------------------------------------------

JavaParser::TypeParameterModifier_DropletFileContext::TypeParameterModifier_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::TypeParameterModifier_DropletFileContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::TypeParameterModifier_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::TypeParameterModifier_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameterModifier_DropletFile;
}

void JavaParser::TypeParameterModifier_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameterModifier_DropletFile(this);
}

void JavaParser::TypeParameterModifier_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameterModifier_DropletFile(this);
}

JavaParser::TypeParameterModifier_DropletFileContext* JavaParser::typeParameterModifier_DropletFile() {
  TypeParameterModifier_DropletFileContext *_localctx = _tracker.createInstance<TypeParameterModifier_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 522, JavaParser::RuleTypeParameterModifier_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3673);
    annotation();
    setState(3674);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeBound_DropletFileContext ------------------------------------------------------------------

JavaParser::TypeBound_DropletFileContext::TypeBound_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeVariableContext* JavaParser::TypeBound_DropletFileContext::typeVariable() {
  return getRuleContext<JavaParser::TypeVariableContext>(0);
}

tree::TerminalNode* JavaParser::TypeBound_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::TypeBound_DropletFileContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

std::vector<JavaParser::AdditionalBoundContext *> JavaParser::TypeBound_DropletFileContext::additionalBound() {
  return getRuleContexts<JavaParser::AdditionalBoundContext>();
}

JavaParser::AdditionalBoundContext* JavaParser::TypeBound_DropletFileContext::additionalBound(size_t i) {
  return getRuleContext<JavaParser::AdditionalBoundContext>(i);
}


size_t JavaParser::TypeBound_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTypeBound_DropletFile;
}

void JavaParser::TypeBound_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeBound_DropletFile(this);
}

void JavaParser::TypeBound_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeBound_DropletFile(this);
}

JavaParser::TypeBound_DropletFileContext* JavaParser::typeBound_DropletFile() {
  TypeBound_DropletFileContext *_localctx = _tracker.createInstance<TypeBound_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 524, JavaParser::RuleTypeBound_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3690);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3676);
      match(JavaParser::EXTENDS);
      setState(3677);
      typeVariable();
      setState(3678);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3680);
      match(JavaParser::EXTENDS);
      setState(3681);
      classOrInterfaceType();
      setState(3685);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::BITAND) {
        setState(3682);
        additionalBound();
        setState(3687);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3688);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditionalBound_DropletFileContext ------------------------------------------------------------------

JavaParser::AdditionalBound_DropletFileContext::AdditionalBound_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::InterfaceTypeContext* JavaParser::AdditionalBound_DropletFileContext::interfaceType() {
  return getRuleContext<JavaParser::InterfaceTypeContext>(0);
}

tree::TerminalNode* JavaParser::AdditionalBound_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::AdditionalBound_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAdditionalBound_DropletFile;
}

void JavaParser::AdditionalBound_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditionalBound_DropletFile(this);
}

void JavaParser::AdditionalBound_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditionalBound_DropletFile(this);
}

JavaParser::AdditionalBound_DropletFileContext* JavaParser::additionalBound_DropletFile() {
  AdditionalBound_DropletFileContext *_localctx = _tracker.createInstance<AdditionalBound_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 526, JavaParser::RuleAdditionalBound_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3692);
    match(JavaParser::BITAND);
    setState(3693);
    interfaceType();
    setState(3694);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArguments_DropletFileContext ------------------------------------------------------------------

JavaParser::TypeArguments_DropletFileContext::TypeArguments_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeArgumentListContext* JavaParser::TypeArguments_DropletFileContext::typeArgumentList() {
  return getRuleContext<JavaParser::TypeArgumentListContext>(0);
}

tree::TerminalNode* JavaParser::TypeArguments_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::TypeArguments_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTypeArguments_DropletFile;
}

void JavaParser::TypeArguments_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArguments_DropletFile(this);
}

void JavaParser::TypeArguments_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArguments_DropletFile(this);
}

JavaParser::TypeArguments_DropletFileContext* JavaParser::typeArguments_DropletFile() {
  TypeArguments_DropletFileContext *_localctx = _tracker.createInstance<TypeArguments_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 528, JavaParser::RuleTypeArguments_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3696);
    match(JavaParser::LT);
    setState(3697);
    typeArgumentList();
    setState(3698);
    match(JavaParser::GT);
    setState(3699);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentList_DropletFileContext ------------------------------------------------------------------

JavaParser::TypeArgumentList_DropletFileContext::TypeArgumentList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::TypeArgumentContext *> JavaParser::TypeArgumentList_DropletFileContext::typeArgument() {
  return getRuleContexts<JavaParser::TypeArgumentContext>();
}

JavaParser::TypeArgumentContext* JavaParser::TypeArgumentList_DropletFileContext::typeArgument(size_t i) {
  return getRuleContext<JavaParser::TypeArgumentContext>(i);
}

tree::TerminalNode* JavaParser::TypeArgumentList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::TypeArgumentList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTypeArgumentList_DropletFile;
}

void JavaParser::TypeArgumentList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgumentList_DropletFile(this);
}

void JavaParser::TypeArgumentList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgumentList_DropletFile(this);
}

JavaParser::TypeArgumentList_DropletFileContext* JavaParser::typeArgumentList_DropletFile() {
  TypeArgumentList_DropletFileContext *_localctx = _tracker.createInstance<TypeArgumentList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 530, JavaParser::RuleTypeArgumentList_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3701);
    typeArgument();
    setState(3706);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(3702);
      match(JavaParser::COMMA);
      setState(3703);
      typeArgument();
      setState(3708);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3709);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgument_DropletFileContext ------------------------------------------------------------------

JavaParser::TypeArgument_DropletFileContext::TypeArgument_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ReferenceTypeContext* JavaParser::TypeArgument_DropletFileContext::referenceType() {
  return getRuleContext<JavaParser::ReferenceTypeContext>(0);
}

tree::TerminalNode* JavaParser::TypeArgument_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::WildcardContext* JavaParser::TypeArgument_DropletFileContext::wildcard() {
  return getRuleContext<JavaParser::WildcardContext>(0);
}


size_t JavaParser::TypeArgument_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTypeArgument_DropletFile;
}

void JavaParser::TypeArgument_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgument_DropletFile(this);
}

void JavaParser::TypeArgument_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgument_DropletFile(this);
}

JavaParser::TypeArgument_DropletFileContext* JavaParser::typeArgument_DropletFile() {
  TypeArgument_DropletFileContext *_localctx = _tracker.createInstance<TypeArgument_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 532, JavaParser::RuleTypeArgument_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3717);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3711);
      referenceType();
      setState(3712);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3714);
      wildcard();
      setState(3715);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Wildcard_DropletFileContext ------------------------------------------------------------------

JavaParser::Wildcard_DropletFileContext::Wildcard_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::Wildcard_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::Wildcard_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::Wildcard_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::WildcardBoundsContext* JavaParser::Wildcard_DropletFileContext::wildcardBounds() {
  return getRuleContext<JavaParser::WildcardBoundsContext>(0);
}


size_t JavaParser::Wildcard_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleWildcard_DropletFile;
}

void JavaParser::Wildcard_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWildcard_DropletFile(this);
}

void JavaParser::Wildcard_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWildcard_DropletFile(this);
}

JavaParser::Wildcard_DropletFileContext* JavaParser::wildcard_DropletFile() {
  Wildcard_DropletFileContext *_localctx = _tracker.createInstance<Wildcard_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 534, JavaParser::RuleWildcard_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3722);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(3719);
      annotation();
      setState(3724);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3725);
    match(JavaParser::QUESTION);
    setState(3727);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS

    || _la == JavaParser::SUPER) {
      setState(3726);
      wildcardBounds();
    }
    setState(3729);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WildcardBounds_DropletFileContext ------------------------------------------------------------------

JavaParser::WildcardBounds_DropletFileContext::WildcardBounds_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ReferenceTypeContext* JavaParser::WildcardBounds_DropletFileContext::referenceType() {
  return getRuleContext<JavaParser::ReferenceTypeContext>(0);
}

tree::TerminalNode* JavaParser::WildcardBounds_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::WildcardBounds_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleWildcardBounds_DropletFile;
}

void JavaParser::WildcardBounds_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWildcardBounds_DropletFile(this);
}

void JavaParser::WildcardBounds_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWildcardBounds_DropletFile(this);
}

JavaParser::WildcardBounds_DropletFileContext* JavaParser::wildcardBounds_DropletFile() {
  WildcardBounds_DropletFileContext *_localctx = _tracker.createInstance<WildcardBounds_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 536, JavaParser::RuleWildcardBounds_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3739);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::EXTENDS: {
        enterOuterAlt(_localctx, 1);
        setState(3731);
        match(JavaParser::EXTENDS);
        setState(3732);
        referenceType();
        setState(3733);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::SUPER: {
        enterOuterAlt(_localctx, 2);
        setState(3735);
        match(JavaParser::SUPER);
        setState(3736);
        referenceType();
        setState(3737);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleName_DropletFileContext ------------------------------------------------------------------

JavaParser::ModuleName_DropletFileContext::ModuleName_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ModuleName_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::ModuleName_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ModuleNameContext* JavaParser::ModuleName_DropletFileContext::moduleName() {
  return getRuleContext<JavaParser::ModuleNameContext>(0);
}


size_t JavaParser::ModuleName_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleModuleName_DropletFile;
}

void JavaParser::ModuleName_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleName_DropletFile(this);
}

void JavaParser::ModuleName_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleName_DropletFile(this);
}

JavaParser::ModuleName_DropletFileContext* JavaParser::moduleName_DropletFile() {
  ModuleName_DropletFileContext *_localctx = _tracker.createInstance<ModuleName_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 538, JavaParser::RuleModuleName_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3749);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3741);
      identifier();
      setState(3742);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3744);
      moduleName(0);
      setState(3745);
      match(JavaParser::DOT);
      setState(3746);
      identifier();
      setState(3747);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageName_DropletFileContext ------------------------------------------------------------------

JavaParser::PackageName_DropletFileContext::PackageName_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::PackageName_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::PackageName_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::PackageNameContext* JavaParser::PackageName_DropletFileContext::packageName() {
  return getRuleContext<JavaParser::PackageNameContext>(0);
}


size_t JavaParser::PackageName_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePackageName_DropletFile;
}

void JavaParser::PackageName_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageName_DropletFile(this);
}

void JavaParser::PackageName_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageName_DropletFile(this);
}

JavaParser::PackageName_DropletFileContext* JavaParser::packageName_DropletFile() {
  PackageName_DropletFileContext *_localctx = _tracker.createInstance<PackageName_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 540, JavaParser::RulePackageName_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3759);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3751);
      identifier();
      setState(3752);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3754);
      packageName(0);
      setState(3755);
      match(JavaParser::DOT);
      setState(3756);
      identifier();
      setState(3757);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeName_DropletFileContext ------------------------------------------------------------------

JavaParser::TypeName_DropletFileContext::TypeName_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::TypeName_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::TypeName_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::PackageOrTypeNameContext* JavaParser::TypeName_DropletFileContext::packageOrTypeName() {
  return getRuleContext<JavaParser::PackageOrTypeNameContext>(0);
}


size_t JavaParser::TypeName_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTypeName_DropletFile;
}

void JavaParser::TypeName_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeName_DropletFile(this);
}

void JavaParser::TypeName_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeName_DropletFile(this);
}

JavaParser::TypeName_DropletFileContext* JavaParser::typeName_DropletFile() {
  TypeName_DropletFileContext *_localctx = _tracker.createInstance<TypeName_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 542, JavaParser::RuleTypeName_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3769);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 376, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3761);
      identifier();
      setState(3762);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3764);
      packageOrTypeName(0);
      setState(3765);
      match(JavaParser::DOT);
      setState(3766);
      identifier();
      setState(3767);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageOrTypeName_DropletFileContext ------------------------------------------------------------------

JavaParser::PackageOrTypeName_DropletFileContext::PackageOrTypeName_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::PackageOrTypeName_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::PackageOrTypeName_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::PackageOrTypeNameContext* JavaParser::PackageOrTypeName_DropletFileContext::packageOrTypeName() {
  return getRuleContext<JavaParser::PackageOrTypeNameContext>(0);
}


size_t JavaParser::PackageOrTypeName_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePackageOrTypeName_DropletFile;
}

void JavaParser::PackageOrTypeName_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageOrTypeName_DropletFile(this);
}

void JavaParser::PackageOrTypeName_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageOrTypeName_DropletFile(this);
}

JavaParser::PackageOrTypeName_DropletFileContext* JavaParser::packageOrTypeName_DropletFile() {
  PackageOrTypeName_DropletFileContext *_localctx = _tracker.createInstance<PackageOrTypeName_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 544, JavaParser::RulePackageOrTypeName_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3779);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 377, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3771);
      identifier();
      setState(3772);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3774);
      packageOrTypeName(0);
      setState(3775);
      match(JavaParser::DOT);
      setState(3776);
      identifier();
      setState(3777);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionName_DropletFileContext ------------------------------------------------------------------

JavaParser::ExpressionName_DropletFileContext::ExpressionName_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ExpressionName_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionName_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::AmbiguousNameContext* JavaParser::ExpressionName_DropletFileContext::ambiguousName() {
  return getRuleContext<JavaParser::AmbiguousNameContext>(0);
}


size_t JavaParser::ExpressionName_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleExpressionName_DropletFile;
}

void JavaParser::ExpressionName_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionName_DropletFile(this);
}

void JavaParser::ExpressionName_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionName_DropletFile(this);
}

JavaParser::ExpressionName_DropletFileContext* JavaParser::expressionName_DropletFile() {
  ExpressionName_DropletFileContext *_localctx = _tracker.createInstance<ExpressionName_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 546, JavaParser::RuleExpressionName_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3789);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 378, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3781);
      identifier();
      setState(3782);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3784);
      ambiguousName(0);
      setState(3785);
      match(JavaParser::DOT);
      setState(3786);
      identifier();
      setState(3787);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodName_DropletFileContext ------------------------------------------------------------------

JavaParser::MethodName_DropletFileContext::MethodName_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::MethodName_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::MethodName_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::MethodName_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMethodName_DropletFile;
}

void JavaParser::MethodName_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodName_DropletFile(this);
}

void JavaParser::MethodName_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodName_DropletFile(this);
}

JavaParser::MethodName_DropletFileContext* JavaParser::methodName_DropletFile() {
  MethodName_DropletFileContext *_localctx = _tracker.createInstance<MethodName_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 548, JavaParser::RuleMethodName_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3791);
    identifier();
    setState(3792);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AmbiguousName_DropletFileContext ------------------------------------------------------------------

JavaParser::AmbiguousName_DropletFileContext::AmbiguousName_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::AmbiguousName_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::AmbiguousName_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::AmbiguousNameContext* JavaParser::AmbiguousName_DropletFileContext::ambiguousName() {
  return getRuleContext<JavaParser::AmbiguousNameContext>(0);
}


size_t JavaParser::AmbiguousName_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAmbiguousName_DropletFile;
}

void JavaParser::AmbiguousName_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAmbiguousName_DropletFile(this);
}

void JavaParser::AmbiguousName_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAmbiguousName_DropletFile(this);
}

JavaParser::AmbiguousName_DropletFileContext* JavaParser::ambiguousName_DropletFile() {
  AmbiguousName_DropletFileContext *_localctx = _tracker.createInstance<AmbiguousName_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 550, JavaParser::RuleAmbiguousName_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3802);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 379, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3794);
      identifier();
      setState(3795);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3797);
      ambiguousName(0);
      setState(3798);
      match(JavaParser::DOT);
      setState(3799);
      identifier();
      setState(3800);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompilationUnit_DropletFileContext ------------------------------------------------------------------

JavaParser::CompilationUnit_DropletFileContext::CompilationUnit_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::OrdinaryCompilationContext* JavaParser::CompilationUnit_DropletFileContext::ordinaryCompilation() {
  return getRuleContext<JavaParser::OrdinaryCompilationContext>(0);
}

tree::TerminalNode* JavaParser::CompilationUnit_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ModularCompilationContext* JavaParser::CompilationUnit_DropletFileContext::modularCompilation() {
  return getRuleContext<JavaParser::ModularCompilationContext>(0);
}


size_t JavaParser::CompilationUnit_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleCompilationUnit_DropletFile;
}

void JavaParser::CompilationUnit_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompilationUnit_DropletFile(this);
}

void JavaParser::CompilationUnit_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompilationUnit_DropletFile(this);
}

JavaParser::CompilationUnit_DropletFileContext* JavaParser::compilationUnit_DropletFile() {
  CompilationUnit_DropletFileContext *_localctx = _tracker.createInstance<CompilationUnit_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 552, JavaParser::RuleCompilationUnit_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3810);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3804);
      ordinaryCompilation();
      setState(3805);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3807);
      modularCompilation();
      setState(3808);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrdinaryCompilation_DropletFileContext ------------------------------------------------------------------

JavaParser::OrdinaryCompilation_DropletFileContext::OrdinaryCompilation_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::OrdinaryCompilation_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::PackageDeclarationContext* JavaParser::OrdinaryCompilation_DropletFileContext::packageDeclaration() {
  return getRuleContext<JavaParser::PackageDeclarationContext>(0);
}

std::vector<JavaParser::ImportDeclarationContext *> JavaParser::OrdinaryCompilation_DropletFileContext::importDeclaration() {
  return getRuleContexts<JavaParser::ImportDeclarationContext>();
}

JavaParser::ImportDeclarationContext* JavaParser::OrdinaryCompilation_DropletFileContext::importDeclaration(size_t i) {
  return getRuleContext<JavaParser::ImportDeclarationContext>(i);
}

std::vector<JavaParser::TypeDeclarationContext *> JavaParser::OrdinaryCompilation_DropletFileContext::typeDeclaration() {
  return getRuleContexts<JavaParser::TypeDeclarationContext>();
}

JavaParser::TypeDeclarationContext* JavaParser::OrdinaryCompilation_DropletFileContext::typeDeclaration(size_t i) {
  return getRuleContext<JavaParser::TypeDeclarationContext>(i);
}


size_t JavaParser::OrdinaryCompilation_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleOrdinaryCompilation_DropletFile;
}

void JavaParser::OrdinaryCompilation_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrdinaryCompilation_DropletFile(this);
}

void JavaParser::OrdinaryCompilation_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrdinaryCompilation_DropletFile(this);
}

JavaParser::OrdinaryCompilation_DropletFileContext* JavaParser::ordinaryCompilation_DropletFile() {
  OrdinaryCompilation_DropletFileContext *_localctx = _tracker.createInstance<OrdinaryCompilation_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 554, JavaParser::RuleOrdinaryCompilation_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3813);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx)) {
    case 1: {
      setState(3812);
      packageDeclaration();
      break;
    }

    }
    setState(3818);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::IMPORT) {
      setState(3815);
      importDeclaration();
      setState(3820);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3824);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::INTERFACE)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP))) != 0) || _la == JavaParser::SEMI

    || _la == JavaParser::AT) {
      setState(3821);
      typeDeclaration();
      setState(3826);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3827);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModularCompilation_DropletFileContext ------------------------------------------------------------------

JavaParser::ModularCompilation_DropletFileContext::ModularCompilation_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ModuleDeclarationContext* JavaParser::ModularCompilation_DropletFileContext::moduleDeclaration() {
  return getRuleContext<JavaParser::ModuleDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::ModularCompilation_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::ImportDeclarationContext *> JavaParser::ModularCompilation_DropletFileContext::importDeclaration() {
  return getRuleContexts<JavaParser::ImportDeclarationContext>();
}

JavaParser::ImportDeclarationContext* JavaParser::ModularCompilation_DropletFileContext::importDeclaration(size_t i) {
  return getRuleContext<JavaParser::ImportDeclarationContext>(i);
}


size_t JavaParser::ModularCompilation_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleModularCompilation_DropletFile;
}

void JavaParser::ModularCompilation_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModularCompilation_DropletFile(this);
}

void JavaParser::ModularCompilation_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModularCompilation_DropletFile(this);
}

JavaParser::ModularCompilation_DropletFileContext* JavaParser::modularCompilation_DropletFile() {
  ModularCompilation_DropletFileContext *_localctx = _tracker.createInstance<ModularCompilation_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 556, JavaParser::RuleModularCompilation_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3832);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::IMPORT) {
      setState(3829);
      importDeclaration();
      setState(3834);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3835);
    moduleDeclaration();
    setState(3836);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::PackageDeclaration_DropletFileContext::PackageDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PackageNameContext* JavaParser::PackageDeclaration_DropletFileContext::packageName() {
  return getRuleContext<JavaParser::PackageNameContext>(0);
}

tree::TerminalNode* JavaParser::PackageDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::PackageModifierContext *> JavaParser::PackageDeclaration_DropletFileContext::packageModifier() {
  return getRuleContexts<JavaParser::PackageModifierContext>();
}

JavaParser::PackageModifierContext* JavaParser::PackageDeclaration_DropletFileContext::packageModifier(size_t i) {
  return getRuleContext<JavaParser::PackageModifierContext>(i);
}


size_t JavaParser::PackageDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePackageDeclaration_DropletFile;
}

void JavaParser::PackageDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageDeclaration_DropletFile(this);
}

void JavaParser::PackageDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageDeclaration_DropletFile(this);
}

JavaParser::PackageDeclaration_DropletFileContext* JavaParser::packageDeclaration_DropletFile() {
  PackageDeclaration_DropletFileContext *_localctx = _tracker.createInstance<PackageDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 558, JavaParser::RulePackageDeclaration_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3841);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(3838);
      packageModifier();
      setState(3843);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3844);
    match(JavaParser::PACKAGE);
    setState(3845);
    packageName(0);
    setState(3846);
    match(JavaParser::SEMI);
    setState(3847);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageModifier_DropletFileContext ------------------------------------------------------------------

JavaParser::PackageModifier_DropletFileContext::PackageModifier_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::PackageModifier_DropletFileContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::PackageModifier_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::PackageModifier_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePackageModifier_DropletFile;
}

void JavaParser::PackageModifier_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageModifier_DropletFile(this);
}

void JavaParser::PackageModifier_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageModifier_DropletFile(this);
}

JavaParser::PackageModifier_DropletFileContext* JavaParser::packageModifier_DropletFile() {
  PackageModifier_DropletFileContext *_localctx = _tracker.createInstance<PackageModifier_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 560, JavaParser::RulePackageModifier_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3849);
    annotation();
    setState(3850);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::ImportDeclaration_DropletFileContext::ImportDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::SingleTypeImportDeclarationContext* JavaParser::ImportDeclaration_DropletFileContext::singleTypeImportDeclaration() {
  return getRuleContext<JavaParser::SingleTypeImportDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::ImportDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeImportOnDemandDeclarationContext* JavaParser::ImportDeclaration_DropletFileContext::typeImportOnDemandDeclaration() {
  return getRuleContext<JavaParser::TypeImportOnDemandDeclarationContext>(0);
}

JavaParser::SingleStaticImportDeclarationContext* JavaParser::ImportDeclaration_DropletFileContext::singleStaticImportDeclaration() {
  return getRuleContext<JavaParser::SingleStaticImportDeclarationContext>(0);
}

JavaParser::StaticImportOnDemandDeclarationContext* JavaParser::ImportDeclaration_DropletFileContext::staticImportOnDemandDeclaration() {
  return getRuleContext<JavaParser::StaticImportOnDemandDeclarationContext>(0);
}


size_t JavaParser::ImportDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleImportDeclaration_DropletFile;
}

void JavaParser::ImportDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportDeclaration_DropletFile(this);
}

void JavaParser::ImportDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportDeclaration_DropletFile(this);
}

JavaParser::ImportDeclaration_DropletFileContext* JavaParser::importDeclaration_DropletFile() {
  ImportDeclaration_DropletFileContext *_localctx = _tracker.createInstance<ImportDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 562, JavaParser::RuleImportDeclaration_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3864);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3852);
      singleTypeImportDeclaration();
      setState(3853);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3855);
      typeImportOnDemandDeclaration();
      setState(3856);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3858);
      singleStaticImportDeclaration();
      setState(3859);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3861);
      staticImportOnDemandDeclaration();
      setState(3862);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleTypeImportDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::SingleTypeImportDeclaration_DropletFileContext::SingleTypeImportDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeNameContext* JavaParser::SingleTypeImportDeclaration_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

tree::TerminalNode* JavaParser::SingleTypeImportDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::SingleTypeImportDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleSingleTypeImportDeclaration_DropletFile;
}

void JavaParser::SingleTypeImportDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleTypeImportDeclaration_DropletFile(this);
}

void JavaParser::SingleTypeImportDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleTypeImportDeclaration_DropletFile(this);
}

JavaParser::SingleTypeImportDeclaration_DropletFileContext* JavaParser::singleTypeImportDeclaration_DropletFile() {
  SingleTypeImportDeclaration_DropletFileContext *_localctx = _tracker.createInstance<SingleTypeImportDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 564, JavaParser::RuleSingleTypeImportDeclaration_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3866);
    match(JavaParser::IMPORT);
    setState(3867);
    typeName();
    setState(3868);
    match(JavaParser::SEMI);
    setState(3869);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeImportOnDemandDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::TypeImportOnDemandDeclaration_DropletFileContext::TypeImportOnDemandDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PackageOrTypeNameContext* JavaParser::TypeImportOnDemandDeclaration_DropletFileContext::packageOrTypeName() {
  return getRuleContext<JavaParser::PackageOrTypeNameContext>(0);
}

tree::TerminalNode* JavaParser::TypeImportOnDemandDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::TypeImportOnDemandDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTypeImportOnDemandDeclaration_DropletFile;
}

void JavaParser::TypeImportOnDemandDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeImportOnDemandDeclaration_DropletFile(this);
}

void JavaParser::TypeImportOnDemandDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeImportOnDemandDeclaration_DropletFile(this);
}

JavaParser::TypeImportOnDemandDeclaration_DropletFileContext* JavaParser::typeImportOnDemandDeclaration_DropletFile() {
  TypeImportOnDemandDeclaration_DropletFileContext *_localctx = _tracker.createInstance<TypeImportOnDemandDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 566, JavaParser::RuleTypeImportOnDemandDeclaration_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3871);
    match(JavaParser::IMPORT);
    setState(3872);
    packageOrTypeName(0);
    setState(3873);
    match(JavaParser::DOT);
    setState(3874);
    match(JavaParser::MUL);
    setState(3875);
    match(JavaParser::SEMI);
    setState(3876);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleStaticImportDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::SingleStaticImportDeclaration_DropletFileContext::SingleStaticImportDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeNameContext* JavaParser::SingleStaticImportDeclaration_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::IdentifierContext* JavaParser::SingleStaticImportDeclaration_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::SingleStaticImportDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::SingleStaticImportDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleSingleStaticImportDeclaration_DropletFile;
}

void JavaParser::SingleStaticImportDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleStaticImportDeclaration_DropletFile(this);
}

void JavaParser::SingleStaticImportDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleStaticImportDeclaration_DropletFile(this);
}

JavaParser::SingleStaticImportDeclaration_DropletFileContext* JavaParser::singleStaticImportDeclaration_DropletFile() {
  SingleStaticImportDeclaration_DropletFileContext *_localctx = _tracker.createInstance<SingleStaticImportDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 568, JavaParser::RuleSingleStaticImportDeclaration_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3878);
    match(JavaParser::IMPORT);
    setState(3879);
    match(JavaParser::STATIC);
    setState(3880);
    typeName();
    setState(3881);
    match(JavaParser::DOT);
    setState(3882);
    identifier();
    setState(3883);
    match(JavaParser::SEMI);
    setState(3884);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StaticImportOnDemandDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::StaticImportOnDemandDeclaration_DropletFileContext::StaticImportOnDemandDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeNameContext* JavaParser::StaticImportOnDemandDeclaration_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

tree::TerminalNode* JavaParser::StaticImportOnDemandDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::StaticImportOnDemandDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleStaticImportOnDemandDeclaration_DropletFile;
}

void JavaParser::StaticImportOnDemandDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStaticImportOnDemandDeclaration_DropletFile(this);
}

void JavaParser::StaticImportOnDemandDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStaticImportOnDemandDeclaration_DropletFile(this);
}

JavaParser::StaticImportOnDemandDeclaration_DropletFileContext* JavaParser::staticImportOnDemandDeclaration_DropletFile() {
  StaticImportOnDemandDeclaration_DropletFileContext *_localctx = _tracker.createInstance<StaticImportOnDemandDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 570, JavaParser::RuleStaticImportOnDemandDeclaration_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3886);
    match(JavaParser::IMPORT);
    setState(3887);
    match(JavaParser::STATIC);
    setState(3888);
    typeName();
    setState(3889);
    match(JavaParser::DOT);
    setState(3890);
    match(JavaParser::MUL);
    setState(3891);
    match(JavaParser::SEMI);
    setState(3892);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::TypeDeclaration_DropletFileContext::TypeDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassDeclarationContext* JavaParser::TypeDeclaration_DropletFileContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::TypeDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::TypeDeclaration_DropletFileContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}


size_t JavaParser::TypeDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTypeDeclaration_DropletFile;
}

void JavaParser::TypeDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDeclaration_DropletFile(this);
}

void JavaParser::TypeDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDeclaration_DropletFile(this);
}

JavaParser::TypeDeclaration_DropletFileContext* JavaParser::typeDeclaration_DropletFile() {
  TypeDeclaration_DropletFileContext *_localctx = _tracker.createInstance<TypeDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 572, JavaParser::RuleTypeDeclaration_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3902);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3894);
      classDeclaration();
      setState(3895);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3897);
      interfaceDeclaration();
      setState(3898);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3900);
      match(JavaParser::SEMI);
      setState(3901);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::ModuleDeclaration_DropletFileContext::ModuleDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ModuleNameContext* JavaParser::ModuleDeclaration_DropletFileContext::moduleName() {
  return getRuleContext<JavaParser::ModuleNameContext>(0);
}

tree::TerminalNode* JavaParser::ModuleDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ModuleDeclaration_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ModuleDeclaration_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

std::vector<JavaParser::ModuleDirectiveContext *> JavaParser::ModuleDeclaration_DropletFileContext::moduleDirective() {
  return getRuleContexts<JavaParser::ModuleDirectiveContext>();
}

JavaParser::ModuleDirectiveContext* JavaParser::ModuleDeclaration_DropletFileContext::moduleDirective(size_t i) {
  return getRuleContext<JavaParser::ModuleDirectiveContext>(i);
}


size_t JavaParser::ModuleDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleModuleDeclaration_DropletFile;
}

void JavaParser::ModuleDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleDeclaration_DropletFile(this);
}

void JavaParser::ModuleDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleDeclaration_DropletFile(this);
}

JavaParser::ModuleDeclaration_DropletFileContext* JavaParser::moduleDeclaration_DropletFile() {
  ModuleDeclaration_DropletFileContext *_localctx = _tracker.createInstance<ModuleDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 574, JavaParser::RuleModuleDeclaration_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3907);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(3904);
      annotation();
      setState(3909);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3911);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::T__0) {
      setState(3910);
      match(JavaParser::T__0);
    }
    setState(3913);
    match(JavaParser::T__1);
    setState(3914);
    moduleName(0);
    setState(3915);
    match(JavaParser::LBRACE);
    setState(3919);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__2)
      | (1ULL << JavaParser::T__3)
      | (1ULL << JavaParser::T__5)
      | (1ULL << JavaParser::T__6)
      | (1ULL << JavaParser::T__7))) != 0)) {
      setState(3916);
      moduleDirective();
      setState(3921);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3922);
    match(JavaParser::RBRACE);
    setState(3923);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDirective_DropletFileContext ------------------------------------------------------------------

JavaParser::ModuleDirective_DropletFileContext::ModuleDirective_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ModuleNameContext *> JavaParser::ModuleDirective_DropletFileContext::moduleName() {
  return getRuleContexts<JavaParser::ModuleNameContext>();
}

JavaParser::ModuleNameContext* JavaParser::ModuleDirective_DropletFileContext::moduleName(size_t i) {
  return getRuleContext<JavaParser::ModuleNameContext>(i);
}

tree::TerminalNode* JavaParser::ModuleDirective_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::RequiresModifierContext *> JavaParser::ModuleDirective_DropletFileContext::requiresModifier() {
  return getRuleContexts<JavaParser::RequiresModifierContext>();
}

JavaParser::RequiresModifierContext* JavaParser::ModuleDirective_DropletFileContext::requiresModifier(size_t i) {
  return getRuleContext<JavaParser::RequiresModifierContext>(i);
}

JavaParser::PackageNameContext* JavaParser::ModuleDirective_DropletFileContext::packageName() {
  return getRuleContext<JavaParser::PackageNameContext>(0);
}

std::vector<JavaParser::TypeNameContext *> JavaParser::ModuleDirective_DropletFileContext::typeName() {
  return getRuleContexts<JavaParser::TypeNameContext>();
}

JavaParser::TypeNameContext* JavaParser::ModuleDirective_DropletFileContext::typeName(size_t i) {
  return getRuleContext<JavaParser::TypeNameContext>(i);
}


size_t JavaParser::ModuleDirective_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleModuleDirective_DropletFile;
}

void JavaParser::ModuleDirective_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleDirective_DropletFile(this);
}

void JavaParser::ModuleDirective_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleDirective_DropletFile(this);
}

JavaParser::ModuleDirective_DropletFileContext* JavaParser::moduleDirective_DropletFile() {
  ModuleDirective_DropletFileContext *_localctx = _tracker.createInstance<ModuleDirective_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 576, JavaParser::RuleModuleDirective_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3987);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::T__2: {
        enterOuterAlt(_localctx, 1);
        setState(3925);
        match(JavaParser::T__2);
        setState(3929);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::T__9

        || _la == JavaParser::STATIC) {
          setState(3926);
          requiresModifier();
          setState(3931);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3932);
        moduleName(0);
        setState(3933);
        match(JavaParser::SEMI);
        setState(3934);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::T__3: {
        enterOuterAlt(_localctx, 2);
        setState(3936);
        match(JavaParser::T__3);
        setState(3937);
        packageName(0);
        setState(3947);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::T__4) {
          setState(3938);
          match(JavaParser::T__4);
          setState(3939);
          moduleName(0);
          setState(3944);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == JavaParser::COMMA) {
            setState(3940);
            match(JavaParser::COMMA);
            setState(3941);
            moduleName(0);
            setState(3946);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(3949);
        match(JavaParser::SEMI);
        setState(3950);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::T__5: {
        enterOuterAlt(_localctx, 3);
        setState(3952);
        match(JavaParser::T__5);
        setState(3953);
        packageName(0);
        setState(3963);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::T__4) {
          setState(3954);
          match(JavaParser::T__4);
          setState(3955);
          moduleName(0);
          setState(3960);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == JavaParser::COMMA) {
            setState(3956);
            match(JavaParser::COMMA);
            setState(3957);
            moduleName(0);
            setState(3962);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(3965);
        match(JavaParser::SEMI);
        setState(3966);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::T__6: {
        enterOuterAlt(_localctx, 4);
        setState(3968);
        match(JavaParser::T__6);
        setState(3969);
        typeName();
        setState(3970);
        match(JavaParser::SEMI);
        setState(3971);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::T__7: {
        enterOuterAlt(_localctx, 5);
        setState(3973);
        match(JavaParser::T__7);
        setState(3974);
        typeName();
        setState(3975);
        match(JavaParser::T__8);
        setState(3976);
        typeName();
        setState(3981);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::COMMA) {
          setState(3977);
          match(JavaParser::COMMA);
          setState(3978);
          typeName();
          setState(3983);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3984);
        match(JavaParser::SEMI);
        setState(3985);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RequiresModifier_DropletFileContext ------------------------------------------------------------------

JavaParser::RequiresModifier_DropletFileContext::RequiresModifier_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::RequiresModifier_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::RequiresModifier_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleRequiresModifier_DropletFile;
}

void JavaParser::RequiresModifier_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequiresModifier_DropletFile(this);
}

void JavaParser::RequiresModifier_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequiresModifier_DropletFile(this);
}

JavaParser::RequiresModifier_DropletFileContext* JavaParser::requiresModifier_DropletFile() {
  RequiresModifier_DropletFileContext *_localctx = _tracker.createInstance<RequiresModifier_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 578, JavaParser::RuleRequiresModifier_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3993);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::T__9: {
        enterOuterAlt(_localctx, 1);
        setState(3989);
        match(JavaParser::T__9);
        setState(3990);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 2);
        setState(3991);
        match(JavaParser::STATIC);
        setState(3992);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::ClassDeclaration_DropletFileContext::ClassDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NormalClassDeclarationContext* JavaParser::ClassDeclaration_DropletFileContext::normalClassDeclaration() {
  return getRuleContext<JavaParser::NormalClassDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::ClassDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::EnumDeclarationContext* JavaParser::ClassDeclaration_DropletFileContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}


size_t JavaParser::ClassDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleClassDeclaration_DropletFile;
}

void JavaParser::ClassDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassDeclaration_DropletFile(this);
}

void JavaParser::ClassDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassDeclaration_DropletFile(this);
}

JavaParser::ClassDeclaration_DropletFileContext* JavaParser::classDeclaration_DropletFile() {
  ClassDeclaration_DropletFileContext *_localctx = _tracker.createInstance<ClassDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 580, JavaParser::RuleClassDeclaration_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4001);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 399, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3995);
      normalClassDeclaration();
      setState(3996);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3998);
      enumDeclaration();
      setState(3999);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalClassDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::NormalClassDeclaration_DropletFileContext::NormalClassDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::NormalClassDeclaration_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::NormalClassDeclaration_DropletFileContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}

tree::TerminalNode* JavaParser::NormalClassDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::ClassModifierContext *> JavaParser::NormalClassDeclaration_DropletFileContext::classModifier() {
  return getRuleContexts<JavaParser::ClassModifierContext>();
}

JavaParser::ClassModifierContext* JavaParser::NormalClassDeclaration_DropletFileContext::classModifier(size_t i) {
  return getRuleContext<JavaParser::ClassModifierContext>(i);
}

JavaParser::TypeParametersContext* JavaParser::NormalClassDeclaration_DropletFileContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::SuperclassContext* JavaParser::NormalClassDeclaration_DropletFileContext::superclass() {
  return getRuleContext<JavaParser::SuperclassContext>(0);
}

JavaParser::SuperinterfacesContext* JavaParser::NormalClassDeclaration_DropletFileContext::superinterfaces() {
  return getRuleContext<JavaParser::SuperinterfacesContext>(0);
}


size_t JavaParser::NormalClassDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleNormalClassDeclaration_DropletFile;
}

void JavaParser::NormalClassDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalClassDeclaration_DropletFile(this);
}

void JavaParser::NormalClassDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalClassDeclaration_DropletFile(this);
}

JavaParser::NormalClassDeclaration_DropletFileContext* JavaParser::normalClassDeclaration_DropletFile() {
  NormalClassDeclaration_DropletFileContext *_localctx = _tracker.createInstance<NormalClassDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 582, JavaParser::RuleNormalClassDeclaration_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4006);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP))) != 0) || _la == JavaParser::AT) {
      setState(4003);
      classModifier();
      setState(4008);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4009);
    match(JavaParser::CLASS);
    setState(4010);
    identifier();
    setState(4012);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(4011);
      typeParameters();
    }
    setState(4015);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(4014);
      superclass();
    }
    setState(4018);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(4017);
      superinterfaces();
    }
    setState(4020);
    classBody();
    setState(4021);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassModifier_DropletFileContext ------------------------------------------------------------------

JavaParser::ClassModifier_DropletFileContext::ClassModifier_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::ClassModifier_DropletFileContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::ClassModifier_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ClassModifier_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleClassModifier_DropletFile;
}

void JavaParser::ClassModifier_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassModifier_DropletFile(this);
}

void JavaParser::ClassModifier_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassModifier_DropletFile(this);
}

JavaParser::ClassModifier_DropletFileContext* JavaParser::classModifier_DropletFile() {
  ClassModifier_DropletFileContext *_localctx = _tracker.createInstance<ClassModifier_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 584, JavaParser::RuleClassModifier_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4040);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(4023);
        annotation();
        setState(4024);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(4026);
        match(JavaParser::PUBLIC);
        setState(4027);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(4028);
        match(JavaParser::PROTECTED);
        setState(4029);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(4030);
        match(JavaParser::PRIVATE);
        setState(4031);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 5);
        setState(4032);
        match(JavaParser::ABSTRACT);
        setState(4033);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(4034);
        match(JavaParser::STATIC);
        setState(4035);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 7);
        setState(4036);
        match(JavaParser::FINAL);
        setState(4037);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::STRICTFP: {
        enterOuterAlt(_localctx, 8);
        setState(4038);
        match(JavaParser::STRICTFP);
        setState(4039);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameters_DropletFileContext ------------------------------------------------------------------

JavaParser::TypeParameters_DropletFileContext::TypeParameters_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeParameterListContext* JavaParser::TypeParameters_DropletFileContext::typeParameterList() {
  return getRuleContext<JavaParser::TypeParameterListContext>(0);
}

tree::TerminalNode* JavaParser::TypeParameters_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::TypeParameters_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameters_DropletFile;
}

void JavaParser::TypeParameters_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameters_DropletFile(this);
}

void JavaParser::TypeParameters_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameters_DropletFile(this);
}

JavaParser::TypeParameters_DropletFileContext* JavaParser::typeParameters_DropletFile() {
  TypeParameters_DropletFileContext *_localctx = _tracker.createInstance<TypeParameters_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 586, JavaParser::RuleTypeParameters_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4042);
    match(JavaParser::LT);
    setState(4043);
    typeParameterList();
    setState(4044);
    match(JavaParser::GT);
    setState(4045);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterList_DropletFileContext ------------------------------------------------------------------

JavaParser::TypeParameterList_DropletFileContext::TypeParameterList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::TypeParameterContext *> JavaParser::TypeParameterList_DropletFileContext::typeParameter() {
  return getRuleContexts<JavaParser::TypeParameterContext>();
}

JavaParser::TypeParameterContext* JavaParser::TypeParameterList_DropletFileContext::typeParameter(size_t i) {
  return getRuleContext<JavaParser::TypeParameterContext>(i);
}

tree::TerminalNode* JavaParser::TypeParameterList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::TypeParameterList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameterList_DropletFile;
}

void JavaParser::TypeParameterList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameterList_DropletFile(this);
}

void JavaParser::TypeParameterList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameterList_DropletFile(this);
}

JavaParser::TypeParameterList_DropletFileContext* JavaParser::typeParameterList_DropletFile() {
  TypeParameterList_DropletFileContext *_localctx = _tracker.createInstance<TypeParameterList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 588, JavaParser::RuleTypeParameterList_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4047);
    typeParameter();
    setState(4052);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(4048);
      match(JavaParser::COMMA);
      setState(4049);
      typeParameter();
      setState(4054);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4055);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Superclass_DropletFileContext ------------------------------------------------------------------

JavaParser::Superclass_DropletFileContext::Superclass_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassTypeContext* JavaParser::Superclass_DropletFileContext::classType() {
  return getRuleContext<JavaParser::ClassTypeContext>(0);
}

tree::TerminalNode* JavaParser::Superclass_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::Superclass_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleSuperclass_DropletFile;
}

void JavaParser::Superclass_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperclass_DropletFile(this);
}

void JavaParser::Superclass_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperclass_DropletFile(this);
}

JavaParser::Superclass_DropletFileContext* JavaParser::superclass_DropletFile() {
  Superclass_DropletFileContext *_localctx = _tracker.createInstance<Superclass_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 590, JavaParser::RuleSuperclass_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4057);
    match(JavaParser::EXTENDS);
    setState(4058);
    classType();
    setState(4059);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Superinterfaces_DropletFileContext ------------------------------------------------------------------

JavaParser::Superinterfaces_DropletFileContext::Superinterfaces_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::InterfaceTypeListContext* JavaParser::Superinterfaces_DropletFileContext::interfaceTypeList() {
  return getRuleContext<JavaParser::InterfaceTypeListContext>(0);
}

tree::TerminalNode* JavaParser::Superinterfaces_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::Superinterfaces_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleSuperinterfaces_DropletFile;
}

void JavaParser::Superinterfaces_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperinterfaces_DropletFile(this);
}

void JavaParser::Superinterfaces_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperinterfaces_DropletFile(this);
}

JavaParser::Superinterfaces_DropletFileContext* JavaParser::superinterfaces_DropletFile() {
  Superinterfaces_DropletFileContext *_localctx = _tracker.createInstance<Superinterfaces_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 592, JavaParser::RuleSuperinterfaces_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4061);
    match(JavaParser::IMPLEMENTS);
    setState(4062);
    interfaceTypeList();
    setState(4063);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceTypeList_DropletFileContext ------------------------------------------------------------------

JavaParser::InterfaceTypeList_DropletFileContext::InterfaceTypeList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::InterfaceTypeContext *> JavaParser::InterfaceTypeList_DropletFileContext::interfaceType() {
  return getRuleContexts<JavaParser::InterfaceTypeContext>();
}

JavaParser::InterfaceTypeContext* JavaParser::InterfaceTypeList_DropletFileContext::interfaceType(size_t i) {
  return getRuleContext<JavaParser::InterfaceTypeContext>(i);
}

tree::TerminalNode* JavaParser::InterfaceTypeList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::InterfaceTypeList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceTypeList_DropletFile;
}

void JavaParser::InterfaceTypeList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceTypeList_DropletFile(this);
}

void JavaParser::InterfaceTypeList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceTypeList_DropletFile(this);
}

JavaParser::InterfaceTypeList_DropletFileContext* JavaParser::interfaceTypeList_DropletFile() {
  InterfaceTypeList_DropletFileContext *_localctx = _tracker.createInstance<InterfaceTypeList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 594, JavaParser::RuleInterfaceTypeList_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4065);
    interfaceType();
    setState(4070);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(4066);
      match(JavaParser::COMMA);
      setState(4067);
      interfaceType();
      setState(4072);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4073);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBody_DropletFileContext ------------------------------------------------------------------

JavaParser::ClassBody_DropletFileContext::ClassBody_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassBody_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::ClassBodyDeclarationContext *> JavaParser::ClassBody_DropletFileContext::classBodyDeclaration() {
  return getRuleContexts<JavaParser::ClassBodyDeclarationContext>();
}

JavaParser::ClassBodyDeclarationContext* JavaParser::ClassBody_DropletFileContext::classBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::ClassBodyDeclarationContext>(i);
}


size_t JavaParser::ClassBody_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleClassBody_DropletFile;
}

void JavaParser::ClassBody_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassBody_DropletFile(this);
}

void JavaParser::ClassBody_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassBody_DropletFile(this);
}

JavaParser::ClassBody_DropletFileContext* JavaParser::classBody_DropletFile() {
  ClassBody_DropletFileContext *_localctx = _tracker.createInstance<ClassBody_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 596, JavaParser::RuleClassBody_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4075);
    match(JavaParser::LBRACE);
    setState(4079);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::INTERFACE)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NATIVE)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::SYNCHRONIZED)
      | (1ULL << JavaParser::TRANSIENT)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::VOLATILE))) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & ((1ULL << (JavaParser::LBRACE - 70))
      | (1ULL << (JavaParser::SEMI - 70))
      | (1ULL << (JavaParser::AT - 70))
      | (1ULL << (JavaParser::LT - 70))
      | (1ULL << (JavaParser::Identifier - 70)))) != 0)) {
      setState(4076);
      classBodyDeclaration();
      setState(4081);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4082);
    match(JavaParser::RBRACE);
    setState(4083);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::ClassBodyDeclaration_DropletFileContext::ClassBodyDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassMemberDeclarationContext* JavaParser::ClassBodyDeclaration_DropletFileContext::classMemberDeclaration() {
  return getRuleContext<JavaParser::ClassMemberDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::ClassBodyDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::InstanceInitializerContext* JavaParser::ClassBodyDeclaration_DropletFileContext::instanceInitializer() {
  return getRuleContext<JavaParser::InstanceInitializerContext>(0);
}

JavaParser::StaticInitializerContext* JavaParser::ClassBodyDeclaration_DropletFileContext::staticInitializer() {
  return getRuleContext<JavaParser::StaticInitializerContext>(0);
}

JavaParser::ConstructorDeclarationContext* JavaParser::ClassBodyDeclaration_DropletFileContext::constructorDeclaration() {
  return getRuleContext<JavaParser::ConstructorDeclarationContext>(0);
}


size_t JavaParser::ClassBodyDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleClassBodyDeclaration_DropletFile;
}

void JavaParser::ClassBodyDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassBodyDeclaration_DropletFile(this);
}

void JavaParser::ClassBodyDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassBodyDeclaration_DropletFile(this);
}

JavaParser::ClassBodyDeclaration_DropletFileContext* JavaParser::classBodyDeclaration_DropletFile() {
  ClassBodyDeclaration_DropletFileContext *_localctx = _tracker.createInstance<ClassBodyDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 598, JavaParser::RuleClassBodyDeclaration_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4097);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 408, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4085);
      classMemberDeclaration();
      setState(4086);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4088);
      instanceInitializer();
      setState(4089);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4091);
      staticInitializer();
      setState(4092);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4094);
      constructorDeclaration();
      setState(4095);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassMemberDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::ClassMemberDeclaration_DropletFileContext::ClassMemberDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::FieldDeclarationContext* JavaParser::ClassMemberDeclaration_DropletFileContext::fieldDeclaration() {
  return getRuleContext<JavaParser::FieldDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::ClassMemberDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::MethodDeclarationContext* JavaParser::ClassMemberDeclaration_DropletFileContext::methodDeclaration() {
  return getRuleContext<JavaParser::MethodDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::ClassMemberDeclaration_DropletFileContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::ClassMemberDeclaration_DropletFileContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}


size_t JavaParser::ClassMemberDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleClassMemberDeclaration_DropletFile;
}

void JavaParser::ClassMemberDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassMemberDeclaration_DropletFile(this);
}

void JavaParser::ClassMemberDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassMemberDeclaration_DropletFile(this);
}

JavaParser::ClassMemberDeclaration_DropletFileContext* JavaParser::classMemberDeclaration_DropletFile() {
  ClassMemberDeclaration_DropletFileContext *_localctx = _tracker.createInstance<ClassMemberDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 600, JavaParser::RuleClassMemberDeclaration_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4113);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 409, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4099);
      fieldDeclaration();
      setState(4100);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4102);
      methodDeclaration();
      setState(4103);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4105);
      classDeclaration();
      setState(4106);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4108);
      interfaceDeclaration();
      setState(4109);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4111);
      match(JavaParser::SEMI);
      setState(4112);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::FieldDeclaration_DropletFileContext::FieldDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::FieldDeclaration_DropletFileContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorListContext* JavaParser::FieldDeclaration_DropletFileContext::variableDeclaratorList() {
  return getRuleContext<JavaParser::VariableDeclaratorListContext>(0);
}

tree::TerminalNode* JavaParser::FieldDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::FieldModifierContext *> JavaParser::FieldDeclaration_DropletFileContext::fieldModifier() {
  return getRuleContexts<JavaParser::FieldModifierContext>();
}

JavaParser::FieldModifierContext* JavaParser::FieldDeclaration_DropletFileContext::fieldModifier(size_t i) {
  return getRuleContext<JavaParser::FieldModifierContext>(i);
}


size_t JavaParser::FieldDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleFieldDeclaration_DropletFile;
}

void JavaParser::FieldDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldDeclaration_DropletFile(this);
}

void JavaParser::FieldDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldDeclaration_DropletFile(this);
}

JavaParser::FieldDeclaration_DropletFileContext* JavaParser::fieldDeclaration_DropletFile() {
  FieldDeclaration_DropletFileContext *_localctx = _tracker.createInstance<FieldDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 602, JavaParser::RuleFieldDeclaration_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4118);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & ((1ULL << (JavaParser::FINAL - 28))
      | (1ULL << (JavaParser::PRIVATE - 28))
      | (1ULL << (JavaParser::PROTECTED - 28))
      | (1ULL << (JavaParser::PUBLIC - 28))
      | (1ULL << (JavaParser::STATIC - 28))
      | (1ULL << (JavaParser::TRANSIENT - 28))
      | (1ULL << (JavaParser::VOLATILE - 28))
      | (1ULL << (JavaParser::AT - 28)))) != 0)) {
      setState(4115);
      fieldModifier();
      setState(4120);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4121);
    unannType();
    setState(4122);
    variableDeclaratorList();
    setState(4123);
    match(JavaParser::SEMI);
    setState(4124);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldModifier_DropletFileContext ------------------------------------------------------------------

JavaParser::FieldModifier_DropletFileContext::FieldModifier_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::FieldModifier_DropletFileContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::FieldModifier_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::FieldModifier_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleFieldModifier_DropletFile;
}

void JavaParser::FieldModifier_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldModifier_DropletFile(this);
}

void JavaParser::FieldModifier_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldModifier_DropletFile(this);
}

JavaParser::FieldModifier_DropletFileContext* JavaParser::fieldModifier_DropletFile() {
  FieldModifier_DropletFileContext *_localctx = _tracker.createInstance<FieldModifier_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 604, JavaParser::RuleFieldModifier_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4143);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(4126);
        annotation();
        setState(4127);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(4129);
        match(JavaParser::PUBLIC);
        setState(4130);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(4131);
        match(JavaParser::PROTECTED);
        setState(4132);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(4133);
        match(JavaParser::PRIVATE);
        setState(4134);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 5);
        setState(4135);
        match(JavaParser::STATIC);
        setState(4136);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 6);
        setState(4137);
        match(JavaParser::FINAL);
        setState(4138);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::TRANSIENT: {
        enterOuterAlt(_localctx, 7);
        setState(4139);
        match(JavaParser::TRANSIENT);
        setState(4140);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::VOLATILE: {
        enterOuterAlt(_localctx, 8);
        setState(4141);
        match(JavaParser::VOLATILE);
        setState(4142);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorList_DropletFileContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorList_DropletFileContext::VariableDeclaratorList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::VariableDeclaratorContext *> JavaParser::VariableDeclaratorList_DropletFileContext::variableDeclarator() {
  return getRuleContexts<JavaParser::VariableDeclaratorContext>();
}

JavaParser::VariableDeclaratorContext* JavaParser::VariableDeclaratorList_DropletFileContext::variableDeclarator(size_t i) {
  return getRuleContext<JavaParser::VariableDeclaratorContext>(i);
}

tree::TerminalNode* JavaParser::VariableDeclaratorList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::VariableDeclaratorList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclaratorList_DropletFile;
}

void JavaParser::VariableDeclaratorList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclaratorList_DropletFile(this);
}

void JavaParser::VariableDeclaratorList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclaratorList_DropletFile(this);
}

JavaParser::VariableDeclaratorList_DropletFileContext* JavaParser::variableDeclaratorList_DropletFile() {
  VariableDeclaratorList_DropletFileContext *_localctx = _tracker.createInstance<VariableDeclaratorList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 606, JavaParser::RuleVariableDeclaratorList_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4145);
    variableDeclarator();
    setState(4150);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(4146);
      match(JavaParser::COMMA);
      setState(4147);
      variableDeclarator();
      setState(4152);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4153);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclarator_DropletFileContext ------------------------------------------------------------------

JavaParser::VariableDeclarator_DropletFileContext::VariableDeclarator_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::VariableDeclaratorIdContext* JavaParser::VariableDeclarator_DropletFileContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* JavaParser::VariableDeclarator_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::VariableInitializerContext* JavaParser::VariableDeclarator_DropletFileContext::variableInitializer() {
  return getRuleContext<JavaParser::VariableInitializerContext>(0);
}


size_t JavaParser::VariableDeclarator_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclarator_DropletFile;
}

void JavaParser::VariableDeclarator_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclarator_DropletFile(this);
}

void JavaParser::VariableDeclarator_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclarator_DropletFile(this);
}

JavaParser::VariableDeclarator_DropletFileContext* JavaParser::variableDeclarator_DropletFile() {
  VariableDeclarator_DropletFileContext *_localctx = _tracker.createInstance<VariableDeclarator_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 608, JavaParser::RuleVariableDeclarator_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4155);
    variableDeclaratorId();
    setState(4158);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::ASSIGN) {
      setState(4156);
      match(JavaParser::ASSIGN);
      setState(4157);
      variableInitializer();
    }
    setState(4160);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorId_DropletFileContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorId_DropletFileContext::VariableDeclaratorId_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::VariableDeclaratorId_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::VariableDeclaratorId_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::DimsContext* JavaParser::VariableDeclaratorId_DropletFileContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}


size_t JavaParser::VariableDeclaratorId_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclaratorId_DropletFile;
}

void JavaParser::VariableDeclaratorId_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclaratorId_DropletFile(this);
}

void JavaParser::VariableDeclaratorId_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclaratorId_DropletFile(this);
}

JavaParser::VariableDeclaratorId_DropletFileContext* JavaParser::variableDeclaratorId_DropletFile() {
  VariableDeclaratorId_DropletFileContext *_localctx = _tracker.createInstance<VariableDeclaratorId_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 610, JavaParser::RuleVariableDeclaratorId_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4162);
    identifier();
    setState(4164);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACK

    || _la == JavaParser::AT) {
      setState(4163);
      dims();
    }
    setState(4166);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializer_DropletFileContext ------------------------------------------------------------------

JavaParser::VariableInitializer_DropletFileContext::VariableInitializer_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::VariableInitializer_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::VariableInitializer_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ArrayInitializerContext* JavaParser::VariableInitializer_DropletFileContext::arrayInitializer() {
  return getRuleContext<JavaParser::ArrayInitializerContext>(0);
}


size_t JavaParser::VariableInitializer_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleVariableInitializer_DropletFile;
}

void JavaParser::VariableInitializer_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableInitializer_DropletFile(this);
}

void JavaParser::VariableInitializer_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableInitializer_DropletFile(this);
}

JavaParser::VariableInitializer_DropletFileContext* JavaParser::variableInitializer_DropletFile() {
  VariableInitializer_DropletFileContext *_localctx = _tracker.createInstance<VariableInitializer_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 612, JavaParser::RuleVariableInitializer_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4174);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::IntegerLiteral:
      case JavaParser::FloatingPointLiteral:
      case JavaParser::BooleanLiteral:
      case JavaParser::CharacterLiteral:
      case JavaParser::StringLiteral:
      case JavaParser::NullLiteral:
      case JavaParser::LPAREN:
      case JavaParser::AT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::ADD:
      case JavaParser::SUB:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(4168);
        expression();
        setState(4169);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 2);
        setState(4171);
        arrayInitializer();
        setState(4172);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannType_DropletFileContext ------------------------------------------------------------------

JavaParser::UnannType_DropletFileContext::UnannType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannPrimitiveTypeContext* JavaParser::UnannType_DropletFileContext::unannPrimitiveType() {
  return getRuleContext<JavaParser::UnannPrimitiveTypeContext>(0);
}

tree::TerminalNode* JavaParser::UnannType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::UnannReferenceTypeContext* JavaParser::UnannType_DropletFileContext::unannReferenceType() {
  return getRuleContext<JavaParser::UnannReferenceTypeContext>(0);
}


size_t JavaParser::UnannType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnannType_DropletFile;
}

void JavaParser::UnannType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannType_DropletFile(this);
}

void JavaParser::UnannType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannType_DropletFile(this);
}

JavaParser::UnannType_DropletFileContext* JavaParser::unannType_DropletFile() {
  UnannType_DropletFileContext *_localctx = _tracker.createInstance<UnannType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 614, JavaParser::RuleUnannType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4182);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 416, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4176);
      unannPrimitiveType();
      setState(4177);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4179);
      unannReferenceType();
      setState(4180);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannPrimitiveType_DropletFileContext ------------------------------------------------------------------

JavaParser::UnannPrimitiveType_DropletFileContext::UnannPrimitiveType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NumericTypeContext* JavaParser::UnannPrimitiveType_DropletFileContext::numericType() {
  return getRuleContext<JavaParser::NumericTypeContext>(0);
}

tree::TerminalNode* JavaParser::UnannPrimitiveType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::UnannPrimitiveType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnannPrimitiveType_DropletFile;
}

void JavaParser::UnannPrimitiveType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannPrimitiveType_DropletFile(this);
}

void JavaParser::UnannPrimitiveType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannPrimitiveType_DropletFile(this);
}

JavaParser::UnannPrimitiveType_DropletFileContext* JavaParser::unannPrimitiveType_DropletFile() {
  UnannPrimitiveType_DropletFileContext *_localctx = _tracker.createInstance<UnannPrimitiveType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 616, JavaParser::RuleUnannPrimitiveType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4189);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT: {
        enterOuterAlt(_localctx, 1);
        setState(4184);
        numericType();
        setState(4185);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::BOOLEAN: {
        enterOuterAlt(_localctx, 2);
        setState(4187);
        match(JavaParser::BOOLEAN);
        setState(4188);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannReferenceType_DropletFileContext ------------------------------------------------------------------

JavaParser::UnannReferenceType_DropletFileContext::UnannReferenceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannClassOrInterfaceTypeContext* JavaParser::UnannReferenceType_DropletFileContext::unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannClassOrInterfaceTypeContext>(0);
}

tree::TerminalNode* JavaParser::UnannReferenceType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::UnannTypeVariableContext* JavaParser::UnannReferenceType_DropletFileContext::unannTypeVariable() {
  return getRuleContext<JavaParser::UnannTypeVariableContext>(0);
}

JavaParser::UnannArrayTypeContext* JavaParser::UnannReferenceType_DropletFileContext::unannArrayType() {
  return getRuleContext<JavaParser::UnannArrayTypeContext>(0);
}


size_t JavaParser::UnannReferenceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnannReferenceType_DropletFile;
}

void JavaParser::UnannReferenceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannReferenceType_DropletFile(this);
}

void JavaParser::UnannReferenceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannReferenceType_DropletFile(this);
}

JavaParser::UnannReferenceType_DropletFileContext* JavaParser::unannReferenceType_DropletFile() {
  UnannReferenceType_DropletFileContext *_localctx = _tracker.createInstance<UnannReferenceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 618, JavaParser::RuleUnannReferenceType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4200);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 418, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4191);
      unannClassOrInterfaceType();
      setState(4192);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4194);
      unannTypeVariable();
      setState(4195);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4197);
      unannArrayType();
      setState(4198);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassOrInterfaceType_DropletFileContext ------------------------------------------------------------------

JavaParser::UnannClassOrInterfaceType_DropletFileContext::UnannClassOrInterfaceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext* JavaParser::UnannClassOrInterfaceType_DropletFileContext::unannClassType_lfno_unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::UnannClassOrInterfaceType_DropletFileContext::EOF() {
  return getTokens(JavaParser::EOF);
}

tree::TerminalNode* JavaParser::UnannClassOrInterfaceType_DropletFileContext::EOF(size_t i) {
  return getToken(JavaParser::EOF, i);
}

JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext* JavaParser::UnannClassOrInterfaceType_DropletFileContext::unannInterfaceType_lfno_unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext>(0);
}

std::vector<JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext *> JavaParser::UnannClassOrInterfaceType_DropletFileContext::unannClassType_lf_unannClassOrInterfaceType() {
  return getRuleContexts<JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext>();
}

JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext* JavaParser::UnannClassOrInterfaceType_DropletFileContext::unannClassType_lf_unannClassOrInterfaceType(size_t i) {
  return getRuleContext<JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext>(i);
}

std::vector<JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext *> JavaParser::UnannClassOrInterfaceType_DropletFileContext::unannInterfaceType_lf_unannClassOrInterfaceType() {
  return getRuleContexts<JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>();
}

JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext* JavaParser::UnannClassOrInterfaceType_DropletFileContext::unannInterfaceType_lf_unannClassOrInterfaceType(size_t i) {
  return getRuleContext<JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>(i);
}


size_t JavaParser::UnannClassOrInterfaceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnannClassOrInterfaceType_DropletFile;
}

void JavaParser::UnannClassOrInterfaceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannClassOrInterfaceType_DropletFile(this);
}

void JavaParser::UnannClassOrInterfaceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannClassOrInterfaceType_DropletFile(this);
}

JavaParser::UnannClassOrInterfaceType_DropletFileContext* JavaParser::unannClassOrInterfaceType_DropletFile() {
  UnannClassOrInterfaceType_DropletFileContext *_localctx = _tracker.createInstance<UnannClassOrInterfaceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 620, JavaParser::RuleUnannClassOrInterfaceType_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4208);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 419, _ctx)) {
    case 1: {
      setState(4202);
      unannClassType_lfno_unannClassOrInterfaceType();
      setState(4203);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      setState(4205);
      unannInterfaceType_lfno_unannClassOrInterfaceType();
      setState(4206);
      match(JavaParser::EOF);
      break;
    }

    }
    setState(4218);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::DOT) {
      setState(4216);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 420, _ctx)) {
      case 1: {
        setState(4210);
        unannClassType_lf_unannClassOrInterfaceType();
        setState(4211);
        match(JavaParser::EOF);
        break;
      }

      case 2: {
        setState(4213);
        unannInterfaceType_lf_unannClassOrInterfaceType();
        setState(4214);
        match(JavaParser::EOF);
        break;
      }

      }
      setState(4220);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassType_DropletFileContext ------------------------------------------------------------------

JavaParser::UnannClassType_DropletFileContext::UnannClassType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::UnannClassType_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::UnannClassType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::UnannClassType_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::UnannClassOrInterfaceTypeContext* JavaParser::UnannClassType_DropletFileContext::unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannClassOrInterfaceTypeContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::UnannClassType_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::UnannClassType_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::UnannClassType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnannClassType_DropletFile;
}

void JavaParser::UnannClassType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannClassType_DropletFile(this);
}

void JavaParser::UnannClassType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannClassType_DropletFile(this);
}

JavaParser::UnannClassType_DropletFileContext* JavaParser::unannClassType_DropletFile() {
  UnannClassType_DropletFileContext *_localctx = _tracker.createInstance<UnannClassType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 622, JavaParser::RuleUnannClassType_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4241);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 425, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4221);
      identifier();
      setState(4223);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(4222);
        typeArguments();
      }
      setState(4225);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4227);
      unannClassOrInterfaceType();
      setState(4228);
      match(JavaParser::DOT);
      setState(4232);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(4229);
        annotation();
        setState(4234);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4235);
      identifier();
      setState(4237);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(4236);
        typeArguments();
      }
      setState(4239);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext ------------------------------------------------------------------

JavaParser::UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext::UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsContext* JavaParser::UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnannClassType_lf_unannClassOrInterfaceType_DropletFile;
}

void JavaParser::UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannClassType_lf_unannClassOrInterfaceType_DropletFile(this);
}

void JavaParser::UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannClassType_lf_unannClassOrInterfaceType_DropletFile(this);
}

JavaParser::UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext* JavaParser::unannClassType_lf_unannClassOrInterfaceType_DropletFile() {
  UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext *_localctx = _tracker.createInstance<UnannClassType_lf_unannClassOrInterfaceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 624, JavaParser::RuleUnannClassType_lf_unannClassOrInterfaceType_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4243);
    match(JavaParser::DOT);
    setState(4247);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(4244);
      annotation();
      setState(4249);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4250);
    identifier();
    setState(4252);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(4251);
      typeArguments();
    }
    setState(4254);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassType_lfno_unannClassOrInterfaceType_DropletFileContext ------------------------------------------------------------------

JavaParser::UnannClassType_lfno_unannClassOrInterfaceType_DropletFileContext::UnannClassType_lfno_unannClassOrInterfaceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::UnannClassType_lfno_unannClassOrInterfaceType_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::UnannClassType_lfno_unannClassOrInterfaceType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::UnannClassType_lfno_unannClassOrInterfaceType_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::UnannClassType_lfno_unannClassOrInterfaceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnannClassType_lfno_unannClassOrInterfaceType_DropletFile;
}

void JavaParser::UnannClassType_lfno_unannClassOrInterfaceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannClassType_lfno_unannClassOrInterfaceType_DropletFile(this);
}

void JavaParser::UnannClassType_lfno_unannClassOrInterfaceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannClassType_lfno_unannClassOrInterfaceType_DropletFile(this);
}

JavaParser::UnannClassType_lfno_unannClassOrInterfaceType_DropletFileContext* JavaParser::unannClassType_lfno_unannClassOrInterfaceType_DropletFile() {
  UnannClassType_lfno_unannClassOrInterfaceType_DropletFileContext *_localctx = _tracker.createInstance<UnannClassType_lfno_unannClassOrInterfaceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 626, JavaParser::RuleUnannClassType_lfno_unannClassOrInterfaceType_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4256);
    identifier();
    setState(4258);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(4257);
      typeArguments();
    }
    setState(4260);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannInterfaceType_DropletFileContext ------------------------------------------------------------------

JavaParser::UnannInterfaceType_DropletFileContext::UnannInterfaceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannClassTypeContext* JavaParser::UnannInterfaceType_DropletFileContext::unannClassType() {
  return getRuleContext<JavaParser::UnannClassTypeContext>(0);
}

tree::TerminalNode* JavaParser::UnannInterfaceType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::UnannInterfaceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnannInterfaceType_DropletFile;
}

void JavaParser::UnannInterfaceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannInterfaceType_DropletFile(this);
}

void JavaParser::UnannInterfaceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannInterfaceType_DropletFile(this);
}

JavaParser::UnannInterfaceType_DropletFileContext* JavaParser::unannInterfaceType_DropletFile() {
  UnannInterfaceType_DropletFileContext *_localctx = _tracker.createInstance<UnannInterfaceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 628, JavaParser::RuleUnannInterfaceType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4262);
    unannClassType();
    setState(4263);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannInterfaceType_lf_unannClassOrInterfaceType_DropletFileContext ------------------------------------------------------------------

JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceType_DropletFileContext::UnannInterfaceType_lf_unannClassOrInterfaceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext* JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceType_DropletFileContext::unannClassType_lf_unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannClassType_lf_unannClassOrInterfaceTypeContext>(0);
}

tree::TerminalNode* JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnannInterfaceType_lf_unannClassOrInterfaceType_DropletFile;
}

void JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannInterfaceType_lf_unannClassOrInterfaceType_DropletFile(this);
}

void JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannInterfaceType_lf_unannClassOrInterfaceType_DropletFile(this);
}

JavaParser::UnannInterfaceType_lf_unannClassOrInterfaceType_DropletFileContext* JavaParser::unannInterfaceType_lf_unannClassOrInterfaceType_DropletFile() {
  UnannInterfaceType_lf_unannClassOrInterfaceType_DropletFileContext *_localctx = _tracker.createInstance<UnannInterfaceType_lf_unannClassOrInterfaceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 630, JavaParser::RuleUnannInterfaceType_lf_unannClassOrInterfaceType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4265);
    unannClassType_lf_unannClassOrInterfaceType();
    setState(4266);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFileContext ------------------------------------------------------------------

JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFileContext::UnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext* JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFileContext::unannClassType_lfno_unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
}

tree::TerminalNode* JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFile;
}

void JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFile(this);
}

void JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFile(this);
}

JavaParser::UnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFileContext* JavaParser::unannInterfaceType_lfno_unannClassOrInterfaceType_DropletFile() {
  UnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFileContext *_localctx = _tracker.createInstance<UnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 632, JavaParser::RuleUnannInterfaceType_lfno_unannClassOrInterfaceType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4268);
    unannClassType_lfno_unannClassOrInterfaceType();
    setState(4269);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannTypeVariable_DropletFileContext ------------------------------------------------------------------

JavaParser::UnannTypeVariable_DropletFileContext::UnannTypeVariable_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::UnannTypeVariable_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::UnannTypeVariable_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::UnannTypeVariable_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnannTypeVariable_DropletFile;
}

void JavaParser::UnannTypeVariable_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannTypeVariable_DropletFile(this);
}

void JavaParser::UnannTypeVariable_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannTypeVariable_DropletFile(this);
}

JavaParser::UnannTypeVariable_DropletFileContext* JavaParser::unannTypeVariable_DropletFile() {
  UnannTypeVariable_DropletFileContext *_localctx = _tracker.createInstance<UnannTypeVariable_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 634, JavaParser::RuleUnannTypeVariable_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4271);
    identifier();
    setState(4272);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannArrayType_DropletFileContext ------------------------------------------------------------------

JavaParser::UnannArrayType_DropletFileContext::UnannArrayType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannPrimitiveTypeContext* JavaParser::UnannArrayType_DropletFileContext::unannPrimitiveType() {
  return getRuleContext<JavaParser::UnannPrimitiveTypeContext>(0);
}

JavaParser::DimsContext* JavaParser::UnannArrayType_DropletFileContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}

tree::TerminalNode* JavaParser::UnannArrayType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::UnannClassOrInterfaceTypeContext* JavaParser::UnannArrayType_DropletFileContext::unannClassOrInterfaceType() {
  return getRuleContext<JavaParser::UnannClassOrInterfaceTypeContext>(0);
}

JavaParser::UnannTypeVariableContext* JavaParser::UnannArrayType_DropletFileContext::unannTypeVariable() {
  return getRuleContext<JavaParser::UnannTypeVariableContext>(0);
}


size_t JavaParser::UnannArrayType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnannArrayType_DropletFile;
}

void JavaParser::UnannArrayType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnannArrayType_DropletFile(this);
}

void JavaParser::UnannArrayType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnannArrayType_DropletFile(this);
}

JavaParser::UnannArrayType_DropletFileContext* JavaParser::unannArrayType_DropletFile() {
  UnannArrayType_DropletFileContext *_localctx = _tracker.createInstance<UnannArrayType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 636, JavaParser::RuleUnannArrayType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4286);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 429, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4274);
      unannPrimitiveType();
      setState(4275);
      dims();
      setState(4276);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4278);
      unannClassOrInterfaceType();
      setState(4279);
      dims();
      setState(4280);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4282);
      unannTypeVariable();
      setState(4283);
      dims();
      setState(4284);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::MethodDeclaration_DropletFileContext::MethodDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::MethodHeaderContext* JavaParser::MethodDeclaration_DropletFileContext::methodHeader() {
  return getRuleContext<JavaParser::MethodHeaderContext>(0);
}

JavaParser::MethodBodyContext* JavaParser::MethodDeclaration_DropletFileContext::methodBody() {
  return getRuleContext<JavaParser::MethodBodyContext>(0);
}

tree::TerminalNode* JavaParser::MethodDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::MethodModifierContext *> JavaParser::MethodDeclaration_DropletFileContext::methodModifier() {
  return getRuleContexts<JavaParser::MethodModifierContext>();
}

JavaParser::MethodModifierContext* JavaParser::MethodDeclaration_DropletFileContext::methodModifier(size_t i) {
  return getRuleContext<JavaParser::MethodModifierContext>(i);
}


size_t JavaParser::MethodDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMethodDeclaration_DropletFile;
}

void JavaParser::MethodDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodDeclaration_DropletFile(this);
}

void JavaParser::MethodDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodDeclaration_DropletFile(this);
}

JavaParser::MethodDeclaration_DropletFileContext* JavaParser::methodDeclaration_DropletFile() {
  MethodDeclaration_DropletFileContext *_localctx = _tracker.createInstance<MethodDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 638, JavaParser::RuleMethodDeclaration_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4291);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::NATIVE)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::SYNCHRONIZED))) != 0) || _la == JavaParser::AT) {
      setState(4288);
      methodModifier();
      setState(4293);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4294);
    methodHeader();
    setState(4295);
    methodBody();
    setState(4296);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodModifier_DropletFileContext ------------------------------------------------------------------

JavaParser::MethodModifier_DropletFileContext::MethodModifier_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::MethodModifier_DropletFileContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::MethodModifier_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::MethodModifier_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMethodModifier_DropletFile;
}

void JavaParser::MethodModifier_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodModifier_DropletFile(this);
}

void JavaParser::MethodModifier_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodModifier_DropletFile(this);
}

JavaParser::MethodModifier_DropletFileContext* JavaParser::methodModifier_DropletFile() {
  MethodModifier_DropletFileContext *_localctx = _tracker.createInstance<MethodModifier_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 640, JavaParser::RuleMethodModifier_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4319);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(4298);
        annotation();
        setState(4299);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(4301);
        match(JavaParser::PUBLIC);
        setState(4302);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(4303);
        match(JavaParser::PROTECTED);
        setState(4304);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(4305);
        match(JavaParser::PRIVATE);
        setState(4306);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 5);
        setState(4307);
        match(JavaParser::ABSTRACT);
        setState(4308);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(4309);
        match(JavaParser::STATIC);
        setState(4310);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 7);
        setState(4311);
        match(JavaParser::FINAL);
        setState(4312);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::SYNCHRONIZED: {
        enterOuterAlt(_localctx, 8);
        setState(4313);
        match(JavaParser::SYNCHRONIZED);
        setState(4314);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::NATIVE: {
        enterOuterAlt(_localctx, 9);
        setState(4315);
        match(JavaParser::NATIVE);
        setState(4316);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::STRICTFP: {
        enterOuterAlt(_localctx, 10);
        setState(4317);
        match(JavaParser::STRICTFP);
        setState(4318);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodHeader_DropletFileContext ------------------------------------------------------------------

JavaParser::MethodHeader_DropletFileContext::MethodHeader_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ResultContext* JavaParser::MethodHeader_DropletFileContext::result() {
  return getRuleContext<JavaParser::ResultContext>(0);
}

JavaParser::MethodDeclaratorContext* JavaParser::MethodHeader_DropletFileContext::methodDeclarator() {
  return getRuleContext<JavaParser::MethodDeclaratorContext>(0);
}

tree::TerminalNode* JavaParser::MethodHeader_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::Throws_Context* JavaParser::MethodHeader_DropletFileContext::throws_() {
  return getRuleContext<JavaParser::Throws_Context>(0);
}

JavaParser::TypeParametersContext* JavaParser::MethodHeader_DropletFileContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::MethodHeader_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::MethodHeader_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::MethodHeader_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMethodHeader_DropletFile;
}

void JavaParser::MethodHeader_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodHeader_DropletFile(this);
}

void JavaParser::MethodHeader_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodHeader_DropletFile(this);
}

JavaParser::MethodHeader_DropletFileContext* JavaParser::methodHeader_DropletFile() {
  MethodHeader_DropletFileContext *_localctx = _tracker.createInstance<MethodHeader_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 642, JavaParser::RuleMethodHeader_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4342);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::VOID:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(4321);
        result();
        setState(4322);
        methodDeclarator();
        setState(4324);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::THROWS) {
          setState(4323);
          throws_();
        }
        setState(4326);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::LT: {
        enterOuterAlt(_localctx, 2);
        setState(4328);
        typeParameters();
        setState(4332);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::AT) {
          setState(4329);
          annotation();
          setState(4334);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(4335);
        result();
        setState(4336);
        methodDeclarator();
        setState(4338);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::THROWS) {
          setState(4337);
          throws_();
        }
        setState(4340);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Result_DropletFileContext ------------------------------------------------------------------

JavaParser::Result_DropletFileContext::Result_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::Result_DropletFileContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

tree::TerminalNode* JavaParser::Result_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::Result_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleResult_DropletFile;
}

void JavaParser::Result_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResult_DropletFile(this);
}

void JavaParser::Result_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResult_DropletFile(this);
}

JavaParser::Result_DropletFileContext* JavaParser::result_DropletFile() {
  Result_DropletFileContext *_localctx = _tracker.createInstance<Result_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 644, JavaParser::RuleResult_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4349);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(4344);
        unannType();
        setState(4345);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::VOID: {
        enterOuterAlt(_localctx, 2);
        setState(4347);
        match(JavaParser::VOID);
        setState(4348);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDeclarator_DropletFileContext ------------------------------------------------------------------

JavaParser::MethodDeclarator_DropletFileContext::MethodDeclarator_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::MethodDeclarator_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::MethodDeclarator_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::FormalParameterListContext* JavaParser::MethodDeclarator_DropletFileContext::formalParameterList() {
  return getRuleContext<JavaParser::FormalParameterListContext>(0);
}

JavaParser::DimsContext* JavaParser::MethodDeclarator_DropletFileContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}


size_t JavaParser::MethodDeclarator_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMethodDeclarator_DropletFile;
}

void JavaParser::MethodDeclarator_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodDeclarator_DropletFile(this);
}

void JavaParser::MethodDeclarator_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodDeclarator_DropletFile(this);
}

JavaParser::MethodDeclarator_DropletFileContext* JavaParser::methodDeclarator_DropletFile() {
  MethodDeclarator_DropletFileContext *_localctx = _tracker.createInstance<MethodDeclarator_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 646, JavaParser::RuleMethodDeclarator_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4351);
    identifier();
    setState(4352);
    match(JavaParser::LPAREN);
    setState(4354);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::SHORT))) != 0) || _la == JavaParser::AT

    || _la == JavaParser::Identifier) {
      setState(4353);
      formalParameterList();
    }
    setState(4356);
    match(JavaParser::RPAREN);
    setState(4358);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACK

    || _la == JavaParser::AT) {
      setState(4357);
      dims();
    }
    setState(4360);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterList_DropletFileContext ------------------------------------------------------------------

JavaParser::FormalParameterList_DropletFileContext::FormalParameterList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::FormalParametersContext* JavaParser::FormalParameterList_DropletFileContext::formalParameters() {
  return getRuleContext<JavaParser::FormalParametersContext>(0);
}

JavaParser::LastFormalParameterContext* JavaParser::FormalParameterList_DropletFileContext::lastFormalParameter() {
  return getRuleContext<JavaParser::LastFormalParameterContext>(0);
}

tree::TerminalNode* JavaParser::FormalParameterList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ReceiverParameterContext* JavaParser::FormalParameterList_DropletFileContext::receiverParameter() {
  return getRuleContext<JavaParser::ReceiverParameterContext>(0);
}


size_t JavaParser::FormalParameterList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameterList_DropletFile;
}

void JavaParser::FormalParameterList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameterList_DropletFile(this);
}

void JavaParser::FormalParameterList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameterList_DropletFile(this);
}

JavaParser::FormalParameterList_DropletFileContext* JavaParser::formalParameterList_DropletFile() {
  FormalParameterList_DropletFileContext *_localctx = _tracker.createInstance<FormalParameterList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 648, JavaParser::RuleFormalParameterList_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4373);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 439, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4362);
      formalParameters();
      setState(4363);
      match(JavaParser::COMMA);
      setState(4364);
      lastFormalParameter();
      setState(4365);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4367);
      lastFormalParameter();
      setState(4368);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4370);
      receiverParameter();
      setState(4371);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameters_DropletFileContext ------------------------------------------------------------------

JavaParser::FormalParameters_DropletFileContext::FormalParameters_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::FormalParameterContext *> JavaParser::FormalParameters_DropletFileContext::formalParameter() {
  return getRuleContexts<JavaParser::FormalParameterContext>();
}

JavaParser::FormalParameterContext* JavaParser::FormalParameters_DropletFileContext::formalParameter(size_t i) {
  return getRuleContext<JavaParser::FormalParameterContext>(i);
}

tree::TerminalNode* JavaParser::FormalParameters_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ReceiverParameterContext* JavaParser::FormalParameters_DropletFileContext::receiverParameter() {
  return getRuleContext<JavaParser::ReceiverParameterContext>(0);
}


size_t JavaParser::FormalParameters_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameters_DropletFile;
}

void JavaParser::FormalParameters_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameters_DropletFile(this);
}

void JavaParser::FormalParameters_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameters_DropletFile(this);
}

JavaParser::FormalParameters_DropletFileContext* JavaParser::formalParameters_DropletFile() {
  FormalParameters_DropletFileContext *_localctx = _tracker.createInstance<FormalParameters_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 650, JavaParser::RuleFormalParameters_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4395);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 442, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4375);
      formalParameter();
      setState(4380);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::COMMA) {
        setState(4376);
        match(JavaParser::COMMA);
        setState(4377);
        formalParameter();
        setState(4382);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4383);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4385);
      receiverParameter();
      setState(4390);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::COMMA) {
        setState(4386);
        match(JavaParser::COMMA);
        setState(4387);
        formalParameter();
        setState(4392);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4393);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameter_DropletFileContext ------------------------------------------------------------------

JavaParser::FormalParameter_DropletFileContext::FormalParameter_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::FormalParameter_DropletFileContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::FormalParameter_DropletFileContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* JavaParser::FormalParameter_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::FormalParameter_DropletFileContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::FormalParameter_DropletFileContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::FormalParameter_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameter_DropletFile;
}

void JavaParser::FormalParameter_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameter_DropletFile(this);
}

void JavaParser::FormalParameter_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameter_DropletFile(this);
}

JavaParser::FormalParameter_DropletFileContext* JavaParser::formalParameter_DropletFile() {
  FormalParameter_DropletFileContext *_localctx = _tracker.createInstance<FormalParameter_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 652, JavaParser::RuleFormalParameter_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4400);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::FINAL

    || _la == JavaParser::AT) {
      setState(4397);
      variableModifier();
      setState(4402);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4403);
    unannType();
    setState(4404);
    variableDeclaratorId();
    setState(4405);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableModifier_DropletFileContext ------------------------------------------------------------------

JavaParser::VariableModifier_DropletFileContext::VariableModifier_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::VariableModifier_DropletFileContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::VariableModifier_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::VariableModifier_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleVariableModifier_DropletFile;
}

void JavaParser::VariableModifier_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableModifier_DropletFile(this);
}

void JavaParser::VariableModifier_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableModifier_DropletFile(this);
}

JavaParser::VariableModifier_DropletFileContext* JavaParser::variableModifier_DropletFile() {
  VariableModifier_DropletFileContext *_localctx = _tracker.createInstance<VariableModifier_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 654, JavaParser::RuleVariableModifier_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4412);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(4407);
        annotation();
        setState(4408);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 2);
        setState(4410);
        match(JavaParser::FINAL);
        setState(4411);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LastFormalParameter_DropletFileContext ------------------------------------------------------------------

JavaParser::LastFormalParameter_DropletFileContext::LastFormalParameter_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::LastFormalParameter_DropletFileContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::LastFormalParameter_DropletFileContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* JavaParser::LastFormalParameter_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::LastFormalParameter_DropletFileContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::LastFormalParameter_DropletFileContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::LastFormalParameter_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::LastFormalParameter_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::FormalParameterContext* JavaParser::LastFormalParameter_DropletFileContext::formalParameter() {
  return getRuleContext<JavaParser::FormalParameterContext>(0);
}


size_t JavaParser::LastFormalParameter_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleLastFormalParameter_DropletFile;
}

void JavaParser::LastFormalParameter_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLastFormalParameter_DropletFile(this);
}

void JavaParser::LastFormalParameter_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLastFormalParameter_DropletFile(this);
}

JavaParser::LastFormalParameter_DropletFileContext* JavaParser::lastFormalParameter_DropletFile() {
  LastFormalParameter_DropletFileContext *_localctx = _tracker.createInstance<LastFormalParameter_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 656, JavaParser::RuleLastFormalParameter_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4434);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 447, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4417);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::FINAL

      || _la == JavaParser::AT) {
        setState(4414);
        variableModifier();
        setState(4419);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4420);
      unannType();
      setState(4424);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(4421);
        annotation();
        setState(4426);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4427);
      match(JavaParser::ELLIPSIS);
      setState(4428);
      variableDeclaratorId();
      setState(4429);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4431);
      formalParameter();
      setState(4432);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiverParameter_DropletFileContext ------------------------------------------------------------------

JavaParser::ReceiverParameter_DropletFileContext::ReceiverParameter_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::ReceiverParameter_DropletFileContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

tree::TerminalNode* JavaParser::ReceiverParameter_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ReceiverParameter_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ReceiverParameter_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::IdentifierContext* JavaParser::ReceiverParameter_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::ReceiverParameter_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleReceiverParameter_DropletFile;
}

void JavaParser::ReceiverParameter_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiverParameter_DropletFile(this);
}

void JavaParser::ReceiverParameter_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiverParameter_DropletFile(this);
}

JavaParser::ReceiverParameter_DropletFileContext* JavaParser::receiverParameter_DropletFile() {
  ReceiverParameter_DropletFileContext *_localctx = _tracker.createInstance<ReceiverParameter_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 658, JavaParser::RuleReceiverParameter_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4439);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(4436);
      annotation();
      setState(4441);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4442);
    unannType();
    setState(4446);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8))) != 0) || _la == JavaParser::Identifier) {
      setState(4443);
      identifier();
      setState(4444);
      match(JavaParser::DOT);
    }
    setState(4448);
    match(JavaParser::THIS);
    setState(4449);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Throws__DropletFileContext ------------------------------------------------------------------

JavaParser::Throws__DropletFileContext::Throws__DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExceptionTypeListContext* JavaParser::Throws__DropletFileContext::exceptionTypeList() {
  return getRuleContext<JavaParser::ExceptionTypeListContext>(0);
}

tree::TerminalNode* JavaParser::Throws__DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::Throws__DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleThrows__DropletFile;
}

void JavaParser::Throws__DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrows__DropletFile(this);
}

void JavaParser::Throws__DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrows__DropletFile(this);
}

JavaParser::Throws__DropletFileContext* JavaParser::throws__DropletFile() {
  Throws__DropletFileContext *_localctx = _tracker.createInstance<Throws__DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 660, JavaParser::RuleThrows__DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4451);
    match(JavaParser::THROWS);
    setState(4452);
    exceptionTypeList();
    setState(4453);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionTypeList_DropletFileContext ------------------------------------------------------------------

JavaParser::ExceptionTypeList_DropletFileContext::ExceptionTypeList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ExceptionTypeContext *> JavaParser::ExceptionTypeList_DropletFileContext::exceptionType() {
  return getRuleContexts<JavaParser::ExceptionTypeContext>();
}

JavaParser::ExceptionTypeContext* JavaParser::ExceptionTypeList_DropletFileContext::exceptionType(size_t i) {
  return getRuleContext<JavaParser::ExceptionTypeContext>(i);
}

tree::TerminalNode* JavaParser::ExceptionTypeList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ExceptionTypeList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleExceptionTypeList_DropletFile;
}

void JavaParser::ExceptionTypeList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExceptionTypeList_DropletFile(this);
}

void JavaParser::ExceptionTypeList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExceptionTypeList_DropletFile(this);
}

JavaParser::ExceptionTypeList_DropletFileContext* JavaParser::exceptionTypeList_DropletFile() {
  ExceptionTypeList_DropletFileContext *_localctx = _tracker.createInstance<ExceptionTypeList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 662, JavaParser::RuleExceptionTypeList_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4455);
    exceptionType();
    setState(4460);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(4456);
      match(JavaParser::COMMA);
      setState(4457);
      exceptionType();
      setState(4462);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4463);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionType_DropletFileContext ------------------------------------------------------------------

JavaParser::ExceptionType_DropletFileContext::ExceptionType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassTypeContext* JavaParser::ExceptionType_DropletFileContext::classType() {
  return getRuleContext<JavaParser::ClassTypeContext>(0);
}

tree::TerminalNode* JavaParser::ExceptionType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeVariableContext* JavaParser::ExceptionType_DropletFileContext::typeVariable() {
  return getRuleContext<JavaParser::TypeVariableContext>(0);
}


size_t JavaParser::ExceptionType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleExceptionType_DropletFile;
}

void JavaParser::ExceptionType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExceptionType_DropletFile(this);
}

void JavaParser::ExceptionType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExceptionType_DropletFile(this);
}

JavaParser::ExceptionType_DropletFileContext* JavaParser::exceptionType_DropletFile() {
  ExceptionType_DropletFileContext *_localctx = _tracker.createInstance<ExceptionType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 664, JavaParser::RuleExceptionType_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4471);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 451, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4465);
      classType();
      setState(4466);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4468);
      typeVariable();
      setState(4469);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodBody_DropletFileContext ------------------------------------------------------------------

JavaParser::MethodBody_DropletFileContext::MethodBody_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::MethodBody_DropletFileContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::MethodBody_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::MethodBody_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMethodBody_DropletFile;
}

void JavaParser::MethodBody_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodBody_DropletFile(this);
}

void JavaParser::MethodBody_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodBody_DropletFile(this);
}

JavaParser::MethodBody_DropletFileContext* JavaParser::methodBody_DropletFile() {
  MethodBody_DropletFileContext *_localctx = _tracker.createInstance<MethodBody_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 666, JavaParser::RuleMethodBody_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4478);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(4473);
        block();
        setState(4474);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(4476);
        match(JavaParser::SEMI);
        setState(4477);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstanceInitializer_DropletFileContext ------------------------------------------------------------------

JavaParser::InstanceInitializer_DropletFileContext::InstanceInitializer_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::InstanceInitializer_DropletFileContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::InstanceInitializer_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::InstanceInitializer_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleInstanceInitializer_DropletFile;
}

void JavaParser::InstanceInitializer_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstanceInitializer_DropletFile(this);
}

void JavaParser::InstanceInitializer_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstanceInitializer_DropletFile(this);
}

JavaParser::InstanceInitializer_DropletFileContext* JavaParser::instanceInitializer_DropletFile() {
  InstanceInitializer_DropletFileContext *_localctx = _tracker.createInstance<InstanceInitializer_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 668, JavaParser::RuleInstanceInitializer_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4480);
    block();
    setState(4481);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StaticInitializer_DropletFileContext ------------------------------------------------------------------

JavaParser::StaticInitializer_DropletFileContext::StaticInitializer_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::StaticInitializer_DropletFileContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::StaticInitializer_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::StaticInitializer_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleStaticInitializer_DropletFile;
}

void JavaParser::StaticInitializer_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStaticInitializer_DropletFile(this);
}

void JavaParser::StaticInitializer_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStaticInitializer_DropletFile(this);
}

JavaParser::StaticInitializer_DropletFileContext* JavaParser::staticInitializer_DropletFile() {
  StaticInitializer_DropletFileContext *_localctx = _tracker.createInstance<StaticInitializer_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 670, JavaParser::RuleStaticInitializer_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4483);
    match(JavaParser::STATIC);
    setState(4484);
    block();
    setState(4485);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::ConstructorDeclaration_DropletFileContext::ConstructorDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConstructorDeclaratorContext* JavaParser::ConstructorDeclaration_DropletFileContext::constructorDeclarator() {
  return getRuleContext<JavaParser::ConstructorDeclaratorContext>(0);
}

JavaParser::ConstructorBodyContext* JavaParser::ConstructorDeclaration_DropletFileContext::constructorBody() {
  return getRuleContext<JavaParser::ConstructorBodyContext>(0);
}

tree::TerminalNode* JavaParser::ConstructorDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::ConstructorModifierContext *> JavaParser::ConstructorDeclaration_DropletFileContext::constructorModifier() {
  return getRuleContexts<JavaParser::ConstructorModifierContext>();
}

JavaParser::ConstructorModifierContext* JavaParser::ConstructorDeclaration_DropletFileContext::constructorModifier(size_t i) {
  return getRuleContext<JavaParser::ConstructorModifierContext>(i);
}

JavaParser::Throws_Context* JavaParser::ConstructorDeclaration_DropletFileContext::throws_() {
  return getRuleContext<JavaParser::Throws_Context>(0);
}


size_t JavaParser::ConstructorDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleConstructorDeclaration_DropletFile;
}

void JavaParser::ConstructorDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorDeclaration_DropletFile(this);
}

void JavaParser::ConstructorDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorDeclaration_DropletFile(this);
}

JavaParser::ConstructorDeclaration_DropletFileContext* JavaParser::constructorDeclaration_DropletFile() {
  ConstructorDeclaration_DropletFileContext *_localctx = _tracker.createInstance<ConstructorDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 672, JavaParser::RuleConstructorDeclaration_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4490);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & ((1ULL << (JavaParser::PRIVATE - 43))
      | (1ULL << (JavaParser::PROTECTED - 43))
      | (1ULL << (JavaParser::PUBLIC - 43))
      | (1ULL << (JavaParser::AT - 43)))) != 0)) {
      setState(4487);
      constructorModifier();
      setState(4492);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4493);
    constructorDeclarator();
    setState(4495);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::THROWS) {
      setState(4494);
      throws_();
    }
    setState(4497);
    constructorBody();
    setState(4498);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorModifier_DropletFileContext ------------------------------------------------------------------

JavaParser::ConstructorModifier_DropletFileContext::ConstructorModifier_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::ConstructorModifier_DropletFileContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::ConstructorModifier_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ConstructorModifier_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleConstructorModifier_DropletFile;
}

void JavaParser::ConstructorModifier_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorModifier_DropletFile(this);
}

void JavaParser::ConstructorModifier_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorModifier_DropletFile(this);
}

JavaParser::ConstructorModifier_DropletFileContext* JavaParser::constructorModifier_DropletFile() {
  ConstructorModifier_DropletFileContext *_localctx = _tracker.createInstance<ConstructorModifier_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 674, JavaParser::RuleConstructorModifier_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4509);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(4500);
        annotation();
        setState(4501);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(4503);
        match(JavaParser::PUBLIC);
        setState(4504);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(4505);
        match(JavaParser::PROTECTED);
        setState(4506);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(4507);
        match(JavaParser::PRIVATE);
        setState(4508);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDeclarator_DropletFileContext ------------------------------------------------------------------

JavaParser::ConstructorDeclarator_DropletFileContext::ConstructorDeclarator_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::SimpleTypeNameContext* JavaParser::ConstructorDeclarator_DropletFileContext::simpleTypeName() {
  return getRuleContext<JavaParser::SimpleTypeNameContext>(0);
}

tree::TerminalNode* JavaParser::ConstructorDeclarator_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeParametersContext* JavaParser::ConstructorDeclarator_DropletFileContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::FormalParameterListContext* JavaParser::ConstructorDeclarator_DropletFileContext::formalParameterList() {
  return getRuleContext<JavaParser::FormalParameterListContext>(0);
}


size_t JavaParser::ConstructorDeclarator_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleConstructorDeclarator_DropletFile;
}

void JavaParser::ConstructorDeclarator_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorDeclarator_DropletFile(this);
}

void JavaParser::ConstructorDeclarator_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorDeclarator_DropletFile(this);
}

JavaParser::ConstructorDeclarator_DropletFileContext* JavaParser::constructorDeclarator_DropletFile() {
  ConstructorDeclarator_DropletFileContext *_localctx = _tracker.createInstance<ConstructorDeclarator_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 676, JavaParser::RuleConstructorDeclarator_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4512);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(4511);
      typeParameters();
    }
    setState(4514);
    simpleTypeName();
    setState(4515);
    match(JavaParser::LPAREN);
    setState(4517);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::SHORT))) != 0) || _la == JavaParser::AT

    || _la == JavaParser::Identifier) {
      setState(4516);
      formalParameterList();
    }
    setState(4519);
    match(JavaParser::RPAREN);
    setState(4520);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeName_DropletFileContext ------------------------------------------------------------------

JavaParser::SimpleTypeName_DropletFileContext::SimpleTypeName_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::SimpleTypeName_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::SimpleTypeName_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::SimpleTypeName_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleSimpleTypeName_DropletFile;
}

void JavaParser::SimpleTypeName_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleTypeName_DropletFile(this);
}

void JavaParser::SimpleTypeName_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleTypeName_DropletFile(this);
}

JavaParser::SimpleTypeName_DropletFileContext* JavaParser::simpleTypeName_DropletFile() {
  SimpleTypeName_DropletFileContext *_localctx = _tracker.createInstance<SimpleTypeName_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 678, JavaParser::RuleSimpleTypeName_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4522);
    identifier();
    setState(4523);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorBody_DropletFileContext ------------------------------------------------------------------

JavaParser::ConstructorBody_DropletFileContext::ConstructorBody_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ConstructorBody_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ExplicitConstructorInvocationContext* JavaParser::ConstructorBody_DropletFileContext::explicitConstructorInvocation() {
  return getRuleContext<JavaParser::ExplicitConstructorInvocationContext>(0);
}

JavaParser::BlockStatementsContext* JavaParser::ConstructorBody_DropletFileContext::blockStatements() {
  return getRuleContext<JavaParser::BlockStatementsContext>(0);
}


size_t JavaParser::ConstructorBody_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleConstructorBody_DropletFile;
}

void JavaParser::ConstructorBody_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorBody_DropletFile(this);
}

void JavaParser::ConstructorBody_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorBody_DropletFile(this);
}

JavaParser::ConstructorBody_DropletFileContext* JavaParser::constructorBody_DropletFile() {
  ConstructorBody_DropletFileContext *_localctx = _tracker.createInstance<ConstructorBody_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 680, JavaParser::RuleConstructorBody_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4525);
    match(JavaParser::LBRACE);
    setState(4527);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 458, _ctx)) {
    case 1: {
      setState(4526);
      explicitConstructorInvocation();
      break;
    }

    }
    setState(4530);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::ASSERT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BREAK)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::CONTINUE)
      | (1ULL << JavaParser::DO)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::FOR)
      | (1ULL << JavaParser::IF)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::RETURN)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::SWITCH)
      | (1ULL << JavaParser::SYNCHRONIZED)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::THROW)
      | (1ULL << JavaParser::TRY)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::WHILE)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::LBRACE - 64))
      | (1ULL << (JavaParser::SEMI - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(4529);
      blockStatements();
    }
    setState(4532);
    match(JavaParser::RBRACE);
    setState(4533);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitConstructorInvocation_DropletFileContext ------------------------------------------------------------------

JavaParser::ExplicitConstructorInvocation_DropletFileContext::ExplicitConstructorInvocation_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ExplicitConstructorInvocation_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::ExplicitConstructorInvocation_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::ExplicitConstructorInvocation_DropletFileContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}

JavaParser::ExpressionNameContext* JavaParser::ExplicitConstructorInvocation_DropletFileContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

JavaParser::PrimaryContext* JavaParser::ExplicitConstructorInvocation_DropletFileContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}


size_t JavaParser::ExplicitConstructorInvocation_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleExplicitConstructorInvocation_DropletFile;
}

void JavaParser::ExplicitConstructorInvocation_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicitConstructorInvocation_DropletFile(this);
}

void JavaParser::ExplicitConstructorInvocation_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicitConstructorInvocation_DropletFile(this);
}

JavaParser::ExplicitConstructorInvocation_DropletFileContext* JavaParser::explicitConstructorInvocation_DropletFile() {
  ExplicitConstructorInvocation_DropletFileContext *_localctx = _tracker.createInstance<ExplicitConstructorInvocation_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 682, JavaParser::RuleExplicitConstructorInvocation_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4585);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 468, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4536);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(4535);
        typeArguments();
      }
      setState(4538);
      match(JavaParser::THIS);
      setState(4539);
      match(JavaParser::LPAREN);
      setState(4541);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(4540);
        argumentList();
      }
      setState(4543);
      match(JavaParser::RPAREN);
      setState(4544);
      match(JavaParser::SEMI);
      setState(4545);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4547);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(4546);
        typeArguments();
      }
      setState(4549);
      match(JavaParser::SUPER);
      setState(4550);
      match(JavaParser::LPAREN);
      setState(4552);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(4551);
        argumentList();
      }
      setState(4554);
      match(JavaParser::RPAREN);
      setState(4555);
      match(JavaParser::SEMI);
      setState(4556);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4557);
      expressionName();
      setState(4558);
      match(JavaParser::DOT);
      setState(4560);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(4559);
        typeArguments();
      }
      setState(4562);
      match(JavaParser::SUPER);
      setState(4563);
      match(JavaParser::LPAREN);
      setState(4565);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(4564);
        argumentList();
      }
      setState(4567);
      match(JavaParser::RPAREN);
      setState(4568);
      match(JavaParser::SEMI);
      setState(4569);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4571);
      primary();
      setState(4572);
      match(JavaParser::DOT);
      setState(4574);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(4573);
        typeArguments();
      }
      setState(4576);
      match(JavaParser::SUPER);
      setState(4577);
      match(JavaParser::LPAREN);
      setState(4579);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(4578);
        argumentList();
      }
      setState(4581);
      match(JavaParser::RPAREN);
      setState(4582);
      match(JavaParser::SEMI);
      setState(4583);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::EnumDeclaration_DropletFileContext::EnumDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::EnumDeclaration_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::EnumBodyContext* JavaParser::EnumDeclaration_DropletFileContext::enumBody() {
  return getRuleContext<JavaParser::EnumBodyContext>(0);
}

tree::TerminalNode* JavaParser::EnumDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::ClassModifierContext *> JavaParser::EnumDeclaration_DropletFileContext::classModifier() {
  return getRuleContexts<JavaParser::ClassModifierContext>();
}

JavaParser::ClassModifierContext* JavaParser::EnumDeclaration_DropletFileContext::classModifier(size_t i) {
  return getRuleContext<JavaParser::ClassModifierContext>(i);
}

JavaParser::SuperinterfacesContext* JavaParser::EnumDeclaration_DropletFileContext::superinterfaces() {
  return getRuleContext<JavaParser::SuperinterfacesContext>(0);
}


size_t JavaParser::EnumDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleEnumDeclaration_DropletFile;
}

void JavaParser::EnumDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumDeclaration_DropletFile(this);
}

void JavaParser::EnumDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumDeclaration_DropletFile(this);
}

JavaParser::EnumDeclaration_DropletFileContext* JavaParser::enumDeclaration_DropletFile() {
  EnumDeclaration_DropletFileContext *_localctx = _tracker.createInstance<EnumDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 684, JavaParser::RuleEnumDeclaration_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4590);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP))) != 0) || _la == JavaParser::AT) {
      setState(4587);
      classModifier();
      setState(4592);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4593);
    match(JavaParser::ENUM);
    setState(4594);
    identifier();
    setState(4596);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(4595);
      superinterfaces();
    }
    setState(4598);
    enumBody();
    setState(4599);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumBody_DropletFileContext ------------------------------------------------------------------

JavaParser::EnumBody_DropletFileContext::EnumBody_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::EnumBody_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::EnumConstantListContext* JavaParser::EnumBody_DropletFileContext::enumConstantList() {
  return getRuleContext<JavaParser::EnumConstantListContext>(0);
}

JavaParser::EnumBodyDeclarationsContext* JavaParser::EnumBody_DropletFileContext::enumBodyDeclarations() {
  return getRuleContext<JavaParser::EnumBodyDeclarationsContext>(0);
}


size_t JavaParser::EnumBody_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleEnumBody_DropletFile;
}

void JavaParser::EnumBody_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumBody_DropletFile(this);
}

void JavaParser::EnumBody_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumBody_DropletFile(this);
}

JavaParser::EnumBody_DropletFileContext* JavaParser::enumBody_DropletFile() {
  EnumBody_DropletFileContext *_localctx = _tracker.createInstance<EnumBody_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 686, JavaParser::RuleEnumBody_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4601);
    match(JavaParser::LBRACE);
    setState(4603);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8))) != 0) || _la == JavaParser::AT

    || _la == JavaParser::Identifier) {
      setState(4602);
      enumConstantList();
    }
    setState(4606);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::COMMA) {
      setState(4605);
      match(JavaParser::COMMA);
    }
    setState(4609);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::SEMI) {
      setState(4608);
      enumBodyDeclarations();
    }
    setState(4611);
    match(JavaParser::RBRACE);
    setState(4612);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantList_DropletFileContext ------------------------------------------------------------------

JavaParser::EnumConstantList_DropletFileContext::EnumConstantList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::EnumConstantContext *> JavaParser::EnumConstantList_DropletFileContext::enumConstant() {
  return getRuleContexts<JavaParser::EnumConstantContext>();
}

JavaParser::EnumConstantContext* JavaParser::EnumConstantList_DropletFileContext::enumConstant(size_t i) {
  return getRuleContext<JavaParser::EnumConstantContext>(i);
}

tree::TerminalNode* JavaParser::EnumConstantList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::EnumConstantList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstantList_DropletFile;
}

void JavaParser::EnumConstantList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstantList_DropletFile(this);
}

void JavaParser::EnumConstantList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstantList_DropletFile(this);
}

JavaParser::EnumConstantList_DropletFileContext* JavaParser::enumConstantList_DropletFile() {
  EnumConstantList_DropletFileContext *_localctx = _tracker.createInstance<EnumConstantList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 688, JavaParser::RuleEnumConstantList_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4614);
    enumConstant();
    setState(4619);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(4615);
      match(JavaParser::COMMA);
      setState(4616);
      enumConstant();
      setState(4621);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4622);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstant_DropletFileContext ------------------------------------------------------------------

JavaParser::EnumConstant_DropletFileContext::EnumConstant_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::EnumConstant_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::EnumConstant_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::EnumConstantModifierContext *> JavaParser::EnumConstant_DropletFileContext::enumConstantModifier() {
  return getRuleContexts<JavaParser::EnumConstantModifierContext>();
}

JavaParser::EnumConstantModifierContext* JavaParser::EnumConstant_DropletFileContext::enumConstantModifier(size_t i) {
  return getRuleContext<JavaParser::EnumConstantModifierContext>(i);
}

JavaParser::ClassBodyContext* JavaParser::EnumConstant_DropletFileContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::EnumConstant_DropletFileContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}


size_t JavaParser::EnumConstant_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstant_DropletFile;
}

void JavaParser::EnumConstant_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstant_DropletFile(this);
}

void JavaParser::EnumConstant_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstant_DropletFile(this);
}

JavaParser::EnumConstant_DropletFileContext* JavaParser::enumConstant_DropletFile() {
  EnumConstant_DropletFileContext *_localctx = _tracker.createInstance<EnumConstant_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 690, JavaParser::RuleEnumConstant_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4627);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(4624);
      enumConstantModifier();
      setState(4629);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4630);
    identifier();
    setState(4636);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LPAREN) {
      setState(4631);
      match(JavaParser::LPAREN);
      setState(4633);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(4632);
        argumentList();
      }
      setState(4635);
      match(JavaParser::RPAREN);
    }
    setState(4639);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACE) {
      setState(4638);
      classBody();
    }
    setState(4641);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantModifier_DropletFileContext ------------------------------------------------------------------

JavaParser::EnumConstantModifier_DropletFileContext::EnumConstantModifier_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::EnumConstantModifier_DropletFileContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::EnumConstantModifier_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::EnumConstantModifier_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstantModifier_DropletFile;
}

void JavaParser::EnumConstantModifier_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstantModifier_DropletFile(this);
}

void JavaParser::EnumConstantModifier_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstantModifier_DropletFile(this);
}

JavaParser::EnumConstantModifier_DropletFileContext* JavaParser::enumConstantModifier_DropletFile() {
  EnumConstantModifier_DropletFileContext *_localctx = _tracker.createInstance<EnumConstantModifier_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 692, JavaParser::RuleEnumConstantModifier_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4643);
    annotation();
    setState(4644);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumBodyDeclarations_DropletFileContext ------------------------------------------------------------------

JavaParser::EnumBodyDeclarations_DropletFileContext::EnumBodyDeclarations_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::EnumBodyDeclarations_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::ClassBodyDeclarationContext *> JavaParser::EnumBodyDeclarations_DropletFileContext::classBodyDeclaration() {
  return getRuleContexts<JavaParser::ClassBodyDeclarationContext>();
}

JavaParser::ClassBodyDeclarationContext* JavaParser::EnumBodyDeclarations_DropletFileContext::classBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::ClassBodyDeclarationContext>(i);
}


size_t JavaParser::EnumBodyDeclarations_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleEnumBodyDeclarations_DropletFile;
}

void JavaParser::EnumBodyDeclarations_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumBodyDeclarations_DropletFile(this);
}

void JavaParser::EnumBodyDeclarations_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumBodyDeclarations_DropletFile(this);
}

JavaParser::EnumBodyDeclarations_DropletFileContext* JavaParser::enumBodyDeclarations_DropletFile() {
  EnumBodyDeclarations_DropletFileContext *_localctx = _tracker.createInstance<EnumBodyDeclarations_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 694, JavaParser::RuleEnumBodyDeclarations_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4646);
    match(JavaParser::SEMI);
    setState(4650);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::INTERFACE)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NATIVE)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::SYNCHRONIZED)
      | (1ULL << JavaParser::TRANSIENT)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::VOLATILE))) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & ((1ULL << (JavaParser::LBRACE - 70))
      | (1ULL << (JavaParser::SEMI - 70))
      | (1ULL << (JavaParser::AT - 70))
      | (1ULL << (JavaParser::LT - 70))
      | (1ULL << (JavaParser::Identifier - 70)))) != 0)) {
      setState(4647);
      classBodyDeclaration();
      setState(4652);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4653);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::InterfaceDeclaration_DropletFileContext::InterfaceDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NormalInterfaceDeclarationContext* JavaParser::InterfaceDeclaration_DropletFileContext::normalInterfaceDeclaration() {
  return getRuleContext<JavaParser::NormalInterfaceDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::InterfaceDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::InterfaceDeclaration_DropletFileContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}


size_t JavaParser::InterfaceDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceDeclaration_DropletFile;
}

void JavaParser::InterfaceDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceDeclaration_DropletFile(this);
}

void JavaParser::InterfaceDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceDeclaration_DropletFile(this);
}

JavaParser::InterfaceDeclaration_DropletFileContext* JavaParser::interfaceDeclaration_DropletFile() {
  InterfaceDeclaration_DropletFileContext *_localctx = _tracker.createInstance<InterfaceDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 696, JavaParser::RuleInterfaceDeclaration_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4661);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 480, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4655);
      normalInterfaceDeclaration();
      setState(4656);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4658);
      annotationTypeDeclaration();
      setState(4659);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalInterfaceDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::NormalInterfaceDeclaration_DropletFileContext::NormalInterfaceDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::NormalInterfaceDeclaration_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::InterfaceBodyContext* JavaParser::NormalInterfaceDeclaration_DropletFileContext::interfaceBody() {
  return getRuleContext<JavaParser::InterfaceBodyContext>(0);
}

tree::TerminalNode* JavaParser::NormalInterfaceDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::InterfaceModifierContext *> JavaParser::NormalInterfaceDeclaration_DropletFileContext::interfaceModifier() {
  return getRuleContexts<JavaParser::InterfaceModifierContext>();
}

JavaParser::InterfaceModifierContext* JavaParser::NormalInterfaceDeclaration_DropletFileContext::interfaceModifier(size_t i) {
  return getRuleContext<JavaParser::InterfaceModifierContext>(i);
}

JavaParser::TypeParametersContext* JavaParser::NormalInterfaceDeclaration_DropletFileContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::ExtendsInterfacesContext* JavaParser::NormalInterfaceDeclaration_DropletFileContext::extendsInterfaces() {
  return getRuleContext<JavaParser::ExtendsInterfacesContext>(0);
}


size_t JavaParser::NormalInterfaceDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleNormalInterfaceDeclaration_DropletFile;
}

void JavaParser::NormalInterfaceDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalInterfaceDeclaration_DropletFile(this);
}

void JavaParser::NormalInterfaceDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalInterfaceDeclaration_DropletFile(this);
}

JavaParser::NormalInterfaceDeclaration_DropletFileContext* JavaParser::normalInterfaceDeclaration_DropletFile() {
  NormalInterfaceDeclaration_DropletFileContext *_localctx = _tracker.createInstance<NormalInterfaceDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 698, JavaParser::RuleNormalInterfaceDeclaration_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4666);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP))) != 0) || _la == JavaParser::AT) {
      setState(4663);
      interfaceModifier();
      setState(4668);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4669);
    match(JavaParser::INTERFACE);
    setState(4670);
    identifier();
    setState(4672);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(4671);
      typeParameters();
    }
    setState(4675);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(4674);
      extendsInterfaces();
    }
    setState(4677);
    interfaceBody();
    setState(4678);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceModifier_DropletFileContext ------------------------------------------------------------------

JavaParser::InterfaceModifier_DropletFileContext::InterfaceModifier_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::InterfaceModifier_DropletFileContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::InterfaceModifier_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::InterfaceModifier_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceModifier_DropletFile;
}

void JavaParser::InterfaceModifier_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceModifier_DropletFile(this);
}

void JavaParser::InterfaceModifier_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceModifier_DropletFile(this);
}

JavaParser::InterfaceModifier_DropletFileContext* JavaParser::interfaceModifier_DropletFile() {
  InterfaceModifier_DropletFileContext *_localctx = _tracker.createInstance<InterfaceModifier_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 700, JavaParser::RuleInterfaceModifier_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4695);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(4680);
        annotation();
        setState(4681);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(4683);
        match(JavaParser::PUBLIC);
        setState(4684);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(4685);
        match(JavaParser::PROTECTED);
        setState(4686);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(4687);
        match(JavaParser::PRIVATE);
        setState(4688);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 5);
        setState(4689);
        match(JavaParser::ABSTRACT);
        setState(4690);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(4691);
        match(JavaParser::STATIC);
        setState(4692);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::STRICTFP: {
        enterOuterAlt(_localctx, 7);
        setState(4693);
        match(JavaParser::STRICTFP);
        setState(4694);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtendsInterfaces_DropletFileContext ------------------------------------------------------------------

JavaParser::ExtendsInterfaces_DropletFileContext::ExtendsInterfaces_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::InterfaceTypeListContext* JavaParser::ExtendsInterfaces_DropletFileContext::interfaceTypeList() {
  return getRuleContext<JavaParser::InterfaceTypeListContext>(0);
}

tree::TerminalNode* JavaParser::ExtendsInterfaces_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ExtendsInterfaces_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleExtendsInterfaces_DropletFile;
}

void JavaParser::ExtendsInterfaces_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtendsInterfaces_DropletFile(this);
}

void JavaParser::ExtendsInterfaces_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtendsInterfaces_DropletFile(this);
}

JavaParser::ExtendsInterfaces_DropletFileContext* JavaParser::extendsInterfaces_DropletFile() {
  ExtendsInterfaces_DropletFileContext *_localctx = _tracker.createInstance<ExtendsInterfaces_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 702, JavaParser::RuleExtendsInterfaces_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4697);
    match(JavaParser::EXTENDS);
    setState(4698);
    interfaceTypeList();
    setState(4699);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceBody_DropletFileContext ------------------------------------------------------------------

JavaParser::InterfaceBody_DropletFileContext::InterfaceBody_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::InterfaceBody_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::InterfaceMemberDeclarationContext *> JavaParser::InterfaceBody_DropletFileContext::interfaceMemberDeclaration() {
  return getRuleContexts<JavaParser::InterfaceMemberDeclarationContext>();
}

JavaParser::InterfaceMemberDeclarationContext* JavaParser::InterfaceBody_DropletFileContext::interfaceMemberDeclaration(size_t i) {
  return getRuleContext<JavaParser::InterfaceMemberDeclarationContext>(i);
}


size_t JavaParser::InterfaceBody_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceBody_DropletFile;
}

void JavaParser::InterfaceBody_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceBody_DropletFile(this);
}

void JavaParser::InterfaceBody_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceBody_DropletFile(this);
}

JavaParser::InterfaceBody_DropletFileContext* JavaParser::interfaceBody_DropletFile() {
  InterfaceBody_DropletFileContext *_localctx = _tracker.createInstance<InterfaceBody_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 704, JavaParser::RuleInterfaceBody_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4701);
    match(JavaParser::LBRACE);
    setState(4705);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::DEFAULT)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::INTERFACE)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::VOID))) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & ((1ULL << (JavaParser::SEMI - 74))
      | (1ULL << (JavaParser::AT - 74))
      | (1ULL << (JavaParser::LT - 74))
      | (1ULL << (JavaParser::Identifier - 74)))) != 0)) {
      setState(4702);
      interfaceMemberDeclaration();
      setState(4707);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4708);
    match(JavaParser::RBRACE);
    setState(4709);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMemberDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::InterfaceMemberDeclaration_DropletFileContext::InterfaceMemberDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConstantDeclarationContext* JavaParser::InterfaceMemberDeclaration_DropletFileContext::constantDeclaration() {
  return getRuleContext<JavaParser::ConstantDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::InterfaceMemberDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::InterfaceMethodDeclarationContext* JavaParser::InterfaceMemberDeclaration_DropletFileContext::interfaceMethodDeclaration() {
  return getRuleContext<JavaParser::InterfaceMethodDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::InterfaceMemberDeclaration_DropletFileContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::InterfaceMemberDeclaration_DropletFileContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}


size_t JavaParser::InterfaceMemberDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMemberDeclaration_DropletFile;
}

void JavaParser::InterfaceMemberDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMemberDeclaration_DropletFile(this);
}

void JavaParser::InterfaceMemberDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMemberDeclaration_DropletFile(this);
}

JavaParser::InterfaceMemberDeclaration_DropletFileContext* JavaParser::interfaceMemberDeclaration_DropletFile() {
  InterfaceMemberDeclaration_DropletFileContext *_localctx = _tracker.createInstance<InterfaceMemberDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 706, JavaParser::RuleInterfaceMemberDeclaration_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4725);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 486, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4711);
      constantDeclaration();
      setState(4712);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4714);
      interfaceMethodDeclaration();
      setState(4715);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4717);
      classDeclaration();
      setState(4718);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4720);
      interfaceDeclaration();
      setState(4721);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4723);
      match(JavaParser::SEMI);
      setState(4724);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::ConstantDeclaration_DropletFileContext::ConstantDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::ConstantDeclaration_DropletFileContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorListContext* JavaParser::ConstantDeclaration_DropletFileContext::variableDeclaratorList() {
  return getRuleContext<JavaParser::VariableDeclaratorListContext>(0);
}

tree::TerminalNode* JavaParser::ConstantDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::ConstantModifierContext *> JavaParser::ConstantDeclaration_DropletFileContext::constantModifier() {
  return getRuleContexts<JavaParser::ConstantModifierContext>();
}

JavaParser::ConstantModifierContext* JavaParser::ConstantDeclaration_DropletFileContext::constantModifier(size_t i) {
  return getRuleContext<JavaParser::ConstantModifierContext>(i);
}


size_t JavaParser::ConstantDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleConstantDeclaration_DropletFile;
}

void JavaParser::ConstantDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantDeclaration_DropletFile(this);
}

void JavaParser::ConstantDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantDeclaration_DropletFile(this);
}

JavaParser::ConstantDeclaration_DropletFileContext* JavaParser::constantDeclaration_DropletFile() {
  ConstantDeclaration_DropletFileContext *_localctx = _tracker.createInstance<ConstantDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 708, JavaParser::RuleConstantDeclaration_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4730);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & ((1ULL << (JavaParser::FINAL - 28))
      | (1ULL << (JavaParser::PUBLIC - 28))
      | (1ULL << (JavaParser::STATIC - 28))
      | (1ULL << (JavaParser::AT - 28)))) != 0)) {
      setState(4727);
      constantModifier();
      setState(4732);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4733);
    unannType();
    setState(4734);
    variableDeclaratorList();
    setState(4735);
    match(JavaParser::SEMI);
    setState(4736);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantModifier_DropletFileContext ------------------------------------------------------------------

JavaParser::ConstantModifier_DropletFileContext::ConstantModifier_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::ConstantModifier_DropletFileContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::ConstantModifier_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ConstantModifier_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleConstantModifier_DropletFile;
}

void JavaParser::ConstantModifier_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantModifier_DropletFile(this);
}

void JavaParser::ConstantModifier_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantModifier_DropletFile(this);
}

JavaParser::ConstantModifier_DropletFileContext* JavaParser::constantModifier_DropletFile() {
  ConstantModifier_DropletFileContext *_localctx = _tracker.createInstance<ConstantModifier_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 710, JavaParser::RuleConstantModifier_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4747);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(4738);
        annotation();
        setState(4739);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(4741);
        match(JavaParser::PUBLIC);
        setState(4742);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 3);
        setState(4743);
        match(JavaParser::STATIC);
        setState(4744);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 4);
        setState(4745);
        match(JavaParser::FINAL);
        setState(4746);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::InterfaceMethodDeclaration_DropletFileContext::InterfaceMethodDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::MethodHeaderContext* JavaParser::InterfaceMethodDeclaration_DropletFileContext::methodHeader() {
  return getRuleContext<JavaParser::MethodHeaderContext>(0);
}

JavaParser::MethodBodyContext* JavaParser::InterfaceMethodDeclaration_DropletFileContext::methodBody() {
  return getRuleContext<JavaParser::MethodBodyContext>(0);
}

tree::TerminalNode* JavaParser::InterfaceMethodDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::InterfaceMethodModifierContext *> JavaParser::InterfaceMethodDeclaration_DropletFileContext::interfaceMethodModifier() {
  return getRuleContexts<JavaParser::InterfaceMethodModifierContext>();
}

JavaParser::InterfaceMethodModifierContext* JavaParser::InterfaceMethodDeclaration_DropletFileContext::interfaceMethodModifier(size_t i) {
  return getRuleContext<JavaParser::InterfaceMethodModifierContext>(i);
}


size_t JavaParser::InterfaceMethodDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMethodDeclaration_DropletFile;
}

void JavaParser::InterfaceMethodDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMethodDeclaration_DropletFile(this);
}

void JavaParser::InterfaceMethodDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMethodDeclaration_DropletFile(this);
}

JavaParser::InterfaceMethodDeclaration_DropletFileContext* JavaParser::interfaceMethodDeclaration_DropletFile() {
  InterfaceMethodDeclaration_DropletFileContext *_localctx = _tracker.createInstance<InterfaceMethodDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 712, JavaParser::RuleInterfaceMethodDeclaration_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4752);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::DEFAULT)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP))) != 0) || _la == JavaParser::AT) {
      setState(4749);
      interfaceMethodModifier();
      setState(4754);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4755);
    methodHeader();
    setState(4756);
    methodBody();
    setState(4757);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodModifier_DropletFileContext ------------------------------------------------------------------

JavaParser::InterfaceMethodModifier_DropletFileContext::InterfaceMethodModifier_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::InterfaceMethodModifier_DropletFileContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifier_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::InterfaceMethodModifier_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMethodModifier_DropletFile;
}

void JavaParser::InterfaceMethodModifier_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMethodModifier_DropletFile(this);
}

void JavaParser::InterfaceMethodModifier_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMethodModifier_DropletFile(this);
}

JavaParser::InterfaceMethodModifier_DropletFileContext* JavaParser::interfaceMethodModifier_DropletFile() {
  InterfaceMethodModifier_DropletFileContext *_localctx = _tracker.createInstance<InterfaceMethodModifier_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 714, JavaParser::RuleInterfaceMethodModifier_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4774);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(4759);
        annotation();
        setState(4760);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(4762);
        match(JavaParser::PUBLIC);
        setState(4763);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PRIVATE: {
        enterOuterAlt(_localctx, 3);
        setState(4764);
        match(JavaParser::PRIVATE);
        setState(4765);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 4);
        setState(4766);
        match(JavaParser::ABSTRACT);
        setState(4767);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::DEFAULT: {
        enterOuterAlt(_localctx, 5);
        setState(4768);
        match(JavaParser::DEFAULT);
        setState(4769);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(4770);
        match(JavaParser::STATIC);
        setState(4771);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::STRICTFP: {
        enterOuterAlt(_localctx, 7);
        setState(4772);
        match(JavaParser::STRICTFP);
        setState(4773);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::AnnotationTypeDeclaration_DropletFileContext::AnnotationTypeDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::AnnotationTypeDeclaration_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::AnnotationTypeBodyContext* JavaParser::AnnotationTypeDeclaration_DropletFileContext::annotationTypeBody() {
  return getRuleContext<JavaParser::AnnotationTypeBodyContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationTypeDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::InterfaceModifierContext *> JavaParser::AnnotationTypeDeclaration_DropletFileContext::interfaceModifier() {
  return getRuleContexts<JavaParser::InterfaceModifierContext>();
}

JavaParser::InterfaceModifierContext* JavaParser::AnnotationTypeDeclaration_DropletFileContext::interfaceModifier(size_t i) {
  return getRuleContext<JavaParser::InterfaceModifierContext>(i);
}


size_t JavaParser::AnnotationTypeDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeDeclaration_DropletFile;
}

void JavaParser::AnnotationTypeDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeDeclaration_DropletFile(this);
}

void JavaParser::AnnotationTypeDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeDeclaration_DropletFile(this);
}

JavaParser::AnnotationTypeDeclaration_DropletFileContext* JavaParser::annotationTypeDeclaration_DropletFile() {
  AnnotationTypeDeclaration_DropletFileContext *_localctx = _tracker.createInstance<AnnotationTypeDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 716, JavaParser::RuleAnnotationTypeDeclaration_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4779);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 491, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4776);
        interfaceModifier(); 
      }
      setState(4781);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 491, _ctx);
    }
    setState(4782);
    match(JavaParser::AT);
    setState(4783);
    match(JavaParser::INTERFACE);
    setState(4784);
    identifier();
    setState(4785);
    annotationTypeBody();
    setState(4786);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeBody_DropletFileContext ------------------------------------------------------------------

JavaParser::AnnotationTypeBody_DropletFileContext::AnnotationTypeBody_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::AnnotationTypeBody_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::AnnotationTypeMemberDeclarationContext *> JavaParser::AnnotationTypeBody_DropletFileContext::annotationTypeMemberDeclaration() {
  return getRuleContexts<JavaParser::AnnotationTypeMemberDeclarationContext>();
}

JavaParser::AnnotationTypeMemberDeclarationContext* JavaParser::AnnotationTypeBody_DropletFileContext::annotationTypeMemberDeclaration(size_t i) {
  return getRuleContext<JavaParser::AnnotationTypeMemberDeclarationContext>(i);
}


size_t JavaParser::AnnotationTypeBody_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeBody_DropletFile;
}

void JavaParser::AnnotationTypeBody_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeBody_DropletFile(this);
}

void JavaParser::AnnotationTypeBody_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeBody_DropletFile(this);
}

JavaParser::AnnotationTypeBody_DropletFileContext* JavaParser::annotationTypeBody_DropletFile() {
  AnnotationTypeBody_DropletFileContext *_localctx = _tracker.createInstance<AnnotationTypeBody_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 718, JavaParser::RuleAnnotationTypeBody_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4788);
    match(JavaParser::LBRACE);
    setState(4792);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::INTERFACE)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP))) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & ((1ULL << (JavaParser::SEMI - 74))
      | (1ULL << (JavaParser::AT - 74))
      | (1ULL << (JavaParser::Identifier - 74)))) != 0)) {
      setState(4789);
      annotationTypeMemberDeclaration();
      setState(4794);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4795);
    match(JavaParser::RBRACE);
    setState(4796);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeMemberDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::AnnotationTypeMemberDeclaration_DropletFileContext::AnnotationTypeMemberDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationTypeElementDeclarationContext* JavaParser::AnnotationTypeMemberDeclaration_DropletFileContext::annotationTypeElementDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeElementDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationTypeMemberDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ConstantDeclarationContext* JavaParser::AnnotationTypeMemberDeclaration_DropletFileContext::constantDeclaration() {
  return getRuleContext<JavaParser::ConstantDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::AnnotationTypeMemberDeclaration_DropletFileContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::AnnotationTypeMemberDeclaration_DropletFileContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}


size_t JavaParser::AnnotationTypeMemberDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeMemberDeclaration_DropletFile;
}

void JavaParser::AnnotationTypeMemberDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeMemberDeclaration_DropletFile(this);
}

void JavaParser::AnnotationTypeMemberDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeMemberDeclaration_DropletFile(this);
}

JavaParser::AnnotationTypeMemberDeclaration_DropletFileContext* JavaParser::annotationTypeMemberDeclaration_DropletFile() {
  AnnotationTypeMemberDeclaration_DropletFileContext *_localctx = _tracker.createInstance<AnnotationTypeMemberDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 720, JavaParser::RuleAnnotationTypeMemberDeclaration_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4812);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 493, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4798);
      annotationTypeElementDeclaration();
      setState(4799);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4801);
      constantDeclaration();
      setState(4802);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4804);
      classDeclaration();
      setState(4805);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4807);
      interfaceDeclaration();
      setState(4808);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4810);
      match(JavaParser::SEMI);
      setState(4811);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeElementDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::AnnotationTypeElementDeclaration_DropletFileContext::AnnotationTypeElementDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::AnnotationTypeElementDeclaration_DropletFileContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::AnnotationTypeElementDeclaration_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationTypeElementDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::AnnotationTypeElementModifierContext *> JavaParser::AnnotationTypeElementDeclaration_DropletFileContext::annotationTypeElementModifier() {
  return getRuleContexts<JavaParser::AnnotationTypeElementModifierContext>();
}

JavaParser::AnnotationTypeElementModifierContext* JavaParser::AnnotationTypeElementDeclaration_DropletFileContext::annotationTypeElementModifier(size_t i) {
  return getRuleContext<JavaParser::AnnotationTypeElementModifierContext>(i);
}

JavaParser::DimsContext* JavaParser::AnnotationTypeElementDeclaration_DropletFileContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}

JavaParser::DefaultValueContext* JavaParser::AnnotationTypeElementDeclaration_DropletFileContext::defaultValue() {
  return getRuleContext<JavaParser::DefaultValueContext>(0);
}


size_t JavaParser::AnnotationTypeElementDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeElementDeclaration_DropletFile;
}

void JavaParser::AnnotationTypeElementDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeElementDeclaration_DropletFile(this);
}

void JavaParser::AnnotationTypeElementDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeElementDeclaration_DropletFile(this);
}

JavaParser::AnnotationTypeElementDeclaration_DropletFileContext* JavaParser::annotationTypeElementDeclaration_DropletFile() {
  AnnotationTypeElementDeclaration_DropletFileContext *_localctx = _tracker.createInstance<AnnotationTypeElementDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 722, JavaParser::RuleAnnotationTypeElementDeclaration_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4817);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::ABSTRACT

    || _la == JavaParser::PUBLIC || _la == JavaParser::AT) {
      setState(4814);
      annotationTypeElementModifier();
      setState(4819);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4820);
    unannType();
    setState(4821);
    identifier();
    setState(4822);
    match(JavaParser::LPAREN);
    setState(4823);
    match(JavaParser::RPAREN);
    setState(4825);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACK

    || _la == JavaParser::AT) {
      setState(4824);
      dims();
    }
    setState(4828);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::DEFAULT) {
      setState(4827);
      defaultValue();
    }
    setState(4830);
    match(JavaParser::SEMI);
    setState(4831);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeElementModifier_DropletFileContext ------------------------------------------------------------------

JavaParser::AnnotationTypeElementModifier_DropletFileContext::AnnotationTypeElementModifier_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::AnnotationTypeElementModifier_DropletFileContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationTypeElementModifier_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::AnnotationTypeElementModifier_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeElementModifier_DropletFile;
}

void JavaParser::AnnotationTypeElementModifier_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeElementModifier_DropletFile(this);
}

void JavaParser::AnnotationTypeElementModifier_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeElementModifier_DropletFile(this);
}

JavaParser::AnnotationTypeElementModifier_DropletFileContext* JavaParser::annotationTypeElementModifier_DropletFile() {
  AnnotationTypeElementModifier_DropletFileContext *_localctx = _tracker.createInstance<AnnotationTypeElementModifier_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 724, JavaParser::RuleAnnotationTypeElementModifier_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4840);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(4833);
        annotation();
        setState(4834);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(4836);
        match(JavaParser::PUBLIC);
        setState(4837);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 3);
        setState(4838);
        match(JavaParser::ABSTRACT);
        setState(4839);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultValue_DropletFileContext ------------------------------------------------------------------

JavaParser::DefaultValue_DropletFileContext::DefaultValue_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ElementValueContext* JavaParser::DefaultValue_DropletFileContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}

tree::TerminalNode* JavaParser::DefaultValue_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::DefaultValue_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleDefaultValue_DropletFile;
}

void JavaParser::DefaultValue_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultValue_DropletFile(this);
}

void JavaParser::DefaultValue_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultValue_DropletFile(this);
}

JavaParser::DefaultValue_DropletFileContext* JavaParser::defaultValue_DropletFile() {
  DefaultValue_DropletFileContext *_localctx = _tracker.createInstance<DefaultValue_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 726, JavaParser::RuleDefaultValue_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4842);
    match(JavaParser::DEFAULT);
    setState(4843);
    elementValue();
    setState(4844);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_DropletFileContext ------------------------------------------------------------------

JavaParser::Annotation_DropletFileContext::Annotation_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NormalAnnotationContext* JavaParser::Annotation_DropletFileContext::normalAnnotation() {
  return getRuleContext<JavaParser::NormalAnnotationContext>(0);
}

tree::TerminalNode* JavaParser::Annotation_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::MarkerAnnotationContext* JavaParser::Annotation_DropletFileContext::markerAnnotation() {
  return getRuleContext<JavaParser::MarkerAnnotationContext>(0);
}

JavaParser::SingleElementAnnotationContext* JavaParser::Annotation_DropletFileContext::singleElementAnnotation() {
  return getRuleContext<JavaParser::SingleElementAnnotationContext>(0);
}


size_t JavaParser::Annotation_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAnnotation_DropletFile;
}

void JavaParser::Annotation_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_DropletFile(this);
}

void JavaParser::Annotation_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_DropletFile(this);
}

JavaParser::Annotation_DropletFileContext* JavaParser::annotation_DropletFile() {
  Annotation_DropletFileContext *_localctx = _tracker.createInstance<Annotation_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 728, JavaParser::RuleAnnotation_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4855);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 498, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4846);
      normalAnnotation();
      setState(4847);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4849);
      markerAnnotation();
      setState(4850);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4852);
      singleElementAnnotation();
      setState(4853);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalAnnotation_DropletFileContext ------------------------------------------------------------------

JavaParser::NormalAnnotation_DropletFileContext::NormalAnnotation_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeNameContext* JavaParser::NormalAnnotation_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

tree::TerminalNode* JavaParser::NormalAnnotation_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ElementValuePairListContext* JavaParser::NormalAnnotation_DropletFileContext::elementValuePairList() {
  return getRuleContext<JavaParser::ElementValuePairListContext>(0);
}


size_t JavaParser::NormalAnnotation_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleNormalAnnotation_DropletFile;
}

void JavaParser::NormalAnnotation_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalAnnotation_DropletFile(this);
}

void JavaParser::NormalAnnotation_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalAnnotation_DropletFile(this);
}

JavaParser::NormalAnnotation_DropletFileContext* JavaParser::normalAnnotation_DropletFile() {
  NormalAnnotation_DropletFileContext *_localctx = _tracker.createInstance<NormalAnnotation_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 730, JavaParser::RuleNormalAnnotation_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4857);
    match(JavaParser::AT);
    setState(4858);
    typeName();
    setState(4859);
    match(JavaParser::LPAREN);
    setState(4861);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8))) != 0) || _la == JavaParser::Identifier) {
      setState(4860);
      elementValuePairList();
    }
    setState(4863);
    match(JavaParser::RPAREN);
    setState(4864);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePairList_DropletFileContext ------------------------------------------------------------------

JavaParser::ElementValuePairList_DropletFileContext::ElementValuePairList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ElementValuePairContext *> JavaParser::ElementValuePairList_DropletFileContext::elementValuePair() {
  return getRuleContexts<JavaParser::ElementValuePairContext>();
}

JavaParser::ElementValuePairContext* JavaParser::ElementValuePairList_DropletFileContext::elementValuePair(size_t i) {
  return getRuleContext<JavaParser::ElementValuePairContext>(i);
}

tree::TerminalNode* JavaParser::ElementValuePairList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ElementValuePairList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleElementValuePairList_DropletFile;
}

void JavaParser::ElementValuePairList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValuePairList_DropletFile(this);
}

void JavaParser::ElementValuePairList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValuePairList_DropletFile(this);
}

JavaParser::ElementValuePairList_DropletFileContext* JavaParser::elementValuePairList_DropletFile() {
  ElementValuePairList_DropletFileContext *_localctx = _tracker.createInstance<ElementValuePairList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 732, JavaParser::RuleElementValuePairList_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4866);
    elementValuePair();
    setState(4871);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(4867);
      match(JavaParser::COMMA);
      setState(4868);
      elementValuePair();
      setState(4873);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4874);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePair_DropletFileContext ------------------------------------------------------------------

JavaParser::ElementValuePair_DropletFileContext::ElementValuePair_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ElementValuePair_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ElementValueContext* JavaParser::ElementValuePair_DropletFileContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}

tree::TerminalNode* JavaParser::ElementValuePair_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ElementValuePair_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleElementValuePair_DropletFile;
}

void JavaParser::ElementValuePair_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValuePair_DropletFile(this);
}

void JavaParser::ElementValuePair_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValuePair_DropletFile(this);
}

JavaParser::ElementValuePair_DropletFileContext* JavaParser::elementValuePair_DropletFile() {
  ElementValuePair_DropletFileContext *_localctx = _tracker.createInstance<ElementValuePair_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 734, JavaParser::RuleElementValuePair_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4876);
    identifier();
    setState(4877);
    match(JavaParser::ASSIGN);
    setState(4878);
    elementValue();
    setState(4879);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValue_DropletFileContext ------------------------------------------------------------------

JavaParser::ElementValue_DropletFileContext::ElementValue_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConditionalExpressionContext* JavaParser::ElementValue_DropletFileContext::conditionalExpression() {
  return getRuleContext<JavaParser::ConditionalExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ElementValue_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ElementValueArrayInitializerContext* JavaParser::ElementValue_DropletFileContext::elementValueArrayInitializer() {
  return getRuleContext<JavaParser::ElementValueArrayInitializerContext>(0);
}

JavaParser::AnnotationContext* JavaParser::ElementValue_DropletFileContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::ElementValue_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleElementValue_DropletFile;
}

void JavaParser::ElementValue_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValue_DropletFile(this);
}

void JavaParser::ElementValue_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValue_DropletFile(this);
}

JavaParser::ElementValue_DropletFileContext* JavaParser::elementValue_DropletFile() {
  ElementValue_DropletFileContext *_localctx = _tracker.createInstance<ElementValue_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 736, JavaParser::RuleElementValue_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4890);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 501, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4881);
      conditionalExpression();
      setState(4882);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4884);
      elementValueArrayInitializer();
      setState(4885);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4887);
      annotation();
      setState(4888);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueArrayInitializer_DropletFileContext ------------------------------------------------------------------

JavaParser::ElementValueArrayInitializer_DropletFileContext::ElementValueArrayInitializer_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ElementValueArrayInitializer_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ElementValueListContext* JavaParser::ElementValueArrayInitializer_DropletFileContext::elementValueList() {
  return getRuleContext<JavaParser::ElementValueListContext>(0);
}


size_t JavaParser::ElementValueArrayInitializer_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleElementValueArrayInitializer_DropletFile;
}

void JavaParser::ElementValueArrayInitializer_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValueArrayInitializer_DropletFile(this);
}

void JavaParser::ElementValueArrayInitializer_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValueArrayInitializer_DropletFile(this);
}

JavaParser::ElementValueArrayInitializer_DropletFileContext* JavaParser::elementValueArrayInitializer_DropletFile() {
  ElementValueArrayInitializer_DropletFileContext *_localctx = _tracker.createInstance<ElementValueArrayInitializer_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 738, JavaParser::RuleElementValueArrayInitializer_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4892);
    match(JavaParser::LBRACE);
    setState(4894);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::LBRACE - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(4893);
      elementValueList();
    }
    setState(4897);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::COMMA) {
      setState(4896);
      match(JavaParser::COMMA);
    }
    setState(4899);
    match(JavaParser::RBRACE);
    setState(4900);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueList_DropletFileContext ------------------------------------------------------------------

JavaParser::ElementValueList_DropletFileContext::ElementValueList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ElementValueContext *> JavaParser::ElementValueList_DropletFileContext::elementValue() {
  return getRuleContexts<JavaParser::ElementValueContext>();
}

JavaParser::ElementValueContext* JavaParser::ElementValueList_DropletFileContext::elementValue(size_t i) {
  return getRuleContext<JavaParser::ElementValueContext>(i);
}

tree::TerminalNode* JavaParser::ElementValueList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ElementValueList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleElementValueList_DropletFile;
}

void JavaParser::ElementValueList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValueList_DropletFile(this);
}

void JavaParser::ElementValueList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValueList_DropletFile(this);
}

JavaParser::ElementValueList_DropletFileContext* JavaParser::elementValueList_DropletFile() {
  ElementValueList_DropletFileContext *_localctx = _tracker.createInstance<ElementValueList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 740, JavaParser::RuleElementValueList_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4902);
    elementValue();
    setState(4907);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(4903);
      match(JavaParser::COMMA);
      setState(4904);
      elementValue();
      setState(4909);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4910);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MarkerAnnotation_DropletFileContext ------------------------------------------------------------------

JavaParser::MarkerAnnotation_DropletFileContext::MarkerAnnotation_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeNameContext* JavaParser::MarkerAnnotation_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

tree::TerminalNode* JavaParser::MarkerAnnotation_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::MarkerAnnotation_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMarkerAnnotation_DropletFile;
}

void JavaParser::MarkerAnnotation_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMarkerAnnotation_DropletFile(this);
}

void JavaParser::MarkerAnnotation_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMarkerAnnotation_DropletFile(this);
}

JavaParser::MarkerAnnotation_DropletFileContext* JavaParser::markerAnnotation_DropletFile() {
  MarkerAnnotation_DropletFileContext *_localctx = _tracker.createInstance<MarkerAnnotation_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 742, JavaParser::RuleMarkerAnnotation_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4912);
    match(JavaParser::AT);
    setState(4913);
    typeName();
    setState(4914);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleElementAnnotation_DropletFileContext ------------------------------------------------------------------

JavaParser::SingleElementAnnotation_DropletFileContext::SingleElementAnnotation_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeNameContext* JavaParser::SingleElementAnnotation_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::ElementValueContext* JavaParser::SingleElementAnnotation_DropletFileContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}

tree::TerminalNode* JavaParser::SingleElementAnnotation_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::SingleElementAnnotation_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleSingleElementAnnotation_DropletFile;
}

void JavaParser::SingleElementAnnotation_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleElementAnnotation_DropletFile(this);
}

void JavaParser::SingleElementAnnotation_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleElementAnnotation_DropletFile(this);
}

JavaParser::SingleElementAnnotation_DropletFileContext* JavaParser::singleElementAnnotation_DropletFile() {
  SingleElementAnnotation_DropletFileContext *_localctx = _tracker.createInstance<SingleElementAnnotation_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 744, JavaParser::RuleSingleElementAnnotation_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4916);
    match(JavaParser::AT);
    setState(4917);
    typeName();
    setState(4918);
    match(JavaParser::LPAREN);
    setState(4919);
    elementValue();
    setState(4920);
    match(JavaParser::RPAREN);
    setState(4921);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayInitializer_DropletFileContext ------------------------------------------------------------------

JavaParser::ArrayInitializer_DropletFileContext::ArrayInitializer_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ArrayInitializer_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::VariableInitializerListContext* JavaParser::ArrayInitializer_DropletFileContext::variableInitializerList() {
  return getRuleContext<JavaParser::VariableInitializerListContext>(0);
}


size_t JavaParser::ArrayInitializer_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleArrayInitializer_DropletFile;
}

void JavaParser::ArrayInitializer_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayInitializer_DropletFile(this);
}

void JavaParser::ArrayInitializer_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayInitializer_DropletFile(this);
}

JavaParser::ArrayInitializer_DropletFileContext* JavaParser::arrayInitializer_DropletFile() {
  ArrayInitializer_DropletFileContext *_localctx = _tracker.createInstance<ArrayInitializer_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 746, JavaParser::RuleArrayInitializer_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4923);
    match(JavaParser::LBRACE);
    setState(4925);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::LBRACE - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(4924);
      variableInitializerList();
    }
    setState(4928);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::COMMA) {
      setState(4927);
      match(JavaParser::COMMA);
    }
    setState(4930);
    match(JavaParser::RBRACE);
    setState(4931);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializerList_DropletFileContext ------------------------------------------------------------------

JavaParser::VariableInitializerList_DropletFileContext::VariableInitializerList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::VariableInitializerContext *> JavaParser::VariableInitializerList_DropletFileContext::variableInitializer() {
  return getRuleContexts<JavaParser::VariableInitializerContext>();
}

JavaParser::VariableInitializerContext* JavaParser::VariableInitializerList_DropletFileContext::variableInitializer(size_t i) {
  return getRuleContext<JavaParser::VariableInitializerContext>(i);
}

tree::TerminalNode* JavaParser::VariableInitializerList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::VariableInitializerList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleVariableInitializerList_DropletFile;
}

void JavaParser::VariableInitializerList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableInitializerList_DropletFile(this);
}

void JavaParser::VariableInitializerList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableInitializerList_DropletFile(this);
}

JavaParser::VariableInitializerList_DropletFileContext* JavaParser::variableInitializerList_DropletFile() {
  VariableInitializerList_DropletFileContext *_localctx = _tracker.createInstance<VariableInitializerList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 748, JavaParser::RuleVariableInitializerList_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4933);
    variableInitializer();
    setState(4938);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(4934);
      match(JavaParser::COMMA);
      setState(4935);
      variableInitializer();
      setState(4940);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4941);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_DropletFileContext ------------------------------------------------------------------

JavaParser::Block_DropletFileContext::Block_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::Block_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::BlockStatementsContext* JavaParser::Block_DropletFileContext::blockStatements() {
  return getRuleContext<JavaParser::BlockStatementsContext>(0);
}


size_t JavaParser::Block_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleBlock_DropletFile;
}

void JavaParser::Block_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_DropletFile(this);
}

void JavaParser::Block_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_DropletFile(this);
}

JavaParser::Block_DropletFileContext* JavaParser::block_DropletFile() {
  Block_DropletFileContext *_localctx = _tracker.createInstance<Block_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 750, JavaParser::RuleBlock_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4943);
    match(JavaParser::LBRACE);
    setState(4945);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::ASSERT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BREAK)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::CONTINUE)
      | (1ULL << JavaParser::DO)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::FOR)
      | (1ULL << JavaParser::IF)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::RETURN)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::SWITCH)
      | (1ULL << JavaParser::SYNCHRONIZED)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::THROW)
      | (1ULL << JavaParser::TRY)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::WHILE)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::LBRACE - 64))
      | (1ULL << (JavaParser::SEMI - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(4944);
      blockStatements();
    }
    setState(4947);
    match(JavaParser::RBRACE);
    setState(4948);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatements_DropletFileContext ------------------------------------------------------------------

JavaParser::BlockStatements_DropletFileContext::BlockStatements_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::BlockStatements_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::BlockStatementContext *> JavaParser::BlockStatements_DropletFileContext::blockStatement() {
  return getRuleContexts<JavaParser::BlockStatementContext>();
}

JavaParser::BlockStatementContext* JavaParser::BlockStatements_DropletFileContext::blockStatement(size_t i) {
  return getRuleContext<JavaParser::BlockStatementContext>(i);
}


size_t JavaParser::BlockStatements_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleBlockStatements_DropletFile;
}

void JavaParser::BlockStatements_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStatements_DropletFile(this);
}

void JavaParser::BlockStatements_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStatements_DropletFile(this);
}

JavaParser::BlockStatements_DropletFileContext* JavaParser::blockStatements_DropletFile() {
  BlockStatements_DropletFileContext *_localctx = _tracker.createInstance<BlockStatements_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 752, JavaParser::RuleBlockStatements_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4951); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4950);
      blockStatement();
      setState(4953); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::ABSTRACT)
      | (1ULL << JavaParser::ASSERT)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BREAK)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::CLASS)
      | (1ULL << JavaParser::CONTINUE)
      | (1ULL << JavaParser::DO)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::ENUM)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::FOR)
      | (1ULL << JavaParser::IF)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::PRIVATE)
      | (1ULL << JavaParser::PROTECTED)
      | (1ULL << JavaParser::PUBLIC)
      | (1ULL << JavaParser::RETURN)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::STATIC)
      | (1ULL << JavaParser::STRICTFP)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::SWITCH)
      | (1ULL << JavaParser::SYNCHRONIZED)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::THROW)
      | (1ULL << JavaParser::TRY)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::WHILE)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::LBRACE - 64))
      | (1ULL << (JavaParser::SEMI - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0));
    setState(4955);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::BlockStatement_DropletFileContext::BlockStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LocalVariableDeclarationStatementContext* JavaParser::BlockStatement_DropletFileContext::localVariableDeclarationStatement() {
  return getRuleContext<JavaParser::LocalVariableDeclarationStatementContext>(0);
}

tree::TerminalNode* JavaParser::BlockStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ClassDeclarationContext* JavaParser::BlockStatement_DropletFileContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::StatementContext* JavaParser::BlockStatement_DropletFileContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}


size_t JavaParser::BlockStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleBlockStatement_DropletFile;
}

void JavaParser::BlockStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStatement_DropletFile(this);
}

void JavaParser::BlockStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStatement_DropletFile(this);
}

JavaParser::BlockStatement_DropletFileContext* JavaParser::blockStatement_DropletFile() {
  BlockStatement_DropletFileContext *_localctx = _tracker.createInstance<BlockStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 754, JavaParser::RuleBlockStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4966);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 510, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4957);
      localVariableDeclarationStatement();
      setState(4958);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4960);
      classDeclaration();
      setState(4961);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4963);
      statement();
      setState(4964);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalVariableDeclarationStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::LocalVariableDeclarationStatement_DropletFileContext::LocalVariableDeclarationStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LocalVariableDeclarationContext* JavaParser::LocalVariableDeclarationStatement_DropletFileContext::localVariableDeclaration() {
  return getRuleContext<JavaParser::LocalVariableDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::LocalVariableDeclarationStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::LocalVariableDeclarationStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleLocalVariableDeclarationStatement_DropletFile;
}

void JavaParser::LocalVariableDeclarationStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocalVariableDeclarationStatement_DropletFile(this);
}

void JavaParser::LocalVariableDeclarationStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocalVariableDeclarationStatement_DropletFile(this);
}

JavaParser::LocalVariableDeclarationStatement_DropletFileContext* JavaParser::localVariableDeclarationStatement_DropletFile() {
  LocalVariableDeclarationStatement_DropletFileContext *_localctx = _tracker.createInstance<LocalVariableDeclarationStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 756, JavaParser::RuleLocalVariableDeclarationStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4968);
    localVariableDeclaration();
    setState(4969);
    match(JavaParser::SEMI);
    setState(4970);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalVariableDeclaration_DropletFileContext ------------------------------------------------------------------

JavaParser::LocalVariableDeclaration_DropletFileContext::LocalVariableDeclaration_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::LocalVariableDeclaration_DropletFileContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorListContext* JavaParser::LocalVariableDeclaration_DropletFileContext::variableDeclaratorList() {
  return getRuleContext<JavaParser::VariableDeclaratorListContext>(0);
}

tree::TerminalNode* JavaParser::LocalVariableDeclaration_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::LocalVariableDeclaration_DropletFileContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::LocalVariableDeclaration_DropletFileContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::LocalVariableDeclaration_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleLocalVariableDeclaration_DropletFile;
}

void JavaParser::LocalVariableDeclaration_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocalVariableDeclaration_DropletFile(this);
}

void JavaParser::LocalVariableDeclaration_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocalVariableDeclaration_DropletFile(this);
}

JavaParser::LocalVariableDeclaration_DropletFileContext* JavaParser::localVariableDeclaration_DropletFile() {
  LocalVariableDeclaration_DropletFileContext *_localctx = _tracker.createInstance<LocalVariableDeclaration_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 758, JavaParser::RuleLocalVariableDeclaration_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4975);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::FINAL

    || _la == JavaParser::AT) {
      setState(4972);
      variableModifier();
      setState(4977);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4978);
    unannType();
    setState(4979);
    variableDeclaratorList();
    setState(4980);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_DropletFileContext ------------------------------------------------------------------

JavaParser::Statement_DropletFileContext::Statement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementWithoutTrailingSubstatementContext* JavaParser::Statement_DropletFileContext::statementWithoutTrailingSubstatement() {
  return getRuleContext<JavaParser::StatementWithoutTrailingSubstatementContext>(0);
}

tree::TerminalNode* JavaParser::Statement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::LabeledStatementContext* JavaParser::Statement_DropletFileContext::labeledStatement() {
  return getRuleContext<JavaParser::LabeledStatementContext>(0);
}

JavaParser::IfThenStatementContext* JavaParser::Statement_DropletFileContext::ifThenStatement() {
  return getRuleContext<JavaParser::IfThenStatementContext>(0);
}

JavaParser::IfThenElseStatementContext* JavaParser::Statement_DropletFileContext::ifThenElseStatement() {
  return getRuleContext<JavaParser::IfThenElseStatementContext>(0);
}

JavaParser::WhileStatementContext* JavaParser::Statement_DropletFileContext::whileStatement() {
  return getRuleContext<JavaParser::WhileStatementContext>(0);
}

JavaParser::ForStatementContext* JavaParser::Statement_DropletFileContext::forStatement() {
  return getRuleContext<JavaParser::ForStatementContext>(0);
}


size_t JavaParser::Statement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleStatement_DropletFile;
}

void JavaParser::Statement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement_DropletFile(this);
}

void JavaParser::Statement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement_DropletFile(this);
}

JavaParser::Statement_DropletFileContext* JavaParser::statement_DropletFile() {
  Statement_DropletFileContext *_localctx = _tracker.createInstance<Statement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 760, JavaParser::RuleStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5000);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 512, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4982);
      statementWithoutTrailingSubstatement();
      setState(4983);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4985);
      labeledStatement();
      setState(4986);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4988);
      ifThenStatement();
      setState(4989);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4991);
      ifThenElseStatement();
      setState(4992);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4994);
      whileStatement();
      setState(4995);
      match(JavaParser::EOF);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(4997);
      forStatement();
      setState(4998);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementNoShortIf_DropletFileContext ------------------------------------------------------------------

JavaParser::StatementNoShortIf_DropletFileContext::StatementNoShortIf_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementWithoutTrailingSubstatementContext* JavaParser::StatementNoShortIf_DropletFileContext::statementWithoutTrailingSubstatement() {
  return getRuleContext<JavaParser::StatementWithoutTrailingSubstatementContext>(0);
}

tree::TerminalNode* JavaParser::StatementNoShortIf_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::LabeledStatementNoShortIfContext* JavaParser::StatementNoShortIf_DropletFileContext::labeledStatementNoShortIf() {
  return getRuleContext<JavaParser::LabeledStatementNoShortIfContext>(0);
}

JavaParser::IfThenElseStatementNoShortIfContext* JavaParser::StatementNoShortIf_DropletFileContext::ifThenElseStatementNoShortIf() {
  return getRuleContext<JavaParser::IfThenElseStatementNoShortIfContext>(0);
}

JavaParser::WhileStatementNoShortIfContext* JavaParser::StatementNoShortIf_DropletFileContext::whileStatementNoShortIf() {
  return getRuleContext<JavaParser::WhileStatementNoShortIfContext>(0);
}

JavaParser::ForStatementNoShortIfContext* JavaParser::StatementNoShortIf_DropletFileContext::forStatementNoShortIf() {
  return getRuleContext<JavaParser::ForStatementNoShortIfContext>(0);
}


size_t JavaParser::StatementNoShortIf_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleStatementNoShortIf_DropletFile;
}

void JavaParser::StatementNoShortIf_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementNoShortIf_DropletFile(this);
}

void JavaParser::StatementNoShortIf_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementNoShortIf_DropletFile(this);
}

JavaParser::StatementNoShortIf_DropletFileContext* JavaParser::statementNoShortIf_DropletFile() {
  StatementNoShortIf_DropletFileContext *_localctx = _tracker.createInstance<StatementNoShortIf_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 762, JavaParser::RuleStatementNoShortIf_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5017);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 513, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5002);
      statementWithoutTrailingSubstatement();
      setState(5003);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5005);
      labeledStatementNoShortIf();
      setState(5006);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5008);
      ifThenElseStatementNoShortIf();
      setState(5009);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5011);
      whileStatementNoShortIf();
      setState(5012);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5014);
      forStatementNoShortIf();
      setState(5015);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementWithoutTrailingSubstatement_DropletFileContext ------------------------------------------------------------------

JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::StatementWithoutTrailingSubstatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::EmptyStatementContext* JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::emptyStatement() {
  return getRuleContext<JavaParser::EmptyStatementContext>(0);
}

JavaParser::ExpressionStatementContext* JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::expressionStatement() {
  return getRuleContext<JavaParser::ExpressionStatementContext>(0);
}

JavaParser::AssertStatementContext* JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::assertStatement() {
  return getRuleContext<JavaParser::AssertStatementContext>(0);
}

JavaParser::SwitchStatementContext* JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::switchStatement() {
  return getRuleContext<JavaParser::SwitchStatementContext>(0);
}

JavaParser::DoStatementContext* JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::doStatement() {
  return getRuleContext<JavaParser::DoStatementContext>(0);
}

JavaParser::BreakStatementContext* JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::breakStatement() {
  return getRuleContext<JavaParser::BreakStatementContext>(0);
}

JavaParser::ContinueStatementContext* JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::continueStatement() {
  return getRuleContext<JavaParser::ContinueStatementContext>(0);
}

JavaParser::ReturnStatementContext* JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::returnStatement() {
  return getRuleContext<JavaParser::ReturnStatementContext>(0);
}

JavaParser::SynchronizedStatementContext* JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::synchronizedStatement() {
  return getRuleContext<JavaParser::SynchronizedStatementContext>(0);
}

JavaParser::ThrowStatementContext* JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::throwStatement() {
  return getRuleContext<JavaParser::ThrowStatementContext>(0);
}

JavaParser::TryStatementContext* JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::tryStatement() {
  return getRuleContext<JavaParser::TryStatementContext>(0);
}


size_t JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleStatementWithoutTrailingSubstatement_DropletFile;
}

void JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementWithoutTrailingSubstatement_DropletFile(this);
}

void JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementWithoutTrailingSubstatement_DropletFile(this);
}

JavaParser::StatementWithoutTrailingSubstatement_DropletFileContext* JavaParser::statementWithoutTrailingSubstatement_DropletFile() {
  StatementWithoutTrailingSubstatement_DropletFileContext *_localctx = _tracker.createInstance<StatementWithoutTrailingSubstatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 764, JavaParser::RuleStatementWithoutTrailingSubstatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5055);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(5019);
        block();
        setState(5020);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(5022);
        emptyStatement();
        setState(5023);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::IntegerLiteral:
      case JavaParser::FloatingPointLiteral:
      case JavaParser::BooleanLiteral:
      case JavaParser::CharacterLiteral:
      case JavaParser::StringLiteral:
      case JavaParser::NullLiteral:
      case JavaParser::LPAREN:
      case JavaParser::AT:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 3);
        setState(5025);
        expressionStatement();
        setState(5026);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::ASSERT: {
        enterOuterAlt(_localctx, 4);
        setState(5028);
        assertStatement();
        setState(5029);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::SWITCH: {
        enterOuterAlt(_localctx, 5);
        setState(5031);
        switchStatement();
        setState(5032);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::DO: {
        enterOuterAlt(_localctx, 6);
        setState(5034);
        doStatement();
        setState(5035);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::BREAK: {
        enterOuterAlt(_localctx, 7);
        setState(5037);
        breakStatement();
        setState(5038);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::CONTINUE: {
        enterOuterAlt(_localctx, 8);
        setState(5040);
        continueStatement();
        setState(5041);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::RETURN: {
        enterOuterAlt(_localctx, 9);
        setState(5043);
        returnStatement();
        setState(5044);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::SYNCHRONIZED: {
        enterOuterAlt(_localctx, 10);
        setState(5046);
        synchronizedStatement();
        setState(5047);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::THROW: {
        enterOuterAlt(_localctx, 11);
        setState(5049);
        throwStatement();
        setState(5050);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::TRY: {
        enterOuterAlt(_localctx, 12);
        setState(5052);
        tryStatement();
        setState(5053);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::EmptyStatement_DropletFileContext::EmptyStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::EmptyStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::EmptyStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleEmptyStatement_DropletFile;
}

void JavaParser::EmptyStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmptyStatement_DropletFile(this);
}

void JavaParser::EmptyStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmptyStatement_DropletFile(this);
}

JavaParser::EmptyStatement_DropletFileContext* JavaParser::emptyStatement_DropletFile() {
  EmptyStatement_DropletFileContext *_localctx = _tracker.createInstance<EmptyStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 766, JavaParser::RuleEmptyStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5057);
    match(JavaParser::SEMI);
    setState(5058);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::LabeledStatement_DropletFileContext::LabeledStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::LabeledStatement_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::StatementContext* JavaParser::LabeledStatement_DropletFileContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

tree::TerminalNode* JavaParser::LabeledStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::LabeledStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleLabeledStatement_DropletFile;
}

void JavaParser::LabeledStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabeledStatement_DropletFile(this);
}

void JavaParser::LabeledStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabeledStatement_DropletFile(this);
}

JavaParser::LabeledStatement_DropletFileContext* JavaParser::labeledStatement_DropletFile() {
  LabeledStatement_DropletFileContext *_localctx = _tracker.createInstance<LabeledStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 768, JavaParser::RuleLabeledStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5060);
    identifier();
    setState(5061);
    match(JavaParser::COLON);
    setState(5062);
    statement();
    setState(5063);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledStatementNoShortIf_DropletFileContext ------------------------------------------------------------------

JavaParser::LabeledStatementNoShortIf_DropletFileContext::LabeledStatementNoShortIf_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::LabeledStatementNoShortIf_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::StatementNoShortIfContext* JavaParser::LabeledStatementNoShortIf_DropletFileContext::statementNoShortIf() {
  return getRuleContext<JavaParser::StatementNoShortIfContext>(0);
}

tree::TerminalNode* JavaParser::LabeledStatementNoShortIf_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::LabeledStatementNoShortIf_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleLabeledStatementNoShortIf_DropletFile;
}

void JavaParser::LabeledStatementNoShortIf_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabeledStatementNoShortIf_DropletFile(this);
}

void JavaParser::LabeledStatementNoShortIf_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabeledStatementNoShortIf_DropletFile(this);
}

JavaParser::LabeledStatementNoShortIf_DropletFileContext* JavaParser::labeledStatementNoShortIf_DropletFile() {
  LabeledStatementNoShortIf_DropletFileContext *_localctx = _tracker.createInstance<LabeledStatementNoShortIf_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 770, JavaParser::RuleLabeledStatementNoShortIf_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5065);
    identifier();
    setState(5066);
    match(JavaParser::COLON);
    setState(5067);
    statementNoShortIf();
    setState(5068);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::ExpressionStatement_DropletFileContext::ExpressionStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementExpressionContext* JavaParser::ExpressionStatement_DropletFileContext::statementExpression() {
  return getRuleContext<JavaParser::StatementExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ExpressionStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleExpressionStatement_DropletFile;
}

void JavaParser::ExpressionStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement_DropletFile(this);
}

void JavaParser::ExpressionStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement_DropletFile(this);
}

JavaParser::ExpressionStatement_DropletFileContext* JavaParser::expressionStatement_DropletFile() {
  ExpressionStatement_DropletFileContext *_localctx = _tracker.createInstance<ExpressionStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 772, JavaParser::RuleExpressionStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5070);
    statementExpression();
    setState(5071);
    match(JavaParser::SEMI);
    setState(5072);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::StatementExpression_DropletFileContext::StatementExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AssignmentContext* JavaParser::StatementExpression_DropletFileContext::assignment() {
  return getRuleContext<JavaParser::AssignmentContext>(0);
}

tree::TerminalNode* JavaParser::StatementExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::PreIncrementExpressionContext* JavaParser::StatementExpression_DropletFileContext::preIncrementExpression() {
  return getRuleContext<JavaParser::PreIncrementExpressionContext>(0);
}

JavaParser::PreDecrementExpressionContext* JavaParser::StatementExpression_DropletFileContext::preDecrementExpression() {
  return getRuleContext<JavaParser::PreDecrementExpressionContext>(0);
}

JavaParser::PostIncrementExpressionContext* JavaParser::StatementExpression_DropletFileContext::postIncrementExpression() {
  return getRuleContext<JavaParser::PostIncrementExpressionContext>(0);
}

JavaParser::PostDecrementExpressionContext* JavaParser::StatementExpression_DropletFileContext::postDecrementExpression() {
  return getRuleContext<JavaParser::PostDecrementExpressionContext>(0);
}

JavaParser::MethodInvocationContext* JavaParser::StatementExpression_DropletFileContext::methodInvocation() {
  return getRuleContext<JavaParser::MethodInvocationContext>(0);
}

JavaParser::ClassInstanceCreationExpressionContext* JavaParser::StatementExpression_DropletFileContext::classInstanceCreationExpression() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpressionContext>(0);
}


size_t JavaParser::StatementExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleStatementExpression_DropletFile;
}

void JavaParser::StatementExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementExpression_DropletFile(this);
}

void JavaParser::StatementExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementExpression_DropletFile(this);
}

JavaParser::StatementExpression_DropletFileContext* JavaParser::statementExpression_DropletFile() {
  StatementExpression_DropletFileContext *_localctx = _tracker.createInstance<StatementExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 774, JavaParser::RuleStatementExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5095);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 515, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5074);
      assignment();
      setState(5075);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5077);
      preIncrementExpression();
      setState(5078);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5080);
      preDecrementExpression();
      setState(5081);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5083);
      postIncrementExpression();
      setState(5084);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5086);
      postDecrementExpression();
      setState(5087);
      match(JavaParser::EOF);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5089);
      methodInvocation();
      setState(5090);
      match(JavaParser::EOF);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5092);
      classInstanceCreationExpression();
      setState(5093);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::IfThenStatement_DropletFileContext::IfThenStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::IfThenStatement_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::StatementContext* JavaParser::IfThenStatement_DropletFileContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

tree::TerminalNode* JavaParser::IfThenStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::IfThenStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleIfThenStatement_DropletFile;
}

void JavaParser::IfThenStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfThenStatement_DropletFile(this);
}

void JavaParser::IfThenStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfThenStatement_DropletFile(this);
}

JavaParser::IfThenStatement_DropletFileContext* JavaParser::ifThenStatement_DropletFile() {
  IfThenStatement_DropletFileContext *_localctx = _tracker.createInstance<IfThenStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 776, JavaParser::RuleIfThenStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5097);
    match(JavaParser::IF);
    setState(5098);
    match(JavaParser::LPAREN);
    setState(5099);
    expression();
    setState(5100);
    match(JavaParser::RPAREN);
    setState(5101);
    statement();
    setState(5102);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenElseStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::IfThenElseStatement_DropletFileContext::IfThenElseStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::IfThenElseStatement_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::StatementNoShortIfContext* JavaParser::IfThenElseStatement_DropletFileContext::statementNoShortIf() {
  return getRuleContext<JavaParser::StatementNoShortIfContext>(0);
}

JavaParser::StatementContext* JavaParser::IfThenElseStatement_DropletFileContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

tree::TerminalNode* JavaParser::IfThenElseStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::IfThenElseStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleIfThenElseStatement_DropletFile;
}

void JavaParser::IfThenElseStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfThenElseStatement_DropletFile(this);
}

void JavaParser::IfThenElseStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfThenElseStatement_DropletFile(this);
}

JavaParser::IfThenElseStatement_DropletFileContext* JavaParser::ifThenElseStatement_DropletFile() {
  IfThenElseStatement_DropletFileContext *_localctx = _tracker.createInstance<IfThenElseStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 778, JavaParser::RuleIfThenElseStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5104);
    match(JavaParser::IF);
    setState(5105);
    match(JavaParser::LPAREN);
    setState(5106);
    expression();
    setState(5107);
    match(JavaParser::RPAREN);
    setState(5108);
    statementNoShortIf();
    setState(5109);
    match(JavaParser::ELSE);
    setState(5110);
    statement();
    setState(5111);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenElseStatementNoShortIf_DropletFileContext ------------------------------------------------------------------

JavaParser::IfThenElseStatementNoShortIf_DropletFileContext::IfThenElseStatementNoShortIf_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::IfThenElseStatementNoShortIf_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

std::vector<JavaParser::StatementNoShortIfContext *> JavaParser::IfThenElseStatementNoShortIf_DropletFileContext::statementNoShortIf() {
  return getRuleContexts<JavaParser::StatementNoShortIfContext>();
}

JavaParser::StatementNoShortIfContext* JavaParser::IfThenElseStatementNoShortIf_DropletFileContext::statementNoShortIf(size_t i) {
  return getRuleContext<JavaParser::StatementNoShortIfContext>(i);
}

tree::TerminalNode* JavaParser::IfThenElseStatementNoShortIf_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::IfThenElseStatementNoShortIf_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleIfThenElseStatementNoShortIf_DropletFile;
}

void JavaParser::IfThenElseStatementNoShortIf_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfThenElseStatementNoShortIf_DropletFile(this);
}

void JavaParser::IfThenElseStatementNoShortIf_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfThenElseStatementNoShortIf_DropletFile(this);
}

JavaParser::IfThenElseStatementNoShortIf_DropletFileContext* JavaParser::ifThenElseStatementNoShortIf_DropletFile() {
  IfThenElseStatementNoShortIf_DropletFileContext *_localctx = _tracker.createInstance<IfThenElseStatementNoShortIf_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 780, JavaParser::RuleIfThenElseStatementNoShortIf_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5113);
    match(JavaParser::IF);
    setState(5114);
    match(JavaParser::LPAREN);
    setState(5115);
    expression();
    setState(5116);
    match(JavaParser::RPAREN);
    setState(5117);
    statementNoShortIf();
    setState(5118);
    match(JavaParser::ELSE);
    setState(5119);
    statementNoShortIf();
    setState(5120);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssertStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::AssertStatement_DropletFileContext::AssertStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ExpressionContext *> JavaParser::AssertStatement_DropletFileContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::AssertStatement_DropletFileContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

tree::TerminalNode* JavaParser::AssertStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::AssertStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAssertStatement_DropletFile;
}

void JavaParser::AssertStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssertStatement_DropletFile(this);
}

void JavaParser::AssertStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssertStatement_DropletFile(this);
}

JavaParser::AssertStatement_DropletFileContext* JavaParser::assertStatement_DropletFile() {
  AssertStatement_DropletFileContext *_localctx = _tracker.createInstance<AssertStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 782, JavaParser::RuleAssertStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5134);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 516, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5122);
      match(JavaParser::ASSERT);
      setState(5123);
      expression();
      setState(5124);
      match(JavaParser::SEMI);
      setState(5125);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5127);
      match(JavaParser::ASSERT);
      setState(5128);
      expression();
      setState(5129);
      match(JavaParser::COLON);
      setState(5130);
      expression();
      setState(5131);
      match(JavaParser::SEMI);
      setState(5132);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::SwitchStatement_DropletFileContext::SwitchStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::SwitchStatement_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::SwitchBlockContext* JavaParser::SwitchStatement_DropletFileContext::switchBlock() {
  return getRuleContext<JavaParser::SwitchBlockContext>(0);
}

tree::TerminalNode* JavaParser::SwitchStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::SwitchStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleSwitchStatement_DropletFile;
}

void JavaParser::SwitchStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement_DropletFile(this);
}

void JavaParser::SwitchStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement_DropletFile(this);
}

JavaParser::SwitchStatement_DropletFileContext* JavaParser::switchStatement_DropletFile() {
  SwitchStatement_DropletFileContext *_localctx = _tracker.createInstance<SwitchStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 784, JavaParser::RuleSwitchStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5136);
    match(JavaParser::SWITCH);
    setState(5137);
    match(JavaParser::LPAREN);
    setState(5138);
    expression();
    setState(5139);
    match(JavaParser::RPAREN);
    setState(5140);
    switchBlock();
    setState(5141);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchBlock_DropletFileContext ------------------------------------------------------------------

JavaParser::SwitchBlock_DropletFileContext::SwitchBlock_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::SwitchBlock_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::SwitchBlockStatementGroupContext *> JavaParser::SwitchBlock_DropletFileContext::switchBlockStatementGroup() {
  return getRuleContexts<JavaParser::SwitchBlockStatementGroupContext>();
}

JavaParser::SwitchBlockStatementGroupContext* JavaParser::SwitchBlock_DropletFileContext::switchBlockStatementGroup(size_t i) {
  return getRuleContext<JavaParser::SwitchBlockStatementGroupContext>(i);
}

std::vector<JavaParser::SwitchLabelContext *> JavaParser::SwitchBlock_DropletFileContext::switchLabel() {
  return getRuleContexts<JavaParser::SwitchLabelContext>();
}

JavaParser::SwitchLabelContext* JavaParser::SwitchBlock_DropletFileContext::switchLabel(size_t i) {
  return getRuleContext<JavaParser::SwitchLabelContext>(i);
}


size_t JavaParser::SwitchBlock_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleSwitchBlock_DropletFile;
}

void JavaParser::SwitchBlock_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchBlock_DropletFile(this);
}

void JavaParser::SwitchBlock_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchBlock_DropletFile(this);
}

JavaParser::SwitchBlock_DropletFileContext* JavaParser::switchBlock_DropletFile() {
  SwitchBlock_DropletFileContext *_localctx = _tracker.createInstance<SwitchBlock_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 786, JavaParser::RuleSwitchBlock_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5143);
    match(JavaParser::LBRACE);
    setState(5147);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 517, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5144);
        switchBlockStatementGroup(); 
      }
      setState(5149);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 517, _ctx);
    }
    setState(5153);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::CASE

    || _la == JavaParser::DEFAULT) {
      setState(5150);
      switchLabel();
      setState(5155);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5156);
    match(JavaParser::RBRACE);
    setState(5157);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchBlockStatementGroup_DropletFileContext ------------------------------------------------------------------

JavaParser::SwitchBlockStatementGroup_DropletFileContext::SwitchBlockStatementGroup_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::SwitchLabelsContext* JavaParser::SwitchBlockStatementGroup_DropletFileContext::switchLabels() {
  return getRuleContext<JavaParser::SwitchLabelsContext>(0);
}

JavaParser::BlockStatementsContext* JavaParser::SwitchBlockStatementGroup_DropletFileContext::blockStatements() {
  return getRuleContext<JavaParser::BlockStatementsContext>(0);
}

tree::TerminalNode* JavaParser::SwitchBlockStatementGroup_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::SwitchBlockStatementGroup_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleSwitchBlockStatementGroup_DropletFile;
}

void JavaParser::SwitchBlockStatementGroup_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchBlockStatementGroup_DropletFile(this);
}

void JavaParser::SwitchBlockStatementGroup_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchBlockStatementGroup_DropletFile(this);
}

JavaParser::SwitchBlockStatementGroup_DropletFileContext* JavaParser::switchBlockStatementGroup_DropletFile() {
  SwitchBlockStatementGroup_DropletFileContext *_localctx = _tracker.createInstance<SwitchBlockStatementGroup_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 788, JavaParser::RuleSwitchBlockStatementGroup_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5159);
    switchLabels();
    setState(5160);
    blockStatements();
    setState(5161);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabels_DropletFileContext ------------------------------------------------------------------

JavaParser::SwitchLabels_DropletFileContext::SwitchLabels_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::SwitchLabels_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::SwitchLabelContext *> JavaParser::SwitchLabels_DropletFileContext::switchLabel() {
  return getRuleContexts<JavaParser::SwitchLabelContext>();
}

JavaParser::SwitchLabelContext* JavaParser::SwitchLabels_DropletFileContext::switchLabel(size_t i) {
  return getRuleContext<JavaParser::SwitchLabelContext>(i);
}


size_t JavaParser::SwitchLabels_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleSwitchLabels_DropletFile;
}

void JavaParser::SwitchLabels_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchLabels_DropletFile(this);
}

void JavaParser::SwitchLabels_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchLabels_DropletFile(this);
}

JavaParser::SwitchLabels_DropletFileContext* JavaParser::switchLabels_DropletFile() {
  SwitchLabels_DropletFileContext *_localctx = _tracker.createInstance<SwitchLabels_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 790, JavaParser::RuleSwitchLabels_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5164); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5163);
      switchLabel();
      setState(5166); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == JavaParser::CASE

    || _la == JavaParser::DEFAULT);
    setState(5168);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabel_DropletFileContext ------------------------------------------------------------------

JavaParser::SwitchLabel_DropletFileContext::SwitchLabel_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConstantExpressionContext* JavaParser::SwitchLabel_DropletFileContext::constantExpression() {
  return getRuleContext<JavaParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* JavaParser::SwitchLabel_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::EnumConstantNameContext* JavaParser::SwitchLabel_DropletFileContext::enumConstantName() {
  return getRuleContext<JavaParser::EnumConstantNameContext>(0);
}


size_t JavaParser::SwitchLabel_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleSwitchLabel_DropletFile;
}

void JavaParser::SwitchLabel_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchLabel_DropletFile(this);
}

void JavaParser::SwitchLabel_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchLabel_DropletFile(this);
}

JavaParser::SwitchLabel_DropletFileContext* JavaParser::switchLabel_DropletFile() {
  SwitchLabel_DropletFileContext *_localctx = _tracker.createInstance<SwitchLabel_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 792, JavaParser::RuleSwitchLabel_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5183);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 520, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5170);
      match(JavaParser::CASE);
      setState(5171);
      constantExpression();
      setState(5172);
      match(JavaParser::COLON);
      setState(5173);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5175);
      match(JavaParser::CASE);
      setState(5176);
      enumConstantName();
      setState(5177);
      match(JavaParser::COLON);
      setState(5178);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5180);
      match(JavaParser::DEFAULT);
      setState(5181);
      match(JavaParser::COLON);
      setState(5182);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantName_DropletFileContext ------------------------------------------------------------------

JavaParser::EnumConstantName_DropletFileContext::EnumConstantName_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::EnumConstantName_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::EnumConstantName_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::EnumConstantName_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstantName_DropletFile;
}

void JavaParser::EnumConstantName_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstantName_DropletFile(this);
}

void JavaParser::EnumConstantName_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstantName_DropletFile(this);
}

JavaParser::EnumConstantName_DropletFileContext* JavaParser::enumConstantName_DropletFile() {
  EnumConstantName_DropletFileContext *_localctx = _tracker.createInstance<EnumConstantName_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 794, JavaParser::RuleEnumConstantName_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5185);
    identifier();
    setState(5186);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::WhileStatement_DropletFileContext::WhileStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::WhileStatement_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::StatementContext* JavaParser::WhileStatement_DropletFileContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

tree::TerminalNode* JavaParser::WhileStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::WhileStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleWhileStatement_DropletFile;
}

void JavaParser::WhileStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement_DropletFile(this);
}

void JavaParser::WhileStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement_DropletFile(this);
}

JavaParser::WhileStatement_DropletFileContext* JavaParser::whileStatement_DropletFile() {
  WhileStatement_DropletFileContext *_localctx = _tracker.createInstance<WhileStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 796, JavaParser::RuleWhileStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5188);
    match(JavaParser::WHILE);
    setState(5189);
    match(JavaParser::LPAREN);
    setState(5190);
    expression();
    setState(5191);
    match(JavaParser::RPAREN);
    setState(5192);
    statement();
    setState(5193);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementNoShortIf_DropletFileContext ------------------------------------------------------------------

JavaParser::WhileStatementNoShortIf_DropletFileContext::WhileStatementNoShortIf_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::WhileStatementNoShortIf_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::StatementNoShortIfContext* JavaParser::WhileStatementNoShortIf_DropletFileContext::statementNoShortIf() {
  return getRuleContext<JavaParser::StatementNoShortIfContext>(0);
}

tree::TerminalNode* JavaParser::WhileStatementNoShortIf_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::WhileStatementNoShortIf_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleWhileStatementNoShortIf_DropletFile;
}

void JavaParser::WhileStatementNoShortIf_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatementNoShortIf_DropletFile(this);
}

void JavaParser::WhileStatementNoShortIf_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatementNoShortIf_DropletFile(this);
}

JavaParser::WhileStatementNoShortIf_DropletFileContext* JavaParser::whileStatementNoShortIf_DropletFile() {
  WhileStatementNoShortIf_DropletFileContext *_localctx = _tracker.createInstance<WhileStatementNoShortIf_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 798, JavaParser::RuleWhileStatementNoShortIf_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5195);
    match(JavaParser::WHILE);
    setState(5196);
    match(JavaParser::LPAREN);
    setState(5197);
    expression();
    setState(5198);
    match(JavaParser::RPAREN);
    setState(5199);
    statementNoShortIf();
    setState(5200);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::DoStatement_DropletFileContext::DoStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementContext* JavaParser::DoStatement_DropletFileContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

JavaParser::ExpressionContext* JavaParser::DoStatement_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::DoStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::DoStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleDoStatement_DropletFile;
}

void JavaParser::DoStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoStatement_DropletFile(this);
}

void JavaParser::DoStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoStatement_DropletFile(this);
}

JavaParser::DoStatement_DropletFileContext* JavaParser::doStatement_DropletFile() {
  DoStatement_DropletFileContext *_localctx = _tracker.createInstance<DoStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 800, JavaParser::RuleDoStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5202);
    match(JavaParser::DO);
    setState(5203);
    statement();
    setState(5204);
    match(JavaParser::WHILE);
    setState(5205);
    match(JavaParser::LPAREN);
    setState(5206);
    expression();
    setState(5207);
    match(JavaParser::RPAREN);
    setState(5208);
    match(JavaParser::SEMI);
    setState(5209);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::ForStatement_DropletFileContext::ForStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BasicForStatementContext* JavaParser::ForStatement_DropletFileContext::basicForStatement() {
  return getRuleContext<JavaParser::BasicForStatementContext>(0);
}

tree::TerminalNode* JavaParser::ForStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::EnhancedForStatementContext* JavaParser::ForStatement_DropletFileContext::enhancedForStatement() {
  return getRuleContext<JavaParser::EnhancedForStatementContext>(0);
}


size_t JavaParser::ForStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleForStatement_DropletFile;
}

void JavaParser::ForStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement_DropletFile(this);
}

void JavaParser::ForStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement_DropletFile(this);
}

JavaParser::ForStatement_DropletFileContext* JavaParser::forStatement_DropletFile() {
  ForStatement_DropletFileContext *_localctx = _tracker.createInstance<ForStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 802, JavaParser::RuleForStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5217);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 521, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5211);
      basicForStatement();
      setState(5212);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5214);
      enhancedForStatement();
      setState(5215);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementNoShortIf_DropletFileContext ------------------------------------------------------------------

JavaParser::ForStatementNoShortIf_DropletFileContext::ForStatementNoShortIf_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BasicForStatementNoShortIfContext* JavaParser::ForStatementNoShortIf_DropletFileContext::basicForStatementNoShortIf() {
  return getRuleContext<JavaParser::BasicForStatementNoShortIfContext>(0);
}

tree::TerminalNode* JavaParser::ForStatementNoShortIf_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::EnhancedForStatementNoShortIfContext* JavaParser::ForStatementNoShortIf_DropletFileContext::enhancedForStatementNoShortIf() {
  return getRuleContext<JavaParser::EnhancedForStatementNoShortIfContext>(0);
}


size_t JavaParser::ForStatementNoShortIf_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleForStatementNoShortIf_DropletFile;
}

void JavaParser::ForStatementNoShortIf_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatementNoShortIf_DropletFile(this);
}

void JavaParser::ForStatementNoShortIf_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatementNoShortIf_DropletFile(this);
}

JavaParser::ForStatementNoShortIf_DropletFileContext* JavaParser::forStatementNoShortIf_DropletFile() {
  ForStatementNoShortIf_DropletFileContext *_localctx = _tracker.createInstance<ForStatementNoShortIf_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 804, JavaParser::RuleForStatementNoShortIf_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5225);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 522, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5219);
      basicForStatementNoShortIf();
      setState(5220);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5222);
      enhancedForStatementNoShortIf();
      setState(5223);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasicForStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::BasicForStatement_DropletFileContext::BasicForStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementContext* JavaParser::BasicForStatement_DropletFileContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

tree::TerminalNode* JavaParser::BasicForStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ForInitContext* JavaParser::BasicForStatement_DropletFileContext::forInit() {
  return getRuleContext<JavaParser::ForInitContext>(0);
}

JavaParser::ExpressionContext* JavaParser::BasicForStatement_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ForUpdateContext* JavaParser::BasicForStatement_DropletFileContext::forUpdate() {
  return getRuleContext<JavaParser::ForUpdateContext>(0);
}


size_t JavaParser::BasicForStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleBasicForStatement_DropletFile;
}

void JavaParser::BasicForStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasicForStatement_DropletFile(this);
}

void JavaParser::BasicForStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasicForStatement_DropletFile(this);
}

JavaParser::BasicForStatement_DropletFileContext* JavaParser::basicForStatement_DropletFile() {
  BasicForStatement_DropletFileContext *_localctx = _tracker.createInstance<BasicForStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 806, JavaParser::RuleBasicForStatement_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5227);
    match(JavaParser::FOR);
    setState(5228);
    match(JavaParser::LPAREN);
    setState(5230);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(5229);
      forInit();
    }
    setState(5232);
    match(JavaParser::SEMI);
    setState(5234);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(5233);
      expression();
    }
    setState(5236);
    match(JavaParser::SEMI);
    setState(5238);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(5237);
      forUpdate();
    }
    setState(5240);
    match(JavaParser::RPAREN);
    setState(5241);
    statement();
    setState(5242);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasicForStatementNoShortIf_DropletFileContext ------------------------------------------------------------------

JavaParser::BasicForStatementNoShortIf_DropletFileContext::BasicForStatementNoShortIf_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementNoShortIfContext* JavaParser::BasicForStatementNoShortIf_DropletFileContext::statementNoShortIf() {
  return getRuleContext<JavaParser::StatementNoShortIfContext>(0);
}

tree::TerminalNode* JavaParser::BasicForStatementNoShortIf_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ForInitContext* JavaParser::BasicForStatementNoShortIf_DropletFileContext::forInit() {
  return getRuleContext<JavaParser::ForInitContext>(0);
}

JavaParser::ExpressionContext* JavaParser::BasicForStatementNoShortIf_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ForUpdateContext* JavaParser::BasicForStatementNoShortIf_DropletFileContext::forUpdate() {
  return getRuleContext<JavaParser::ForUpdateContext>(0);
}


size_t JavaParser::BasicForStatementNoShortIf_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleBasicForStatementNoShortIf_DropletFile;
}

void JavaParser::BasicForStatementNoShortIf_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasicForStatementNoShortIf_DropletFile(this);
}

void JavaParser::BasicForStatementNoShortIf_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasicForStatementNoShortIf_DropletFile(this);
}

JavaParser::BasicForStatementNoShortIf_DropletFileContext* JavaParser::basicForStatementNoShortIf_DropletFile() {
  BasicForStatementNoShortIf_DropletFileContext *_localctx = _tracker.createInstance<BasicForStatementNoShortIf_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 808, JavaParser::RuleBasicForStatementNoShortIf_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5244);
    match(JavaParser::FOR);
    setState(5245);
    match(JavaParser::LPAREN);
    setState(5247);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FINAL)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(5246);
      forInit();
    }
    setState(5249);
    match(JavaParser::SEMI);
    setState(5251);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(5250);
      expression();
    }
    setState(5253);
    match(JavaParser::SEMI);
    setState(5255);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(5254);
      forUpdate();
    }
    setState(5257);
    match(JavaParser::RPAREN);
    setState(5258);
    statementNoShortIf();
    setState(5259);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInit_DropletFileContext ------------------------------------------------------------------

JavaParser::ForInit_DropletFileContext::ForInit_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementExpressionListContext* JavaParser::ForInit_DropletFileContext::statementExpressionList() {
  return getRuleContext<JavaParser::StatementExpressionListContext>(0);
}

tree::TerminalNode* JavaParser::ForInit_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::LocalVariableDeclarationContext* JavaParser::ForInit_DropletFileContext::localVariableDeclaration() {
  return getRuleContext<JavaParser::LocalVariableDeclarationContext>(0);
}


size_t JavaParser::ForInit_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleForInit_DropletFile;
}

void JavaParser::ForInit_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInit_DropletFile(this);
}

void JavaParser::ForInit_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInit_DropletFile(this);
}

JavaParser::ForInit_DropletFileContext* JavaParser::forInit_DropletFile() {
  ForInit_DropletFileContext *_localctx = _tracker.createInstance<ForInit_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 810, JavaParser::RuleForInit_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5267);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 529, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5261);
      statementExpressionList();
      setState(5262);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5264);
      localVariableDeclaration();
      setState(5265);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForUpdate_DropletFileContext ------------------------------------------------------------------

JavaParser::ForUpdate_DropletFileContext::ForUpdate_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::StatementExpressionListContext* JavaParser::ForUpdate_DropletFileContext::statementExpressionList() {
  return getRuleContext<JavaParser::StatementExpressionListContext>(0);
}

tree::TerminalNode* JavaParser::ForUpdate_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ForUpdate_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleForUpdate_DropletFile;
}

void JavaParser::ForUpdate_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForUpdate_DropletFile(this);
}

void JavaParser::ForUpdate_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForUpdate_DropletFile(this);
}

JavaParser::ForUpdate_DropletFileContext* JavaParser::forUpdate_DropletFile() {
  ForUpdate_DropletFileContext *_localctx = _tracker.createInstance<ForUpdate_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 812, JavaParser::RuleForUpdate_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5269);
    statementExpressionList();
    setState(5270);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementExpressionList_DropletFileContext ------------------------------------------------------------------

JavaParser::StatementExpressionList_DropletFileContext::StatementExpressionList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::StatementExpressionContext *> JavaParser::StatementExpressionList_DropletFileContext::statementExpression() {
  return getRuleContexts<JavaParser::StatementExpressionContext>();
}

JavaParser::StatementExpressionContext* JavaParser::StatementExpressionList_DropletFileContext::statementExpression(size_t i) {
  return getRuleContext<JavaParser::StatementExpressionContext>(i);
}

tree::TerminalNode* JavaParser::StatementExpressionList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::StatementExpressionList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleStatementExpressionList_DropletFile;
}

void JavaParser::StatementExpressionList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementExpressionList_DropletFile(this);
}

void JavaParser::StatementExpressionList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementExpressionList_DropletFile(this);
}

JavaParser::StatementExpressionList_DropletFileContext* JavaParser::statementExpressionList_DropletFile() {
  StatementExpressionList_DropletFileContext *_localctx = _tracker.createInstance<StatementExpressionList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 814, JavaParser::RuleStatementExpressionList_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5272);
    statementExpression();
    setState(5277);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(5273);
      match(JavaParser::COMMA);
      setState(5274);
      statementExpression();
      setState(5279);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5280);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnhancedForStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::EnhancedForStatement_DropletFileContext::EnhancedForStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::EnhancedForStatement_DropletFileContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::EnhancedForStatement_DropletFileContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

JavaParser::ExpressionContext* JavaParser::EnhancedForStatement_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::StatementContext* JavaParser::EnhancedForStatement_DropletFileContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

tree::TerminalNode* JavaParser::EnhancedForStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::EnhancedForStatement_DropletFileContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::EnhancedForStatement_DropletFileContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::EnhancedForStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleEnhancedForStatement_DropletFile;
}

void JavaParser::EnhancedForStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnhancedForStatement_DropletFile(this);
}

void JavaParser::EnhancedForStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnhancedForStatement_DropletFile(this);
}

JavaParser::EnhancedForStatement_DropletFileContext* JavaParser::enhancedForStatement_DropletFile() {
  EnhancedForStatement_DropletFileContext *_localctx = _tracker.createInstance<EnhancedForStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 816, JavaParser::RuleEnhancedForStatement_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5282);
    match(JavaParser::FOR);
    setState(5283);
    match(JavaParser::LPAREN);
    setState(5287);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::FINAL

    || _la == JavaParser::AT) {
      setState(5284);
      variableModifier();
      setState(5289);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5290);
    unannType();
    setState(5291);
    variableDeclaratorId();
    setState(5292);
    match(JavaParser::COLON);
    setState(5293);
    expression();
    setState(5294);
    match(JavaParser::RPAREN);
    setState(5295);
    statement();
    setState(5296);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnhancedForStatementNoShortIf_DropletFileContext ------------------------------------------------------------------

JavaParser::EnhancedForStatementNoShortIf_DropletFileContext::EnhancedForStatementNoShortIf_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::EnhancedForStatementNoShortIf_DropletFileContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::EnhancedForStatementNoShortIf_DropletFileContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

JavaParser::ExpressionContext* JavaParser::EnhancedForStatementNoShortIf_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::StatementNoShortIfContext* JavaParser::EnhancedForStatementNoShortIf_DropletFileContext::statementNoShortIf() {
  return getRuleContext<JavaParser::StatementNoShortIfContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::EnhancedForStatementNoShortIf_DropletFileContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::EnhancedForStatementNoShortIf_DropletFileContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::EnhancedForStatementNoShortIf_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleEnhancedForStatementNoShortIf_DropletFile;
}

void JavaParser::EnhancedForStatementNoShortIf_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnhancedForStatementNoShortIf_DropletFile(this);
}

void JavaParser::EnhancedForStatementNoShortIf_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnhancedForStatementNoShortIf_DropletFile(this);
}

JavaParser::EnhancedForStatementNoShortIf_DropletFileContext* JavaParser::enhancedForStatementNoShortIf_DropletFile() {
  EnhancedForStatementNoShortIf_DropletFileContext *_localctx = _tracker.createInstance<EnhancedForStatementNoShortIf_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 818, JavaParser::RuleEnhancedForStatementNoShortIf_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5298);
    match(JavaParser::FOR);
    setState(5299);
    match(JavaParser::LPAREN);
    setState(5303);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::FINAL

    || _la == JavaParser::AT) {
      setState(5300);
      variableModifier();
      setState(5305);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5306);
    unannType();
    setState(5307);
    variableDeclaratorId();
    setState(5308);
    match(JavaParser::COLON);
    setState(5309);
    expression();
    setState(5310);
    match(JavaParser::RPAREN);
    setState(5311);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BreakStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::BreakStatement_DropletFileContext::BreakStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::BreakStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::IdentifierContext* JavaParser::BreakStatement_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::BreakStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleBreakStatement_DropletFile;
}

void JavaParser::BreakStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreakStatement_DropletFile(this);
}

void JavaParser::BreakStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreakStatement_DropletFile(this);
}

JavaParser::BreakStatement_DropletFileContext* JavaParser::breakStatement_DropletFile() {
  BreakStatement_DropletFileContext *_localctx = _tracker.createInstance<BreakStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 820, JavaParser::RuleBreakStatement_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5313);
    match(JavaParser::BREAK);
    setState(5315);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8))) != 0) || _la == JavaParser::Identifier) {
      setState(5314);
      identifier();
    }
    setState(5317);
    match(JavaParser::SEMI);
    setState(5318);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::ContinueStatement_DropletFileContext::ContinueStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ContinueStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::IdentifierContext* JavaParser::ContinueStatement_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::ContinueStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleContinueStatement_DropletFile;
}

void JavaParser::ContinueStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement_DropletFile(this);
}

void JavaParser::ContinueStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement_DropletFile(this);
}

JavaParser::ContinueStatement_DropletFileContext* JavaParser::continueStatement_DropletFile() {
  ContinueStatement_DropletFileContext *_localctx = _tracker.createInstance<ContinueStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 822, JavaParser::RuleContinueStatement_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5320);
    match(JavaParser::CONTINUE);
    setState(5322);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8))) != 0) || _la == JavaParser::Identifier) {
      setState(5321);
      identifier();
    }
    setState(5324);
    match(JavaParser::SEMI);
    setState(5325);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::ReturnStatement_DropletFileContext::ReturnStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ReturnStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ExpressionContext* JavaParser::ReturnStatement_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}


size_t JavaParser::ReturnStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleReturnStatement_DropletFile;
}

void JavaParser::ReturnStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStatement_DropletFile(this);
}

void JavaParser::ReturnStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStatement_DropletFile(this);
}

JavaParser::ReturnStatement_DropletFileContext* JavaParser::returnStatement_DropletFile() {
  ReturnStatement_DropletFileContext *_localctx = _tracker.createInstance<ReturnStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 824, JavaParser::RuleReturnStatement_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5327);
    match(JavaParser::RETURN);
    setState(5329);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(5328);
      expression();
    }
    setState(5331);
    match(JavaParser::SEMI);
    setState(5332);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::ThrowStatement_DropletFileContext::ThrowStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::ThrowStatement_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ThrowStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ThrowStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleThrowStatement_DropletFile;
}

void JavaParser::ThrowStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowStatement_DropletFile(this);
}

void JavaParser::ThrowStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowStatement_DropletFile(this);
}

JavaParser::ThrowStatement_DropletFileContext* JavaParser::throwStatement_DropletFile() {
  ThrowStatement_DropletFileContext *_localctx = _tracker.createInstance<ThrowStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 826, JavaParser::RuleThrowStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5334);
    match(JavaParser::THROW);
    setState(5335);
    expression();
    setState(5336);
    match(JavaParser::SEMI);
    setState(5337);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SynchronizedStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::SynchronizedStatement_DropletFileContext::SynchronizedStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::SynchronizedStatement_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::BlockContext* JavaParser::SynchronizedStatement_DropletFileContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::SynchronizedStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::SynchronizedStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleSynchronizedStatement_DropletFile;
}

void JavaParser::SynchronizedStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSynchronizedStatement_DropletFile(this);
}

void JavaParser::SynchronizedStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSynchronizedStatement_DropletFile(this);
}

JavaParser::SynchronizedStatement_DropletFileContext* JavaParser::synchronizedStatement_DropletFile() {
  SynchronizedStatement_DropletFileContext *_localctx = _tracker.createInstance<SynchronizedStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 828, JavaParser::RuleSynchronizedStatement_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5339);
    match(JavaParser::SYNCHRONIZED);
    setState(5340);
    match(JavaParser::LPAREN);
    setState(5341);
    expression();
    setState(5342);
    match(JavaParser::RPAREN);
    setState(5343);
    block();
    setState(5344);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::TryStatement_DropletFileContext::TryStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::TryStatement_DropletFileContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

JavaParser::CatchesContext* JavaParser::TryStatement_DropletFileContext::catches() {
  return getRuleContext<JavaParser::CatchesContext>(0);
}

tree::TerminalNode* JavaParser::TryStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::Finally_Context* JavaParser::TryStatement_DropletFileContext::finally_() {
  return getRuleContext<JavaParser::Finally_Context>(0);
}

JavaParser::TryWithResourcesStatementContext* JavaParser::TryStatement_DropletFileContext::tryWithResourcesStatement() {
  return getRuleContext<JavaParser::TryWithResourcesStatementContext>(0);
}


size_t JavaParser::TryStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTryStatement_DropletFile;
}

void JavaParser::TryStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryStatement_DropletFile(this);
}

void JavaParser::TryStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryStatement_DropletFile(this);
}

JavaParser::TryStatement_DropletFileContext* JavaParser::tryStatement_DropletFile() {
  TryStatement_DropletFileContext *_localctx = _tracker.createInstance<TryStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 830, JavaParser::RuleTryStatement_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5362);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 537, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5346);
      match(JavaParser::TRY);
      setState(5347);
      block();
      setState(5348);
      catches();
      setState(5349);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5351);
      match(JavaParser::TRY);
      setState(5352);
      block();
      setState(5354);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::CATCH) {
        setState(5353);
        catches();
      }
      setState(5356);
      finally_();
      setState(5357);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5359);
      tryWithResourcesStatement();
      setState(5360);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Catches_DropletFileContext ------------------------------------------------------------------

JavaParser::Catches_DropletFileContext::Catches_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::Catches_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::CatchClauseContext *> JavaParser::Catches_DropletFileContext::catchClause() {
  return getRuleContexts<JavaParser::CatchClauseContext>();
}

JavaParser::CatchClauseContext* JavaParser::Catches_DropletFileContext::catchClause(size_t i) {
  return getRuleContext<JavaParser::CatchClauseContext>(i);
}


size_t JavaParser::Catches_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleCatches_DropletFile;
}

void JavaParser::Catches_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatches_DropletFile(this);
}

void JavaParser::Catches_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatches_DropletFile(this);
}

JavaParser::Catches_DropletFileContext* JavaParser::catches_DropletFile() {
  Catches_DropletFileContext *_localctx = _tracker.createInstance<Catches_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 832, JavaParser::RuleCatches_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5365); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5364);
      catchClause();
      setState(5367); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == JavaParser::CATCH);
    setState(5369);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchClause_DropletFileContext ------------------------------------------------------------------

JavaParser::CatchClause_DropletFileContext::CatchClause_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::CatchFormalParameterContext* JavaParser::CatchClause_DropletFileContext::catchFormalParameter() {
  return getRuleContext<JavaParser::CatchFormalParameterContext>(0);
}

JavaParser::BlockContext* JavaParser::CatchClause_DropletFileContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::CatchClause_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::CatchClause_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleCatchClause_DropletFile;
}

void JavaParser::CatchClause_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchClause_DropletFile(this);
}

void JavaParser::CatchClause_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchClause_DropletFile(this);
}

JavaParser::CatchClause_DropletFileContext* JavaParser::catchClause_DropletFile() {
  CatchClause_DropletFileContext *_localctx = _tracker.createInstance<CatchClause_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 834, JavaParser::RuleCatchClause_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5371);
    match(JavaParser::CATCH);
    setState(5372);
    match(JavaParser::LPAREN);
    setState(5373);
    catchFormalParameter();
    setState(5374);
    match(JavaParser::RPAREN);
    setState(5375);
    block();
    setState(5376);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchFormalParameter_DropletFileContext ------------------------------------------------------------------

JavaParser::CatchFormalParameter_DropletFileContext::CatchFormalParameter_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::CatchTypeContext* JavaParser::CatchFormalParameter_DropletFileContext::catchType() {
  return getRuleContext<JavaParser::CatchTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::CatchFormalParameter_DropletFileContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* JavaParser::CatchFormalParameter_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::CatchFormalParameter_DropletFileContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::CatchFormalParameter_DropletFileContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::CatchFormalParameter_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleCatchFormalParameter_DropletFile;
}

void JavaParser::CatchFormalParameter_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchFormalParameter_DropletFile(this);
}

void JavaParser::CatchFormalParameter_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchFormalParameter_DropletFile(this);
}

JavaParser::CatchFormalParameter_DropletFileContext* JavaParser::catchFormalParameter_DropletFile() {
  CatchFormalParameter_DropletFileContext *_localctx = _tracker.createInstance<CatchFormalParameter_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 836, JavaParser::RuleCatchFormalParameter_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5381);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::FINAL

    || _la == JavaParser::AT) {
      setState(5378);
      variableModifier();
      setState(5383);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5384);
    catchType();
    setState(5385);
    variableDeclaratorId();
    setState(5386);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchType_DropletFileContext ------------------------------------------------------------------

JavaParser::CatchType_DropletFileContext::CatchType_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannClassTypeContext* JavaParser::CatchType_DropletFileContext::unannClassType() {
  return getRuleContext<JavaParser::UnannClassTypeContext>(0);
}

tree::TerminalNode* JavaParser::CatchType_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::ClassTypeContext *> JavaParser::CatchType_DropletFileContext::classType() {
  return getRuleContexts<JavaParser::ClassTypeContext>();
}

JavaParser::ClassTypeContext* JavaParser::CatchType_DropletFileContext::classType(size_t i) {
  return getRuleContext<JavaParser::ClassTypeContext>(i);
}


size_t JavaParser::CatchType_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleCatchType_DropletFile;
}

void JavaParser::CatchType_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchType_DropletFile(this);
}

void JavaParser::CatchType_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchType_DropletFile(this);
}

JavaParser::CatchType_DropletFileContext* JavaParser::catchType_DropletFile() {
  CatchType_DropletFileContext *_localctx = _tracker.createInstance<CatchType_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 838, JavaParser::RuleCatchType_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5388);
    unannClassType();
    setState(5393);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::BITOR) {
      setState(5389);
      match(JavaParser::BITOR);
      setState(5390);
      classType();
      setState(5395);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5396);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Finally__DropletFileContext ------------------------------------------------------------------

JavaParser::Finally__DropletFileContext::Finally__DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::Finally__DropletFileContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::Finally__DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::Finally__DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleFinally__DropletFile;
}

void JavaParser::Finally__DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFinally__DropletFile(this);
}

void JavaParser::Finally__DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFinally__DropletFile(this);
}

JavaParser::Finally__DropletFileContext* JavaParser::finally__DropletFile() {
  Finally__DropletFileContext *_localctx = _tracker.createInstance<Finally__DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 840, JavaParser::RuleFinally__DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5398);
    match(JavaParser::FINALLY);
    setState(5399);
    block();
    setState(5400);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryWithResourcesStatement_DropletFileContext ------------------------------------------------------------------

JavaParser::TryWithResourcesStatement_DropletFileContext::TryWithResourcesStatement_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ResourceSpecificationContext* JavaParser::TryWithResourcesStatement_DropletFileContext::resourceSpecification() {
  return getRuleContext<JavaParser::ResourceSpecificationContext>(0);
}

JavaParser::BlockContext* JavaParser::TryWithResourcesStatement_DropletFileContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::TryWithResourcesStatement_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::CatchesContext* JavaParser::TryWithResourcesStatement_DropletFileContext::catches() {
  return getRuleContext<JavaParser::CatchesContext>(0);
}

JavaParser::Finally_Context* JavaParser::TryWithResourcesStatement_DropletFileContext::finally_() {
  return getRuleContext<JavaParser::Finally_Context>(0);
}


size_t JavaParser::TryWithResourcesStatement_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTryWithResourcesStatement_DropletFile;
}

void JavaParser::TryWithResourcesStatement_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryWithResourcesStatement_DropletFile(this);
}

void JavaParser::TryWithResourcesStatement_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryWithResourcesStatement_DropletFile(this);
}

JavaParser::TryWithResourcesStatement_DropletFileContext* JavaParser::tryWithResourcesStatement_DropletFile() {
  TryWithResourcesStatement_DropletFileContext *_localctx = _tracker.createInstance<TryWithResourcesStatement_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 842, JavaParser::RuleTryWithResourcesStatement_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5402);
    match(JavaParser::TRY);
    setState(5403);
    resourceSpecification();
    setState(5404);
    block();
    setState(5406);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::CATCH) {
      setState(5405);
      catches();
    }
    setState(5409);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::FINALLY) {
      setState(5408);
      finally_();
    }
    setState(5411);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceSpecification_DropletFileContext ------------------------------------------------------------------

JavaParser::ResourceSpecification_DropletFileContext::ResourceSpecification_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ResourceListContext* JavaParser::ResourceSpecification_DropletFileContext::resourceList() {
  return getRuleContext<JavaParser::ResourceListContext>(0);
}

tree::TerminalNode* JavaParser::ResourceSpecification_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ResourceSpecification_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleResourceSpecification_DropletFile;
}

void JavaParser::ResourceSpecification_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResourceSpecification_DropletFile(this);
}

void JavaParser::ResourceSpecification_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResourceSpecification_DropletFile(this);
}

JavaParser::ResourceSpecification_DropletFileContext* JavaParser::resourceSpecification_DropletFile() {
  ResourceSpecification_DropletFileContext *_localctx = _tracker.createInstance<ResourceSpecification_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 844, JavaParser::RuleResourceSpecification_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5413);
    match(JavaParser::LPAREN);
    setState(5414);
    resourceList();
    setState(5416);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::SEMI) {
      setState(5415);
      match(JavaParser::SEMI);
    }
    setState(5418);
    match(JavaParser::RPAREN);
    setState(5419);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceList_DropletFileContext ------------------------------------------------------------------

JavaParser::ResourceList_DropletFileContext::ResourceList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ResourceContext *> JavaParser::ResourceList_DropletFileContext::resource() {
  return getRuleContexts<JavaParser::ResourceContext>();
}

JavaParser::ResourceContext* JavaParser::ResourceList_DropletFileContext::resource(size_t i) {
  return getRuleContext<JavaParser::ResourceContext>(i);
}

tree::TerminalNode* JavaParser::ResourceList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ResourceList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleResourceList_DropletFile;
}

void JavaParser::ResourceList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResourceList_DropletFile(this);
}

void JavaParser::ResourceList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResourceList_DropletFile(this);
}

JavaParser::ResourceList_DropletFileContext* JavaParser::resourceList_DropletFile() {
  ResourceList_DropletFileContext *_localctx = _tracker.createInstance<ResourceList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 846, JavaParser::RuleResourceList_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5421);
    resource();
    setState(5426);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::SEMI) {
      setState(5422);
      match(JavaParser::SEMI);
      setState(5423);
      resource();
      setState(5428);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5429);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Resource_DropletFileContext ------------------------------------------------------------------

JavaParser::Resource_DropletFileContext::Resource_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnannTypeContext* JavaParser::Resource_DropletFileContext::unannType() {
  return getRuleContext<JavaParser::UnannTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::Resource_DropletFileContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

JavaParser::ExpressionContext* JavaParser::Resource_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::Resource_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::Resource_DropletFileContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::Resource_DropletFileContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

JavaParser::VariableAccessContext* JavaParser::Resource_DropletFileContext::variableAccess() {
  return getRuleContext<JavaParser::VariableAccessContext>(0);
}


size_t JavaParser::Resource_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleResource_DropletFile;
}

void JavaParser::Resource_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResource_DropletFile(this);
}

void JavaParser::Resource_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResource_DropletFile(this);
}

JavaParser::Resource_DropletFileContext* JavaParser::resource_DropletFile() {
  Resource_DropletFileContext *_localctx = _tracker.createInstance<Resource_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 848, JavaParser::RuleResource_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5446);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 546, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5434);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::FINAL

      || _la == JavaParser::AT) {
        setState(5431);
        variableModifier();
        setState(5436);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5437);
      unannType();
      setState(5438);
      variableDeclaratorId();
      setState(5439);
      match(JavaParser::ASSIGN);
      setState(5440);
      expression();
      setState(5441);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5443);
      variableAccess();
      setState(5444);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableAccess_DropletFileContext ------------------------------------------------------------------

JavaParser::VariableAccess_DropletFileContext::VariableAccess_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionNameContext* JavaParser::VariableAccess_DropletFileContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

tree::TerminalNode* JavaParser::VariableAccess_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::FieldAccessContext* JavaParser::VariableAccess_DropletFileContext::fieldAccess() {
  return getRuleContext<JavaParser::FieldAccessContext>(0);
}


size_t JavaParser::VariableAccess_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleVariableAccess_DropletFile;
}

void JavaParser::VariableAccess_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableAccess_DropletFile(this);
}

void JavaParser::VariableAccess_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableAccess_DropletFile(this);
}

JavaParser::VariableAccess_DropletFileContext* JavaParser::variableAccess_DropletFile() {
  VariableAccess_DropletFileContext *_localctx = _tracker.createInstance<VariableAccess_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 850, JavaParser::RuleVariableAccess_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5454);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 547, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5448);
      expressionName();
      setState(5449);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5451);
      fieldAccess();
      setState(5452);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_DropletFileContext ------------------------------------------------------------------

JavaParser::Primary_DropletFileContext::Primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimaryNoNewArray_lfno_primaryContext* JavaParser::Primary_DropletFileContext::primaryNoNewArray_lfno_primary() {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lfno_primaryContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::Primary_DropletFileContext::EOF() {
  return getTokens(JavaParser::EOF);
}

tree::TerminalNode* JavaParser::Primary_DropletFileContext::EOF(size_t i) {
  return getToken(JavaParser::EOF, i);
}

JavaParser::ArrayCreationExpressionContext* JavaParser::Primary_DropletFileContext::arrayCreationExpression() {
  return getRuleContext<JavaParser::ArrayCreationExpressionContext>(0);
}

std::vector<JavaParser::PrimaryNoNewArray_lf_primaryContext *> JavaParser::Primary_DropletFileContext::primaryNoNewArray_lf_primary() {
  return getRuleContexts<JavaParser::PrimaryNoNewArray_lf_primaryContext>();
}

JavaParser::PrimaryNoNewArray_lf_primaryContext* JavaParser::Primary_DropletFileContext::primaryNoNewArray_lf_primary(size_t i) {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lf_primaryContext>(i);
}


size_t JavaParser::Primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePrimary_DropletFile;
}

void JavaParser::Primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_DropletFile(this);
}

void JavaParser::Primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_DropletFile(this);
}

JavaParser::Primary_DropletFileContext* JavaParser::primary_DropletFile() {
  Primary_DropletFileContext *_localctx = _tracker.createInstance<Primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 852, JavaParser::RulePrimary_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5462);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 548, _ctx)) {
    case 1: {
      setState(5456);
      primaryNoNewArray_lfno_primary();
      setState(5457);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      setState(5459);
      arrayCreationExpression();
      setState(5460);
      match(JavaParser::EOF);
      break;
    }

    }
    setState(5469);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::DOT

    || _la == JavaParser::COLONCOLON) {
      setState(5464);
      primaryNoNewArray_lf_primary();
      setState(5465);
      match(JavaParser::EOF);
      setState(5471);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_DropletFileContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_DropletFileContext::PrimaryNoNewArray_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LiteralContext* JavaParser::PrimaryNoNewArray_DropletFileContext::literal() {
  return getRuleContext<JavaParser::LiteralContext>(0);
}

tree::TerminalNode* JavaParser::PrimaryNoNewArray_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ClassLiteralContext* JavaParser::PrimaryNoNewArray_DropletFileContext::classLiteral() {
  return getRuleContext<JavaParser::ClassLiteralContext>(0);
}

JavaParser::TypeNameContext* JavaParser::PrimaryNoNewArray_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::ExpressionContext* JavaParser::PrimaryNoNewArray_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ClassInstanceCreationExpressionContext* JavaParser::PrimaryNoNewArray_DropletFileContext::classInstanceCreationExpression() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpressionContext>(0);
}

JavaParser::FieldAccessContext* JavaParser::PrimaryNoNewArray_DropletFileContext::fieldAccess() {
  return getRuleContext<JavaParser::FieldAccessContext>(0);
}

JavaParser::ArrayAccessContext* JavaParser::PrimaryNoNewArray_DropletFileContext::arrayAccess() {
  return getRuleContext<JavaParser::ArrayAccessContext>(0);
}

JavaParser::MethodInvocationContext* JavaParser::PrimaryNoNewArray_DropletFileContext::methodInvocation() {
  return getRuleContext<JavaParser::MethodInvocationContext>(0);
}

JavaParser::MethodReferenceContext* JavaParser::PrimaryNoNewArray_DropletFileContext::methodReference() {
  return getRuleContext<JavaParser::MethodReferenceContext>(0);
}


size_t JavaParser::PrimaryNoNewArray_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_DropletFile;
}

void JavaParser::PrimaryNoNewArray_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_DropletFile(this);
}

void JavaParser::PrimaryNoNewArray_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_DropletFile(this);
}

JavaParser::PrimaryNoNewArray_DropletFileContext* JavaParser::primaryNoNewArray_DropletFile() {
  PrimaryNoNewArray_DropletFileContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 854, JavaParser::RulePrimaryNoNewArray_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5505);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 550, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5472);
      literal();
      setState(5473);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5475);
      classLiteral();
      setState(5476);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5478);
      match(JavaParser::THIS);
      setState(5479);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5480);
      typeName();
      setState(5481);
      match(JavaParser::DOT);
      setState(5482);
      match(JavaParser::THIS);
      setState(5483);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5485);
      match(JavaParser::LPAREN);
      setState(5486);
      expression();
      setState(5487);
      match(JavaParser::RPAREN);
      setState(5488);
      match(JavaParser::EOF);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5490);
      classInstanceCreationExpression();
      setState(5491);
      match(JavaParser::EOF);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5493);
      fieldAccess();
      setState(5494);
      match(JavaParser::EOF);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(5496);
      arrayAccess();
      setState(5497);
      match(JavaParser::EOF);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(5499);
      methodInvocation();
      setState(5500);
      match(JavaParser::EOF);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(5502);
      methodReference();
      setState(5503);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lf_arrayAccess_DropletFileContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lf_arrayAccess_DropletFileContext::PrimaryNoNewArray_lf_arrayAccess_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::PrimaryNoNewArray_lf_arrayAccess_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lf_arrayAccess_DropletFile;
}

void JavaParser::PrimaryNoNewArray_lf_arrayAccess_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_arrayAccess_DropletFile(this);
}

void JavaParser::PrimaryNoNewArray_lf_arrayAccess_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_arrayAccess_DropletFile(this);
}

JavaParser::PrimaryNoNewArray_lf_arrayAccess_DropletFileContext* JavaParser::primaryNoNewArray_lf_arrayAccess_DropletFile() {
  PrimaryNoNewArray_lf_arrayAccess_DropletFileContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lf_arrayAccess_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 856, JavaParser::RulePrimaryNoNewArray_lf_arrayAccess_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);

   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LiteralContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext::literal() {
  return getRuleContext<JavaParser::LiteralContext>(0);
}

tree::TerminalNode* JavaParser::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeNameContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::ExpressionContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ClassInstanceCreationExpressionContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext::classInstanceCreationExpression() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpressionContext>(0);
}

JavaParser::FieldAccessContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext::fieldAccess() {
  return getRuleContext<JavaParser::FieldAccessContext>(0);
}

JavaParser::MethodInvocationContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext::methodInvocation() {
  return getRuleContext<JavaParser::MethodInvocationContext>(0);
}

JavaParser::MethodReferenceContext* JavaParser::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext::methodReference() {
  return getRuleContext<JavaParser::MethodReferenceContext>(0);
}


size_t JavaParser::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lfno_arrayAccess_DropletFile;
}

void JavaParser::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_arrayAccess_DropletFile(this);
}

void JavaParser::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_arrayAccess_DropletFile(this);
}

JavaParser::PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext* JavaParser::primaryNoNewArray_lfno_arrayAccess_DropletFile() {
  PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lfno_arrayAccess_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 858, JavaParser::RulePrimaryNoNewArray_lfno_arrayAccess_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5551);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 552, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5509);
      literal();
      setState(5510);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5512);
      typeName();
      setState(5517);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::LBRACK) {
        setState(5513);
        match(JavaParser::LBRACK);
        setState(5514);
        match(JavaParser::RBRACK);
        setState(5519);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5520);
      match(JavaParser::DOT);
      setState(5521);
      match(JavaParser::CLASS);
      setState(5522);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5524);
      match(JavaParser::VOID);
      setState(5525);
      match(JavaParser::DOT);
      setState(5526);
      match(JavaParser::CLASS);
      setState(5527);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5528);
      match(JavaParser::THIS);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5529);
      typeName();
      setState(5530);
      match(JavaParser::DOT);
      setState(5531);
      match(JavaParser::THIS);
      setState(5532);
      match(JavaParser::EOF);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5534);
      match(JavaParser::LPAREN);
      setState(5535);
      expression();
      setState(5536);
      match(JavaParser::RPAREN);
      setState(5537);
      match(JavaParser::EOF);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5539);
      classInstanceCreationExpression();
      setState(5540);
      match(JavaParser::EOF);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(5542);
      fieldAccess();
      setState(5543);
      match(JavaParser::EOF);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(5545);
      methodInvocation();
      setState(5546);
      match(JavaParser::EOF);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(5548);
      methodReference();
      setState(5549);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lf_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lf_primary_DropletFileContext::PrimaryNoNewArray_lf_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassInstanceCreationExpression_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primary_DropletFileContext::classInstanceCreationExpression_lf_primary() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpression_lf_primaryContext>(0);
}

tree::TerminalNode* JavaParser::PrimaryNoNewArray_lf_primary_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::FieldAccess_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primary_DropletFileContext::fieldAccess_lf_primary() {
  return getRuleContext<JavaParser::FieldAccess_lf_primaryContext>(0);
}

JavaParser::ArrayAccess_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primary_DropletFileContext::arrayAccess_lf_primary() {
  return getRuleContext<JavaParser::ArrayAccess_lf_primaryContext>(0);
}

JavaParser::MethodInvocation_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primary_DropletFileContext::methodInvocation_lf_primary() {
  return getRuleContext<JavaParser::MethodInvocation_lf_primaryContext>(0);
}

JavaParser::MethodReference_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primary_DropletFileContext::methodReference_lf_primary() {
  return getRuleContext<JavaParser::MethodReference_lf_primaryContext>(0);
}


size_t JavaParser::PrimaryNoNewArray_lf_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lf_primary_DropletFile;
}

void JavaParser::PrimaryNoNewArray_lf_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary_DropletFile(this);
}

void JavaParser::PrimaryNoNewArray_lf_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary_DropletFile(this);
}

JavaParser::PrimaryNoNewArray_lf_primary_DropletFileContext* JavaParser::primaryNoNewArray_lf_primary_DropletFile() {
  PrimaryNoNewArray_lf_primary_DropletFileContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lf_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 860, JavaParser::RulePrimaryNoNewArray_lf_primary_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5568);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 553, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5553);
      classInstanceCreationExpression_lf_primary();
      setState(5554);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5556);
      fieldAccess_lf_primary();
      setState(5557);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5559);
      arrayAccess_lf_primary();
      setState(5560);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5562);
      methodInvocation_lf_primary();
      setState(5563);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5565);
      methodReference_lf_primary();
      setState(5566);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFileContext::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFile;
}

void JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFile(this);
}

void JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFile(this);
}

JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFileContext* JavaParser::primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFile() {
  PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFileContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 862, JavaParser::RulePrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);

   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassInstanceCreationExpression_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext::classInstanceCreationExpression_lf_primary() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpression_lf_primaryContext>(0);
}

tree::TerminalNode* JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::FieldAccess_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext::fieldAccess_lf_primary() {
  return getRuleContext<JavaParser::FieldAccess_lf_primaryContext>(0);
}

JavaParser::MethodInvocation_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext::methodInvocation_lf_primary() {
  return getRuleContext<JavaParser::MethodInvocation_lf_primaryContext>(0);
}

JavaParser::MethodReference_lf_primaryContext* JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext::methodReference_lf_primary() {
  return getRuleContext<JavaParser::MethodReference_lf_primaryContext>(0);
}


size_t JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFile;
}

void JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFile(this);
}

void JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFile(this);
}

JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext* JavaParser::primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFile() {
  PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 864, JavaParser::RulePrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5584);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 554, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5572);
      classInstanceCreationExpression_lf_primary();
      setState(5573);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5575);
      fieldAccess_lf_primary();
      setState(5576);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5578);
      methodInvocation_lf_primary();
      setState(5579);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5581);
      methodReference_lf_primary();
      setState(5582);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lfno_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::PrimaryNoNewArray_lfno_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LiteralContext* JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::literal() {
  return getRuleContext<JavaParser::LiteralContext>(0);
}

tree::TerminalNode* JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeNameContext* JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::UnannPrimitiveTypeContext* JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::unannPrimitiveType() {
  return getRuleContext<JavaParser::UnannPrimitiveTypeContext>(0);
}

JavaParser::ExpressionContext* JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ClassInstanceCreationExpression_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::classInstanceCreationExpression_lfno_primary() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpression_lfno_primaryContext>(0);
}

JavaParser::FieldAccess_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::fieldAccess_lfno_primary() {
  return getRuleContext<JavaParser::FieldAccess_lfno_primaryContext>(0);
}

JavaParser::ArrayAccess_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::arrayAccess_lfno_primary() {
  return getRuleContext<JavaParser::ArrayAccess_lfno_primaryContext>(0);
}

JavaParser::MethodInvocation_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::methodInvocation_lfno_primary() {
  return getRuleContext<JavaParser::MethodInvocation_lfno_primaryContext>(0);
}

JavaParser::MethodReference_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::methodReference_lfno_primary() {
  return getRuleContext<JavaParser::MethodReference_lfno_primaryContext>(0);
}


size_t JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lfno_primary_DropletFile;
}

void JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_DropletFile(this);
}

void JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_DropletFile(this);
}

JavaParser::PrimaryNoNewArray_lfno_primary_DropletFileContext* JavaParser::primaryNoNewArray_lfno_primary_DropletFile() {
  PrimaryNoNewArray_lfno_primary_DropletFileContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lfno_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 866, JavaParser::RulePrimaryNoNewArray_lfno_primary_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5644);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 557, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5586);
      literal();
      setState(5587);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5589);
      typeName();
      setState(5594);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::LBRACK) {
        setState(5590);
        match(JavaParser::LBRACK);
        setState(5591);
        match(JavaParser::RBRACK);
        setState(5596);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5597);
      match(JavaParser::DOT);
      setState(5598);
      match(JavaParser::CLASS);
      setState(5599);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5601);
      unannPrimitiveType();
      setState(5606);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::LBRACK) {
        setState(5602);
        match(JavaParser::LBRACK);
        setState(5603);
        match(JavaParser::RBRACK);
        setState(5608);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5609);
      match(JavaParser::DOT);
      setState(5610);
      match(JavaParser::CLASS);
      setState(5611);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5613);
      match(JavaParser::VOID);
      setState(5614);
      match(JavaParser::DOT);
      setState(5615);
      match(JavaParser::CLASS);
      setState(5616);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5617);
      match(JavaParser::THIS);
      setState(5618);
      match(JavaParser::EOF);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5619);
      typeName();
      setState(5620);
      match(JavaParser::DOT);
      setState(5621);
      match(JavaParser::THIS);
      setState(5622);
      match(JavaParser::EOF);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5624);
      match(JavaParser::LPAREN);
      setState(5625);
      expression();
      setState(5626);
      match(JavaParser::RPAREN);
      setState(5627);
      match(JavaParser::EOF);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(5629);
      classInstanceCreationExpression_lfno_primary();
      setState(5630);
      match(JavaParser::EOF);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(5632);
      fieldAccess_lfno_primary();
      setState(5633);
      match(JavaParser::EOF);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(5635);
      arrayAccess_lfno_primary();
      setState(5636);
      match(JavaParser::EOF);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(5638);
      methodInvocation_lfno_primary();
      setState(5639);
      match(JavaParser::EOF);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(5641);
      methodReference_lfno_primary();
      setState(5642);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFileContext::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFile;
}

void JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFile(this);
}

void JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFile(this);
}

JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFileContext* JavaParser::primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFile() {
  PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFileContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 868, JavaParser::RulePrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);

   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LiteralContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext::literal() {
  return getRuleContext<JavaParser::LiteralContext>(0);
}

tree::TerminalNode* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeNameContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::UnannPrimitiveTypeContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext::unannPrimitiveType() {
  return getRuleContext<JavaParser::UnannPrimitiveTypeContext>(0);
}

JavaParser::ExpressionContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ClassInstanceCreationExpression_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext::classInstanceCreationExpression_lfno_primary() {
  return getRuleContext<JavaParser::ClassInstanceCreationExpression_lfno_primaryContext>(0);
}

JavaParser::FieldAccess_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext::fieldAccess_lfno_primary() {
  return getRuleContext<JavaParser::FieldAccess_lfno_primaryContext>(0);
}

JavaParser::MethodInvocation_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext::methodInvocation_lfno_primary() {
  return getRuleContext<JavaParser::MethodInvocation_lfno_primaryContext>(0);
}

JavaParser::MethodReference_lfno_primaryContext* JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext::methodReference_lfno_primary() {
  return getRuleContext<JavaParser::MethodReference_lfno_primaryContext>(0);
}


size_t JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFile;
}

void JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFile(this);
}

void JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFile(this);
}

JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext* JavaParser::primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFile() {
  PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext *_localctx = _tracker.createInstance<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 870, JavaParser::RulePrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5703);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 560, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5648);
      literal();
      setState(5649);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5651);
      typeName();
      setState(5656);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::LBRACK) {
        setState(5652);
        match(JavaParser::LBRACK);
        setState(5653);
        match(JavaParser::RBRACK);
        setState(5658);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5659);
      match(JavaParser::DOT);
      setState(5660);
      match(JavaParser::CLASS);
      setState(5661);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5663);
      unannPrimitiveType();
      setState(5668);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::LBRACK) {
        setState(5664);
        match(JavaParser::LBRACK);
        setState(5665);
        match(JavaParser::RBRACK);
        setState(5670);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5671);
      match(JavaParser::DOT);
      setState(5672);
      match(JavaParser::CLASS);
      setState(5673);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5675);
      match(JavaParser::VOID);
      setState(5676);
      match(JavaParser::DOT);
      setState(5677);
      match(JavaParser::CLASS);
      setState(5678);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5679);
      match(JavaParser::THIS);
      setState(5680);
      match(JavaParser::EOF);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5681);
      typeName();
      setState(5682);
      match(JavaParser::DOT);
      setState(5683);
      match(JavaParser::THIS);
      setState(5684);
      match(JavaParser::EOF);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5686);
      match(JavaParser::LPAREN);
      setState(5687);
      expression();
      setState(5688);
      match(JavaParser::RPAREN);
      setState(5689);
      match(JavaParser::EOF);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(5691);
      classInstanceCreationExpression_lfno_primary();
      setState(5692);
      match(JavaParser::EOF);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(5694);
      fieldAccess_lfno_primary();
      setState(5695);
      match(JavaParser::EOF);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(5697);
      methodInvocation_lfno_primary();
      setState(5698);
      match(JavaParser::EOF);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(5700);
      methodReference_lfno_primary();
      setState(5701);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassLiteral_DropletFileContext ------------------------------------------------------------------

JavaParser::ClassLiteral_DropletFileContext::ClassLiteral_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassLiteral_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeNameContext* JavaParser::ClassLiteral_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::NumericTypeContext* JavaParser::ClassLiteral_DropletFileContext::numericType() {
  return getRuleContext<JavaParser::NumericTypeContext>(0);
}


size_t JavaParser::ClassLiteral_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleClassLiteral_DropletFile;
}

void JavaParser::ClassLiteral_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassLiteral_DropletFile(this);
}

void JavaParser::ClassLiteral_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassLiteral_DropletFile(this);
}

JavaParser::ClassLiteral_DropletFileContext* JavaParser::classLiteral_DropletFile() {
  ClassLiteral_DropletFileContext *_localctx = _tracker.createInstance<ClassLiteral_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 872, JavaParser::RuleClassLiteral_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5724);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(5708);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case JavaParser::T__0:
          case JavaParser::T__1:
          case JavaParser::T__4:
          case JavaParser::T__8:
          case JavaParser::Identifier: {
            setState(5705);
            typeName();
            break;
          }

          case JavaParser::BYTE:
          case JavaParser::CHAR:
          case JavaParser::DOUBLE:
          case JavaParser::FLOAT:
          case JavaParser::INT:
          case JavaParser::LONG:
          case JavaParser::SHORT: {
            setState(5706);
            numericType();
            break;
          }

          case JavaParser::BOOLEAN: {
            setState(5707);
            match(JavaParser::BOOLEAN);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(5714);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::LBRACK) {
          setState(5710);
          match(JavaParser::LBRACK);
          setState(5711);
          match(JavaParser::RBRACK);
          setState(5716);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(5717);
        match(JavaParser::DOT);
        setState(5718);
        match(JavaParser::CLASS);
        setState(5719);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::VOID: {
        enterOuterAlt(_localctx, 2);
        setState(5720);
        match(JavaParser::VOID);
        setState(5721);
        match(JavaParser::DOT);
        setState(5722);
        match(JavaParser::CLASS);
        setState(5723);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassInstanceCreationExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::ClassInstanceCreationExpression_DropletFileContext::ClassInstanceCreationExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::ClassInstanceCreationExpression_DropletFileContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::ClassInstanceCreationExpression_DropletFileContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

tree::TerminalNode* JavaParser::ClassInstanceCreationExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassInstanceCreationExpression_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassInstanceCreationExpression_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassInstanceCreationExpression_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsOrDiamondContext* JavaParser::ClassInstanceCreationExpression_DropletFileContext::typeArgumentsOrDiamond() {
  return getRuleContext<JavaParser::TypeArgumentsOrDiamondContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::ClassInstanceCreationExpression_DropletFileContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::ClassInstanceCreationExpression_DropletFileContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}

JavaParser::ExpressionNameContext* JavaParser::ClassInstanceCreationExpression_DropletFileContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

JavaParser::PrimaryContext* JavaParser::ClassInstanceCreationExpression_DropletFileContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}


size_t JavaParser::ClassInstanceCreationExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleClassInstanceCreationExpression_DropletFile;
}

void JavaParser::ClassInstanceCreationExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassInstanceCreationExpression_DropletFile(this);
}

void JavaParser::ClassInstanceCreationExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassInstanceCreationExpression_DropletFile(this);
}

JavaParser::ClassInstanceCreationExpression_DropletFileContext* JavaParser::classInstanceCreationExpression_DropletFile() {
  ClassInstanceCreationExpression_DropletFileContext *_localctx = _tracker.createInstance<ClassInstanceCreationExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 874, JavaParser::RuleClassInstanceCreationExpression_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5815);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 581, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5726);
      match(JavaParser::NEW);
      setState(5728);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(5727);
        typeArguments();
      }
      setState(5733);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(5730);
        annotation();
        setState(5735);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5736);
      identifier();
      setState(5747);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::DOT) {
        setState(5737);
        match(JavaParser::DOT);
        setState(5741);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::AT) {
          setState(5738);
          annotation();
          setState(5743);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(5744);
        identifier();
        setState(5749);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5751);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(5750);
        typeArgumentsOrDiamond();
      }
      setState(5753);
      match(JavaParser::LPAREN);
      setState(5755);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(5754);
        argumentList();
      }
      setState(5757);
      match(JavaParser::RPAREN);
      setState(5759);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LBRACE) {
        setState(5758);
        classBody();
      }
      setState(5761);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5763);
      expressionName();
      setState(5764);
      match(JavaParser::DOT);
      setState(5765);
      match(JavaParser::NEW);
      setState(5767);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(5766);
        typeArguments();
      }
      setState(5772);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(5769);
        annotation();
        setState(5774);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5775);
      identifier();
      setState(5777);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(5776);
        typeArgumentsOrDiamond();
      }
      setState(5779);
      match(JavaParser::LPAREN);
      setState(5781);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(5780);
        argumentList();
      }
      setState(5783);
      match(JavaParser::RPAREN);
      setState(5785);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LBRACE) {
        setState(5784);
        classBody();
      }
      setState(5787);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5789);
      primary();
      setState(5790);
      match(JavaParser::DOT);
      setState(5791);
      match(JavaParser::NEW);
      setState(5793);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(5792);
        typeArguments();
      }
      setState(5798);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::AT) {
        setState(5795);
        annotation();
        setState(5800);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5801);
      identifier();
      setState(5803);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(5802);
        typeArgumentsOrDiamond();
      }
      setState(5805);
      match(JavaParser::LPAREN);
      setState(5807);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(5806);
        argumentList();
      }
      setState(5809);
      match(JavaParser::RPAREN);
      setState(5811);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LBRACE) {
        setState(5810);
        classBody();
      }
      setState(5813);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassInstanceCreationExpression_lf_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::ClassInstanceCreationExpression_lf_primary_DropletFileContext::ClassInstanceCreationExpression_lf_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ClassInstanceCreationExpression_lf_primary_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::ClassInstanceCreationExpression_lf_primary_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassInstanceCreationExpression_lf_primary_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassInstanceCreationExpression_lf_primary_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassInstanceCreationExpression_lf_primary_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsOrDiamondContext* JavaParser::ClassInstanceCreationExpression_lf_primary_DropletFileContext::typeArgumentsOrDiamond() {
  return getRuleContext<JavaParser::TypeArgumentsOrDiamondContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::ClassInstanceCreationExpression_lf_primary_DropletFileContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::ClassInstanceCreationExpression_lf_primary_DropletFileContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}


size_t JavaParser::ClassInstanceCreationExpression_lf_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleClassInstanceCreationExpression_lf_primary_DropletFile;
}

void JavaParser::ClassInstanceCreationExpression_lf_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassInstanceCreationExpression_lf_primary_DropletFile(this);
}

void JavaParser::ClassInstanceCreationExpression_lf_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassInstanceCreationExpression_lf_primary_DropletFile(this);
}

JavaParser::ClassInstanceCreationExpression_lf_primary_DropletFileContext* JavaParser::classInstanceCreationExpression_lf_primary_DropletFile() {
  ClassInstanceCreationExpression_lf_primary_DropletFileContext *_localctx = _tracker.createInstance<ClassInstanceCreationExpression_lf_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 876, JavaParser::RuleClassInstanceCreationExpression_lf_primary_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5817);
    match(JavaParser::DOT);
    setState(5818);
    match(JavaParser::NEW);
    setState(5820);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(5819);
      typeArguments();
    }
    setState(5825);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(5822);
      annotation();
      setState(5827);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5828);
    identifier();
    setState(5830);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(5829);
      typeArgumentsOrDiamond();
    }
    setState(5832);
    match(JavaParser::LPAREN);
    setState(5834);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(5833);
      argumentList();
    }
    setState(5836);
    match(JavaParser::RPAREN);
    setState(5838);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACE) {
      setState(5837);
      classBody();
    }
    setState(5840);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassInstanceCreationExpression_lfno_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::ClassInstanceCreationExpression_lfno_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

tree::TerminalNode* JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsOrDiamondContext* JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::typeArgumentsOrDiamond() {
  return getRuleContext<JavaParser::TypeArgumentsOrDiamondContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}

JavaParser::ExpressionNameContext* JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}


size_t JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleClassInstanceCreationExpression_lfno_primary_DropletFile;
}

void JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassInstanceCreationExpression_lfno_primary_DropletFile(this);
}

void JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassInstanceCreationExpression_lfno_primary_DropletFile(this);
}

JavaParser::ClassInstanceCreationExpression_lfno_primary_DropletFileContext* JavaParser::classInstanceCreationExpression_lfno_primary_DropletFile() {
  ClassInstanceCreationExpression_lfno_primary_DropletFileContext *_localctx = _tracker.createInstance<ClassInstanceCreationExpression_lfno_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 878, JavaParser::RuleClassInstanceCreationExpression_lfno_primary_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5905);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::NEW: {
        enterOuterAlt(_localctx, 1);
        setState(5842);
        match(JavaParser::NEW);
        setState(5844);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LT) {
          setState(5843);
          typeArguments();
        }
        setState(5849);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::AT) {
          setState(5846);
          annotation();
          setState(5851);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(5852);
        identifier();
        setState(5863);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::DOT) {
          setState(5853);
          match(JavaParser::DOT);
          setState(5857);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == JavaParser::AT) {
            setState(5854);
            annotation();
            setState(5859);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(5860);
          identifier();
          setState(5865);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(5867);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LT) {
          setState(5866);
          typeArgumentsOrDiamond();
        }
        setState(5869);
        match(JavaParser::LPAREN);
        setState(5871);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << JavaParser::T__0)
          | (1ULL << JavaParser::T__1)
          | (1ULL << JavaParser::T__4)
          | (1ULL << JavaParser::T__8)
          | (1ULL << JavaParser::BOOLEAN)
          | (1ULL << JavaParser::BYTE)
          | (1ULL << JavaParser::CHAR)
          | (1ULL << JavaParser::DOUBLE)
          | (1ULL << JavaParser::FLOAT)
          | (1ULL << JavaParser::INT)
          | (1ULL << JavaParser::LONG)
          | (1ULL << JavaParser::NEW)
          | (1ULL << JavaParser::SHORT)
          | (1ULL << JavaParser::SUPER)
          | (1ULL << JavaParser::THIS)
          | (1ULL << JavaParser::VOID)
          | (1ULL << JavaParser::IntegerLiteral)
          | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
          | (1ULL << (JavaParser::CharacterLiteral - 64))
          | (1ULL << (JavaParser::StringLiteral - 64))
          | (1ULL << (JavaParser::NullLiteral - 64))
          | (1ULL << (JavaParser::LPAREN - 64))
          | (1ULL << (JavaParser::AT - 64))
          | (1ULL << (JavaParser::BANG - 64))
          | (1ULL << (JavaParser::TILDE - 64))
          | (1ULL << (JavaParser::INC - 64))
          | (1ULL << (JavaParser::DEC - 64))
          | (1ULL << (JavaParser::ADD - 64))
          | (1ULL << (JavaParser::SUB - 64))
          | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
          setState(5870);
          argumentList();
        }
        setState(5873);
        match(JavaParser::RPAREN);
        setState(5875);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LBRACE) {
          setState(5874);
          classBody();
        }
        setState(5877);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 2);
        setState(5879);
        expressionName();
        setState(5880);
        match(JavaParser::DOT);
        setState(5881);
        match(JavaParser::NEW);
        setState(5883);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LT) {
          setState(5882);
          typeArguments();
        }
        setState(5888);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::AT) {
          setState(5885);
          annotation();
          setState(5890);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(5891);
        identifier();
        setState(5893);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LT) {
          setState(5892);
          typeArgumentsOrDiamond();
        }
        setState(5895);
        match(JavaParser::LPAREN);
        setState(5897);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << JavaParser::T__0)
          | (1ULL << JavaParser::T__1)
          | (1ULL << JavaParser::T__4)
          | (1ULL << JavaParser::T__8)
          | (1ULL << JavaParser::BOOLEAN)
          | (1ULL << JavaParser::BYTE)
          | (1ULL << JavaParser::CHAR)
          | (1ULL << JavaParser::DOUBLE)
          | (1ULL << JavaParser::FLOAT)
          | (1ULL << JavaParser::INT)
          | (1ULL << JavaParser::LONG)
          | (1ULL << JavaParser::NEW)
          | (1ULL << JavaParser::SHORT)
          | (1ULL << JavaParser::SUPER)
          | (1ULL << JavaParser::THIS)
          | (1ULL << JavaParser::VOID)
          | (1ULL << JavaParser::IntegerLiteral)
          | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
          | (1ULL << (JavaParser::CharacterLiteral - 64))
          | (1ULL << (JavaParser::StringLiteral - 64))
          | (1ULL << (JavaParser::NullLiteral - 64))
          | (1ULL << (JavaParser::LPAREN - 64))
          | (1ULL << (JavaParser::AT - 64))
          | (1ULL << (JavaParser::BANG - 64))
          | (1ULL << (JavaParser::TILDE - 64))
          | (1ULL << (JavaParser::INC - 64))
          | (1ULL << (JavaParser::DEC - 64))
          | (1ULL << (JavaParser::ADD - 64))
          | (1ULL << (JavaParser::SUB - 64))
          | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
          setState(5896);
          argumentList();
        }
        setState(5899);
        match(JavaParser::RPAREN);
        setState(5901);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LBRACE) {
          setState(5900);
          classBody();
        }
        setState(5903);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsOrDiamond_DropletFileContext ------------------------------------------------------------------

JavaParser::TypeArgumentsOrDiamond_DropletFileContext::TypeArgumentsOrDiamond_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeArgumentsContext* JavaParser::TypeArgumentsOrDiamond_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

tree::TerminalNode* JavaParser::TypeArgumentsOrDiamond_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::TypeArgumentsOrDiamond_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleTypeArgumentsOrDiamond_DropletFile;
}

void JavaParser::TypeArgumentsOrDiamond_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgumentsOrDiamond_DropletFile(this);
}

void JavaParser::TypeArgumentsOrDiamond_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgumentsOrDiamond_DropletFile(this);
}

JavaParser::TypeArgumentsOrDiamond_DropletFileContext* JavaParser::typeArgumentsOrDiamond_DropletFile() {
  TypeArgumentsOrDiamond_DropletFileContext *_localctx = _tracker.createInstance<TypeArgumentsOrDiamond_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 880, JavaParser::RuleTypeArgumentsOrDiamond_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5913);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 600, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5907);
      typeArguments();
      setState(5908);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5910);
      match(JavaParser::LT);
      setState(5911);
      match(JavaParser::GT);
      setState(5912);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldAccess_DropletFileContext ------------------------------------------------------------------

JavaParser::FieldAccess_DropletFileContext::FieldAccess_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimaryContext* JavaParser::FieldAccess_DropletFileContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}

JavaParser::IdentifierContext* JavaParser::FieldAccess_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::FieldAccess_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeNameContext* JavaParser::FieldAccess_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}


size_t JavaParser::FieldAccess_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleFieldAccess_DropletFile;
}

void JavaParser::FieldAccess_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldAccess_DropletFile(this);
}

void JavaParser::FieldAccess_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldAccess_DropletFile(this);
}

JavaParser::FieldAccess_DropletFileContext* JavaParser::fieldAccess_DropletFile() {
  FieldAccess_DropletFileContext *_localctx = _tracker.createInstance<FieldAccess_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 882, JavaParser::RuleFieldAccess_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5932);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 601, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5915);
      primary();
      setState(5916);
      match(JavaParser::DOT);
      setState(5917);
      identifier();
      setState(5918);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5920);
      match(JavaParser::SUPER);
      setState(5921);
      match(JavaParser::DOT);
      setState(5922);
      identifier();
      setState(5923);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5925);
      typeName();
      setState(5926);
      match(JavaParser::DOT);
      setState(5927);
      match(JavaParser::SUPER);
      setState(5928);
      match(JavaParser::DOT);
      setState(5929);
      identifier();
      setState(5930);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldAccess_lf_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::FieldAccess_lf_primary_DropletFileContext::FieldAccess_lf_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::FieldAccess_lf_primary_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::FieldAccess_lf_primary_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::FieldAccess_lf_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleFieldAccess_lf_primary_DropletFile;
}

void JavaParser::FieldAccess_lf_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldAccess_lf_primary_DropletFile(this);
}

void JavaParser::FieldAccess_lf_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldAccess_lf_primary_DropletFile(this);
}

JavaParser::FieldAccess_lf_primary_DropletFileContext* JavaParser::fieldAccess_lf_primary_DropletFile() {
  FieldAccess_lf_primary_DropletFileContext *_localctx = _tracker.createInstance<FieldAccess_lf_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 884, JavaParser::RuleFieldAccess_lf_primary_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5934);
    match(JavaParser::DOT);
    setState(5935);
    identifier();
    setState(5936);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldAccess_lfno_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::FieldAccess_lfno_primary_DropletFileContext::FieldAccess_lfno_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::FieldAccess_lfno_primary_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::FieldAccess_lfno_primary_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeNameContext* JavaParser::FieldAccess_lfno_primary_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}


size_t JavaParser::FieldAccess_lfno_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleFieldAccess_lfno_primary_DropletFile;
}

void JavaParser::FieldAccess_lfno_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldAccess_lfno_primary_DropletFile(this);
}

void JavaParser::FieldAccess_lfno_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldAccess_lfno_primary_DropletFile(this);
}

JavaParser::FieldAccess_lfno_primary_DropletFileContext* JavaParser::fieldAccess_lfno_primary_DropletFile() {
  FieldAccess_lfno_primary_DropletFileContext *_localctx = _tracker.createInstance<FieldAccess_lfno_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 886, JavaParser::RuleFieldAccess_lfno_primary_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5950);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::SUPER: {
        enterOuterAlt(_localctx, 1);
        setState(5938);
        match(JavaParser::SUPER);
        setState(5939);
        match(JavaParser::DOT);
        setState(5940);
        identifier();
        setState(5941);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 2);
        setState(5943);
        typeName();
        setState(5944);
        match(JavaParser::DOT);
        setState(5945);
        match(JavaParser::SUPER);
        setState(5946);
        match(JavaParser::DOT);
        setState(5947);
        identifier();
        setState(5948);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayAccess_DropletFileContext ------------------------------------------------------------------

JavaParser::ArrayAccess_DropletFileContext::ArrayAccess_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionNameContext* JavaParser::ArrayAccess_DropletFileContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ArrayAccess_DropletFileContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ArrayAccess_DropletFileContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ArrayAccess_DropletFileContext::EOF() {
  return getTokens(JavaParser::EOF);
}

tree::TerminalNode* JavaParser::ArrayAccess_DropletFileContext::EOF(size_t i) {
  return getToken(JavaParser::EOF, i);
}

JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext* JavaParser::ArrayAccess_DropletFileContext::primaryNoNewArray_lfno_arrayAccess() {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lfno_arrayAccessContext>(0);
}

std::vector<JavaParser::PrimaryNoNewArray_lf_arrayAccessContext *> JavaParser::ArrayAccess_DropletFileContext::primaryNoNewArray_lf_arrayAccess() {
  return getRuleContexts<JavaParser::PrimaryNoNewArray_lf_arrayAccessContext>();
}

JavaParser::PrimaryNoNewArray_lf_arrayAccessContext* JavaParser::ArrayAccess_DropletFileContext::primaryNoNewArray_lf_arrayAccess(size_t i) {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lf_arrayAccessContext>(i);
}


size_t JavaParser::ArrayAccess_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleArrayAccess_DropletFile;
}

void JavaParser::ArrayAccess_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayAccess_DropletFile(this);
}

void JavaParser::ArrayAccess_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayAccess_DropletFile(this);
}

JavaParser::ArrayAccess_DropletFileContext* JavaParser::arrayAccess_DropletFile() {
  ArrayAccess_DropletFileContext *_localctx = _tracker.createInstance<ArrayAccess_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 888, JavaParser::RuleArrayAccess_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5964);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 603, _ctx)) {
    case 1: {
      setState(5952);
      expressionName();
      setState(5953);
      match(JavaParser::LBRACK);
      setState(5954);
      expression();
      setState(5955);
      match(JavaParser::RBRACK);
      setState(5956);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      setState(5958);
      primaryNoNewArray_lfno_arrayAccess();
      setState(5959);
      match(JavaParser::LBRACK);
      setState(5960);
      expression();
      setState(5961);
      match(JavaParser::RBRACK);
      setState(5962);
      match(JavaParser::EOF);
      break;
    }

    }
    setState(5974);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::LBRACK) {
      setState(5966);
      primaryNoNewArray_lf_arrayAccess();
      setState(5967);
      match(JavaParser::LBRACK);
      setState(5968);
      expression();
      setState(5969);
      match(JavaParser::RBRACK);
      setState(5970);
      match(JavaParser::EOF);
      setState(5976);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayAccess_lf_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::ArrayAccess_lf_primary_DropletFileContext::ArrayAccess_lf_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext* JavaParser::ArrayAccess_lf_primary_DropletFileContext::primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext>(0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ArrayAccess_lf_primary_DropletFileContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ArrayAccess_lf_primary_DropletFileContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ArrayAccess_lf_primary_DropletFileContext::EOF() {
  return getTokens(JavaParser::EOF);
}

tree::TerminalNode* JavaParser::ArrayAccess_lf_primary_DropletFileContext::EOF(size_t i) {
  return getToken(JavaParser::EOF, i);
}

std::vector<JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext *> JavaParser::ArrayAccess_lf_primary_DropletFileContext::primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
  return getRuleContexts<JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>();
}

JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext* JavaParser::ArrayAccess_lf_primary_DropletFileContext::primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(size_t i) {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>(i);
}


size_t JavaParser::ArrayAccess_lf_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleArrayAccess_lf_primary_DropletFile;
}

void JavaParser::ArrayAccess_lf_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayAccess_lf_primary_DropletFile(this);
}

void JavaParser::ArrayAccess_lf_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayAccess_lf_primary_DropletFile(this);
}

JavaParser::ArrayAccess_lf_primary_DropletFileContext* JavaParser::arrayAccess_lf_primary_DropletFile() {
  ArrayAccess_lf_primary_DropletFileContext *_localctx = _tracker.createInstance<ArrayAccess_lf_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 890, JavaParser::RuleArrayAccess_lf_primary_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5977);
    primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();
    setState(5978);
    match(JavaParser::LBRACK);
    setState(5979);
    expression();
    setState(5980);
    match(JavaParser::RBRACK);
    setState(5981);
    match(JavaParser::EOF);
    setState(5991);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::LBRACK) {
      setState(5983);
      primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();
      setState(5984);
      match(JavaParser::LBRACK);
      setState(5985);
      expression();
      setState(5986);
      match(JavaParser::RBRACK);
      setState(5987);
      match(JavaParser::EOF);
      setState(5993);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayAccess_lfno_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::ArrayAccess_lfno_primary_DropletFileContext::ArrayAccess_lfno_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionNameContext* JavaParser::ArrayAccess_lfno_primary_DropletFileContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ArrayAccess_lfno_primary_DropletFileContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ArrayAccess_lfno_primary_DropletFileContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ArrayAccess_lfno_primary_DropletFileContext::EOF() {
  return getTokens(JavaParser::EOF);
}

tree::TerminalNode* JavaParser::ArrayAccess_lfno_primary_DropletFileContext::EOF(size_t i) {
  return getToken(JavaParser::EOF, i);
}

JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext* JavaParser::ArrayAccess_lfno_primary_DropletFileContext::primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext>(0);
}

std::vector<JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext *> JavaParser::ArrayAccess_lfno_primary_DropletFileContext::primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
  return getRuleContexts<JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>();
}

JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext* JavaParser::ArrayAccess_lfno_primary_DropletFileContext::primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(size_t i) {
  return getRuleContext<JavaParser::PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>(i);
}


size_t JavaParser::ArrayAccess_lfno_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleArrayAccess_lfno_primary_DropletFile;
}

void JavaParser::ArrayAccess_lfno_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayAccess_lfno_primary_DropletFile(this);
}

void JavaParser::ArrayAccess_lfno_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayAccess_lfno_primary_DropletFile(this);
}

JavaParser::ArrayAccess_lfno_primary_DropletFileContext* JavaParser::arrayAccess_lfno_primary_DropletFile() {
  ArrayAccess_lfno_primary_DropletFileContext *_localctx = _tracker.createInstance<ArrayAccess_lfno_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 892, JavaParser::RuleArrayAccess_lfno_primary_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6006);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 606, _ctx)) {
    case 1: {
      setState(5994);
      expressionName();
      setState(5995);
      match(JavaParser::LBRACK);
      setState(5996);
      expression();
      setState(5997);
      match(JavaParser::RBRACK);
      setState(5998);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      setState(6000);
      primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();
      setState(6001);
      match(JavaParser::LBRACK);
      setState(6002);
      expression();
      setState(6003);
      match(JavaParser::RBRACK);
      setState(6004);
      match(JavaParser::EOF);
      break;
    }

    }
    setState(6016);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::LBRACK) {
      setState(6008);
      primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();
      setState(6009);
      match(JavaParser::LBRACK);
      setState(6010);
      expression();
      setState(6011);
      match(JavaParser::RBRACK);
      setState(6012);
      match(JavaParser::EOF);
      setState(6018);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodInvocation_DropletFileContext ------------------------------------------------------------------

JavaParser::MethodInvocation_DropletFileContext::MethodInvocation_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::MethodNameContext* JavaParser::MethodInvocation_DropletFileContext::methodName() {
  return getRuleContext<JavaParser::MethodNameContext>(0);
}

tree::TerminalNode* JavaParser::MethodInvocation_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ArgumentListContext* JavaParser::MethodInvocation_DropletFileContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}

JavaParser::TypeNameContext* JavaParser::MethodInvocation_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::IdentifierContext* JavaParser::MethodInvocation_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::MethodInvocation_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ExpressionNameContext* JavaParser::MethodInvocation_DropletFileContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

JavaParser::PrimaryContext* JavaParser::MethodInvocation_DropletFileContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}


size_t JavaParser::MethodInvocation_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMethodInvocation_DropletFile;
}

void JavaParser::MethodInvocation_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation_DropletFile(this);
}

void JavaParser::MethodInvocation_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation_DropletFile(this);
}

JavaParser::MethodInvocation_DropletFileContext* JavaParser::methodInvocation_DropletFile() {
  MethodInvocation_DropletFileContext *_localctx = _tracker.createInstance<MethodInvocation_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 894, JavaParser::RuleMethodInvocation_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6094);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 619, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6019);
      methodName();
      setState(6020);
      match(JavaParser::LPAREN);
      setState(6022);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(6021);
        argumentList();
      }
      setState(6024);
      match(JavaParser::RPAREN);
      setState(6025);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6027);
      typeName();
      setState(6028);
      match(JavaParser::DOT);
      setState(6030);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6029);
        typeArguments();
      }
      setState(6032);
      identifier();
      setState(6033);
      match(JavaParser::LPAREN);
      setState(6035);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(6034);
        argumentList();
      }
      setState(6037);
      match(JavaParser::RPAREN);
      setState(6038);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6040);
      expressionName();
      setState(6041);
      match(JavaParser::DOT);
      setState(6043);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6042);
        typeArguments();
      }
      setState(6045);
      identifier();
      setState(6046);
      match(JavaParser::LPAREN);
      setState(6048);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(6047);
        argumentList();
      }
      setState(6050);
      match(JavaParser::RPAREN);
      setState(6051);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6053);
      primary();
      setState(6054);
      match(JavaParser::DOT);
      setState(6056);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6055);
        typeArguments();
      }
      setState(6058);
      identifier();
      setState(6059);
      match(JavaParser::LPAREN);
      setState(6061);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(6060);
        argumentList();
      }
      setState(6063);
      match(JavaParser::RPAREN);
      setState(6064);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6066);
      match(JavaParser::SUPER);
      setState(6067);
      match(JavaParser::DOT);
      setState(6069);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6068);
        typeArguments();
      }
      setState(6071);
      identifier();
      setState(6072);
      match(JavaParser::LPAREN);
      setState(6074);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(6073);
        argumentList();
      }
      setState(6076);
      match(JavaParser::RPAREN);
      setState(6077);
      match(JavaParser::EOF);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6079);
      typeName();
      setState(6080);
      match(JavaParser::DOT);
      setState(6081);
      match(JavaParser::SUPER);
      setState(6082);
      match(JavaParser::DOT);
      setState(6084);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6083);
        typeArguments();
      }
      setState(6086);
      identifier();
      setState(6087);
      match(JavaParser::LPAREN);
      setState(6089);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(6088);
        argumentList();
      }
      setState(6091);
      match(JavaParser::RPAREN);
      setState(6092);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodInvocation_lf_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::MethodInvocation_lf_primary_DropletFileContext::MethodInvocation_lf_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::MethodInvocation_lf_primary_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::MethodInvocation_lf_primary_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::MethodInvocation_lf_primary_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ArgumentListContext* JavaParser::MethodInvocation_lf_primary_DropletFileContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}


size_t JavaParser::MethodInvocation_lf_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMethodInvocation_lf_primary_DropletFile;
}

void JavaParser::MethodInvocation_lf_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation_lf_primary_DropletFile(this);
}

void JavaParser::MethodInvocation_lf_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation_lf_primary_DropletFile(this);
}

JavaParser::MethodInvocation_lf_primary_DropletFileContext* JavaParser::methodInvocation_lf_primary_DropletFile() {
  MethodInvocation_lf_primary_DropletFileContext *_localctx = _tracker.createInstance<MethodInvocation_lf_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 896, JavaParser::RuleMethodInvocation_lf_primary_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6096);
    match(JavaParser::DOT);
    setState(6098);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(6097);
      typeArguments();
    }
    setState(6100);
    identifier();
    setState(6101);
    match(JavaParser::LPAREN);
    setState(6103);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8)
      | (1ULL << JavaParser::BOOLEAN)
      | (1ULL << JavaParser::BYTE)
      | (1ULL << JavaParser::CHAR)
      | (1ULL << JavaParser::DOUBLE)
      | (1ULL << JavaParser::FLOAT)
      | (1ULL << JavaParser::INT)
      | (1ULL << JavaParser::LONG)
      | (1ULL << JavaParser::NEW)
      | (1ULL << JavaParser::SHORT)
      | (1ULL << JavaParser::SUPER)
      | (1ULL << JavaParser::THIS)
      | (1ULL << JavaParser::VOID)
      | (1ULL << JavaParser::IntegerLiteral)
      | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
      | (1ULL << (JavaParser::CharacterLiteral - 64))
      | (1ULL << (JavaParser::StringLiteral - 64))
      | (1ULL << (JavaParser::NullLiteral - 64))
      | (1ULL << (JavaParser::LPAREN - 64))
      | (1ULL << (JavaParser::AT - 64))
      | (1ULL << (JavaParser::BANG - 64))
      | (1ULL << (JavaParser::TILDE - 64))
      | (1ULL << (JavaParser::INC - 64))
      | (1ULL << (JavaParser::DEC - 64))
      | (1ULL << (JavaParser::ADD - 64))
      | (1ULL << (JavaParser::SUB - 64))
      | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
      setState(6102);
      argumentList();
    }
    setState(6105);
    match(JavaParser::RPAREN);
    setState(6106);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodInvocation_lfno_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::MethodInvocation_lfno_primary_DropletFileContext::MethodInvocation_lfno_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::MethodNameContext* JavaParser::MethodInvocation_lfno_primary_DropletFileContext::methodName() {
  return getRuleContext<JavaParser::MethodNameContext>(0);
}

tree::TerminalNode* JavaParser::MethodInvocation_lfno_primary_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ArgumentListContext* JavaParser::MethodInvocation_lfno_primary_DropletFileContext::argumentList() {
  return getRuleContext<JavaParser::ArgumentListContext>(0);
}

JavaParser::TypeNameContext* JavaParser::MethodInvocation_lfno_primary_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::IdentifierContext* JavaParser::MethodInvocation_lfno_primary_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::MethodInvocation_lfno_primary_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ExpressionNameContext* JavaParser::MethodInvocation_lfno_primary_DropletFileContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}


size_t JavaParser::MethodInvocation_lfno_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMethodInvocation_lfno_primary_DropletFile;
}

void JavaParser::MethodInvocation_lfno_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodInvocation_lfno_primary_DropletFile(this);
}

void JavaParser::MethodInvocation_lfno_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodInvocation_lfno_primary_DropletFile(this);
}

JavaParser::MethodInvocation_lfno_primary_DropletFileContext* JavaParser::methodInvocation_lfno_primary_DropletFile() {
  MethodInvocation_lfno_primary_DropletFileContext *_localctx = _tracker.createInstance<MethodInvocation_lfno_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 898, JavaParser::RuleMethodInvocation_lfno_primary_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6170);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 631, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6108);
      methodName();
      setState(6109);
      match(JavaParser::LPAREN);
      setState(6111);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(6110);
        argumentList();
      }
      setState(6113);
      match(JavaParser::RPAREN);
      setState(6114);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6116);
      typeName();
      setState(6117);
      match(JavaParser::DOT);
      setState(6119);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6118);
        typeArguments();
      }
      setState(6121);
      identifier();
      setState(6122);
      match(JavaParser::LPAREN);
      setState(6124);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(6123);
        argumentList();
      }
      setState(6126);
      match(JavaParser::RPAREN);
      setState(6127);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6129);
      expressionName();
      setState(6130);
      match(JavaParser::DOT);
      setState(6132);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6131);
        typeArguments();
      }
      setState(6134);
      identifier();
      setState(6135);
      match(JavaParser::LPAREN);
      setState(6137);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(6136);
        argumentList();
      }
      setState(6139);
      match(JavaParser::RPAREN);
      setState(6140);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6142);
      match(JavaParser::SUPER);
      setState(6143);
      match(JavaParser::DOT);
      setState(6145);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6144);
        typeArguments();
      }
      setState(6147);
      identifier();
      setState(6148);
      match(JavaParser::LPAREN);
      setState(6150);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(6149);
        argumentList();
      }
      setState(6152);
      match(JavaParser::RPAREN);
      setState(6153);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6155);
      typeName();
      setState(6156);
      match(JavaParser::DOT);
      setState(6157);
      match(JavaParser::SUPER);
      setState(6158);
      match(JavaParser::DOT);
      setState(6160);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6159);
        typeArguments();
      }
      setState(6162);
      identifier();
      setState(6163);
      match(JavaParser::LPAREN);
      setState(6165);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::NEW)
        | (1ULL << JavaParser::SHORT)
        | (1ULL << JavaParser::SUPER)
        | (1ULL << JavaParser::THIS)
        | (1ULL << JavaParser::VOID)
        | (1ULL << JavaParser::IntegerLiteral)
        | (1ULL << JavaParser::FloatingPointLiteral))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (JavaParser::BooleanLiteral - 64))
        | (1ULL << (JavaParser::CharacterLiteral - 64))
        | (1ULL << (JavaParser::StringLiteral - 64))
        | (1ULL << (JavaParser::NullLiteral - 64))
        | (1ULL << (JavaParser::LPAREN - 64))
        | (1ULL << (JavaParser::AT - 64))
        | (1ULL << (JavaParser::BANG - 64))
        | (1ULL << (JavaParser::TILDE - 64))
        | (1ULL << (JavaParser::INC - 64))
        | (1ULL << (JavaParser::DEC - 64))
        | (1ULL << (JavaParser::ADD - 64))
        | (1ULL << (JavaParser::SUB - 64))
        | (1ULL << (JavaParser::Identifier - 64)))) != 0)) {
        setState(6164);
        argumentList();
      }
      setState(6167);
      match(JavaParser::RPAREN);
      setState(6168);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentList_DropletFileContext ------------------------------------------------------------------

JavaParser::ArgumentList_DropletFileContext::ArgumentList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ArgumentList_DropletFileContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ArgumentList_DropletFileContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

tree::TerminalNode* JavaParser::ArgumentList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ArgumentList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleArgumentList_DropletFile;
}

void JavaParser::ArgumentList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgumentList_DropletFile(this);
}

void JavaParser::ArgumentList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgumentList_DropletFile(this);
}

JavaParser::ArgumentList_DropletFileContext* JavaParser::argumentList_DropletFile() {
  ArgumentList_DropletFileContext *_localctx = _tracker.createInstance<ArgumentList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 900, JavaParser::RuleArgumentList_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6172);
    expression();
    setState(6177);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(6173);
      match(JavaParser::COMMA);
      setState(6174);
      expression();
      setState(6179);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(6180);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodReference_DropletFileContext ------------------------------------------------------------------

JavaParser::MethodReference_DropletFileContext::MethodReference_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionNameContext* JavaParser::MethodReference_DropletFileContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

JavaParser::IdentifierContext* JavaParser::MethodReference_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::MethodReference_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::MethodReference_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ReferenceTypeContext* JavaParser::MethodReference_DropletFileContext::referenceType() {
  return getRuleContext<JavaParser::ReferenceTypeContext>(0);
}

JavaParser::PrimaryContext* JavaParser::MethodReference_DropletFileContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}

JavaParser::TypeNameContext* JavaParser::MethodReference_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::ClassTypeContext* JavaParser::MethodReference_DropletFileContext::classType() {
  return getRuleContext<JavaParser::ClassTypeContext>(0);
}

JavaParser::ArrayTypeContext* JavaParser::MethodReference_DropletFileContext::arrayType() {
  return getRuleContext<JavaParser::ArrayTypeContext>(0);
}


size_t JavaParser::MethodReference_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMethodReference_DropletFile;
}

void JavaParser::MethodReference_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference_DropletFile(this);
}

void JavaParser::MethodReference_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference_DropletFile(this);
}

JavaParser::MethodReference_DropletFileContext* JavaParser::methodReference_DropletFile() {
  MethodReference_DropletFileContext *_localctx = _tracker.createInstance<MethodReference_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 902, JavaParser::RuleMethodReference_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6237);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 639, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6182);
      expressionName();
      setState(6183);
      match(JavaParser::COLONCOLON);
      setState(6185);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6184);
        typeArguments();
      }
      setState(6187);
      identifier();
      setState(6188);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6190);
      referenceType();
      setState(6191);
      match(JavaParser::COLONCOLON);
      setState(6193);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6192);
        typeArguments();
      }
      setState(6195);
      identifier();
      setState(6196);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6198);
      primary();
      setState(6199);
      match(JavaParser::COLONCOLON);
      setState(6201);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6200);
        typeArguments();
      }
      setState(6203);
      identifier();
      setState(6204);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6206);
      match(JavaParser::SUPER);
      setState(6207);
      match(JavaParser::COLONCOLON);
      setState(6209);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6208);
        typeArguments();
      }
      setState(6211);
      identifier();
      setState(6212);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6214);
      typeName();
      setState(6215);
      match(JavaParser::DOT);
      setState(6216);
      match(JavaParser::SUPER);
      setState(6217);
      match(JavaParser::COLONCOLON);
      setState(6219);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6218);
        typeArguments();
      }
      setState(6221);
      identifier();
      setState(6222);
      match(JavaParser::EOF);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6224);
      classType();
      setState(6225);
      match(JavaParser::COLONCOLON);
      setState(6227);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6226);
        typeArguments();
      }
      setState(6229);
      match(JavaParser::NEW);
      setState(6230);
      match(JavaParser::EOF);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(6232);
      arrayType();
      setState(6233);
      match(JavaParser::COLONCOLON);
      setState(6234);
      match(JavaParser::NEW);
      setState(6235);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodReference_lf_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::MethodReference_lf_primary_DropletFileContext::MethodReference_lf_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::MethodReference_lf_primary_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::MethodReference_lf_primary_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::MethodReference_lf_primary_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::MethodReference_lf_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMethodReference_lf_primary_DropletFile;
}

void JavaParser::MethodReference_lf_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference_lf_primary_DropletFile(this);
}

void JavaParser::MethodReference_lf_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference_lf_primary_DropletFile(this);
}

JavaParser::MethodReference_lf_primary_DropletFileContext* JavaParser::methodReference_lf_primary_DropletFile() {
  MethodReference_lf_primary_DropletFileContext *_localctx = _tracker.createInstance<MethodReference_lf_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 904, JavaParser::RuleMethodReference_lf_primary_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6239);
    match(JavaParser::COLONCOLON);
    setState(6241);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(6240);
      typeArguments();
    }
    setState(6243);
    identifier();
    setState(6244);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodReference_lfno_primary_DropletFileContext ------------------------------------------------------------------

JavaParser::MethodReference_lfno_primary_DropletFileContext::MethodReference_lfno_primary_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionNameContext* JavaParser::MethodReference_lfno_primary_DropletFileContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

JavaParser::IdentifierContext* JavaParser::MethodReference_lfno_primary_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::MethodReference_lfno_primary_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::MethodReference_lfno_primary_DropletFileContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ReferenceTypeContext* JavaParser::MethodReference_lfno_primary_DropletFileContext::referenceType() {
  return getRuleContext<JavaParser::ReferenceTypeContext>(0);
}

JavaParser::TypeNameContext* JavaParser::MethodReference_lfno_primary_DropletFileContext::typeName() {
  return getRuleContext<JavaParser::TypeNameContext>(0);
}

JavaParser::ClassTypeContext* JavaParser::MethodReference_lfno_primary_DropletFileContext::classType() {
  return getRuleContext<JavaParser::ClassTypeContext>(0);
}

JavaParser::ArrayTypeContext* JavaParser::MethodReference_lfno_primary_DropletFileContext::arrayType() {
  return getRuleContext<JavaParser::ArrayTypeContext>(0);
}


size_t JavaParser::MethodReference_lfno_primary_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMethodReference_lfno_primary_DropletFile;
}

void JavaParser::MethodReference_lfno_primary_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodReference_lfno_primary_DropletFile(this);
}

void JavaParser::MethodReference_lfno_primary_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodReference_lfno_primary_DropletFile(this);
}

JavaParser::MethodReference_lfno_primary_DropletFileContext* JavaParser::methodReference_lfno_primary_DropletFile() {
  MethodReference_lfno_primary_DropletFileContext *_localctx = _tracker.createInstance<MethodReference_lfno_primary_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 906, JavaParser::RuleMethodReference_lfno_primary_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6293);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 646, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6246);
      expressionName();
      setState(6247);
      match(JavaParser::COLONCOLON);
      setState(6249);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6248);
        typeArguments();
      }
      setState(6251);
      identifier();
      setState(6252);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6254);
      referenceType();
      setState(6255);
      match(JavaParser::COLONCOLON);
      setState(6257);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6256);
        typeArguments();
      }
      setState(6259);
      identifier();
      setState(6260);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6262);
      match(JavaParser::SUPER);
      setState(6263);
      match(JavaParser::COLONCOLON);
      setState(6265);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6264);
        typeArguments();
      }
      setState(6267);
      identifier();
      setState(6268);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6270);
      typeName();
      setState(6271);
      match(JavaParser::DOT);
      setState(6272);
      match(JavaParser::SUPER);
      setState(6273);
      match(JavaParser::COLONCOLON);
      setState(6275);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6274);
        typeArguments();
      }
      setState(6277);
      identifier();
      setState(6278);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6280);
      classType();
      setState(6281);
      match(JavaParser::COLONCOLON);
      setState(6283);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(6282);
        typeArguments();
      }
      setState(6285);
      match(JavaParser::NEW);
      setState(6286);
      match(JavaParser::EOF);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6288);
      arrayType();
      setState(6289);
      match(JavaParser::COLONCOLON);
      setState(6290);
      match(JavaParser::NEW);
      setState(6291);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayCreationExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::ArrayCreationExpression_DropletFileContext::ArrayCreationExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimitiveTypeContext* JavaParser::ArrayCreationExpression_DropletFileContext::primitiveType() {
  return getRuleContext<JavaParser::PrimitiveTypeContext>(0);
}

JavaParser::DimExprsContext* JavaParser::ArrayCreationExpression_DropletFileContext::dimExprs() {
  return getRuleContext<JavaParser::DimExprsContext>(0);
}

tree::TerminalNode* JavaParser::ArrayCreationExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::DimsContext* JavaParser::ArrayCreationExpression_DropletFileContext::dims() {
  return getRuleContext<JavaParser::DimsContext>(0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ArrayCreationExpression_DropletFileContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

JavaParser::ArrayInitializerContext* JavaParser::ArrayCreationExpression_DropletFileContext::arrayInitializer() {
  return getRuleContext<JavaParser::ArrayInitializerContext>(0);
}


size_t JavaParser::ArrayCreationExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleArrayCreationExpression_DropletFile;
}

void JavaParser::ArrayCreationExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayCreationExpression_DropletFile(this);
}

void JavaParser::ArrayCreationExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayCreationExpression_DropletFile(this);
}

JavaParser::ArrayCreationExpression_DropletFileContext* JavaParser::arrayCreationExpression_DropletFile() {
  ArrayCreationExpression_DropletFileContext *_localctx = _tracker.createInstance<ArrayCreationExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 908, JavaParser::RuleArrayCreationExpression_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6323);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 649, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6295);
      match(JavaParser::NEW);
      setState(6296);
      primitiveType();
      setState(6297);
      dimExprs();
      setState(6299);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LBRACK

      || _la == JavaParser::AT) {
        setState(6298);
        dims();
      }
      setState(6301);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6303);
      match(JavaParser::NEW);
      setState(6304);
      classOrInterfaceType();
      setState(6305);
      dimExprs();
      setState(6307);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LBRACK

      || _la == JavaParser::AT) {
        setState(6306);
        dims();
      }
      setState(6309);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6311);
      match(JavaParser::NEW);
      setState(6312);
      primitiveType();
      setState(6313);
      dims();
      setState(6314);
      arrayInitializer();
      setState(6315);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6317);
      match(JavaParser::NEW);
      setState(6318);
      classOrInterfaceType();
      setState(6319);
      dims();
      setState(6320);
      arrayInitializer();
      setState(6321);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimExprs_DropletFileContext ------------------------------------------------------------------

JavaParser::DimExprs_DropletFileContext::DimExprs_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::DimExprs_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::DimExprContext *> JavaParser::DimExprs_DropletFileContext::dimExpr() {
  return getRuleContexts<JavaParser::DimExprContext>();
}

JavaParser::DimExprContext* JavaParser::DimExprs_DropletFileContext::dimExpr(size_t i) {
  return getRuleContext<JavaParser::DimExprContext>(i);
}


size_t JavaParser::DimExprs_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleDimExprs_DropletFile;
}

void JavaParser::DimExprs_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDimExprs_DropletFile(this);
}

void JavaParser::DimExprs_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDimExprs_DropletFile(this);
}

JavaParser::DimExprs_DropletFileContext* JavaParser::dimExprs_DropletFile() {
  DimExprs_DropletFileContext *_localctx = _tracker.createInstance<DimExprs_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 910, JavaParser::RuleDimExprs_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6326); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(6325);
      dimExpr();
      setState(6328); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == JavaParser::LBRACK

    || _la == JavaParser::AT);
    setState(6330);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimExpr_DropletFileContext ------------------------------------------------------------------

JavaParser::DimExpr_DropletFileContext::DimExpr_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::DimExpr_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::DimExpr_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::DimExpr_DropletFileContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::DimExpr_DropletFileContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::DimExpr_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleDimExpr_DropletFile;
}

void JavaParser::DimExpr_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDimExpr_DropletFile(this);
}

void JavaParser::DimExpr_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDimExpr_DropletFile(this);
}

JavaParser::DimExpr_DropletFileContext* JavaParser::dimExpr_DropletFile() {
  DimExpr_DropletFileContext *_localctx = _tracker.createInstance<DimExpr_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 912, JavaParser::RuleDimExpr_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6335);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::AT) {
      setState(6332);
      annotation();
      setState(6337);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(6338);
    match(JavaParser::LBRACK);
    setState(6339);
    expression();
    setState(6340);
    match(JavaParser::RBRACK);
    setState(6341);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::ConstantExpression_DropletFileContext::ConstantExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::ConstantExpression_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ConstantExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::ConstantExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleConstantExpression_DropletFile;
}

void JavaParser::ConstantExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantExpression_DropletFile(this);
}

void JavaParser::ConstantExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantExpression_DropletFile(this);
}

JavaParser::ConstantExpression_DropletFileContext* JavaParser::constantExpression_DropletFile() {
  ConstantExpression_DropletFileContext *_localctx = _tracker.createInstance<ConstantExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 914, JavaParser::RuleConstantExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6343);
    expression();
    setState(6344);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_DropletFileContext ------------------------------------------------------------------

JavaParser::Expression_DropletFileContext::Expression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LambdaExpressionContext* JavaParser::Expression_DropletFileContext::lambdaExpression() {
  return getRuleContext<JavaParser::LambdaExpressionContext>(0);
}

tree::TerminalNode* JavaParser::Expression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::AssignmentExpressionContext* JavaParser::Expression_DropletFileContext::assignmentExpression() {
  return getRuleContext<JavaParser::AssignmentExpressionContext>(0);
}


size_t JavaParser::Expression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleExpression_DropletFile;
}

void JavaParser::Expression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_DropletFile(this);
}

void JavaParser::Expression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_DropletFile(this);
}

JavaParser::Expression_DropletFileContext* JavaParser::expression_DropletFile() {
  Expression_DropletFileContext *_localctx = _tracker.createInstance<Expression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 916, JavaParser::RuleExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6352);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 652, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6346);
      lambdaExpression();
      setState(6347);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6349);
      assignmentExpression();
      setState(6350);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::LambdaExpression_DropletFileContext::LambdaExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LambdaParametersContext* JavaParser::LambdaExpression_DropletFileContext::lambdaParameters() {
  return getRuleContext<JavaParser::LambdaParametersContext>(0);
}

JavaParser::LambdaBodyContext* JavaParser::LambdaExpression_DropletFileContext::lambdaBody() {
  return getRuleContext<JavaParser::LambdaBodyContext>(0);
}

tree::TerminalNode* JavaParser::LambdaExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::LambdaExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleLambdaExpression_DropletFile;
}

void JavaParser::LambdaExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaExpression_DropletFile(this);
}

void JavaParser::LambdaExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaExpression_DropletFile(this);
}

JavaParser::LambdaExpression_DropletFileContext* JavaParser::lambdaExpression_DropletFile() {
  LambdaExpression_DropletFileContext *_localctx = _tracker.createInstance<LambdaExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 918, JavaParser::RuleLambdaExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6354);
    lambdaParameters();
    setState(6355);
    match(JavaParser::ARROW);
    setState(6356);
    lambdaBody();
    setState(6357);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaParameters_DropletFileContext ------------------------------------------------------------------

JavaParser::LambdaParameters_DropletFileContext::LambdaParameters_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::LambdaParameters_DropletFileContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::LambdaParameters_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::FormalParameterListContext* JavaParser::LambdaParameters_DropletFileContext::formalParameterList() {
  return getRuleContext<JavaParser::FormalParameterListContext>(0);
}

JavaParser::InferredFormalParameterListContext* JavaParser::LambdaParameters_DropletFileContext::inferredFormalParameterList() {
  return getRuleContext<JavaParser::InferredFormalParameterListContext>(0);
}


size_t JavaParser::LambdaParameters_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleLambdaParameters_DropletFile;
}

void JavaParser::LambdaParameters_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaParameters_DropletFile(this);
}

void JavaParser::LambdaParameters_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaParameters_DropletFile(this);
}

JavaParser::LambdaParameters_DropletFileContext* JavaParser::lambdaParameters_DropletFile() {
  LambdaParameters_DropletFileContext *_localctx = _tracker.createInstance<LambdaParameters_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 920, JavaParser::RuleLambdaParameters_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6373);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 654, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6359);
      identifier();
      setState(6360);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6362);
      match(JavaParser::LPAREN);
      setState(6364);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << JavaParser::T__0)
        | (1ULL << JavaParser::T__1)
        | (1ULL << JavaParser::T__4)
        | (1ULL << JavaParser::T__8)
        | (1ULL << JavaParser::BOOLEAN)
        | (1ULL << JavaParser::BYTE)
        | (1ULL << JavaParser::CHAR)
        | (1ULL << JavaParser::DOUBLE)
        | (1ULL << JavaParser::FINAL)
        | (1ULL << JavaParser::FLOAT)
        | (1ULL << JavaParser::INT)
        | (1ULL << JavaParser::LONG)
        | (1ULL << JavaParser::SHORT))) != 0) || _la == JavaParser::AT

      || _la == JavaParser::Identifier) {
        setState(6363);
        formalParameterList();
      }
      setState(6366);
      match(JavaParser::RPAREN);
      setState(6367);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6368);
      match(JavaParser::LPAREN);
      setState(6369);
      inferredFormalParameterList();
      setState(6370);
      match(JavaParser::RPAREN);
      setState(6371);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InferredFormalParameterList_DropletFileContext ------------------------------------------------------------------

JavaParser::InferredFormalParameterList_DropletFileContext::InferredFormalParameterList_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::InferredFormalParameterList_DropletFileContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::InferredFormalParameterList_DropletFileContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

tree::TerminalNode* JavaParser::InferredFormalParameterList_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::InferredFormalParameterList_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleInferredFormalParameterList_DropletFile;
}

void JavaParser::InferredFormalParameterList_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInferredFormalParameterList_DropletFile(this);
}

void JavaParser::InferredFormalParameterList_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInferredFormalParameterList_DropletFile(this);
}

JavaParser::InferredFormalParameterList_DropletFileContext* JavaParser::inferredFormalParameterList_DropletFile() {
  InferredFormalParameterList_DropletFileContext *_localctx = _tracker.createInstance<InferredFormalParameterList_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 922, JavaParser::RuleInferredFormalParameterList_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6375);
    identifier();
    setState(6380);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(6376);
      match(JavaParser::COMMA);
      setState(6377);
      identifier();
      setState(6382);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(6383);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaBody_DropletFileContext ------------------------------------------------------------------

JavaParser::LambdaBody_DropletFileContext::LambdaBody_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::LambdaBody_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::LambdaBody_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::BlockContext* JavaParser::LambdaBody_DropletFileContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::LambdaBody_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleLambdaBody_DropletFile;
}

void JavaParser::LambdaBody_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaBody_DropletFile(this);
}

void JavaParser::LambdaBody_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaBody_DropletFile(this);
}

JavaParser::LambdaBody_DropletFileContext* JavaParser::lambdaBody_DropletFile() {
  LambdaBody_DropletFileContext *_localctx = _tracker.createInstance<LambdaBody_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 924, JavaParser::RuleLambdaBody_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6391);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::IntegerLiteral:
      case JavaParser::FloatingPointLiteral:
      case JavaParser::BooleanLiteral:
      case JavaParser::CharacterLiteral:
      case JavaParser::StringLiteral:
      case JavaParser::NullLiteral:
      case JavaParser::LPAREN:
      case JavaParser::AT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::ADD:
      case JavaParser::SUB:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(6385);
        expression();
        setState(6386);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 2);
        setState(6388);
        block();
        setState(6389);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::AssignmentExpression_DropletFileContext::AssignmentExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConditionalExpressionContext* JavaParser::AssignmentExpression_DropletFileContext::conditionalExpression() {
  return getRuleContext<JavaParser::ConditionalExpressionContext>(0);
}

tree::TerminalNode* JavaParser::AssignmentExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::AssignmentContext* JavaParser::AssignmentExpression_DropletFileContext::assignment() {
  return getRuleContext<JavaParser::AssignmentContext>(0);
}


size_t JavaParser::AssignmentExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAssignmentExpression_DropletFile;
}

void JavaParser::AssignmentExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentExpression_DropletFile(this);
}

void JavaParser::AssignmentExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentExpression_DropletFile(this);
}

JavaParser::AssignmentExpression_DropletFileContext* JavaParser::assignmentExpression_DropletFile() {
  AssignmentExpression_DropletFileContext *_localctx = _tracker.createInstance<AssignmentExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 926, JavaParser::RuleAssignmentExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6399);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 657, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6393);
      conditionalExpression();
      setState(6394);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6396);
      assignment();
      setState(6397);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_DropletFileContext ------------------------------------------------------------------

JavaParser::Assignment_DropletFileContext::Assignment_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LeftHandSideContext* JavaParser::Assignment_DropletFileContext::leftHandSide() {
  return getRuleContext<JavaParser::LeftHandSideContext>(0);
}

JavaParser::AssignmentOperatorContext* JavaParser::Assignment_DropletFileContext::assignmentOperator() {
  return getRuleContext<JavaParser::AssignmentOperatorContext>(0);
}

JavaParser::ExpressionContext* JavaParser::Assignment_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::Assignment_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::Assignment_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAssignment_DropletFile;
}

void JavaParser::Assignment_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_DropletFile(this);
}

void JavaParser::Assignment_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_DropletFile(this);
}

JavaParser::Assignment_DropletFileContext* JavaParser::assignment_DropletFile() {
  Assignment_DropletFileContext *_localctx = _tracker.createInstance<Assignment_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 928, JavaParser::RuleAssignment_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6401);
    leftHandSide();
    setState(6402);
    assignmentOperator();
    setState(6403);
    expression();
    setState(6404);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LeftHandSide_DropletFileContext ------------------------------------------------------------------

JavaParser::LeftHandSide_DropletFileContext::LeftHandSide_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionNameContext* JavaParser::LeftHandSide_DropletFileContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

tree::TerminalNode* JavaParser::LeftHandSide_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::FieldAccessContext* JavaParser::LeftHandSide_DropletFileContext::fieldAccess() {
  return getRuleContext<JavaParser::FieldAccessContext>(0);
}

JavaParser::ArrayAccessContext* JavaParser::LeftHandSide_DropletFileContext::arrayAccess() {
  return getRuleContext<JavaParser::ArrayAccessContext>(0);
}


size_t JavaParser::LeftHandSide_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleLeftHandSide_DropletFile;
}

void JavaParser::LeftHandSide_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeftHandSide_DropletFile(this);
}

void JavaParser::LeftHandSide_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeftHandSide_DropletFile(this);
}

JavaParser::LeftHandSide_DropletFileContext* JavaParser::leftHandSide_DropletFile() {
  LeftHandSide_DropletFileContext *_localctx = _tracker.createInstance<LeftHandSide_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 930, JavaParser::RuleLeftHandSide_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6415);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 658, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6406);
      expressionName();
      setState(6407);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6409);
      fieldAccess();
      setState(6410);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6412);
      arrayAccess();
      setState(6413);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentOperator_DropletFileContext ------------------------------------------------------------------

JavaParser::AssignmentOperator_DropletFileContext::AssignmentOperator_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::AssignmentOperator_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::AssignmentOperator_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAssignmentOperator_DropletFile;
}

void JavaParser::AssignmentOperator_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentOperator_DropletFile(this);
}

void JavaParser::AssignmentOperator_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentOperator_DropletFile(this);
}

JavaParser::AssignmentOperator_DropletFileContext* JavaParser::assignmentOperator_DropletFile() {
  AssignmentOperator_DropletFileContext *_localctx = _tracker.createInstance<AssignmentOperator_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 932, JavaParser::RuleAssignmentOperator_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6441);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::ASSIGN: {
        enterOuterAlt(_localctx, 1);
        setState(6417);
        match(JavaParser::ASSIGN);
        setState(6418);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::MUL_ASSIGN: {
        enterOuterAlt(_localctx, 2);
        setState(6419);
        match(JavaParser::MUL_ASSIGN);
        setState(6420);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::DIV_ASSIGN: {
        enterOuterAlt(_localctx, 3);
        setState(6421);
        match(JavaParser::DIV_ASSIGN);
        setState(6422);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::MOD_ASSIGN: {
        enterOuterAlt(_localctx, 4);
        setState(6423);
        match(JavaParser::MOD_ASSIGN);
        setState(6424);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::ADD_ASSIGN: {
        enterOuterAlt(_localctx, 5);
        setState(6425);
        match(JavaParser::ADD_ASSIGN);
        setState(6426);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::SUB_ASSIGN: {
        enterOuterAlt(_localctx, 6);
        setState(6427);
        match(JavaParser::SUB_ASSIGN);
        setState(6428);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::LSHIFT_ASSIGN: {
        enterOuterAlt(_localctx, 7);
        setState(6429);
        match(JavaParser::LSHIFT_ASSIGN);
        setState(6430);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::RSHIFT_ASSIGN: {
        enterOuterAlt(_localctx, 8);
        setState(6431);
        match(JavaParser::RSHIFT_ASSIGN);
        setState(6432);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::URSHIFT_ASSIGN: {
        enterOuterAlt(_localctx, 9);
        setState(6433);
        match(JavaParser::URSHIFT_ASSIGN);
        setState(6434);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::AND_ASSIGN: {
        enterOuterAlt(_localctx, 10);
        setState(6435);
        match(JavaParser::AND_ASSIGN);
        setState(6436);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::XOR_ASSIGN: {
        enterOuterAlt(_localctx, 11);
        setState(6437);
        match(JavaParser::XOR_ASSIGN);
        setState(6438);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::OR_ASSIGN: {
        enterOuterAlt(_localctx, 12);
        setState(6439);
        match(JavaParser::OR_ASSIGN);
        setState(6440);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::ConditionalExpression_DropletFileContext::ConditionalExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConditionalOrExpressionContext* JavaParser::ConditionalExpression_DropletFileContext::conditionalOrExpression() {
  return getRuleContext<JavaParser::ConditionalOrExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ConditionalExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ExpressionContext* JavaParser::ConditionalExpression_DropletFileContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ConditionalExpressionContext* JavaParser::ConditionalExpression_DropletFileContext::conditionalExpression() {
  return getRuleContext<JavaParser::ConditionalExpressionContext>(0);
}

JavaParser::LambdaExpressionContext* JavaParser::ConditionalExpression_DropletFileContext::lambdaExpression() {
  return getRuleContext<JavaParser::LambdaExpressionContext>(0);
}


size_t JavaParser::ConditionalExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleConditionalExpression_DropletFile;
}

void JavaParser::ConditionalExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalExpression_DropletFile(this);
}

void JavaParser::ConditionalExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalExpression_DropletFile(this);
}

JavaParser::ConditionalExpression_DropletFileContext* JavaParser::conditionalExpression_DropletFile() {
  ConditionalExpression_DropletFileContext *_localctx = _tracker.createInstance<ConditionalExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 934, JavaParser::RuleConditionalExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6456);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 661, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6443);
      conditionalOrExpression(0);
      setState(6444);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6446);
      conditionalOrExpression(0);
      setState(6447);
      match(JavaParser::QUESTION);
      setState(6448);
      expression();
      setState(6449);
      match(JavaParser::COLON);
      setState(6452);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 660, _ctx)) {
      case 1: {
        setState(6450);
        conditionalExpression();
        break;
      }

      case 2: {
        setState(6451);
        lambdaExpression();
        break;
      }

      }
      setState(6454);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalOrExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::ConditionalOrExpression_DropletFileContext::ConditionalOrExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConditionalAndExpressionContext* JavaParser::ConditionalOrExpression_DropletFileContext::conditionalAndExpression() {
  return getRuleContext<JavaParser::ConditionalAndExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ConditionalOrExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ConditionalOrExpressionContext* JavaParser::ConditionalOrExpression_DropletFileContext::conditionalOrExpression() {
  return getRuleContext<JavaParser::ConditionalOrExpressionContext>(0);
}


size_t JavaParser::ConditionalOrExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleConditionalOrExpression_DropletFile;
}

void JavaParser::ConditionalOrExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalOrExpression_DropletFile(this);
}

void JavaParser::ConditionalOrExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalOrExpression_DropletFile(this);
}

JavaParser::ConditionalOrExpression_DropletFileContext* JavaParser::conditionalOrExpression_DropletFile() {
  ConditionalOrExpression_DropletFileContext *_localctx = _tracker.createInstance<ConditionalOrExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 936, JavaParser::RuleConditionalOrExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6466);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 662, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6458);
      conditionalAndExpression(0);
      setState(6459);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6461);
      conditionalOrExpression(0);
      setState(6462);
      match(JavaParser::OR);
      setState(6463);
      conditionalAndExpression(0);
      setState(6464);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalAndExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::ConditionalAndExpression_DropletFileContext::ConditionalAndExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::InclusiveOrExpressionContext* JavaParser::ConditionalAndExpression_DropletFileContext::inclusiveOrExpression() {
  return getRuleContext<JavaParser::InclusiveOrExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ConditionalAndExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ConditionalAndExpressionContext* JavaParser::ConditionalAndExpression_DropletFileContext::conditionalAndExpression() {
  return getRuleContext<JavaParser::ConditionalAndExpressionContext>(0);
}


size_t JavaParser::ConditionalAndExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleConditionalAndExpression_DropletFile;
}

void JavaParser::ConditionalAndExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalAndExpression_DropletFile(this);
}

void JavaParser::ConditionalAndExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalAndExpression_DropletFile(this);
}

JavaParser::ConditionalAndExpression_DropletFileContext* JavaParser::conditionalAndExpression_DropletFile() {
  ConditionalAndExpression_DropletFileContext *_localctx = _tracker.createInstance<ConditionalAndExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 938, JavaParser::RuleConditionalAndExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6476);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 663, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6468);
      inclusiveOrExpression(0);
      setState(6469);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6471);
      conditionalAndExpression(0);
      setState(6472);
      match(JavaParser::AND);
      setState(6473);
      inclusiveOrExpression(0);
      setState(6474);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InclusiveOrExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::InclusiveOrExpression_DropletFileContext::InclusiveOrExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExclusiveOrExpressionContext* JavaParser::InclusiveOrExpression_DropletFileContext::exclusiveOrExpression() {
  return getRuleContext<JavaParser::ExclusiveOrExpressionContext>(0);
}

tree::TerminalNode* JavaParser::InclusiveOrExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::InclusiveOrExpressionContext* JavaParser::InclusiveOrExpression_DropletFileContext::inclusiveOrExpression() {
  return getRuleContext<JavaParser::InclusiveOrExpressionContext>(0);
}


size_t JavaParser::InclusiveOrExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleInclusiveOrExpression_DropletFile;
}

void JavaParser::InclusiveOrExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInclusiveOrExpression_DropletFile(this);
}

void JavaParser::InclusiveOrExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInclusiveOrExpression_DropletFile(this);
}

JavaParser::InclusiveOrExpression_DropletFileContext* JavaParser::inclusiveOrExpression_DropletFile() {
  InclusiveOrExpression_DropletFileContext *_localctx = _tracker.createInstance<InclusiveOrExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 940, JavaParser::RuleInclusiveOrExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6486);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 664, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6478);
      exclusiveOrExpression(0);
      setState(6479);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6481);
      inclusiveOrExpression(0);
      setState(6482);
      match(JavaParser::BITOR);
      setState(6483);
      exclusiveOrExpression(0);
      setState(6484);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExclusiveOrExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::ExclusiveOrExpression_DropletFileContext::ExclusiveOrExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AndExpressionContext* JavaParser::ExclusiveOrExpression_DropletFileContext::andExpression() {
  return getRuleContext<JavaParser::AndExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ExclusiveOrExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ExclusiveOrExpressionContext* JavaParser::ExclusiveOrExpression_DropletFileContext::exclusiveOrExpression() {
  return getRuleContext<JavaParser::ExclusiveOrExpressionContext>(0);
}


size_t JavaParser::ExclusiveOrExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleExclusiveOrExpression_DropletFile;
}

void JavaParser::ExclusiveOrExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExclusiveOrExpression_DropletFile(this);
}

void JavaParser::ExclusiveOrExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExclusiveOrExpression_DropletFile(this);
}

JavaParser::ExclusiveOrExpression_DropletFileContext* JavaParser::exclusiveOrExpression_DropletFile() {
  ExclusiveOrExpression_DropletFileContext *_localctx = _tracker.createInstance<ExclusiveOrExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 942, JavaParser::RuleExclusiveOrExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6496);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 665, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6488);
      andExpression(0);
      setState(6489);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6491);
      exclusiveOrExpression(0);
      setState(6492);
      match(JavaParser::CARET);
      setState(6493);
      andExpression(0);
      setState(6494);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AndExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::AndExpression_DropletFileContext::AndExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::EqualityExpressionContext* JavaParser::AndExpression_DropletFileContext::equalityExpression() {
  return getRuleContext<JavaParser::EqualityExpressionContext>(0);
}

tree::TerminalNode* JavaParser::AndExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::AndExpressionContext* JavaParser::AndExpression_DropletFileContext::andExpression() {
  return getRuleContext<JavaParser::AndExpressionContext>(0);
}


size_t JavaParser::AndExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAndExpression_DropletFile;
}

void JavaParser::AndExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAndExpression_DropletFile(this);
}

void JavaParser::AndExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAndExpression_DropletFile(this);
}

JavaParser::AndExpression_DropletFileContext* JavaParser::andExpression_DropletFile() {
  AndExpression_DropletFileContext *_localctx = _tracker.createInstance<AndExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 944, JavaParser::RuleAndExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6506);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 666, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6498);
      equalityExpression(0);
      setState(6499);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6501);
      andExpression(0);
      setState(6502);
      match(JavaParser::BITAND);
      setState(6503);
      equalityExpression(0);
      setState(6504);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::EqualityExpression_DropletFileContext::EqualityExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::RelationalExpressionContext* JavaParser::EqualityExpression_DropletFileContext::relationalExpression() {
  return getRuleContext<JavaParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* JavaParser::EqualityExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::EqualityExpressionContext* JavaParser::EqualityExpression_DropletFileContext::equalityExpression() {
  return getRuleContext<JavaParser::EqualityExpressionContext>(0);
}


size_t JavaParser::EqualityExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleEqualityExpression_DropletFile;
}

void JavaParser::EqualityExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityExpression_DropletFile(this);
}

void JavaParser::EqualityExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityExpression_DropletFile(this);
}

JavaParser::EqualityExpression_DropletFileContext* JavaParser::equalityExpression_DropletFile() {
  EqualityExpression_DropletFileContext *_localctx = _tracker.createInstance<EqualityExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 946, JavaParser::RuleEqualityExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6521);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 667, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6508);
      relationalExpression(0);
      setState(6509);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6511);
      equalityExpression(0);
      setState(6512);
      match(JavaParser::EQUAL);
      setState(6513);
      relationalExpression(0);
      setState(6514);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6516);
      equalityExpression(0);
      setState(6517);
      match(JavaParser::NOTEQUAL);
      setState(6518);
      relationalExpression(0);
      setState(6519);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::RelationalExpression_DropletFileContext::RelationalExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ShiftExpressionContext* JavaParser::RelationalExpression_DropletFileContext::shiftExpression() {
  return getRuleContext<JavaParser::ShiftExpressionContext>(0);
}

tree::TerminalNode* JavaParser::RelationalExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::RelationalExpressionContext* JavaParser::RelationalExpression_DropletFileContext::relationalExpression() {
  return getRuleContext<JavaParser::RelationalExpressionContext>(0);
}

JavaParser::ReferenceTypeContext* JavaParser::RelationalExpression_DropletFileContext::referenceType() {
  return getRuleContext<JavaParser::ReferenceTypeContext>(0);
}


size_t JavaParser::RelationalExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleRelationalExpression_DropletFile;
}

void JavaParser::RelationalExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression_DropletFile(this);
}

void JavaParser::RelationalExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression_DropletFile(this);
}

JavaParser::RelationalExpression_DropletFileContext* JavaParser::relationalExpression_DropletFile() {
  RelationalExpression_DropletFileContext *_localctx = _tracker.createInstance<RelationalExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 948, JavaParser::RuleRelationalExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6551);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 668, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6523);
      shiftExpression(0);
      setState(6524);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6526);
      relationalExpression(0);
      setState(6527);
      match(JavaParser::LT);
      setState(6528);
      shiftExpression(0);
      setState(6529);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6531);
      relationalExpression(0);
      setState(6532);
      match(JavaParser::GT);
      setState(6533);
      shiftExpression(0);
      setState(6534);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6536);
      relationalExpression(0);
      setState(6537);
      match(JavaParser::LE);
      setState(6538);
      shiftExpression(0);
      setState(6539);
      match(JavaParser::EOF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6541);
      relationalExpression(0);
      setState(6542);
      match(JavaParser::GE);
      setState(6543);
      shiftExpression(0);
      setState(6544);
      match(JavaParser::EOF);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6546);
      relationalExpression(0);
      setState(6547);
      match(JavaParser::INSTANCEOF);
      setState(6548);
      referenceType();
      setState(6549);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::ShiftExpression_DropletFileContext::ShiftExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AdditiveExpressionContext* JavaParser::ShiftExpression_DropletFileContext::additiveExpression() {
  return getRuleContext<JavaParser::AdditiveExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ShiftExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ShiftExpressionContext* JavaParser::ShiftExpression_DropletFileContext::shiftExpression() {
  return getRuleContext<JavaParser::ShiftExpressionContext>(0);
}


size_t JavaParser::ShiftExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleShiftExpression_DropletFile;
}

void JavaParser::ShiftExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftExpression_DropletFile(this);
}

void JavaParser::ShiftExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftExpression_DropletFile(this);
}

JavaParser::ShiftExpression_DropletFileContext* JavaParser::shiftExpression_DropletFile() {
  ShiftExpression_DropletFileContext *_localctx = _tracker.createInstance<ShiftExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 950, JavaParser::RuleShiftExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6575);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 669, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6553);
      additiveExpression(0);
      setState(6554);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6556);
      shiftExpression(0);
      setState(6557);
      match(JavaParser::LT);
      setState(6558);
      match(JavaParser::LT);
      setState(6559);
      additiveExpression(0);
      setState(6560);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6562);
      shiftExpression(0);
      setState(6563);
      match(JavaParser::GT);
      setState(6564);
      match(JavaParser::GT);
      setState(6565);
      additiveExpression(0);
      setState(6566);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6568);
      shiftExpression(0);
      setState(6569);
      match(JavaParser::GT);
      setState(6570);
      match(JavaParser::GT);
      setState(6571);
      match(JavaParser::GT);
      setState(6572);
      additiveExpression(0);
      setState(6573);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::AdditiveExpression_DropletFileContext::AdditiveExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::MultiplicativeExpressionContext* JavaParser::AdditiveExpression_DropletFileContext::multiplicativeExpression() {
  return getRuleContext<JavaParser::MultiplicativeExpressionContext>(0);
}

tree::TerminalNode* JavaParser::AdditiveExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::AdditiveExpressionContext* JavaParser::AdditiveExpression_DropletFileContext::additiveExpression() {
  return getRuleContext<JavaParser::AdditiveExpressionContext>(0);
}


size_t JavaParser::AdditiveExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleAdditiveExpression_DropletFile;
}

void JavaParser::AdditiveExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveExpression_DropletFile(this);
}

void JavaParser::AdditiveExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveExpression_DropletFile(this);
}

JavaParser::AdditiveExpression_DropletFileContext* JavaParser::additiveExpression_DropletFile() {
  AdditiveExpression_DropletFileContext *_localctx = _tracker.createInstance<AdditiveExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 952, JavaParser::RuleAdditiveExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6590);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 670, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6577);
      multiplicativeExpression(0);
      setState(6578);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6580);
      additiveExpression(0);
      setState(6581);
      match(JavaParser::ADD);
      setState(6582);
      multiplicativeExpression(0);
      setState(6583);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6585);
      additiveExpression(0);
      setState(6586);
      match(JavaParser::SUB);
      setState(6587);
      multiplicativeExpression(0);
      setState(6588);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::MultiplicativeExpression_DropletFileContext::MultiplicativeExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnaryExpressionContext* JavaParser::MultiplicativeExpression_DropletFileContext::unaryExpression() {
  return getRuleContext<JavaParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* JavaParser::MultiplicativeExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::MultiplicativeExpressionContext* JavaParser::MultiplicativeExpression_DropletFileContext::multiplicativeExpression() {
  return getRuleContext<JavaParser::MultiplicativeExpressionContext>(0);
}


size_t JavaParser::MultiplicativeExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleMultiplicativeExpression_DropletFile;
}

void JavaParser::MultiplicativeExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeExpression_DropletFile(this);
}

void JavaParser::MultiplicativeExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeExpression_DropletFile(this);
}

JavaParser::MultiplicativeExpression_DropletFileContext* JavaParser::multiplicativeExpression_DropletFile() {
  MultiplicativeExpression_DropletFileContext *_localctx = _tracker.createInstance<MultiplicativeExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 954, JavaParser::RuleMultiplicativeExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6610);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 671, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6592);
      unaryExpression();
      setState(6593);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6595);
      multiplicativeExpression(0);
      setState(6596);
      match(JavaParser::MUL);
      setState(6597);
      unaryExpression();
      setState(6598);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6600);
      multiplicativeExpression(0);
      setState(6601);
      match(JavaParser::DIV);
      setState(6602);
      unaryExpression();
      setState(6603);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6605);
      multiplicativeExpression(0);
      setState(6606);
      match(JavaParser::MOD);
      setState(6607);
      unaryExpression();
      setState(6608);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::UnaryExpression_DropletFileContext::UnaryExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PreIncrementExpressionContext* JavaParser::UnaryExpression_DropletFileContext::preIncrementExpression() {
  return getRuleContext<JavaParser::PreIncrementExpressionContext>(0);
}

tree::TerminalNode* JavaParser::UnaryExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::PreDecrementExpressionContext* JavaParser::UnaryExpression_DropletFileContext::preDecrementExpression() {
  return getRuleContext<JavaParser::PreDecrementExpressionContext>(0);
}

JavaParser::UnaryExpressionContext* JavaParser::UnaryExpression_DropletFileContext::unaryExpression() {
  return getRuleContext<JavaParser::UnaryExpressionContext>(0);
}

JavaParser::UnaryExpressionNotPlusMinusContext* JavaParser::UnaryExpression_DropletFileContext::unaryExpressionNotPlusMinus() {
  return getRuleContext<JavaParser::UnaryExpressionNotPlusMinusContext>(0);
}


size_t JavaParser::UnaryExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnaryExpression_DropletFile;
}

void JavaParser::UnaryExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression_DropletFile(this);
}

void JavaParser::UnaryExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression_DropletFile(this);
}

JavaParser::UnaryExpression_DropletFileContext* JavaParser::unaryExpression_DropletFile() {
  UnaryExpression_DropletFileContext *_localctx = _tracker.createInstance<UnaryExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 956, JavaParser::RuleUnaryExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6629);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::INC: {
        enterOuterAlt(_localctx, 1);
        setState(6612);
        preIncrementExpression();
        setState(6613);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::DEC: {
        enterOuterAlt(_localctx, 2);
        setState(6615);
        preDecrementExpression();
        setState(6616);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::ADD: {
        enterOuterAlt(_localctx, 3);
        setState(6618);
        match(JavaParser::ADD);
        setState(6619);
        unaryExpression();
        setState(6620);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::SUB: {
        enterOuterAlt(_localctx, 4);
        setState(6622);
        match(JavaParser::SUB);
        setState(6623);
        unaryExpression();
        setState(6624);
        match(JavaParser::EOF);
        break;
      }

      case JavaParser::T__0:
      case JavaParser::T__1:
      case JavaParser::T__4:
      case JavaParser::T__8:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::IntegerLiteral:
      case JavaParser::FloatingPointLiteral:
      case JavaParser::BooleanLiteral:
      case JavaParser::CharacterLiteral:
      case JavaParser::StringLiteral:
      case JavaParser::NullLiteral:
      case JavaParser::LPAREN:
      case JavaParser::AT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::Identifier: {
        enterOuterAlt(_localctx, 5);
        setState(6626);
        unaryExpressionNotPlusMinus();
        setState(6627);
        match(JavaParser::EOF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PreIncrementExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::PreIncrementExpression_DropletFileContext::PreIncrementExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnaryExpressionContext* JavaParser::PreIncrementExpression_DropletFileContext::unaryExpression() {
  return getRuleContext<JavaParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* JavaParser::PreIncrementExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::PreIncrementExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePreIncrementExpression_DropletFile;
}

void JavaParser::PreIncrementExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPreIncrementExpression_DropletFile(this);
}

void JavaParser::PreIncrementExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPreIncrementExpression_DropletFile(this);
}

JavaParser::PreIncrementExpression_DropletFileContext* JavaParser::preIncrementExpression_DropletFile() {
  PreIncrementExpression_DropletFileContext *_localctx = _tracker.createInstance<PreIncrementExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 958, JavaParser::RulePreIncrementExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6631);
    match(JavaParser::INC);
    setState(6632);
    unaryExpression();
    setState(6633);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PreDecrementExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::PreDecrementExpression_DropletFileContext::PreDecrementExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::UnaryExpressionContext* JavaParser::PreDecrementExpression_DropletFileContext::unaryExpression() {
  return getRuleContext<JavaParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* JavaParser::PreDecrementExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::PreDecrementExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePreDecrementExpression_DropletFile;
}

void JavaParser::PreDecrementExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPreDecrementExpression_DropletFile(this);
}

void JavaParser::PreDecrementExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPreDecrementExpression_DropletFile(this);
}

JavaParser::PreDecrementExpression_DropletFileContext* JavaParser::preDecrementExpression_DropletFile() {
  PreDecrementExpression_DropletFileContext *_localctx = _tracker.createInstance<PreDecrementExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 960, JavaParser::RulePreDecrementExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6635);
    match(JavaParser::DEC);
    setState(6636);
    unaryExpression();
    setState(6637);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionNotPlusMinus_DropletFileContext ------------------------------------------------------------------

JavaParser::UnaryExpressionNotPlusMinus_DropletFileContext::UnaryExpressionNotPlusMinus_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PostfixExpressionContext* JavaParser::UnaryExpressionNotPlusMinus_DropletFileContext::postfixExpression() {
  return getRuleContext<JavaParser::PostfixExpressionContext>(0);
}

tree::TerminalNode* JavaParser::UnaryExpressionNotPlusMinus_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::UnaryExpressionContext* JavaParser::UnaryExpressionNotPlusMinus_DropletFileContext::unaryExpression() {
  return getRuleContext<JavaParser::UnaryExpressionContext>(0);
}

JavaParser::CastExpressionContext* JavaParser::UnaryExpressionNotPlusMinus_DropletFileContext::castExpression() {
  return getRuleContext<JavaParser::CastExpressionContext>(0);
}


size_t JavaParser::UnaryExpressionNotPlusMinus_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleUnaryExpressionNotPlusMinus_DropletFile;
}

void JavaParser::UnaryExpressionNotPlusMinus_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpressionNotPlusMinus_DropletFile(this);
}

void JavaParser::UnaryExpressionNotPlusMinus_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpressionNotPlusMinus_DropletFile(this);
}

JavaParser::UnaryExpressionNotPlusMinus_DropletFileContext* JavaParser::unaryExpressionNotPlusMinus_DropletFile() {
  UnaryExpressionNotPlusMinus_DropletFileContext *_localctx = _tracker.createInstance<UnaryExpressionNotPlusMinus_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 962, JavaParser::RuleUnaryExpressionNotPlusMinus_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6653);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 673, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6639);
      postfixExpression();
      setState(6640);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6642);
      match(JavaParser::TILDE);
      setState(6643);
      unaryExpression();
      setState(6644);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6646);
      match(JavaParser::BANG);
      setState(6647);
      unaryExpression();
      setState(6648);
      match(JavaParser::EOF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6650);
      castExpression();
      setState(6651);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::PostfixExpression_DropletFileContext::PostfixExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimaryContext* JavaParser::PostfixExpression_DropletFileContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::PostfixExpression_DropletFileContext::EOF() {
  return getTokens(JavaParser::EOF);
}

tree::TerminalNode* JavaParser::PostfixExpression_DropletFileContext::EOF(size_t i) {
  return getToken(JavaParser::EOF, i);
}

JavaParser::ExpressionNameContext* JavaParser::PostfixExpression_DropletFileContext::expressionName() {
  return getRuleContext<JavaParser::ExpressionNameContext>(0);
}

std::vector<JavaParser::PostIncrementExpression_lf_postfixExpressionContext *> JavaParser::PostfixExpression_DropletFileContext::postIncrementExpression_lf_postfixExpression() {
  return getRuleContexts<JavaParser::PostIncrementExpression_lf_postfixExpressionContext>();
}

JavaParser::PostIncrementExpression_lf_postfixExpressionContext* JavaParser::PostfixExpression_DropletFileContext::postIncrementExpression_lf_postfixExpression(size_t i) {
  return getRuleContext<JavaParser::PostIncrementExpression_lf_postfixExpressionContext>(i);
}

std::vector<JavaParser::PostDecrementExpression_lf_postfixExpressionContext *> JavaParser::PostfixExpression_DropletFileContext::postDecrementExpression_lf_postfixExpression() {
  return getRuleContexts<JavaParser::PostDecrementExpression_lf_postfixExpressionContext>();
}

JavaParser::PostDecrementExpression_lf_postfixExpressionContext* JavaParser::PostfixExpression_DropletFileContext::postDecrementExpression_lf_postfixExpression(size_t i) {
  return getRuleContext<JavaParser::PostDecrementExpression_lf_postfixExpressionContext>(i);
}


size_t JavaParser::PostfixExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePostfixExpression_DropletFile;
}

void JavaParser::PostfixExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostfixExpression_DropletFile(this);
}

void JavaParser::PostfixExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostfixExpression_DropletFile(this);
}

JavaParser::PostfixExpression_DropletFileContext* JavaParser::postfixExpression_DropletFile() {
  PostfixExpression_DropletFileContext *_localctx = _tracker.createInstance<PostfixExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 964, JavaParser::RulePostfixExpression_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6661);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 674, _ctx)) {
    case 1: {
      setState(6655);
      primary();
      setState(6656);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      setState(6658);
      expressionName();
      setState(6659);
      match(JavaParser::EOF);
      break;
    }

    }
    setState(6671);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::INC

    || _la == JavaParser::DEC) {
      setState(6669);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::INC: {
          setState(6663);
          postIncrementExpression_lf_postfixExpression();
          setState(6664);
          match(JavaParser::EOF);
          break;
        }

        case JavaParser::DEC: {
          setState(6666);
          postDecrementExpression_lf_postfixExpression();
          setState(6667);
          match(JavaParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(6673);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostIncrementExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::PostIncrementExpression_DropletFileContext::PostIncrementExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PostfixExpressionContext* JavaParser::PostIncrementExpression_DropletFileContext::postfixExpression() {
  return getRuleContext<JavaParser::PostfixExpressionContext>(0);
}

tree::TerminalNode* JavaParser::PostIncrementExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::PostIncrementExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePostIncrementExpression_DropletFile;
}

void JavaParser::PostIncrementExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostIncrementExpression_DropletFile(this);
}

void JavaParser::PostIncrementExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostIncrementExpression_DropletFile(this);
}

JavaParser::PostIncrementExpression_DropletFileContext* JavaParser::postIncrementExpression_DropletFile() {
  PostIncrementExpression_DropletFileContext *_localctx = _tracker.createInstance<PostIncrementExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 966, JavaParser::RulePostIncrementExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6674);
    postfixExpression();
    setState(6675);
    match(JavaParser::INC);
    setState(6676);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostIncrementExpression_lf_postfixExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::PostIncrementExpression_lf_postfixExpression_DropletFileContext::PostIncrementExpression_lf_postfixExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::PostIncrementExpression_lf_postfixExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::PostIncrementExpression_lf_postfixExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePostIncrementExpression_lf_postfixExpression_DropletFile;
}

void JavaParser::PostIncrementExpression_lf_postfixExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostIncrementExpression_lf_postfixExpression_DropletFile(this);
}

void JavaParser::PostIncrementExpression_lf_postfixExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostIncrementExpression_lf_postfixExpression_DropletFile(this);
}

JavaParser::PostIncrementExpression_lf_postfixExpression_DropletFileContext* JavaParser::postIncrementExpression_lf_postfixExpression_DropletFile() {
  PostIncrementExpression_lf_postfixExpression_DropletFileContext *_localctx = _tracker.createInstance<PostIncrementExpression_lf_postfixExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 968, JavaParser::RulePostIncrementExpression_lf_postfixExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6678);
    match(JavaParser::INC);
    setState(6679);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostDecrementExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::PostDecrementExpression_DropletFileContext::PostDecrementExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PostfixExpressionContext* JavaParser::PostDecrementExpression_DropletFileContext::postfixExpression() {
  return getRuleContext<JavaParser::PostfixExpressionContext>(0);
}

tree::TerminalNode* JavaParser::PostDecrementExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::PostDecrementExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePostDecrementExpression_DropletFile;
}

void JavaParser::PostDecrementExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostDecrementExpression_DropletFile(this);
}

void JavaParser::PostDecrementExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostDecrementExpression_DropletFile(this);
}

JavaParser::PostDecrementExpression_DropletFileContext* JavaParser::postDecrementExpression_DropletFile() {
  PostDecrementExpression_DropletFileContext *_localctx = _tracker.createInstance<PostDecrementExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 970, JavaParser::RulePostDecrementExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6681);
    postfixExpression();
    setState(6682);
    match(JavaParser::DEC);
    setState(6683);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostDecrementExpression_lf_postfixExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::PostDecrementExpression_lf_postfixExpression_DropletFileContext::PostDecrementExpression_lf_postfixExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::PostDecrementExpression_lf_postfixExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::PostDecrementExpression_lf_postfixExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RulePostDecrementExpression_lf_postfixExpression_DropletFile;
}

void JavaParser::PostDecrementExpression_lf_postfixExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostDecrementExpression_lf_postfixExpression_DropletFile(this);
}

void JavaParser::PostDecrementExpression_lf_postfixExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostDecrementExpression_lf_postfixExpression_DropletFile(this);
}

JavaParser::PostDecrementExpression_lf_postfixExpression_DropletFileContext* JavaParser::postDecrementExpression_lf_postfixExpression_DropletFile() {
  PostDecrementExpression_lf_postfixExpression_DropletFileContext *_localctx = _tracker.createInstance<PostDecrementExpression_lf_postfixExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 972, JavaParser::RulePostDecrementExpression_lf_postfixExpression_DropletFile);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6685);
    match(JavaParser::DEC);
    setState(6686);
    match(JavaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastExpression_DropletFileContext ------------------------------------------------------------------

JavaParser::CastExpression_DropletFileContext::CastExpression_DropletFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimitiveTypeContext* JavaParser::CastExpression_DropletFileContext::primitiveType() {
  return getRuleContext<JavaParser::PrimitiveTypeContext>(0);
}

JavaParser::UnaryExpressionContext* JavaParser::CastExpression_DropletFileContext::unaryExpression() {
  return getRuleContext<JavaParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* JavaParser::CastExpression_DropletFileContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}

JavaParser::ReferenceTypeContext* JavaParser::CastExpression_DropletFileContext::referenceType() {
  return getRuleContext<JavaParser::ReferenceTypeContext>(0);
}

JavaParser::UnaryExpressionNotPlusMinusContext* JavaParser::CastExpression_DropletFileContext::unaryExpressionNotPlusMinus() {
  return getRuleContext<JavaParser::UnaryExpressionNotPlusMinusContext>(0);
}

std::vector<JavaParser::AdditionalBoundContext *> JavaParser::CastExpression_DropletFileContext::additionalBound() {
  return getRuleContexts<JavaParser::AdditionalBoundContext>();
}

JavaParser::AdditionalBoundContext* JavaParser::CastExpression_DropletFileContext::additionalBound(size_t i) {
  return getRuleContext<JavaParser::AdditionalBoundContext>(i);
}

JavaParser::LambdaExpressionContext* JavaParser::CastExpression_DropletFileContext::lambdaExpression() {
  return getRuleContext<JavaParser::LambdaExpressionContext>(0);
}


size_t JavaParser::CastExpression_DropletFileContext::getRuleIndex() const {
  return JavaParser::RuleCastExpression_DropletFile;
}

void JavaParser::CastExpression_DropletFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCastExpression_DropletFile(this);
}

void JavaParser::CastExpression_DropletFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCastExpression_DropletFile(this);
}

JavaParser::CastExpression_DropletFileContext* JavaParser::castExpression_DropletFile() {
  CastExpression_DropletFileContext *_localctx = _tracker.createInstance<CastExpression_DropletFileContext>(_ctx, getState());
  enterRule(_localctx, 974, JavaParser::RuleCastExpression_DropletFile);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6718);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 679, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6688);
      match(JavaParser::LPAREN);
      setState(6689);
      primitiveType();
      setState(6690);
      match(JavaParser::RPAREN);
      setState(6691);
      unaryExpression();
      setState(6692);
      match(JavaParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6694);
      match(JavaParser::LPAREN);
      setState(6695);
      referenceType();
      setState(6699);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::BITAND) {
        setState(6696);
        additionalBound();
        setState(6701);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(6702);
      match(JavaParser::RPAREN);
      setState(6703);
      unaryExpressionNotPlusMinus();
      setState(6704);
      match(JavaParser::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6706);
      match(JavaParser::LPAREN);
      setState(6707);
      referenceType();
      setState(6711);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::BITAND) {
        setState(6708);
        additionalBound();
        setState(6713);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(6714);
      match(JavaParser::RPAREN);
      setState(6715);
      lambdaExpression();
      setState(6716);
      match(JavaParser::EOF);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

JavaParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::IdentifierContext::Identifier() {
  return getToken(JavaParser::Identifier, 0);
}


size_t JavaParser::IdentifierContext::getRuleIndex() const {
  return JavaParser::RuleIdentifier;
}

void JavaParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void JavaParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}

JavaParser::IdentifierContext* JavaParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 976, JavaParser::RuleIdentifier);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6720);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << JavaParser::T__0)
      | (1ULL << JavaParser::T__1)
      | (1ULL << JavaParser::T__4)
      | (1ULL << JavaParser::T__8))) != 0) || _la == JavaParser::Identifier)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool JavaParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 25: return moduleNameSempred(dynamic_cast<ModuleNameContext *>(context), predicateIndex);
    case 26: return packageNameSempred(dynamic_cast<PackageNameContext *>(context), predicateIndex);
    case 28: return packageOrTypeNameSempred(dynamic_cast<PackageOrTypeNameContext *>(context), predicateIndex);
    case 31: return ambiguousNameSempred(dynamic_cast<AmbiguousNameContext *>(context), predicateIndex);
    case 224: return conditionalOrExpressionSempred(dynamic_cast<ConditionalOrExpressionContext *>(context), predicateIndex);
    case 225: return conditionalAndExpressionSempred(dynamic_cast<ConditionalAndExpressionContext *>(context), predicateIndex);
    case 226: return inclusiveOrExpressionSempred(dynamic_cast<InclusiveOrExpressionContext *>(context), predicateIndex);
    case 227: return exclusiveOrExpressionSempred(dynamic_cast<ExclusiveOrExpressionContext *>(context), predicateIndex);
    case 228: return andExpressionSempred(dynamic_cast<AndExpressionContext *>(context), predicateIndex);
    case 229: return equalityExpressionSempred(dynamic_cast<EqualityExpressionContext *>(context), predicateIndex);
    case 230: return relationalExpressionSempred(dynamic_cast<RelationalExpressionContext *>(context), predicateIndex);
    case 231: return shiftExpressionSempred(dynamic_cast<ShiftExpressionContext *>(context), predicateIndex);
    case 232: return additiveExpressionSempred(dynamic_cast<AdditiveExpressionContext *>(context), predicateIndex);
    case 233: return multiplicativeExpressionSempred(dynamic_cast<MultiplicativeExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool JavaParser::moduleNameSempred(ModuleNameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaParser::packageNameSempred(PackageNameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaParser::packageOrTypeNameSempred(PackageOrTypeNameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaParser::ambiguousNameSempred(AmbiguousNameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaParser::conditionalOrExpressionSempred(ConditionalOrExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaParser::conditionalAndExpressionSempred(ConditionalAndExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaParser::inclusiveOrExpressionSempred(InclusiveOrExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaParser::exclusiveOrExpressionSempred(ExclusiveOrExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 7: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaParser::andExpressionSempred(AndExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaParser::equalityExpressionSempred(EqualityExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 2);
    case 10: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaParser::relationalExpressionSempred(RelationalExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 5);
    case 12: return precpred(_ctx, 4);
    case 13: return precpred(_ctx, 3);
    case 14: return precpred(_ctx, 2);
    case 15: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaParser::shiftExpressionSempred(ShiftExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 16: return precpred(_ctx, 3);
    case 17: return precpred(_ctx, 2);
    case 18: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaParser::additiveExpressionSempred(AdditiveExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 19: return precpred(_ctx, 2);
    case 20: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool JavaParser::multiplicativeExpressionSempred(MultiplicativeExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 21: return precpred(_ctx, 3);
    case 22: return precpred(_ctx, 2);
    case 23: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

// Static vars and initialization.
std::vector<dfa::DFA> JavaParser::_decisionToDFA;
atn::PredictionContextCache JavaParser::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN JavaParser::_atn;
std::vector<uint16_t> JavaParser::_serializedATN;

std::vector<std::string> JavaParser::_ruleNames = {
  "literal", "primitiveType", "numericType", "integralType", "floatingPointType", 
  "referenceType", "classOrInterfaceType", "classType", "classType_lf_classOrInterfaceType", 
  "classType_lfno_classOrInterfaceType", "interfaceType", "interfaceType_lf_classOrInterfaceType", 
  "interfaceType_lfno_classOrInterfaceType", "typeVariable", "arrayType", 
  "dims", "typeParameter", "typeParameterModifier", "typeBound", "additionalBound", 
  "typeArguments", "typeArgumentList", "typeArgument", "wildcard", "wildcardBounds", 
  "moduleName", "packageName", "typeName", "packageOrTypeName", "expressionName", 
  "methodName", "ambiguousName", "compilationUnit", "ordinaryCompilation", 
  "modularCompilation", "packageDeclaration", "packageModifier", "importDeclaration", 
  "singleTypeImportDeclaration", "typeImportOnDemandDeclaration", "singleStaticImportDeclaration", 
  "staticImportOnDemandDeclaration", "typeDeclaration", "moduleDeclaration", 
  "moduleDirective", "requiresModifier", "classDeclaration", "normalClassDeclaration", 
  "classModifier", "typeParameters", "typeParameterList", "superclass", 
  "superinterfaces", "interfaceTypeList", "classBody", "classBodyDeclaration", 
  "classMemberDeclaration", "fieldDeclaration", "fieldModifier", "variableDeclaratorList", 
  "variableDeclarator", "variableDeclaratorId", "variableInitializer", "unannType", 
  "unannPrimitiveType", "unannReferenceType", "unannClassOrInterfaceType", 
  "unannClassType", "unannClassType_lf_unannClassOrInterfaceType", "unannClassType_lfno_unannClassOrInterfaceType", 
  "unannInterfaceType", "unannInterfaceType_lf_unannClassOrInterfaceType", 
  "unannInterfaceType_lfno_unannClassOrInterfaceType", "unannTypeVariable", 
  "unannArrayType", "methodDeclaration", "methodModifier", "methodHeader", 
  "result", "methodDeclarator", "formalParameterList", "formalParameters", 
  "formalParameter", "variableModifier", "lastFormalParameter", "receiverParameter", 
  "throws_", "exceptionTypeList", "exceptionType", "methodBody", "instanceInitializer", 
  "staticInitializer", "constructorDeclaration", "constructorModifier", 
  "constructorDeclarator", "simpleTypeName", "constructorBody", "explicitConstructorInvocation", 
  "enumDeclaration", "enumBody", "enumConstantList", "enumConstant", "enumConstantModifier", 
  "enumBodyDeclarations", "interfaceDeclaration", "normalInterfaceDeclaration", 
  "interfaceModifier", "extendsInterfaces", "interfaceBody", "interfaceMemberDeclaration", 
  "constantDeclaration", "constantModifier", "interfaceMethodDeclaration", 
  "interfaceMethodModifier", "annotationTypeDeclaration", "annotationTypeBody", 
  "annotationTypeMemberDeclaration", "annotationTypeElementDeclaration", 
  "annotationTypeElementModifier", "defaultValue", "annotation", "normalAnnotation", 
  "elementValuePairList", "elementValuePair", "elementValue", "elementValueArrayInitializer", 
  "elementValueList", "markerAnnotation", "singleElementAnnotation", "arrayInitializer", 
  "variableInitializerList", "block", "blockStatements", "blockStatement", 
  "localVariableDeclarationStatement", "localVariableDeclaration", "statement", 
  "statementNoShortIf", "statementWithoutTrailingSubstatement", "emptyStatement", 
  "labeledStatement", "labeledStatementNoShortIf", "expressionStatement", 
  "statementExpression", "ifThenStatement", "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
  "assertStatement", "switchStatement", "switchBlock", "switchBlockStatementGroup", 
  "switchLabels", "switchLabel", "enumConstantName", "whileStatement", "whileStatementNoShortIf", 
  "doStatement", "forStatement", "forStatementNoShortIf", "basicForStatement", 
  "basicForStatementNoShortIf", "forInit", "forUpdate", "statementExpressionList", 
  "enhancedForStatement", "enhancedForStatementNoShortIf", "breakStatement", 
  "continueStatement", "returnStatement", "throwStatement", "synchronizedStatement", 
  "tryStatement", "catches", "catchClause", "catchFormalParameter", "catchType", 
  "finally_", "tryWithResourcesStatement", "resourceSpecification", "resourceList", 
  "resource", "variableAccess", "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess", 
  "primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary", 
  "primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary", 
  "primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary", 
  "primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", "classLiteral", 
  "classInstanceCreationExpression", "classInstanceCreationExpression_lf_primary", 
  "classInstanceCreationExpression_lfno_primary", "typeArgumentsOrDiamond", 
  "fieldAccess", "fieldAccess_lf_primary", "fieldAccess_lfno_primary", "arrayAccess", 
  "arrayAccess_lf_primary", "arrayAccess_lfno_primary", "methodInvocation", 
  "methodInvocation_lf_primary", "methodInvocation_lfno_primary", "argumentList", 
  "methodReference", "methodReference_lf_primary", "methodReference_lfno_primary", 
  "arrayCreationExpression", "dimExprs", "dimExpr", "constantExpression", 
  "expression", "lambdaExpression", "lambdaParameters", "inferredFormalParameterList", 
  "lambdaBody", "assignmentExpression", "assignment", "leftHandSide", "assignmentOperator", 
  "conditionalExpression", "conditionalOrExpression", "conditionalAndExpression", 
  "inclusiveOrExpression", "exclusiveOrExpression", "andExpression", "equalityExpression", 
  "relationalExpression", "shiftExpression", "additiveExpression", "multiplicativeExpression", 
  "unaryExpression", "preIncrementExpression", "preDecrementExpression", 
  "unaryExpressionNotPlusMinus", "postfixExpression", "postIncrementExpression", 
  "postIncrementExpression_lf_postfixExpression", "postDecrementExpression", 
  "postDecrementExpression_lf_postfixExpression", "castExpression", "literal_DropletFile", 
  "primitiveType_DropletFile", "numericType_DropletFile", "integralType_DropletFile", 
  "floatingPointType_DropletFile", "referenceType_DropletFile", "classOrInterfaceType_DropletFile", 
  "classType_DropletFile", "classType_lf_classOrInterfaceType_DropletFile", 
  "classType_lfno_classOrInterfaceType_DropletFile", "interfaceType_DropletFile", 
  "interfaceType_lf_classOrInterfaceType_DropletFile", "interfaceType_lfno_classOrInterfaceType_DropletFile", 
  "typeVariable_DropletFile", "arrayType_DropletFile", "dims_DropletFile", 
  "typeParameter_DropletFile", "typeParameterModifier_DropletFile", "typeBound_DropletFile", 
  "additionalBound_DropletFile", "typeArguments_DropletFile", "typeArgumentList_DropletFile", 
  "typeArgument_DropletFile", "wildcard_DropletFile", "wildcardBounds_DropletFile", 
  "moduleName_DropletFile", "packageName_DropletFile", "typeName_DropletFile", 
  "packageOrTypeName_DropletFile", "expressionName_DropletFile", "methodName_DropletFile", 
  "ambiguousName_DropletFile", "compilationUnit_DropletFile", "ordinaryCompilation_DropletFile", 
  "modularCompilation_DropletFile", "packageDeclaration_DropletFile", "packageModifier_DropletFile", 
  "importDeclaration_DropletFile", "singleTypeImportDeclaration_DropletFile", 
  "typeImportOnDemandDeclaration_DropletFile", "singleStaticImportDeclaration_DropletFile", 
  "staticImportOnDemandDeclaration_DropletFile", "typeDeclaration_DropletFile", 
  "moduleDeclaration_DropletFile", "moduleDirective_DropletFile", "requiresModifier_DropletFile", 
  "classDeclaration_DropletFile", "normalClassDeclaration_DropletFile", 
  "classModifier_DropletFile", "typeParameters_DropletFile", "typeParameterList_DropletFile", 
  "superclass_DropletFile", "superinterfaces_DropletFile", "interfaceTypeList_DropletFile", 
  "classBody_DropletFile", "classBodyDeclaration_DropletFile", "classMemberDeclaration_DropletFile", 
  "fieldDeclaration_DropletFile", "fieldModifier_DropletFile", "variableDeclaratorList_DropletFile", 
  "variableDeclarator_DropletFile", "variableDeclaratorId_DropletFile", 
  "variableInitializer_DropletFile", "unannType_DropletFile", "unannPrimitiveType_DropletFile", 
  "unannReferenceType_DropletFile", "unannClassOrInterfaceType_DropletFile", 
  "unannClassType_DropletFile", "unannClassType_lf_unannClassOrInterfaceType_DropletFile", 
  "unannClassType_lfno_unannClassOrInterfaceType_DropletFile", "unannInterfaceType_DropletFile", 
  "unannInterfaceType_lf_unannClassOrInterfaceType_DropletFile", "unannInterfaceType_lfno_unannClassOrInterfaceType_DropletFile", 
  "unannTypeVariable_DropletFile", "unannArrayType_DropletFile", "methodDeclaration_DropletFile", 
  "methodModifier_DropletFile", "methodHeader_DropletFile", "result_DropletFile", 
  "methodDeclarator_DropletFile", "formalParameterList_DropletFile", "formalParameters_DropletFile", 
  "formalParameter_DropletFile", "variableModifier_DropletFile", "lastFormalParameter_DropletFile", 
  "receiverParameter_DropletFile", "throws__DropletFile", "exceptionTypeList_DropletFile", 
  "exceptionType_DropletFile", "methodBody_DropletFile", "instanceInitializer_DropletFile", 
  "staticInitializer_DropletFile", "constructorDeclaration_DropletFile", 
  "constructorModifier_DropletFile", "constructorDeclarator_DropletFile", 
  "simpleTypeName_DropletFile", "constructorBody_DropletFile", "explicitConstructorInvocation_DropletFile", 
  "enumDeclaration_DropletFile", "enumBody_DropletFile", "enumConstantList_DropletFile", 
  "enumConstant_DropletFile", "enumConstantModifier_DropletFile", "enumBodyDeclarations_DropletFile", 
  "interfaceDeclaration_DropletFile", "normalInterfaceDeclaration_DropletFile", 
  "interfaceModifier_DropletFile", "extendsInterfaces_DropletFile", "interfaceBody_DropletFile", 
  "interfaceMemberDeclaration_DropletFile", "constantDeclaration_DropletFile", 
  "constantModifier_DropletFile", "interfaceMethodDeclaration_DropletFile", 
  "interfaceMethodModifier_DropletFile", "annotationTypeDeclaration_DropletFile", 
  "annotationTypeBody_DropletFile", "annotationTypeMemberDeclaration_DropletFile", 
  "annotationTypeElementDeclaration_DropletFile", "annotationTypeElementModifier_DropletFile", 
  "defaultValue_DropletFile", "annotation_DropletFile", "normalAnnotation_DropletFile", 
  "elementValuePairList_DropletFile", "elementValuePair_DropletFile", "elementValue_DropletFile", 
  "elementValueArrayInitializer_DropletFile", "elementValueList_DropletFile", 
  "markerAnnotation_DropletFile", "singleElementAnnotation_DropletFile", 
  "arrayInitializer_DropletFile", "variableInitializerList_DropletFile", 
  "block_DropletFile", "blockStatements_DropletFile", "blockStatement_DropletFile", 
  "localVariableDeclarationStatement_DropletFile", "localVariableDeclaration_DropletFile", 
  "statement_DropletFile", "statementNoShortIf_DropletFile", "statementWithoutTrailingSubstatement_DropletFile", 
  "emptyStatement_DropletFile", "labeledStatement_DropletFile", "labeledStatementNoShortIf_DropletFile", 
  "expressionStatement_DropletFile", "statementExpression_DropletFile", 
  "ifThenStatement_DropletFile", "ifThenElseStatement_DropletFile", "ifThenElseStatementNoShortIf_DropletFile", 
  "assertStatement_DropletFile", "switchStatement_DropletFile", "switchBlock_DropletFile", 
  "switchBlockStatementGroup_DropletFile", "switchLabels_DropletFile", "switchLabel_DropletFile", 
  "enumConstantName_DropletFile", "whileStatement_DropletFile", "whileStatementNoShortIf_DropletFile", 
  "doStatement_DropletFile", "forStatement_DropletFile", "forStatementNoShortIf_DropletFile", 
  "basicForStatement_DropletFile", "basicForStatementNoShortIf_DropletFile", 
  "forInit_DropletFile", "forUpdate_DropletFile", "statementExpressionList_DropletFile", 
  "enhancedForStatement_DropletFile", "enhancedForStatementNoShortIf_DropletFile", 
  "breakStatement_DropletFile", "continueStatement_DropletFile", "returnStatement_DropletFile", 
  "throwStatement_DropletFile", "synchronizedStatement_DropletFile", "tryStatement_DropletFile", 
  "catches_DropletFile", "catchClause_DropletFile", "catchFormalParameter_DropletFile", 
  "catchType_DropletFile", "finally__DropletFile", "tryWithResourcesStatement_DropletFile", 
  "resourceSpecification_DropletFile", "resourceList_DropletFile", "resource_DropletFile", 
  "variableAccess_DropletFile", "primary_DropletFile", "primaryNoNewArray_DropletFile", 
  "primaryNoNewArray_lf_arrayAccess_DropletFile", "primaryNoNewArray_lfno_arrayAccess_DropletFile", 
  "primaryNoNewArray_lf_primary_DropletFile", "primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary_DropletFile", 
  "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary_DropletFile", 
  "primaryNoNewArray_lfno_primary_DropletFile", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary_DropletFile", 
  "primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary_DropletFile", 
  "classLiteral_DropletFile", "classInstanceCreationExpression_DropletFile", 
  "classInstanceCreationExpression_lf_primary_DropletFile", "classInstanceCreationExpression_lfno_primary_DropletFile", 
  "typeArgumentsOrDiamond_DropletFile", "fieldAccess_DropletFile", "fieldAccess_lf_primary_DropletFile", 
  "fieldAccess_lfno_primary_DropletFile", "arrayAccess_DropletFile", "arrayAccess_lf_primary_DropletFile", 
  "arrayAccess_lfno_primary_DropletFile", "methodInvocation_DropletFile", 
  "methodInvocation_lf_primary_DropletFile", "methodInvocation_lfno_primary_DropletFile", 
  "argumentList_DropletFile", "methodReference_DropletFile", "methodReference_lf_primary_DropletFile", 
  "methodReference_lfno_primary_DropletFile", "arrayCreationExpression_DropletFile", 
  "dimExprs_DropletFile", "dimExpr_DropletFile", "constantExpression_DropletFile", 
  "expression_DropletFile", "lambdaExpression_DropletFile", "lambdaParameters_DropletFile", 
  "inferredFormalParameterList_DropletFile", "lambdaBody_DropletFile", "assignmentExpression_DropletFile", 
  "assignment_DropletFile", "leftHandSide_DropletFile", "assignmentOperator_DropletFile", 
  "conditionalExpression_DropletFile", "conditionalOrExpression_DropletFile", 
  "conditionalAndExpression_DropletFile", "inclusiveOrExpression_DropletFile", 
  "exclusiveOrExpression_DropletFile", "andExpression_DropletFile", "equalityExpression_DropletFile", 
  "relationalExpression_DropletFile", "shiftExpression_DropletFile", "additiveExpression_DropletFile", 
  "multiplicativeExpression_DropletFile", "unaryExpression_DropletFile", 
  "preIncrementExpression_DropletFile", "preDecrementExpression_DropletFile", 
  "unaryExpressionNotPlusMinus_DropletFile", "postfixExpression_DropletFile", 
  "postIncrementExpression_DropletFile", "postIncrementExpression_lf_postfixExpression_DropletFile", 
  "postDecrementExpression_DropletFile", "postDecrementExpression_lf_postfixExpression_DropletFile", 
  "castExpression_DropletFile", "identifier"
};

std::vector<std::string> JavaParser::_literalNames = {
  "", "'open'", "'module'", "'requires'", "'exports'", "'to'", "'opens'", 
  "'uses'", "'provides'", "'with'", "'transitive'", "'abstract'", "'assert'", 
  "'boolean'", "'break'", "'byte'", "'case'", "'catch'", "'char'", "'class'", 
  "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", 
  "'extends'", "'final'", "'finally'", "'float'", "'for'", "'if'", "'goto'", 
  "'implements'", "'import'", "'instanceof'", "'int'", "'interface'", "'long'", 
  "'native'", "'new'", "'package'", "'private'", "'protected'", "'public'", 
  "'return'", "'short'", "'static'", "'strictfp'", "'super'", "'switch'", 
  "'synchronized'", "'this'", "'throw'", "'throws'", "'transient'", "'try'", 
  "'void'", "'volatile'", "'while'", "'_'", "", "", "", "", "", "'null'", 
  "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "'...'", 
  "'@'", "'::'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'->'", 
  "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
  "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", "'*='", 
  "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", "'>>>='"
};

std::vector<std::string> JavaParser::_symbolicNames = {
  "", "", "", "", "", "", "", "", "", "", "", "ABSTRACT", "ASSERT", "BOOLEAN", 
  "BREAK", "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", 
  "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", 
  "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
  "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", "PROTECTED", 
  "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", 
  "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", 
  "VOLATILE", "WHILE", "UNDER_SCORE", "IntegerLiteral", "FloatingPointLiteral", 
  "BooleanLiteral", "CharacterLiteral", "StringLiteral", "NullLiteral", 
  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
  "DOT", "ELLIPSIS", "AT", "COLONCOLON", "ASSIGN", "GT", "LT", "BANG", "TILDE", 
  "QUESTION", "COLON", "ARROW", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", 
  "OR", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", 
  "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
  "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
  "URSHIFT_ASSIGN", "Identifier", "WS", "COMMENT", "LINE_COMMENT"
};

dfa::Vocabulary JavaParser::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> JavaParser::_tokenNames;

JavaParser::Initializer::Initializer() {
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  static uint16_t serializedATNSegment0[] = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
       0x3, 0x78, 0x1a45, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 0x4, 
       0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 0x9, 
       0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 0xa, 
       0x4, 0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 0xd, 0x4, 
       0xe, 0x9, 0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 0x4, 0x11, 
       0x9, 0x11, 0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 0x4, 0x14, 
       0x9, 0x14, 0x4, 0x15, 0x9, 0x15, 0x4, 0x16, 0x9, 0x16, 0x4, 0x17, 
       0x9, 0x17, 0x4, 0x18, 0x9, 0x18, 0x4, 0x19, 0x9, 0x19, 0x4, 0x1a, 
       0x9, 0x1a, 0x4, 0x1b, 0x9, 0x1b, 0x4, 0x1c, 0x9, 0x1c, 0x4, 0x1d, 
       0x9, 0x1d, 0x4, 0x1e, 0x9, 0x1e, 0x4, 0x1f, 0x9, 0x1f, 0x4, 0x20, 
       0x9, 0x20, 0x4, 0x21, 0x9, 0x21, 0x4, 0x22, 0x9, 0x22, 0x4, 0x23, 
       0x9, 0x23, 0x4, 0x24, 0x9, 0x24, 0x4, 0x25, 0x9, 0x25, 0x4, 0x26, 
       0x9, 0x26, 0x4, 0x27, 0x9, 0x27, 0x4, 0x28, 0x9, 0x28, 0x4, 0x29, 
       0x9, 0x29, 0x4, 0x2a, 0x9, 0x2a, 0x4, 0x2b, 0x9, 0x2b, 0x4, 0x2c, 
       0x9, 0x2c, 0x4, 0x2d, 0x9, 0x2d, 0x4, 0x2e, 0x9, 0x2e, 0x4, 0x2f, 
       0x9, 0x2f, 0x4, 0x30, 0x9, 0x30, 0x4, 0x31, 0x9, 0x31, 0x4, 0x32, 
       0x9, 0x32, 0x4, 0x33, 0x9, 0x33, 0x4, 0x34, 0x9, 0x34, 0x4, 0x35, 
       0x9, 0x35, 0x4, 0x36, 0x9, 0x36, 0x4, 0x37, 0x9, 0x37, 0x4, 0x38, 
       0x9, 0x38, 0x4, 0x39, 0x9, 0x39, 0x4, 0x3a, 0x9, 0x3a, 0x4, 0x3b, 
       0x9, 0x3b, 0x4, 0x3c, 0x9, 0x3c, 0x4, 0x3d, 0x9, 0x3d, 0x4, 0x3e, 
       0x9, 0x3e, 0x4, 0x3f, 0x9, 0x3f, 0x4, 0x40, 0x9, 0x40, 0x4, 0x41, 
       0x9, 0x41, 0x4, 0x42, 0x9, 0x42, 0x4, 0x43, 0x9, 0x43, 0x4, 0x44, 
       0x9, 0x44, 0x4, 0x45, 0x9, 0x45, 0x4, 0x46, 0x9, 0x46, 0x4, 0x47, 
       0x9, 0x47, 0x4, 0x48, 0x9, 0x48, 0x4, 0x49, 0x9, 0x49, 0x4, 0x4a, 
       0x9, 0x4a, 0x4, 0x4b, 0x9, 0x4b, 0x4, 0x4c, 0x9, 0x4c, 0x4, 0x4d, 
       0x9, 0x4d, 0x4, 0x4e, 0x9, 0x4e, 0x4, 0x4f, 0x9, 0x4f, 0x4, 0x50, 
       0x9, 0x50, 0x4, 0x51, 0x9, 0x51, 0x4, 0x52, 0x9, 0x52, 0x4, 0x53, 
       0x9, 0x53, 0x4, 0x54, 0x9, 0x54, 0x4, 0x55, 0x9, 0x55, 0x4, 0x56, 
       0x9, 0x56, 0x4, 0x57, 0x9, 0x57, 0x4, 0x58, 0x9, 0x58, 0x4, 0x59, 
       0x9, 0x59, 0x4, 0x5a, 0x9, 0x5a, 0x4, 0x5b, 0x9, 0x5b, 0x4, 0x5c, 
       0x9, 0x5c, 0x4, 0x5d, 0x9, 0x5d, 0x4, 0x5e, 0x9, 0x5e, 0x4, 0x5f, 
       0x9, 0x5f, 0x4, 0x60, 0x9, 0x60, 0x4, 0x61, 0x9, 0x61, 0x4, 0x62, 
       0x9, 0x62, 0x4, 0x63, 0x9, 0x63, 0x4, 0x64, 0x9, 0x64, 0x4, 0x65, 
       0x9, 0x65, 0x4, 0x66, 0x9, 0x66, 0x4, 0x67, 0x9, 0x67, 0x4, 0x68, 
       0x9, 0x68, 0x4, 0x69, 0x9, 0x69, 0x4, 0x6a, 0x9, 0x6a, 0x4, 0x6b, 
       0x9, 0x6b, 0x4, 0x6c, 0x9, 0x6c, 0x4, 0x6d, 0x9, 0x6d, 0x4, 0x6e, 
       0x9, 0x6e, 0x4, 0x6f, 0x9, 0x6f, 0x4, 0x70, 0x9, 0x70, 0x4, 0x71, 
       0x9, 0x71, 0x4, 0x72, 0x9, 0x72, 0x4, 0x73, 0x9, 0x73, 0x4, 0x74, 
       0x9, 0x74, 0x4, 0x75, 0x9, 0x75, 0x4, 0x76, 0x9, 0x76, 0x4, 0x77, 
       0x9, 0x77, 0x4, 0x78, 0x9, 0x78, 0x4, 0x79, 0x9, 0x79, 0x4, 0x7a, 
       0x9, 0x7a, 0x4, 0x7b, 0x9, 0x7b, 0x4, 0x7c, 0x9, 0x7c, 0x4, 0x7d, 
       0x9, 0x7d, 0x4, 0x7e, 0x9, 0x7e, 0x4, 0x7f, 0x9, 0x7f, 0x4, 0x80, 
       0x9, 0x80, 0x4, 0x81, 0x9, 0x81, 0x4, 0x82, 0x9, 0x82, 0x4, 0x83, 
       0x9, 0x83, 0x4, 0x84, 0x9, 0x84, 0x4, 0x85, 0x9, 0x85, 0x4, 0x86, 
       0x9, 0x86, 0x4, 0x87, 0x9, 0x87, 0x4, 0x88, 0x9, 0x88, 0x4, 0x89, 
       0x9, 0x89, 0x4, 0x8a, 0x9, 0x8a, 0x4, 0x8b, 0x9, 0x8b, 0x4, 0x8c, 
       0x9, 0x8c, 0x4, 0x8d, 0x9, 0x8d, 0x4, 0x8e, 0x9, 0x8e, 0x4, 0x8f, 
       0x9, 0x8f, 0x4, 0x90, 0x9, 0x90, 0x4, 0x91, 0x9, 0x91, 0x4, 0x92, 
       0x9, 0x92, 0x4, 0x93, 0x9, 0x93, 0x4, 0x94, 0x9, 0x94, 0x4, 0x95, 
       0x9, 0x95, 0x4, 0x96, 0x9, 0x96, 0x4, 0x97, 0x9, 0x97, 0x4, 0x98, 
       0x9, 0x98, 0x4, 0x99, 0x9, 0x99, 0x4, 0x9a, 0x9, 0x9a, 0x4, 0x9b, 
       0x9, 0x9b, 0x4, 0x9c, 0x9, 0x9c, 0x4, 0x9d, 0x9, 0x9d, 0x4, 0x9e, 
       0x9, 0x9e, 0x4, 0x9f, 0x9, 0x9f, 0x4, 0xa0, 0x9, 0xa0, 0x4, 0xa1, 
       0x9, 0xa1, 0x4, 0xa2, 0x9, 0xa2, 0x4, 0xa3, 0x9, 0xa3, 0x4, 0xa4, 
       0x9, 0xa4, 0x4, 0xa5, 0x9, 0xa5, 0x4, 0xa6, 0x9, 0xa6, 0x4, 0xa7, 
       0x9, 0xa7, 0x4, 0xa8, 0x9, 0xa8, 0x4, 0xa9, 0x9, 0xa9, 0x4, 0xaa, 
       0x9, 0xaa, 0x4, 0xab, 0x9, 0xab, 0x4, 0xac, 0x9, 0xac, 0x4, 0xad, 
       0x9, 0xad, 0x4, 0xae, 0x9, 0xae, 0x4, 0xaf, 0x9, 0xaf, 0x4, 0xb0, 
       0x9, 0xb0, 0x4, 0xb1, 0x9, 0xb1, 0x4, 0xb2, 0x9, 0xb2, 0x4, 0xb3, 
       0x9, 0xb3, 0x4, 0xb4, 0x9, 0xb4, 0x4, 0xb5, 0x9, 0xb5, 0x4, 0xb6, 
       0x9, 0xb6, 0x4, 0xb7, 0x9, 0xb7, 0x4, 0xb8, 0x9, 0xb8, 0x4, 0xb9, 
       0x9, 0xb9, 0x4, 0xba, 0x9, 0xba, 0x4, 0xbb, 0x9, 0xbb, 0x4, 0xbc, 
       0x9, 0xbc, 0x4, 0xbd, 0x9, 0xbd, 0x4, 0xbe, 0x9, 0xbe, 0x4, 0xbf, 
       0x9, 0xbf, 0x4, 0xc0, 0x9, 0xc0, 0x4, 0xc1, 0x9, 0xc1, 0x4, 0xc2, 
       0x9, 0xc2, 0x4, 0xc3, 0x9, 0xc3, 0x4, 0xc4, 0x9, 0xc4, 0x4, 0xc5, 
       0x9, 0xc5, 0x4, 0xc6, 0x9, 0xc6, 0x4, 0xc7, 0x9, 0xc7, 0x4, 0xc8, 
       0x9, 0xc8, 0x4, 0xc9, 0x9, 0xc9, 0x4, 0xca, 0x9, 0xca, 0x4, 0xcb, 
       0x9, 0xcb, 0x4, 0xcc, 0x9, 0xcc, 0x4, 0xcd, 0x9, 0xcd, 0x4, 0xce, 
       0x9, 0xce, 0x4, 0xcf, 0x9, 0xcf, 0x4, 0xd0, 0x9, 0xd0, 0x4, 0xd1, 
       0x9, 0xd1, 0x4, 0xd2, 0x9, 0xd2, 0x4, 0xd3, 0x9, 0xd3, 0x4, 0xd4, 
       0x9, 0xd4, 0x4, 0xd5, 0x9, 0xd5, 0x4, 0xd6, 0x9, 0xd6, 0x4, 0xd7, 
       0x9, 0xd7, 0x4, 0xd8, 0x9, 0xd8, 0x4, 0xd9, 0x9, 0xd9, 0x4, 0xda, 
       0x9, 0xda, 0x4, 0xdb, 0x9, 0xdb, 0x4, 0xdc, 0x9, 0xdc, 0x4, 0xdd, 
       0x9, 0xdd, 0x4, 0xde, 0x9, 0xde, 0x4, 0xdf, 0x9, 0xdf, 0x4, 0xe0, 
       0x9, 0xe0, 0x4, 0xe1, 0x9, 0xe1, 0x4, 0xe2, 0x9, 0xe2, 0x4, 0xe3, 
       0x9, 0xe3, 0x4, 0xe4, 0x9, 0xe4, 0x4, 0xe5, 0x9, 0xe5, 0x4, 0xe6, 
       0x9, 0xe6, 0x4, 0xe7, 0x9, 0xe7, 0x4, 0xe8, 0x9, 0xe8, 0x4, 0xe9, 
       0x9, 0xe9, 0x4, 0xea, 0x9, 0xea, 0x4, 0xeb, 0x9, 0xeb, 0x4, 0xec, 
       0x9, 0xec, 0x4, 0xed, 0x9, 0xed, 0x4, 0xee, 0x9, 0xee, 0x4, 0xef, 
       0x9, 0xef, 0x4, 0xf0, 0x9, 0xf0, 0x4, 0xf1, 0x9, 0xf1, 0x4, 0xf2, 
       0x9, 0xf2, 0x4, 0xf3, 0x9, 0xf3, 0x4, 0xf4, 0x9, 0xf4, 0x4, 0xf5, 
       0x9, 0xf5, 0x4, 0xf6, 0x9, 0xf6, 0x4, 0xf7, 0x9, 0xf7, 0x4, 0xf8, 
       0x9, 0xf8, 0x4, 0xf9, 0x9, 0xf9, 0x4, 0xfa, 0x9, 0xfa, 0x4, 0xfb, 
       0x9, 0xfb, 0x4, 0xfc, 0x9, 0xfc, 0x4, 0xfd, 0x9, 0xfd, 0x4, 0xfe, 
       0x9, 0xfe, 0x4, 0xff, 0x9, 0xff, 0x4, 0x100, 0x9, 0x100, 0x4, 0x101, 
       0x9, 0x101, 0x4, 0x102, 0x9, 0x102, 0x4, 0x103, 0x9, 0x103, 0x4, 
       0x104, 0x9, 0x104, 0x4, 0x105, 0x9, 0x105, 0x4, 0x106, 0x9, 0x106, 
       0x4, 0x107, 0x9, 0x107, 0x4, 0x108, 0x9, 0x108, 0x4, 0x109, 0x9, 
       0x109, 0x4, 0x10a, 0x9, 0x10a, 0x4, 0x10b, 0x9, 0x10b, 0x4, 0x10c, 
       0x9, 0x10c, 0x4, 0x10d, 0x9, 0x10d, 0x4, 0x10e, 0x9, 0x10e, 0x4, 
       0x10f, 0x9, 0x10f, 0x4, 0x110, 0x9, 0x110, 0x4, 0x111, 0x9, 0x111, 
       0x4, 0x112, 0x9, 0x112, 0x4, 0x113, 0x9, 0x113, 0x4, 0x114, 0x9, 
       0x114, 0x4, 0x115, 0x9, 0x115, 0x4, 0x116, 0x9, 0x116, 0x4, 0x117, 
       0x9, 0x117, 0x4, 0x118, 0x9, 0x118, 0x4, 0x119, 0x9, 0x119, 0x4, 
       0x11a, 0x9, 0x11a, 0x4, 0x11b, 0x9, 0x11b, 0x4, 0x11c, 0x9, 0x11c, 
       0x4, 0x11d, 0x9, 0x11d, 0x4, 0x11e, 0x9, 0x11e, 0x4, 0x11f, 0x9, 
       0x11f, 0x4, 0x120, 0x9, 0x120, 0x4, 0x121, 0x9, 0x121, 0x4, 0x122, 
       0x9, 0x122, 0x4, 0x123, 0x9, 0x123, 0x4, 0x124, 0x9, 0x124, 0x4, 
       0x125, 0x9, 0x125, 0x4, 0x126, 0x9, 0x126, 0x4, 0x127, 0x9, 0x127, 
       0x4, 0x128, 0x9, 0x128, 0x4, 0x129, 0x9, 0x129, 0x4, 0x12a, 0x9, 
       0x12a, 0x4, 0x12b, 0x9, 0x12b, 0x4, 0x12c, 0x9, 0x12c, 0x4, 0x12d, 
       0x9, 0x12d, 0x4, 0x12e, 0x9, 0x12e, 0x4, 0x12f, 0x9, 0x12f, 0x4, 
       0x130, 0x9, 0x130, 0x4, 0x131, 0x9, 0x131, 0x4, 0x132, 0x9, 0x132, 
       0x4, 0x133, 0x9, 0x133, 0x4, 0x134, 0x9, 0x134, 0x4, 0x135, 0x9, 
       0x135, 0x4, 0x136, 0x9, 0x136, 0x4, 0x137, 0x9, 0x137, 0x4, 0x138, 
       0x9, 0x138, 0x4, 0x139, 0x9, 0x139, 0x4, 0x13a, 0x9, 0x13a, 0x4, 
       0x13b, 0x9, 0x13b, 0x4, 0x13c, 0x9, 0x13c, 0x4, 0x13d, 0x9, 0x13d, 
       0x4, 0x13e, 0x9, 0x13e, 0x4, 0x13f, 0x9, 0x13f, 0x4, 0x140, 0x9, 
       0x140, 0x4, 0x141, 0x9, 0x141, 0x4, 0x142, 0x9, 0x142, 0x4, 0x143, 
       0x9, 0x143, 0x4, 0x144, 0x9, 0x144, 0x4, 0x145, 0x9, 0x145, 0x4, 
       0x146, 0x9, 0x146, 0x4, 0x147, 0x9, 0x147, 0x4, 0x148, 0x9, 0x148, 
       0x4, 0x149, 0x9, 0x149, 0x4, 0x14a, 0x9, 0x14a, 0x4, 0x14b, 0x9, 
       0x14b, 0x4, 0x14c, 0x9, 0x14c, 0x4, 0x14d, 0x9, 0x14d, 0x4, 0x14e, 
       0x9, 0x14e, 0x4, 0x14f, 0x9, 0x14f, 0x4, 0x150, 0x9, 0x150, 0x4, 
       0x151, 0x9, 0x151, 0x4, 0x152, 0x9, 0x152, 0x4, 0x153, 0x9, 0x153, 
       0x4, 0x154, 0x9, 0x154, 0x4, 0x155, 0x9, 0x155, 0x4, 0x156, 0x9, 
       0x156, 0x4, 0x157, 0x9, 0x157, 0x4, 0x158, 0x9, 0x158, 0x4, 0x159, 
       0x9, 0x159, 0x4, 0x15a, 0x9, 0x15a, 0x4, 0x15b, 0x9, 0x15b, 0x4, 
       0x15c, 0x9, 0x15c, 0x4, 0x15d, 0x9, 0x15d, 0x4, 0x15e, 0x9, 0x15e, 
       0x4, 0x15f, 0x9, 0x15f, 0x4, 0x160, 0x9, 0x160, 0x4, 0x161, 0x9, 
       0x161, 0x4, 0x162, 0x9, 0x162, 0x4, 0x163, 0x9, 0x163, 0x4, 0x164, 
       0x9, 0x164, 0x4, 0x165, 0x9, 0x165, 0x4, 0x166, 0x9, 0x166, 0x4, 
       0x167, 0x9, 0x167, 0x4, 0x168, 0x9, 0x168, 0x4, 0x169, 0x9, 0x169, 
       0x4, 0x16a, 0x9, 0x16a, 0x4, 0x16b, 0x9, 0x16b, 0x4, 0x16c, 0x9, 
       0x16c, 0x4, 0x16d, 0x9, 0x16d, 0x4, 0x16e, 0x9, 0x16e, 0x4, 0x16f, 
       0x9, 0x16f, 0x4, 0x170, 0x9, 0x170, 0x4, 0x171, 0x9, 0x171, 0x4, 
       0x172, 0x9, 0x172, 0x4, 0x173, 0x9, 0x173, 0x4, 0x174, 0x9, 0x174, 
       0x4, 0x175, 0x9, 0x175, 0x4, 0x176, 0x9, 0x176, 0x4, 0x177, 0x9, 
       0x177, 0x4, 0x178, 0x9, 0x178, 0x4, 0x179, 0x9, 0x179, 0x4, 0x17a, 
       0x9, 0x17a, 0x4, 0x17b, 0x9, 0x17b, 0x4, 0x17c, 0x9, 0x17c, 0x4, 
       0x17d, 0x9, 0x17d, 0x4, 0x17e, 0x9, 0x17e, 0x4, 0x17f, 0x9, 0x17f, 
       0x4, 0x180, 0x9, 0x180, 0x4, 0x181, 0x9, 0x181, 0x4, 0x182, 0x9, 
       0x182, 0x4, 0x183, 0x9, 0x183, 0x4, 0x184, 0x9, 0x184, 0x4, 0x185, 
       0x9, 0x185, 0x4, 0x186, 0x9, 0x186, 0x4, 0x187, 0x9, 0x187, 0x4, 
       0x188, 0x9, 0x188, 0x4, 0x189, 0x9, 0x189, 0x4, 0x18a, 0x9, 0x18a, 
       0x4, 0x18b, 0x9, 0x18b, 0x4, 0x18c, 0x9, 0x18c, 0x4, 0x18d, 0x9, 
       0x18d, 0x4, 0x18e, 0x9, 0x18e, 0x4, 0x18f, 0x9, 0x18f, 0x4, 0x190, 
       0x9, 0x190, 0x4, 0x191, 0x9, 0x191, 0x4, 0x192, 0x9, 0x192, 0x4, 
       0x193, 0x9, 0x193, 0x4, 0x194, 0x9, 0x194, 0x4, 0x195, 0x9, 0x195, 
       0x4, 0x196, 0x9, 0x196, 0x4, 0x197, 0x9, 0x197, 0x4, 0x198, 0x9, 
       0x198, 0x4, 0x199, 0x9, 0x199, 0x4, 0x19a, 0x9, 0x19a, 0x4, 0x19b, 
       0x9, 0x19b, 0x4, 0x19c, 0x9, 0x19c, 0x4, 0x19d, 0x9, 0x19d, 0x4, 
       0x19e, 0x9, 0x19e, 0x4, 0x19f, 0x9, 0x19f, 0x4, 0x1a0, 0x9, 0x1a0, 
       0x4, 0x1a1, 0x9, 0x1a1, 0x4, 0x1a2, 0x9, 0x1a2, 0x4, 0x1a3, 0x9, 
       0x1a3, 0x4, 0x1a4, 0x9, 0x1a4, 0x4, 0x1a5, 0x9, 0x1a5, 0x4, 0x1a6, 
       0x9, 0x1a6, 0x4, 0x1a7, 0x9, 0x1a7, 0x4, 0x1a8, 0x9, 0x1a8, 0x4, 
       0x1a9, 0x9, 0x1a9, 0x4, 0x1aa, 0x9, 0x1aa, 0x4, 0x1ab, 0x9, 0x1ab, 
       0x4, 0x1ac, 0x9, 0x1ac, 0x4, 0x1ad, 0x9, 0x1ad, 0x4, 0x1ae, 0x9, 
       0x1ae, 0x4, 0x1af, 0x9, 0x1af, 0x4, 0x1b0, 0x9, 0x1b0, 0x4, 0x1b1, 
       0x9, 0x1b1, 0x4, 0x1b2, 0x9, 0x1b2, 0x4, 0x1b3, 0x9, 0x1b3, 0x4, 
       0x1b4, 0x9, 0x1b4, 0x4, 0x1b5, 0x9, 0x1b5, 0x4, 0x1b6, 0x9, 0x1b6, 
       0x4, 0x1b7, 0x9, 0x1b7, 0x4, 0x1b8, 0x9, 0x1b8, 0x4, 0x1b9, 0x9, 
       0x1b9, 0x4, 0x1ba, 0x9, 0x1ba, 0x4, 0x1bb, 0x9, 0x1bb, 0x4, 0x1bc, 
       0x9, 0x1bc, 0x4, 0x1bd, 0x9, 0x1bd, 0x4, 0x1be, 0x9, 0x1be, 0x4, 
       0x1bf, 0x9, 0x1bf, 0x4, 0x1c0, 0x9, 0x1c0, 0x4, 0x1c1, 0x9, 0x1c1, 
       0x4, 0x1c2, 0x9, 0x1c2, 0x4, 0x1c3, 0x9, 0x1c3, 0x4, 0x1c4, 0x9, 
       0x1c4, 0x4, 0x1c5, 0x9, 0x1c5, 0x4, 0x1c6, 0x9, 0x1c6, 0x4, 0x1c7, 
       0x9, 0x1c7, 0x4, 0x1c8, 0x9, 0x1c8, 0x4, 0x1c9, 0x9, 0x1c9, 0x4, 
       0x1ca, 0x9, 0x1ca, 0x4, 0x1cb, 0x9, 0x1cb, 0x4, 0x1cc, 0x9, 0x1cc, 
       0x4, 0x1cd, 0x9, 0x1cd, 0x4, 0x1ce, 0x9, 0x1ce, 0x4, 0x1cf, 0x9, 
       0x1cf, 0x4, 0x1d0, 0x9, 0x1d0, 0x4, 0x1d1, 0x9, 0x1d1, 0x4, 0x1d2, 
       0x9, 0x1d2, 0x4, 0x1d3, 0x9, 0x1d3, 0x4, 0x1d4, 0x9, 0x1d4, 0x4, 
       0x1d5, 0x9, 0x1d5, 0x4, 0x1d6, 0x9, 0x1d6, 0x4, 0x1d7, 0x9, 0x1d7, 
       0x4, 0x1d8, 0x9, 0x1d8, 0x4, 0x1d9, 0x9, 0x1d9, 0x4, 0x1da, 0x9, 
       0x1da, 0x4, 0x1db, 0x9, 0x1db, 0x4, 0x1dc, 0x9, 0x1dc, 0x4, 0x1dd, 
       0x9, 0x1dd, 0x4, 0x1de, 0x9, 0x1de, 0x4, 0x1df, 0x9, 0x1df, 0x4, 
       0x1e0, 0x9, 0x1e0, 0x4, 0x1e1, 0x9, 0x1e1, 0x4, 0x1e2, 0x9, 0x1e2, 
       0x4, 0x1e3, 0x9, 0x1e3, 0x4, 0x1e4, 0x9, 0x1e4, 0x4, 0x1e5, 0x9, 
       0x1e5, 0x4, 0x1e6, 0x9, 0x1e6, 0x4, 0x1e7, 0x9, 0x1e7, 0x4, 0x1e8, 
       0x9, 0x1e8, 0x4, 0x1e9, 0x9, 0x1e9, 0x4, 0x1ea, 0x9, 0x1ea, 0x3, 
       0x2, 0x3, 0x2, 0x3, 0x3, 0x7, 0x3, 0x3d8, 0xa, 0x3, 0xc, 0x3, 0xe, 
       0x3, 0x3db, 0xb, 0x3, 0x3, 0x3, 0x3, 0x3, 0x7, 0x3, 0x3df, 0xa, 0x3, 
       0xc, 0x3, 0xe, 0x3, 0x3e2, 0xb, 0x3, 0x3, 0x3, 0x5, 0x3, 0x3e5, 0xa, 
       0x3, 0x3, 0x4, 0x3, 0x4, 0x5, 0x4, 0x3e9, 0xa, 0x4, 0x3, 0x5, 0x3, 
       0x5, 0x3, 0x6, 0x3, 0x6, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x5, 0x7, 
       0x3f2, 0xa, 0x7, 0x3, 0x8, 0x3, 0x8, 0x5, 0x8, 0x3f6, 0xa, 0x8, 0x3, 
       0x8, 0x3, 0x8, 0x7, 0x8, 0x3fa, 0xa, 0x8, 0xc, 0x8, 0xe, 0x8, 0x3fd, 
       0xb, 0x8, 0x3, 0x9, 0x7, 0x9, 0x400, 0xa, 0x9, 0xc, 0x9, 0xe, 0x9, 
       0x403, 0xb, 0x9, 0x3, 0x9, 0x3, 0x9, 0x5, 0x9, 0x407, 0xa, 0x9, 0x3, 
       0x9, 0x3, 0x9, 0x3, 0x9, 0x7, 0x9, 0x40c, 0xa, 0x9, 0xc, 0x9, 0xe, 
       0x9, 0x40f, 0xb, 0x9, 0x3, 0x9, 0x3, 0x9, 0x5, 0x9, 0x413, 0xa, 0x9, 
       0x5, 0x9, 0x415, 0xa, 0x9, 0x3, 0xa, 0x3, 0xa, 0x7, 0xa, 0x419, 0xa, 
       0xa, 0xc, 0xa, 0xe, 0xa, 0x41c, 0xb, 0xa, 0x3, 0xa, 0x3, 0xa, 0x5, 
       0xa, 0x420, 0xa, 0xa, 0x3, 0xb, 0x7, 0xb, 0x423, 0xa, 0xb, 0xc, 0xb, 
       0xe, 0xb, 0x426, 0xb, 0xb, 0x3, 0xb, 0x3, 0xb, 0x5, 0xb, 0x42a, 0xa, 
       0xb, 0x3, 0xc, 0x3, 0xc, 0x3, 0xd, 0x3, 0xd, 0x3, 0xe, 0x3, 0xe, 
       0x3, 0xf, 0x7, 0xf, 0x433, 0xa, 0xf, 0xc, 0xf, 0xe, 0xf, 0x436, 0xb, 
       0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 
       0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x5, 0x10, 
       0x443, 0xa, 0x10, 0x3, 0x11, 0x7, 0x11, 0x446, 0xa, 0x11, 0xc, 0x11, 
       0xe, 0x11, 0x449, 0xb, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x7, 
       0x11, 0x44e, 0xa, 0x11, 0xc, 0x11, 0xe, 0x11, 0x451, 0xb, 0x11, 0x3, 
       0x11, 0x3, 0x11, 0x7, 0x11, 0x455, 0xa, 0x11, 0xc, 0x11, 0xe, 0x11, 
       0x458, 0xb, 0x11, 0x3, 0x12, 0x7, 0x12, 0x45b, 0xa, 0x12, 0xc, 0x12, 
       0xe, 0x12, 0x45e, 0xb, 0x12, 0x3, 0x12, 0x3, 0x12, 0x5, 0x12, 0x462, 
       0xa, 0x12, 0x3, 0x13, 0x3, 0x13, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 
       0x3, 0x14, 0x3, 0x14, 0x7, 0x14, 0x46b, 0xa, 0x14, 0xc, 0x14, 0xe, 
       0x14, 0x46e, 0xb, 0x14, 0x5, 0x14, 0x470, 0xa, 0x14, 0x3, 0x15, 0x3, 
       0x15, 0x3, 0x15, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 
       0x17, 0x3, 0x17, 0x3, 0x17, 0x7, 0x17, 0x47c, 0xa, 0x17, 0xc, 0x17, 
       0xe, 0x17, 0x47f, 0xb, 0x17, 0x3, 0x18, 0x3, 0x18, 0x5, 0x18, 0x483, 
       0xa, 0x18, 0x3, 0x19, 0x7, 0x19, 0x486, 0xa, 0x19, 0xc, 0x19, 0xe, 
       0x19, 0x489, 0xb, 0x19, 0x3, 0x19, 0x3, 0x19, 0x5, 0x19, 0x48d, 0xa, 
       0x19, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 0x493, 
       0xa, 0x1a, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 
       0x3, 0x1b, 0x7, 0x1b, 0x49b, 0xa, 0x1b, 0xc, 0x1b, 0xe, 0x1b, 0x49e, 
       0xb, 0x1b, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 
       0x3, 0x1c, 0x7, 0x1c, 0x4a6, 0xa, 0x1c, 0xc, 0x1c, 0xe, 0x1c, 0x4a9, 
       0xb, 0x1c, 0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 
       0x5, 0x1d, 0x4b0, 0xa, 0x1d, 0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x3, 
       0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x7, 0x1e, 0x4b8, 0xa, 0x1e, 0xc, 0x1e, 
       0xe, 0x1e, 0x4bb, 0xb, 0x1e, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 
       0x1f, 0x3, 0x1f, 0x5, 0x1f, 0x4c2, 0xa, 0x1f, 0x3, 0x20, 0x3, 0x20, 
       0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 
       0x7, 0x21, 0x4cc, 0xa, 0x21, 0xc, 0x21, 0xe, 0x21, 0x4cf, 0xb, 0x21, 
       0x3, 0x22, 0x3, 0x22, 0x5, 0x22, 0x4d3, 0xa, 0x22, 0x3, 0x23, 0x5, 
       0x23, 0x4d6, 0xa, 0x23, 0x3, 0x23, 0x7, 0x23, 0x4d9, 0xa, 0x23, 0xc, 
       0x23, 0xe, 0x23, 0x4dc, 0xb, 0x23, 0x3, 0x23, 0x7, 0x23, 0x4df, 0xa, 
       0x23, 0xc, 0x23, 0xe, 0x23, 0x4e2, 0xb, 0x23, 0x3, 0x23, 0x3, 0x23, 
       0x3, 0x24, 0x7, 0x24, 0x4e7, 0xa, 0x24, 0xc, 0x24, 0xe, 0x24, 0x4ea, 
       0xb, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x25, 0x7, 0x25, 0x4ef, 0xa, 
       0x25, 0xc, 0x25, 0xe, 0x25, 0x4f2, 0xb, 0x25, 0x3, 0x25, 0x3, 0x25, 
       0x3, 0x25, 0x3, 0x25, 0x3, 0x26, 0x3, 0x26, 0x3, 0x27, 0x3, 0x27, 
       0x3, 0x27, 0x3, 0x27, 0x5, 0x27, 0x4fe, 0xa, 0x27, 0x3, 0x28, 0x3, 
       0x28, 0x3, 0x28, 0x3, 0x28, 0x3, 0x29, 0x3, 0x29, 0x3, 0x29, 0x3, 
       0x29, 0x3, 0x29, 0x3, 0x29, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 
       0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2b, 0x3, 0x2b, 0x3, 
       0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2c, 0x3, 
       0x2c, 0x3, 0x2c, 0x5, 0x2c, 0x51b, 0xa, 0x2c, 0x3, 0x2d, 0x7, 0x2d, 
       0x51e, 0xa, 0x2d, 0xc, 0x2d, 0xe, 0x2d, 0x521, 0xb, 0x2d, 0x3, 0x2d, 
       0x5, 0x2d, 0x524, 0xa, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 
       0x2d, 0x7, 0x2d, 0x52a, 0xa, 0x2d, 0xc, 0x2d, 0xe, 0x2d, 0x52d, 0xb, 
       0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2e, 0x3, 0x2e, 0x7, 0x2e, 0x533, 
       0xa, 0x2e, 0xc, 0x2e, 0xe, 0x2e, 0x536, 0xb, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x3, 0x2e, 0x7, 0x2e, 0x541, 0xa, 0x2e, 0xc, 0x2e, 0xe, 0x2e, 
       0x544, 0xb, 0x2e, 0x5, 0x2e, 0x546, 0xa, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 
       0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 
       0x7, 0x2e, 0x550, 0xa, 0x2e, 0xc, 0x2e, 0xe, 0x2e, 0x553, 0xb, 0x2e, 
       0x5, 0x2e, 0x555, 0xa, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x7, 0x2e, 0x563, 0xa, 0x2e, 0xc, 0x2e, 
       0xe, 0x2e, 0x566, 0xb, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x5, 0x2e, 0x56a, 
       0xa, 0x2e, 0x3, 0x2f, 0x3, 0x2f, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 
       0x570, 0xa, 0x30, 0x3, 0x31, 0x7, 0x31, 0x573, 0xa, 0x31, 0xc, 0x31, 
       0xe, 0x31, 0x576, 0xb, 0x31, 0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 0x5, 
       0x31, 0x57b, 0xa, 0x31, 0x3, 0x31, 0x5, 0x31, 0x57e, 0xa, 0x31, 0x3, 
       0x31, 0x5, 0x31, 0x581, 0xa, 0x31, 0x3, 0x31, 0x3, 0x31, 0x3, 0x32, 
       0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 
       0x3, 0x32, 0x5, 0x32, 0x58d, 0xa, 0x32, 0x3, 0x33, 0x3, 0x33, 0x3, 
       0x33, 0x3, 0x33, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x7, 0x34, 0x596, 
       0xa, 0x34, 0xc, 0x34, 0xe, 0x34, 0x599, 0xb, 0x34, 0x3, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x3, 0x36, 0x3, 0x36, 0x3, 0x36, 0x3, 0x37, 0x3, 
       0x37, 0x3, 0x37, 0x7, 0x37, 0x5a4, 0xa, 0x37, 0xc, 0x37, 0xe, 0x37, 
       0x5a7, 0xb, 0x37, 0x3, 0x38, 0x3, 0x38, 0x7, 0x38, 0x5ab, 0xa, 0x38, 
       0xc, 0x38, 0xe, 0x38, 0x5ae, 0xb, 0x38, 0x3, 0x38, 0x3, 0x38, 0x3, 
       0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x5, 0x39, 0x5b6, 0xa, 0x39, 
       0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x5, 0x3a, 
       0x5bd, 0xa, 0x3a, 0x3, 0x3b, 0x7, 0x3b, 0x5c0, 0xa, 0x3b, 0xc, 0x3b, 
       0xe, 0x3b, 0x5c3, 0xb, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 
       0x3b, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x3, 
       0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x5, 0x3c, 0x5d1, 0xa, 0x3c, 0x3, 0x3d, 
       0x3, 0x3d, 0x3, 0x3d, 0x7, 0x3d, 0x5d6, 0xa, 0x3d, 0xc, 0x3d, 0xe, 
       0x3d, 0x5d9, 0xb, 0x3d, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x5, 0x3e, 
       0x5de, 0xa, 0x3e, 0x3, 0x3f, 0x3, 0x3f, 0x5, 0x3f, 0x5e2, 0xa, 0x3f, 
       0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x5e6, 0xa, 0x40, 0x3, 0x41, 0x3, 
       0x41, 0x5, 0x41, 0x5ea, 0xa, 0x41, 0x3, 0x42, 0x3, 0x42, 0x5, 0x42, 
       0x5ee, 0xa, 0x42, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x5, 0x43, 0x5f3, 
       0xa, 0x43, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x5f7, 0xa, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x7, 0x44, 0x5fb, 0xa, 0x44, 0xc, 0x44, 0xe, 0x44, 
       0x5fe, 0xb, 0x44, 0x3, 0x45, 0x3, 0x45, 0x5, 0x45, 0x602, 0xa, 0x45, 
       0x3, 0x45, 0x3, 0x45, 0x3, 0x45, 0x7, 0x45, 0x607, 0xa, 0x45, 0xc, 
       0x45, 0xe, 0x45, 0x60a, 0xb, 0x45, 0x3, 0x45, 0x3, 0x45, 0x5, 0x45, 
       0x60e, 0xa, 0x45, 0x5, 0x45, 0x610, 0xa, 0x45, 0x3, 0x46, 0x3, 0x46, 
       0x7, 0x46, 0x614, 0xa, 0x46, 0xc, 0x46, 0xe, 0x46, 0x617, 0xb, 0x46, 
       0x3, 0x46, 0x3, 0x46, 0x5, 0x46, 0x61b, 0xa, 0x46, 0x3, 0x47, 0x3, 
       0x47, 0x5, 0x47, 0x61f, 0xa, 0x47, 0x3, 0x48, 0x3, 0x48, 0x3, 0x49, 
       0x3, 0x49, 0x3, 0x4a, 0x3, 0x4a, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4c, 
       0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 
       0x3, 0x4c, 0x3, 0x4c, 0x5, 0x4c, 0x632, 0xa, 0x4c, 0x3, 0x4d, 0x7, 
       0x4d, 0x635, 0xa, 0x4d, 0xc, 0x4d, 0xe, 0x4d, 0x638, 0xb, 0x4d, 0x3, 
       0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 
       0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 
       0x4e, 0x5, 0x4e, 0x647, 0xa, 0x4e, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 
       0x5, 0x4f, 0x64c, 0xa, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x7, 0x4f, 0x650, 
       0xa, 0x4f, 0xc, 0x4f, 0xe, 0x4f, 0x653, 0xb, 0x4f, 0x3, 0x4f, 0x3, 
       0x4f, 0x3, 0x4f, 0x5, 0x4f, 0x658, 0xa, 0x4f, 0x5, 0x4f, 0x65a, 0xa, 
       0x4f, 0x3, 0x50, 0x3, 0x50, 0x5, 0x50, 0x65e, 0xa, 0x50, 0x3, 0x51, 
       0x3, 0x51, 0x3, 0x51, 0x5, 0x51, 0x663, 0xa, 0x51, 0x3, 0x51, 0x3, 
       0x51, 0x5, 0x51, 0x667, 0xa, 0x51, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 
       0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x5, 0x52, 0x66f, 0xa, 0x52, 0x3, 
       0x53, 0x3, 0x53, 0x3, 0x53, 0x7, 0x53, 0x674, 0xa, 0x53, 0xc, 0x53, 
       0xe, 0x53, 0x677, 0xb, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x7, 
       0x53, 0x67c, 0xa, 0x53, 0xc, 0x53, 0xe, 0x53, 0x67f, 0xb, 0x53, 0x5, 
       0x53, 0x681, 0xa, 0x53, 0x3, 0x54, 0x7, 0x54, 0x684, 0xa, 0x54, 0xc, 
       0x54, 0xe, 0x54, 0x687, 0xb, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x55, 0x3, 0x55, 0x5, 0x55, 0x68e, 0xa, 0x55, 0x3, 0x56, 0x7, 
       0x56, 0x691, 0xa, 0x56, 0xc, 0x56, 0xe, 0x56, 0x694, 0xb, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x7, 0x56, 0x698, 0xa, 0x56, 0xc, 0x56, 0xe, 0x56, 
       0x69b, 0xb, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 
       0x56, 0x6a1, 0xa, 0x56, 0x3, 0x57, 0x7, 0x57, 0x6a4, 0xa, 0x57, 0xc, 
       0x57, 0xe, 0x57, 0x6a7, 0xb, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 
       0x3, 0x57, 0x5, 0x57, 0x6ad, 0xa, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 
       0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x7, 
       0x59, 0x6b7, 0xa, 0x59, 0xc, 0x59, 0xe, 0x59, 0x6ba, 0xb, 0x59, 0x3, 
       0x5a, 0x3, 0x5a, 0x5, 0x5a, 0x6be, 0xa, 0x5a, 0x3, 0x5b, 0x3, 0x5b, 
       0x5, 0x5b, 0x6c2, 0xa, 0x5b, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5d, 0x3, 
       0x5d, 0x3, 0x5d, 0x3, 0x5e, 0x7, 0x5e, 0x6ca, 0xa, 0x5e, 0xc, 0x5e, 
       0xe, 0x5e, 0x6cd, 0xb, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x5, 0x5e, 0x6d1, 
       0xa, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 
       0x3, 0x5f, 0x5, 0x5f, 0x6d9, 0xa, 0x5f, 0x3, 0x60, 0x5, 0x60, 0x6dc, 
       0xa, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x5, 0x60, 0x6e1, 0xa, 
       0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x61, 0x3, 0x61, 0x3, 0x62, 0x3, 
       0x62, 0x5, 0x62, 0x6e9, 0xa, 0x62, 0x3, 0x62, 0x5, 0x62, 0x6ec, 0xa, 
       0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x63, 0x5, 0x63, 0x6f1, 0xa, 0x63, 
       0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x5, 0x63, 0x6f6, 0xa, 0x63, 0x3, 
       0x63, 0x3, 0x63, 0x3, 0x63, 0x5, 0x63, 0x6fb, 0xa, 0x63, 0x3, 0x63, 
       0x3, 0x63, 0x3, 0x63, 0x5, 0x63, 0x700, 0xa, 0x63, 0x3, 0x63, 0x3, 
       0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x5, 0x63, 0x707, 0xa, 0x63, 
       0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x5, 0x63, 0x70c, 0xa, 0x63, 0x3, 
       0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x5, 
       0x63, 0x714, 0xa, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x5, 0x63, 
       0x719, 0xa, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x5, 0x63, 0x71e, 
       0xa, 0x63, 0x3, 0x64, 0x7, 0x64, 0x721, 0xa, 0x64, 0xc, 0x64, 0xe, 
       0x64, 0x724, 0xb, 0x64, 0x3, 0x64, 0x3, 0x64, 0x3, 0x64, 0x5, 0x64, 
       0x729, 0xa, 0x64, 0x3, 0x64, 0x3, 0x64, 0x3, 0x65, 0x3, 0x65, 0x5, 
       0x65, 0x72f, 0xa, 0x65, 0x3, 0x65, 0x5, 0x65, 0x732, 0xa, 0x65, 0x3, 
       0x65, 0x5, 0x65, 0x735, 0xa, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x66, 
       0x3, 0x66, 0x3, 0x66, 0x7, 0x66, 0x73c, 0xa, 0x66, 0xc, 0x66, 0xe, 
       0x66, 0x73f, 0xb, 0x66, 0x3, 0x67, 0x7, 0x67, 0x742, 0xa, 0x67, 0xc, 
       0x67, 0xe, 0x67, 0x745, 0xb, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 
       0x5, 0x67, 0x74a, 0xa, 0x67, 0x3, 0x67, 0x5, 0x67, 0x74d, 0xa, 0x67, 
       0x3, 0x67, 0x5, 0x67, 0x750, 0xa, 0x67, 0x3, 0x68, 0x3, 0x68, 0x3, 
       0x69, 0x3, 0x69, 0x7, 0x69, 0x756, 0xa, 0x69, 0xc, 0x69, 0xe, 0x69, 
       0x759, 0xb, 0x69, 0x3, 0x6a, 0x3, 0x6a, 0x5, 0x6a, 0x75d, 0xa, 0x6a, 
       0x3, 0x6b, 0x7, 0x6b, 0x760, 0xa, 0x6b, 0xc, 0x6b, 0xe, 0x6b, 0x763, 
       0xb, 0x6b, 0x3, 0x6b, 0x3, 0x6b, 0x3, 0x6b, 0x5, 0x6b, 0x768, 0xa, 
       0x6b, 0x3, 0x6b, 0x5, 0x6b, 0x76b, 0xa, 0x6b, 0x3, 0x6b, 0x3, 0x6b, 
       0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 
       0x3, 0x6c, 0x5, 0x6c, 0x776, 0xa, 0x6c, 0x3, 0x6d, 0x3, 0x6d, 0x3, 
       0x6d, 0x3, 0x6e, 0x3, 0x6e, 0x7, 0x6e, 0x77d, 0xa, 0x6e, 0xc, 0x6e, 
       0xe, 0x6e, 0x780, 0xb, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6f, 0x3, 
       0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x5, 0x6f, 0x789, 0xa, 0x6f, 
       0x3, 0x70, 0x7, 0x70, 0x78c, 0xa, 0x70, 0xc, 0x70, 0xe, 0x70, 0x78f, 
       0xb, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x71, 
       0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x5, 0x71, 0x799, 0xa, 0x71, 0x3, 
       0x72, 0x7, 0x72, 0x79c, 0xa, 0x72, 0xc, 0x72, 0xe, 0x72, 0x79f, 0xb, 
       0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x73, 0x3, 0x73, 0x3, 
       0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x5, 0x73, 0x7ab, 
       0xa, 0x73, 0x3, 0x74, 0x7, 0x74, 0x7ae, 0xa, 0x74, 0xc, 0x74, 0xe, 
       0x74, 0x7b1, 0xb, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 
       0x3, 0x74, 0x3, 0x75, 0x3, 0x75, 0x7, 0x75, 0x7ba, 0xa, 0x75, 0xc, 
       0x75, 0xe, 0x75, 0x7bd, 0xb, 0x75, 0x3, 0x75, 0x3, 0x75, 0x3, 0x76, 
       0x3, 0x76, 0x3, 0x76, 0x3, 0x76, 0x3, 0x76, 0x5, 0x76, 0x7c6, 0xa, 
       0x76, 0x3, 0x77, 0x7, 0x77, 0x7c9, 0xa, 0x77, 0xc, 0x77, 0xe, 0x77, 
       0x7cc, 0xb, 0x77, 0x3, 0x77, 0x3, 0x77, 0x3, 0x77, 0x3, 0x77, 0x3, 
       0x77, 0x5, 0x77, 0x7d3, 0xa, 0x77, 0x3, 0x77, 0x5, 0x77, 0x7d6, 0xa, 
       0x77, 0x3, 0x77, 0x3, 0x77, 0x3, 0x78, 0x3, 0x78, 0x3, 0x78, 0x5, 
       0x78, 0x7dd, 0xa, 0x78, 0x3, 0x79, 0x3, 0x79, 0x3, 0x79, 0x3, 0x7a, 
       0x3, 0x7a, 0x3, 0x7a, 0x5, 0x7a, 0x7e5, 0xa, 0x7a, 0x3, 0x7b, 0x3, 
       0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x5, 0x7b, 0x7eb, 0xa, 0x7b, 0x3, 0x7b, 
       0x3, 0x7b, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x7, 0x7c, 0x7f2, 0xa, 
       0x7c, 0xc, 0x7c, 0xe, 0x7c, 0x7f5, 0xb, 0x7c, 0x3, 0x7d, 0x3, 0x7d, 
       0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x5, 0x7e, 
       0x7fe, 0xa, 0x7e, 0x3, 0x7f, 0x3, 0x7f, 0x5, 0x7f, 0x802, 0xa, 0x7f, 
       0x3, 0x7f, 0x5, 0x7f, 0x805, 0xa, 0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x3, 
       0x80, 0x3, 0x80, 0x3, 0x80, 0x7, 0x80, 0x80c, 0xa, 0x80, 0xc, 0x80, 
       0xe, 0x80, 0x80f, 0xb, 0x80, 0x3, 0x81, 0x3, 0x81, 0x3, 0x81, 0x3, 
       0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 
       0x83, 0x3, 0x83, 0x5, 0x83, 0x81c, 0xa, 0x83, 0x3, 0x83, 0x5, 0x83, 
       0x81f, 0xa, 0x83, 0x3, 0x83, 0x3, 0x83, 0x3, 0x84, 0x3, 0x84, 0x3, 
       0x84, 0x7, 0x84, 0x826, 0xa, 0x84, 0xc, 0x84, 0xe, 0x84, 0x829, 0xb, 
       0x84, 0x3, 0x85, 0x3, 0x85, 0x5, 0x85, 0x82d, 0xa, 0x85, 0x3, 0x85, 
       0x3, 0x85, 0x3, 0x86, 0x6, 0x86, 0x832, 0xa, 0x86, 0xd, 0x86, 0xe, 
       0x86, 0x833, 0x3, 0x87, 0x3, 0x87, 0x3, 0x87, 0x5, 0x87, 0x839, 0xa, 
       0x87, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x89, 0x7, 0x89, 0x83f, 
       0xa, 0x89, 0xc, 0x89, 0xe, 0x89, 0x842, 0xb, 0x89, 0x3, 0x89, 0x3, 
       0x89, 0x3, 0x89, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 
       0x8a, 0x3, 0x8a, 0x5, 0x8a, 0x84d, 0xa, 0x8a, 0x3, 0x8b, 0x3, 0x8b, 
       0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8b, 0x5, 0x8b, 0x854, 0xa, 0x8b, 0x3, 
       0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 
       0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x5, 
       0x8c, 0x862, 0xa, 0x8c, 0x3, 0x8d, 0x3, 0x8d, 0x3, 0x8e, 0x3, 0x8e, 
       0x3, 0x8e, 0x3, 0x8e, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 
       0x3, 0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 
       0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x5, 0x91, 0x878, 0xa, 
       0x91, 0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 0x3, 
       0x92, 0x3, 0x93, 0x3, 0x93, 0x3, 0x93, 0x3, 0x93, 0x3, 0x93, 0x3, 
       0x93, 0x3, 0x93, 0x3, 0x93, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 
       0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x95, 0x3, 
       0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 
       0x95, 0x3, 0x95, 0x3, 0x95, 0x5, 0x95, 0x89a, 0xa, 0x95, 0x3, 0x96, 
       0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x97, 
       0x3, 0x97, 0x7, 0x97, 0x8a4, 0xa, 0x97, 0xc, 0x97, 0xe, 0x97, 0x8a7, 
       0xb, 0x97, 0x3, 0x97, 0x7, 0x97, 0x8aa, 0xa, 0x97, 0xc, 0x97, 0xe, 
       0x97, 0x8ad, 0xb, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x98, 0x3, 0x98, 
       0x3, 0x98, 0x3, 0x99, 0x6, 0x99, 0x8b5, 0xa, 0x99, 0xd, 0x99, 0xe, 
       0x99, 0x8b6, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 
       0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x5, 0x9a, 
       0x8c3, 0xa, 0x9a, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9c, 0x3, 0x9c, 0x3, 
       0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9d, 0x3, 0x9d, 0x3, 
       0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9e, 0x3, 0x9e, 0x3, 
       0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 
       0x9f, 0x3, 0x9f, 0x5, 0x9f, 0x8dd, 0xa, 0x9f, 0x3, 0xa0, 0x3, 0xa0, 
       0x5, 0xa0, 0x8e1, 0xa, 0xa0, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x5, 
       0xa1, 0x8e6, 0xa, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x5, 0xa1, 0x8ea, 0xa, 
       0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x5, 0xa1, 0x8ee, 0xa, 0xa1, 0x3, 0xa1, 
       0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x5, 0xa2, 
       0x8f6, 0xa, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x5, 0xa2, 0x8fa, 0xa, 0xa2, 
       0x3, 0xa2, 0x3, 0xa2, 0x5, 0xa2, 0x8fe, 0xa, 0xa2, 0x3, 0xa2, 0x3, 
       0xa2, 0x3, 0xa2, 0x3, 0xa3, 0x3, 0xa3, 0x5, 0xa3, 0x905, 0xa, 0xa3, 
       0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x7, 0xa5, 
       0x90c, 0xa, 0xa5, 0xc, 0xa5, 0xe, 0xa5, 0x90f, 0xb, 0xa5, 0x3, 0xa6, 
       0x3, 0xa6, 0x3, 0xa6, 0x7, 0xa6, 0x914, 0xa, 0xa6, 0xc, 0xa6, 0xe, 
       0xa6, 0x917, 0xb, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 
       0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa7, 
       0x7, 0xa7, 0x923, 0xa, 0xa7, 0xc, 0xa7, 0xe, 0xa7, 0x926, 0xb, 0xa7, 
       0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa7, 
       0x3, 0xa7, 0x3, 0xa8, 0x3, 0xa8, 0x5, 0xa8, 0x931, 0xa, 0xa8, 0x3, 
       0xa8, 0x3, 0xa8, 0x3, 0xa9, 0x3, 0xa9, 0x5, 0xa9, 0x937, 0xa, 0xa9, 
       0x3, 0xa9, 0x3, 0xa9, 0x3, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0x93d, 0xa, 
       0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 
       0xab, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 
       0xac, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 
       0xad, 0x3, 0xad, 0x5, 0xad, 0x952, 0xa, 0xad, 0x3, 0xad, 0x3, 0xad, 
       0x3, 0xad, 0x5, 0xad, 0x957, 0xa, 0xad, 0x3, 0xae, 0x6, 0xae, 0x95a, 
       0xa, 0xae, 0xd, 0xae, 0xe, 0xae, 0x95b, 0x3, 0xaf, 0x3, 0xaf, 0x3, 
       0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xb0, 0x7, 0xb0, 0x965, 
       0xa, 0xb0, 0xc, 0xb0, 0xe, 0xb0, 0x968, 0xb, 0xb0, 0x3, 0xb0, 0x3, 
       0xb0, 0x3, 0xb0, 0x3, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x7, 0xb1, 0x970, 
       0xa, 0xb1, 0xc, 0xb1, 0xe, 0xb1, 0x973, 0xb, 0xb1, 0x3, 0xb2, 0x3, 
       0xb2, 0x3, 0xb2, 0x3, 0xb3, 0x3, 0xb3, 0x3, 0xb3, 0x3, 0xb3, 0x5, 
       0xb3, 0x97c, 0xa, 0xb3, 0x3, 0xb3, 0x5, 0xb3, 0x97f, 0xa, 0xb3, 0x3, 
       0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x5, 0xb4, 0x984, 0xa, 0xb4, 0x3, 0xb4, 
       0x3, 0xb4, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x7, 0xb5, 0x98b, 0xa, 
       0xb5, 0xc, 0xb5, 0xe, 0xb5, 0x98e, 0xb, 0xb5, 0x3, 0xb6, 0x7, 0xb6, 
       0x991, 0xa, 0xb6, 0xc, 0xb6, 0xe, 0xb6, 0x994, 0xb, 0xb6, 0x3, 0xb6, 
       0x3, 0xb6, 0x3, 0xb6, 0x3, 0xb6, 0x3, 0xb6, 0x3, 0xb6, 0x5, 0xb6, 
       0x99c, 0xa, 0xb6, 0x3, 0xb7, 0x3, 0xb7, 0x5, 0xb7, 0x9a0, 0xa, 0xb7, 
       0x3, 0xb8, 0x3, 0xb8, 0x5, 0xb8, 0x9a4, 0xa, 0xb8, 0x3, 0xb8, 0x7, 
       0xb8, 0x9a7, 0xa, 0xb8, 0xc, 0xb8, 0xe, 0xb8, 0x9aa, 0xb, 0xb8, 0x3, 
       0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 
       0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 
       0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x5, 0xb9, 0x9bc, 0xa, 0xb9, 
       0x3, 0xba, 0x3, 0xba, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 
       0x7, 0xbb, 0x9c4, 0xa, 0xbb, 0xc, 0xbb, 0xe, 0xbb, 0x9c7, 0xb, 0xbb, 
       0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 
       0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 
       0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 
       0x3, 0xbb, 0x5, 0xbb, 0x9dc, 0xa, 0xbb, 0x3, 0xbc, 0x3, 0xbc, 0x3, 
       0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x5, 0xbc, 0x9e3, 0xa, 0xbc, 0x3, 0xbd, 
       0x3, 0xbd, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x5, 0xbe, 
       0x9eb, 0xa, 0xbe, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x7, 
       0xbf, 0x9f1, 0xa, 0xbf, 0xc, 0xbf, 0xe, 0xbf, 0x9f4, 0xb, 0xbf, 0x3, 
       0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x7, 
       0xbf, 0x9fc, 0xa, 0xbf, 0xc, 0xbf, 0xe, 0xbf, 0x9ff, 0xb, 0xbf, 0x3, 
       0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 
       0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 
       0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 
       0xbf, 0x3, 0xbf, 0x5, 0xbf, 0xa15, 0xa, 0xbf, 0x3, 0xc0, 0x3, 0xc0, 
       0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x7, 0xc1, 0xa1d, 0xa, 
       0xc1, 0xc, 0xc1, 0xe, 0xc1, 0xa20, 0xb, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 
       0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x7, 0xc1, 0xa28, 0xa, 
       0xc1, 0xc, 0xc1, 0xe, 0xc1, 0xa2b, 0xb, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 
       0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 
       0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 
       0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x5, 0xc1, 
       0xa40, 0xa, 0xc1, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x5, 0xc2, 0xa45, 
       0xa, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x7, 0xc2, 0xa49, 0xa, 0xc2, 0xc, 
       0xc2, 0xe, 0xc2, 0xa4c, 0xb, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 
       0x3, 0xc2, 0x3, 0xc2, 0x5, 0xc2, 0xa53, 0xa, 0xc2, 0x3, 0xc3, 0x3, 
       0xc3, 0x5, 0xc3, 0xa57, 0xa, 0xc3, 0x3, 0xc3, 0x7, 0xc3, 0xa5a, 0xa, 
       0xc3, 0xc, 0xc3, 0xe, 0xc3, 0xa5d, 0xb, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 
       0x3, 0xc3, 0x7, 0xc3, 0xa62, 0xa, 0xc3, 0xc, 0xc3, 0xe, 0xc3, 0xa65, 
       0xb, 0xc3, 0x3, 0xc3, 0x7, 0xc3, 0xa68, 0xa, 0xc3, 0xc, 0xc3, 0xe, 
       0xc3, 0xa6b, 0xb, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0xa6e, 0xa, 0xc3, 0x3, 
       0xc3, 0x3, 0xc3, 0x5, 0xc3, 0xa72, 0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 
       0x5, 0xc3, 0xa76, 0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 
       0xc3, 0x5, 0xc3, 0xa7c, 0xa, 0xc3, 0x3, 0xc3, 0x7, 0xc3, 0xa7f, 0xa, 
       0xc3, 0xc, 0xc3, 0xe, 0xc3, 0xa82, 0xb, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 
       0x5, 0xc3, 0xa86, 0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0xa8a, 
       0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0xa8e, 0xa, 0xc3, 0x3, 
       0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0xa94, 0xa, 0xc3, 
       0x3, 0xc3, 0x7, 0xc3, 0xa97, 0xa, 0xc3, 0xc, 0xc3, 0xe, 0xc3, 0xa9a, 
       0xb, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0xa9e, 0xa, 0xc3, 0x3, 
       0xc3, 0x3, 0xc3, 0x5, 0xc3, 0xaa2, 0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 
       0x5, 0xc3, 0xaa6, 0xa, 0xc3, 0x5, 0xc3, 0xaa8, 0xa, 0xc3, 0x3, 0xc4, 
       0x3, 0xc4, 0x3, 0xc4, 0x5, 0xc4, 0xaad, 0xa, 0xc4, 0x3, 0xc4, 0x7, 
       0xc4, 0xab0, 0xa, 0xc4, 0xc, 0xc4, 0xe, 0xc4, 0xab3, 0xb, 0xc4, 0x3, 
       0xc4, 0x3, 0xc4, 0x5, 0xc4, 0xab7, 0xa, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 
       0x5, 0xc4, 0xabb, 0xa, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x5, 0xc4, 0xabf, 
       0xa, 0xc4, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0xac3, 0xa, 0xc5, 0x3, 
       0xc5, 0x7, 0xc5, 0xac6, 0xa, 0xc5, 0xc, 0xc5, 0xe, 0xc5, 0xac9, 0xb, 
       0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x7, 0xc5, 0xace, 0xa, 0xc5, 
       0xc, 0xc5, 0xe, 0xc5, 0xad1, 0xb, 0xc5, 0x3, 0xc5, 0x7, 0xc5, 0xad4, 
       0xa, 0xc5, 0xc, 0xc5, 0xe, 0xc5, 0xad7, 0xb, 0xc5, 0x3, 0xc5, 0x5, 
       0xc5, 0xada, 0xa, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0xade, 0xa, 
       0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0xae2, 0xa, 0xc5, 0x3, 0xc5, 
       0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0xae8, 0xa, 0xc5, 0x3, 
       0xc5, 0x7, 0xc5, 0xaeb, 0xa, 0xc5, 0xc, 0xc5, 0xe, 0xc5, 0xaee, 0xb, 
       0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0xaf2, 0xa, 0xc5, 0x3, 0xc5, 
       0x3, 0xc5, 0x5, 0xc5, 0xaf6, 0xa, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x5, 
       0xc5, 0xafa, 0xa, 0xc5, 0x5, 0xc5, 0xafc, 0xa, 0xc5, 0x3, 0xc6, 0x3, 
       0xc6, 0x3, 0xc6, 0x5, 0xc6, 0xb01, 0xa, 0xc6, 0x3, 0xc7, 0x3, 0xc7, 
       0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 
       0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x5, 0xc7, 
       0xb10, 0xa, 0xc7, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc9, 0x3, 
       0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 
       0xc9, 0x3, 0xc9, 0x5, 0xc9, 0xb1e, 0xa, 0xc9, 0x3, 0xca, 0x3, 0xca, 
       0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 
       0x3, 0xca, 0x3, 0xca, 0x5, 0xca, 0xb2a, 0xa, 0xca, 0x3, 0xca, 0x3, 
       0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x7, 0xca, 0xb31, 0xa, 0xca, 
       0xc, 0xca, 0xe, 0xca, 0xb34, 0xb, 0xca, 0x3, 0xcb, 0x3, 0xcb, 0x3, 
       0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x3, 
       0xcb, 0x3, 0xcb, 0x7, 0xcb, 0xb40, 0xa, 0xcb, 0xc, 0xcb, 0xe, 0xcb, 
       0xb43, 0xb, 0xcb, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 
       0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x5, 
       0xcc, 0xb4f, 0xa, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 
       0x3, 0xcc, 0x7, 0xcc, 0xb56, 0xa, 0xcc, 0xc, 0xcc, 0xe, 0xcc, 0xb59, 
       0xb, 0xcc, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0xb5e, 0xa, 
       0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 
       0xcd, 0xb65, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 
       0xb6a, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 
       0xcd, 0x5, 0xcd, 0xb71, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 
       0x5, 0xcd, 0xb76, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 
       0xcd, 0x3, 0xcd, 0x5, 0xcd, 0xb7d, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 
       0x3, 0xcd, 0x5, 0xcd, 0xb82, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 
       0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0xb89, 0xa, 0xcd, 0x3, 0xcd, 
       0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0xb8e, 0xa, 0xcd, 0x3, 0xcd, 0x3, 
       0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 
       0xcd, 0xb97, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 
       0xb9c, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0xba0, 0xa, 0xcd, 
       0x3, 0xce, 0x3, 0xce, 0x5, 0xce, 0xba4, 0xa, 0xce, 0x3, 0xce, 0x3, 
       0xce, 0x3, 0xce, 0x5, 0xce, 0xba9, 0xa, 0xce, 0x3, 0xce, 0x3, 0xce, 
       0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0xbb0, 0xa, 0xcf, 0x3, 
       0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0xbb7, 
       0xa, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0xbbc, 0xa, 
       0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 
       0xcf, 0xbc3, 0xa, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 
       0xbc8, 0xa, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 
       0xcf, 0x5, 0xcf, 0xbcf, 0xa, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 
       0x5, 0xcf, 0xbd4, 0xa, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 
       0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0xbdd, 0xa, 0xcf, 
       0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0xbe2, 0xa, 0xcf, 0x3, 
       0xcf, 0x3, 0xcf, 0x5, 0xcf, 0xbe6, 0xa, 0xcf, 0x3, 0xd0, 0x3, 0xd0, 
       0x3, 0xd0, 0x7, 0xd0, 0xbeb, 0xa, 0xd0, 0xc, 0xd0, 0xe, 0xd0, 0xbee, 
       0xb, 0xd0, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0xbf3, 0xa, 
       0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x5, 
       0xd1, 0xbfa, 0xa, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 
       0x3, 0xd1, 0x5, 0xd1, 0xc01, 0xa, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 
       0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0xc08, 0xa, 0xd1, 0x3, 0xd1, 
       0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 
       0xc10, 0xa, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 
       0xd1, 0x5, 0xd1, 0xc17, 0xa, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 
       0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0xc1f, 0xa, 0xd1, 0x3, 
       0xd2, 0x3, 0xd2, 0x5, 0xd2, 0xc23, 0xa, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 
       0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xc2a, 0xa, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xc31, 
       0xa, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 
       0x5, 0xd3, 0xc38, 0xa, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xc40, 0xa, 0xd3, 0x3, 0xd3, 
       0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xc47, 0xa, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x5, 0xd3, 0xc4f, 0xa, 0xd3, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 
       0x3, 0xd4, 0x5, 0xd4, 0xc55, 0xa, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 
       0xd4, 0x3, 0xd4, 0x5, 0xd4, 0xc5b, 0xa, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 
       0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 
       0x3, 0xd4, 0x3, 0xd4, 0x5, 0xd4, 0xc67, 0xa, 0xd4, 0x3, 0xd5, 0x6, 
       0xd5, 0xc6a, 0xa, 0xd5, 0xd, 0xd5, 0xe, 0xd5, 0xc6b, 0x3, 0xd6, 0x7, 
       0xd6, 0xc6f, 0xa, 0xd6, 0xc, 0xd6, 0xe, 0xd6, 0xc72, 0xb, 0xd6, 0x3, 
       0xd6, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd7, 0x3, 0xd7, 0x3, 
       0xd8, 0x3, 0xd8, 0x5, 0xd8, 0xc7c, 0xa, 0xd8, 0x3, 0xd9, 0x3, 0xd9, 
       0x3, 0xd9, 0x3, 0xd9, 0x3, 0xda, 0x3, 0xda, 0x3, 0xda, 0x5, 0xda, 
       0xc85, 0xa, 0xda, 0x3, 0xda, 0x3, 0xda, 0x3, 0xda, 0x3, 0xda, 0x3, 
       0xda, 0x5, 0xda, 0xc8c, 0xa, 0xda, 0x3, 0xdb, 0x3, 0xdb, 0x3, 0xdb, 
       0x7, 0xdb, 0xc91, 0xa, 0xdb, 0xc, 0xdb, 0xe, 0xdb, 0xc94, 0xb, 0xdb, 
       0x3, 0xdc, 0x3, 0xdc, 0x5, 0xdc, 0xc98, 0xa, 0xdc, 0x3, 0xdd, 0x3, 
       0xdd, 0x5, 0xdd, 0xc9c, 0xa, 0xdd, 0x3, 0xde, 0x3, 0xde, 0x3, 0xde, 
       0x3, 0xde, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x5, 0xdf, 0xca5, 0xa, 
       0xdf, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe1, 0x3, 0xe1, 0x3, 0xe1, 0x3, 
       0xe1, 0x3, 0xe1, 0x3, 0xe1, 0x3, 0xe1, 0x5, 0xe1, 0xcb0, 0xa, 0xe1, 
       0x5, 0xe1, 0xcb2, 0xa, 0xe1, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x3, 
       0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x7, 0xe2, 0xcba, 0xa, 0xe2, 0xc, 0xe2, 
       0xe, 0xe2, 0xcbd, 0xb, 0xe2, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 
       0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x7, 0xe3, 0xcc5, 0xa, 0xe3, 0xc, 0xe3, 
       0xe, 0xe3, 0xcc8, 0xb, 0xe3, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 
       0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x7, 0xe4, 0xcd0, 0xa, 0xe4, 0xc, 0xe4, 
       0xe, 0xe4, 0xcd3, 0xb, 0xe4, 0x3, 0xe5, 0x3, 0xe5, 0x3, 0xe5, 0x3, 
       0xe5, 0x3, 0xe5, 0x3, 0xe5, 0x7, 0xe5, 0xcdb, 0xa, 0xe5, 0xc, 0xe5, 
       0xe, 0xe5, 0xcde, 0xb, 0xe5, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 
       0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x7, 0xe6, 0xce6, 0xa, 0xe6, 0xc, 0xe6, 
       0xe, 0xe6, 0xce9, 0xb, 0xe6, 0x3, 0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x3, 
       0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x7, 
       0xe7, 0xcf4, 0xa, 0xe7, 0xc, 0xe7, 0xe, 0xe7, 0xcf7, 0xb, 0xe7, 0x3, 
       0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 
       0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 
       0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x7, 
       0xe8, 0xd0b, 0xa, 0xe8, 0xc, 0xe8, 0xe, 0xe8, 0xd0e, 0xb, 0xe8, 0x3, 
       0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 
       0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 
       0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x7, 0xe9, 0xd20, 0xa, 0xe9, 
       0xc, 0xe9, 0xe, 0xe9, 0xd23, 0xb, 0xe9, 0x3, 0xea, 0x3, 0xea, 0x3, 
       0xea, 0x3, 0xea, 0x3, 0xea, 0x3, 0xea, 0x3, 0xea, 0x3, 0xea, 0x3, 
       0xea, 0x7, 0xea, 0xd2e, 0xa, 0xea, 0xc, 0xea, 0xe, 0xea, 0xd31, 0xb, 
       0xea, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 
       0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 
       0xeb, 0x7, 0xeb, 0xd3f, 0xa, 0xeb, 0xc, 0xeb, 0xe, 0xeb, 0xd42, 0xb, 
       0xeb, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 
       0xec, 0x3, 0xec, 0x5, 0xec, 0xd4b, 0xa, 0xec, 0x3, 0xed, 0x3, 0xed, 
       0x3, 0xed, 0x3, 0xee, 0x3, 0xee, 0x3, 0xee, 0x3, 0xef, 0x3, 0xef, 
       0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x5, 0xef, 0xd59, 0xa, 
       0xef, 0x3, 0xf0, 0x3, 0xf0, 0x5, 0xf0, 0xd5d, 0xa, 0xf0, 0x3, 0xf0, 
       0x3, 0xf0, 0x7, 0xf0, 0xd61, 0xa, 0xf0, 0xc, 0xf0, 0xe, 0xf0, 0xd64, 
       0xb, 0xf0, 0x3, 0xf1, 0x3, 0xf1, 0x3, 0xf1, 0x3, 0xf2, 0x3, 0xf2, 
       0x3, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x3, 0xf4, 0x3, 0xf4, 0x3, 0xf5, 
       0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 
       0x3, 0xf5, 0x7, 0xf5, 0xd78, 0xa, 0xf5, 0xc, 0xf5, 0xe, 0xf5, 0xd7b, 
       0xb, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 
       0x3, 0xf5, 0x7, 0xf5, 0xd83, 0xa, 0xf5, 0xc, 0xf5, 0xe, 0xf5, 0xd86, 
       0xb, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x5, 0xf5, 0xd8b, 0xa, 
       0xf5, 0x3, 0xf6, 0x3, 0xf6, 0x3, 0xf6, 0x3, 0xf6, 0x3, 0xf6, 0x3, 
       0xf6, 0x3, 0xf6, 0x3, 0xf6, 0x3, 0xf6, 0x3, 0xf6, 0x3, 0xf6, 0x3, 
       0xf6, 0x5, 0xf6, 0xd99, 0xa, 0xf6, 0x3, 0xf7, 0x7, 0xf7, 0xd9c, 0xa, 
       0xf7, 0xc, 0xf7, 0xe, 0xf7, 0xd9f, 0xb, 0xf7, 0x3, 0xf7, 0x3, 0xf7, 
       0x3, 0xf7, 0x3, 0xf7, 0x7, 0xf7, 0xda5, 0xa, 0xf7, 0xc, 0xf7, 0xe, 
       0xf7, 0xda8, 0xb, 0xf7, 0x3, 0xf7, 0x3, 0xf7, 0x5, 0xf7, 0xdac, 0xa, 
       0xf7, 0x3, 0xf8, 0x3, 0xf8, 0x3, 0xf8, 0x3, 0xf8, 0x3, 0xf8, 0x3, 
       0xf8, 0x5, 0xf8, 0xdb4, 0xa, 0xf8, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 
       0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 
       0x3, 0xf9, 0x5, 0xf9, 0xdc0, 0xa, 0xf9, 0x3, 0xfa, 0x3, 0xfa, 0x3, 
       0xfa, 0x3, 0xfa, 0x5, 0xfa, 0xdc6, 0xa, 0xfa, 0x3, 0xfb, 0x3, 0xfb, 
       0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 
       0x3, 0xfb, 0x5, 0xfb, 0xdd1, 0xa, 0xfb, 0x3, 0xfc, 0x3, 0xfc, 0x3, 
       0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x5, 0xfc, 0xdd9, 0xa, 0xfc, 
       0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 
       0x7, 0xfc, 0xde1, 0xa, 0xfc, 0xc, 0xfc, 0xe, 0xfc, 0xde4, 0xb, 0xfc, 
       0x3, 0xfd, 0x7, 0xfd, 0xde7, 0xa, 0xfd, 0xc, 0xfd, 0xe, 0xfd, 0xdea, 
       0xb, 0xfd, 0x3, 0xfd, 0x3, 0xfd, 0x5, 0xfd, 0xdee, 0xa, 0xfd, 0x3, 
       0xfd, 0x3, 0xfd, 0x3, 0xfd, 0x3, 0xfd, 0x3, 0xfd, 0x7, 0xfd, 0xdf5, 
       0xa, 0xfd, 0xc, 0xfd, 0xe, 0xfd, 0xdf8, 0xb, 0xfd, 0x3, 0xfd, 0x3, 
       0xfd, 0x5, 0xfd, 0xdfc, 0xa, 0xfd, 0x3, 0xfd, 0x3, 0xfd, 0x5, 0xfd, 
       0xe00, 0xa, 0xfd, 0x3, 0xfe, 0x3, 0xfe, 0x7, 0xfe, 0xe04, 0xa, 0xfe, 
       0xc, 0xfe, 0xe, 0xfe, 0xe07, 0xb, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x5, 
       0xfe, 0xe0b, 0xa, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x3, 0xff, 0x7, 0xff, 
       0xe10, 0xa, 0xff, 0xc, 0xff, 0xe, 0xff, 0xe13, 0xb, 0xff, 0x3, 0xff, 
       0x3, 0xff, 0x5, 0xff, 0xe17, 0xa, 0xff, 0x3, 0xff, 0x3, 0xff, 0x3, 
       0x100, 0x3, 0x100, 0x3, 0x100, 0x3, 0x101, 0x3, 0x101, 0x3, 0x101, 
       0x3, 0x102, 0x3, 0x102, 0x3, 0x102, 0x3, 0x103, 0x7, 0x103, 0xe25, 
       0xa, 0x103, 0xc, 0x103, 0xe, 0x103, 0xe28, 0xb, 0x103, 0x3, 0x103, 
       0x3, 0x103, 0x3, 0x103, 0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 0x3, 
       0x104, 0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 
       0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 0x5, 0x104, 0xe39, 0xa, 0x104, 
       0x3, 0x105, 0x7, 0x105, 0xe3c, 0xa, 0x105, 0xc, 0x105, 0xe, 0x105, 
       0xe3f, 0xb, 0x105, 0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 0x7, 0x105, 
       0xe44, 0xa, 0x105, 0xc, 0x105, 0xe, 0x105, 0xe47, 0xb, 0x105, 0x3, 
       0x105, 0x3, 0x105, 0x7, 0x105, 0xe4b, 0xa, 0x105, 0xc, 0x105, 0xe, 
       0x105, 0xe4e, 0xb, 0x105, 0x3, 0x105, 0x3, 0x105, 0x3, 0x106, 0x7, 
       0x106, 0xe53, 0xa, 0x106, 0xc, 0x106, 0xe, 0x106, 0xe56, 0xb, 0x106, 
       0x3, 0x106, 0x3, 0x106, 0x5, 0x106, 0xe5a, 0xa, 0x106, 0x3, 0x107, 
       0x3, 0x107, 0x3, 0x107, 0x3, 0x108, 0x3, 0x108, 0x3, 0x108, 0x3, 
       0x108, 0x3, 0x108, 0x3, 0x108, 0x3, 0x108, 0x7, 0x108, 0xe66, 0xa, 
       0x108, 0xc, 0x108, 0xe, 0x108, 0xe69, 0xb, 0x108, 0x3, 0x108, 0x3, 
       0x108, 0x5, 0x108, 0xe6d, 0xa, 0x108, 0x3, 0x109, 0x3, 0x109, 0x3, 
       0x109, 0x3, 0x109, 0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 
       0x3, 0x10a, 0x3, 0x10b, 0x3, 0x10b, 0x3, 0x10b, 0x7, 0x10b, 0xe7b, 
       0xa, 0x10b, 0xc, 0x10b, 0xe, 0x10b, 0xe7e, 0xb, 0x10b, 0x3, 0x10b, 
       0x3, 0x10b, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 
       0x10c, 0x3, 0x10c, 0x5, 0x10c, 0xe88, 0xa, 0x10c, 0x3, 0x10d, 0x7, 
       0x10d, 0xe8b, 0xa, 0x10d, 0xc, 0x10d, 0xe, 0x10d, 0xe8e, 0xb, 0x10d, 
       0x3, 0x10d, 0x3, 0x10d, 0x5, 0x10d, 0xe92, 0xa, 0x10d, 0x3, 0x10d, 
       0x3, 0x10d, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 
       0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x5, 0x10e, 0xe9e, 0xa, 
       0x10e, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 
       0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x5, 0x10f, 0xea8, 0xa, 0x10f, 
       0x3, 0x110, 0x3, 0x110, 0x3, 0x110, 0x3, 0x110, 0x3, 0x110, 0x3, 
       0x110, 0x3, 0x110, 0x3, 0x110, 0x5, 0x110, 0xeb2, 0xa, 0x110, 0x3, 
       0x111, 0x3, 0x111, 0x3, 0x111, 0x3, 0x111, 0x3, 0x111, 0x3, 0x111, 
       0x3, 0x111, 0x3, 0x111, 0x5, 0x111, 0xebc, 0xa, 0x111, 0x3, 0x112, 
       0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 
       0x112, 0x3, 0x112, 0x5, 0x112, 0xec6, 0xa, 0x112, 0x3, 0x113, 0x3, 
       0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 
       0x3, 0x113, 0x5, 0x113, 0xed0, 0xa, 0x113, 0x3, 0x114, 0x3, 0x114, 
       0x3, 0x114, 0x3, 0x115, 0x3, 0x115, 0x3, 0x115, 0x3, 0x115, 0x3, 
       0x115, 0x3, 0x115, 0x3, 0x115, 0x3, 0x115, 0x5, 0x115, 0xedd, 0xa, 
       0x115, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 
       0x3, 0x116, 0x5, 0x116, 0xee5, 0xa, 0x116, 0x3, 0x117, 0x5, 0x117, 
       0xee8, 0xa, 0x117, 0x3, 0x117, 0x7, 0x117, 0xeeb, 0xa, 0x117, 0xc, 
       0x117, 0xe, 0x117, 0xeee, 0xb, 0x117, 0x3, 0x117, 0x7, 0x117, 0xef1, 
       0xa, 0x117, 0xc, 0x117, 0xe, 0x117, 0xef4, 0xb, 0x117, 0x3, 0x117, 
       0x3, 0x117, 0x3, 0x118, 0x7, 0x118, 0xef9, 0xa, 0x118, 0xc, 0x118, 
       0xe, 0x118, 0xefc, 0xb, 0x118, 0x3, 0x118, 0x3, 0x118, 0x3, 0x118, 
       0x3, 0x119, 0x7, 0x119, 0xf02, 0xa, 0x119, 0xc, 0x119, 0xe, 0x119, 
       0xf05, 0xb, 0x119, 0x3, 0x119, 0x3, 0x119, 0x3, 0x119, 0x3, 0x119, 
       0x3, 0x119, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11b, 0x3, 
       0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 
       0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x5, 
       0x11b, 0xf1b, 0xa, 0x11b, 0x3, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 0x3, 
       0x11c, 0x3, 0x11c, 0x3, 0x11d, 0x3, 0x11d, 0x3, 0x11d, 0x3, 0x11d, 
       0x3, 0x11d, 0x3, 0x11d, 0x3, 0x11d, 0x3, 0x11e, 0x3, 0x11e, 0x3, 
       0x11e, 0x3, 0x11e, 0x3, 0x11e, 0x3, 0x11e, 0x3, 0x11e, 0x3, 0x11e, 
       0x3, 0x11f, 0x3, 0x11f, 0x3, 0x11f, 0x3, 0x11f, 0x3, 0x11f, 0x3, 
       0x11f, 0x3, 0x11f, 0x3, 0x11f, 0x3, 0x120, 0x3, 0x120, 0x3, 0x120, 
       0x3, 0x120, 0x3, 0x120, 0x3, 0x120, 0x3, 0x120, 0x3, 0x120, 0x5, 
       0x120, 0xf41, 0xa, 0x120, 0x3, 0x121, 0x7, 0x121, 0xf44, 0xa, 0x121, 
       0xc, 0x121, 0xe, 0x121, 0xf47, 0xb, 0x121, 0x3, 0x121, 0x5, 0x121, 
       0xf4a, 0xa, 0x121, 0x3, 0x121, 0x3, 0x121, 0x3, 0x121, 0x3, 0x121, 
       0x7, 0x121, 0xf50, 0xa, 0x121, 0xc, 0x121, 0xe, 0x121, 0xf53, 0xb, 
       0x121, 0x3, 0x121, 0x3, 0x121, 0x3, 0x121, 0x3, 0x122, 0x3, 0x122, 
       0x7, 0x122, 0xf5a, 0xa, 0x122, 0xc, 0x122, 0xe, 0x122, 0xf5d, 0xb, 
       0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 
       0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x7, 
       0x122, 0xf69, 0xa, 0x122, 0xc, 0x122, 0xe, 0x122, 0xf6c, 0xb, 0x122, 
       0x5, 0x122, 0xf6e, 0xa, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 
       0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 
       0x122, 0x7, 0x122, 0xf79, 0xa, 0x122, 0xc, 0x122, 0xe, 0x122, 0xf7c, 
       0xb, 0x122, 0x5, 0x122, 0xf7e, 0xa, 0x122, 0x3, 0x122, 0x3, 0x122, 
       0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 
       0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 
       0x3, 0x122, 0x7, 0x122, 0xf8e, 0xa, 0x122, 0xc, 0x122, 0xe, 0x122, 
       0xf91, 0xb, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 0x5, 0x122, 
       0xf96, 0xa, 0x122, 0x3, 0x123, 0x3, 0x123, 0x3, 0x123, 0x3, 0x123, 
       0x5, 0x123, 0xf9c, 0xa, 0x123, 0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 
       0x3, 0x124, 0x3, 0x124, 0x3, 0x124, 0x5, 0x124, 0xfa4, 0xa, 0x124, 
       0x3, 0x125, 0x7, 0x125, 0xfa7, 0xa, 0x125, 0xc, 0x125, 0xe, 0x125, 
       0xfaa, 0xb, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 0x5, 0x125, 
       0xfaf, 0xa, 0x125, 0x3, 0x125, 0x5, 0x125, 0xfb2, 0xa, 0x125, 0x3, 
       0x125, 0x5, 0x125, 0xfb5, 0xa, 0x125, 0x3, 0x125, 0x3, 0x125, 0x3, 
       0x125, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 
       0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 
       0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 
       0x3, 0x126, 0x5, 0x126, 0xfcb, 0xa, 0x126, 0x3, 0x127, 0x3, 0x127, 
       0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x128, 0x3, 0x128, 0x3, 
       0x128, 0x7, 0x128, 0xfd5, 0xa, 0x128, 0xc, 0x128, 0xe, 0x128, 0xfd8, 
       0xb, 0x128, 0x3, 0x128, 0x3, 0x128, 0x3, 0x129, 0x3, 0x129, 0x3, 
       0x129, 0x3, 0x129, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 0x3, 0x12a, 
       0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x7, 0x12b, 0xfe7, 0xa, 0x12b, 
       0xc, 0x12b, 0xe, 0x12b, 0xfea, 0xb, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 
       0x3, 0x12c, 0x3, 0x12c, 0x7, 0x12c, 0xff0, 0xa, 0x12c, 0xc, 0x12c, 
       0xe, 0x12c, 0xff3, 0xb, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 
       0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x3, 
       0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 
       0x3, 0x12d, 0x5, 0x12d, 0x1004, 0xa, 0x12d, 0x3, 0x12e, 0x3, 0x12e, 
       0x3, 0x12e, 0x3, 0x12e, 0x3, 0x12e, 0x3, 0x12e, 0x3, 0x12e, 0x3, 
       0x12e, 0x3, 0x12e, 0x3, 0x12e, 0x3, 0x12e, 0x3, 0x12e, 0x3, 0x12e, 
       0x3, 0x12e, 0x5, 0x12e, 0x1014, 0xa, 0x12e, 0x3, 0x12f, 0x7, 0x12f, 
       0x1017, 0xa, 0x12f, 0xc, 0x12f, 0xe, 0x12f, 0x101a, 0xb, 0x12f, 0x3, 
       0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x130, 
       0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 
       0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 
       0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x5, 
       0x130, 0x1032, 0xa, 0x130, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x7, 
       0x131, 0x1037, 0xa, 0x131, 0xc, 0x131, 0xe, 0x131, 0x103a, 0xb, 0x131, 
       0x3, 0x131, 0x3, 0x131, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x5, 
       0x132, 0x1041, 0xa, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x133, 0x3, 
       0x133, 0x5, 0x133, 0x1047, 0xa, 0x133, 0x3, 0x133, 0x3, 0x133, 0x3, 
       0x134, 0x3, 0x134, 0x3, 0x134, 0x3, 0x134, 0x3, 0x134, 0x3, 0x134, 
       0x5, 0x134, 0x1051, 0xa, 0x134, 0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 
       0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 0x5, 0x135, 0x1059, 0xa, 0x135, 
       0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x5, 
       0x136, 0x1060, 0xa, 0x136, 0x3, 0x137, 0x3, 0x137, 0x3, 0x137, 0x3, 
       0x137, 0x3, 0x137, 0x3, 0x137, 0x3, 0x137, 0x3, 0x137, 0x3, 0x137, 
       0x5, 0x137, 0x106b, 0xa, 0x137, 0x3, 0x138, 0x3, 0x138, 0x3, 0x138, 
       0x3, 0x138, 0x3, 0x138, 0x3, 0x138, 0x5, 0x138, 0x1073, 0xa, 0x138, 
       0x3, 0x138, 0x3, 0x138, 0x3, 0x138, 0x3, 0x138, 0x3, 0x138, 0x3, 
       0x138, 0x7, 0x138, 0x107b, 0xa, 0x138, 0xc, 0x138, 0xe, 0x138, 0x107e, 
       0xb, 0x138, 0x3, 0x139, 0x3, 0x139, 0x5, 0x139, 0x1082, 0xa, 0x139, 
       0x3, 0x139, 0x3, 0x139, 0x3, 0x139, 0x3, 0x139, 0x3, 0x139, 0x7, 
       0x139, 0x1089, 0xa, 0x139, 0xc, 0x139, 0xe, 0x139, 0x108c, 0xb, 0x139, 
       0x3, 0x139, 0x3, 0x139, 0x5, 0x139, 0x1090, 0xa, 0x139, 0x3, 0x139, 
       0x3, 0x139, 0x5, 0x139, 0x1094, 0xa, 0x139, 0x3, 0x13a, 0x3, 0x13a, 
       0x7, 0x13a, 0x1098, 0xa, 0x13a, 0xc, 0x13a, 0xe, 0x13a, 0x109b, 0xb, 
       0x13a, 0x3, 0x13a, 0x3, 0x13a, 0x5, 0x13a, 0x109f, 0xa, 0x13a, 0x3, 
       0x13a, 0x3, 0x13a, 0x3, 0x13b, 0x3, 0x13b, 0x5, 0x13b, 0x10a5, 0xa, 
       0x13b, 0x3, 0x13b, 0x3, 0x13b, 0x3, 0x13c, 0x3, 0x13c, 0x3, 0x13c, 
       0x3, 0x13d, 0x3, 0x13d, 0x3, 0x13d, 0x3, 0x13e, 0x3, 0x13e, 0x3, 
       0x13e, 0x3, 0x13f, 0x3, 0x13f, 0x3, 0x13f, 0x3, 0x140, 0x3, 0x140, 
       0x3, 0x140, 0x3, 0x140, 0x3, 0x140, 0x3, 0x140, 0x3, 0x140, 0x3, 
       0x140, 0x3, 0x140, 0x3, 0x140, 0x3, 0x140, 0x3, 0x140, 0x5, 0x140, 
       0x10c1, 0xa, 0x140, 0x3, 0x141, 0x7, 0x141, 0x10c4, 0xa, 0x141, 0xc, 
       0x141, 0xe, 0x141, 0x10c7, 0xb, 0x141, 0x3, 0x141, 0x3, 0x141, 0x3, 
       0x141, 0x3, 0x141, 0x3, 0x142, 0x3, 0x142, 0x3, 0x142, 0x3, 0x142, 
       0x3, 0x142, 0x3, 0x142, 0x3, 0x142, 0x3, 0x142, 0x3, 0x142, 0x3, 
       0x142, 0x3, 0x142, 0x3, 0x142, 0x3, 0x142, 0x3, 0x142, 0x3, 0x142, 
       0x3, 0x142, 0x3, 0x142, 0x3, 0x142, 0x3, 0x142, 0x3, 0x142, 0x3, 
       0x142, 0x5, 0x142, 0x10e2, 0xa, 0x142, 0x3, 0x143, 0x3, 0x143, 0x3, 
       0x143, 0x5, 0x143, 0x10e7, 0xa, 0x143, 0x3, 0x143, 0x3, 0x143, 0x3, 
       0x143, 0x3, 0x143, 0x7, 0x143, 0x10ed, 0xa, 0x143, 0xc, 0x143, 0xe, 
       0x143, 0x10f0, 0xb, 0x143, 0x3, 0x143, 0x3, 0x143, 0x3, 0x143, 0x5, 
       0x143, 0x10f5, 0xa, 0x143, 0x3, 0x143, 0x3, 0x143, 0x5, 0x143, 0x10f9, 
       0xa, 0x143, 0x3, 0x144, 0x3, 0x144, 0x3, 0x144, 0x3, 0x144, 0x3, 
       0x144, 0x5, 0x144, 0x1100, 0xa, 0x144, 0x3, 0x145, 0x3, 0x145, 0x3, 
       0x145, 0x5, 0x145, 0x1105, 0xa, 0x145, 0x3, 0x145, 0x3, 0x145, 0x5, 
       0x145, 0x1109, 0xa, 0x145, 0x3, 0x145, 0x3, 0x145, 0x3, 0x146, 0x3, 
       0x146, 0x3, 0x146, 0x3, 0x146, 0x3, 0x146, 0x3, 0x146, 0x3, 0x146, 
       0x3, 0x146, 0x3, 0x146, 0x3, 0x146, 0x3, 0x146, 0x5, 0x146, 0x1118, 
       0xa, 0x146, 0x3, 0x147, 0x3, 0x147, 0x3, 0x147, 0x7, 0x147, 0x111d, 
       0xa, 0x147, 0xc, 0x147, 0xe, 0x147, 0x1120, 0xb, 0x147, 0x3, 0x147, 
       0x3, 0x147, 0x3, 0x147, 0x3, 0x147, 0x3, 0x147, 0x7, 0x147, 0x1127, 
       0xa, 0x147, 0xc, 0x147, 0xe, 0x147, 0x112a, 0xb, 0x147, 0x3, 0x147, 
       0x3, 0x147, 0x5, 0x147, 0x112e, 0xa, 0x147, 0x3, 0x148, 0x7, 0x148, 
       0x1131, 0xa, 0x148, 0xc, 0x148, 0xe, 0x148, 0x1134, 0xb, 0x148, 0x3, 
       0x148, 0x3, 0x148, 0x3, 0x148, 0x3, 0x148, 0x3, 0x149, 0x3, 0x149, 
       0x3, 0x149, 0x3, 0x149, 0x3, 0x149, 0x5, 0x149, 0x113f, 0xa, 0x149, 
       0x3, 0x14a, 0x7, 0x14a, 0x1142, 0xa, 0x14a, 0xc, 0x14a, 0xe, 0x14a, 
       0x1145, 0xb, 0x14a, 0x3, 0x14a, 0x3, 0x14a, 0x7, 0x14a, 0x1149, 0xa, 
       0x14a, 0xc, 0x14a, 0xe, 0x14a, 0x114c, 0xb, 0x14a, 0x3, 0x14a, 0x3, 
       0x14a, 0x3, 0x14a, 0x3, 0x14a, 0x3, 0x14a, 0x3, 0x14a, 0x3, 0x14a, 
       0x5, 0x14a, 0x1155, 0xa, 0x14a, 0x3, 0x14b, 0x7, 0x14b, 0x1158, 0xa, 
       0x14b, 0xc, 0x14b, 0xe, 0x14b, 0x115b, 0xb, 0x14b, 0x3, 0x14b, 0x3, 
       0x14b, 0x3, 0x14b, 0x3, 0x14b, 0x5, 0x14b, 0x1161, 0xa, 0x14b, 0x3, 
       0x14b, 0x3, 0x14b, 0x3, 0x14b, 0x3, 0x14c, 0x3, 0x14c, 0x3, 0x14c, 
       0x3, 0x14c, 0x3, 0x14d, 0x3, 0x14d, 0x3, 0x14d, 0x7, 0x14d, 0x116d, 
       0xa, 0x14d, 0xc, 0x14d, 0xe, 0x14d, 0x1170, 0xb, 0x14d, 0x3, 0x14d, 
       0x3, 0x14d, 0x3, 0x14e, 0x3, 0x14e, 0x3, 0x14e, 0x3, 0x14e, 0x3, 
       0x14e, 0x3, 0x14e, 0x5, 0x14e, 0x117a, 0xa, 0x14e, 0x3, 0x14f, 0x3, 
       0x14f, 0x3, 0x14f, 0x3, 0x14f, 0x3, 0x14f, 0x5, 0x14f, 0x1181, 0xa, 
       0x14f, 0x3, 0x150, 0x3, 0x150, 0x3, 0x150, 0x3, 0x151, 0x3, 0x151, 
       0x3, 0x151, 0x3, 0x151, 0x3, 0x152, 0x7, 0x152, 0x118b, 0xa, 0x152, 
       0xc, 0x152, 0xe, 0x152, 0x118e, 0xb, 0x152, 0x3, 0x152, 0x3, 0x152, 
       0x5, 0x152, 0x1192, 0xa, 0x152, 0x3, 0x152, 0x3, 0x152, 0x3, 0x152, 
       0x3, 0x153, 0x3, 0x153, 0x3, 0x153, 0x3, 0x153, 0x3, 0x153, 0x3, 
       0x153, 0x3, 0x153, 0x3, 0x153, 0x3, 0x153, 0x5, 0x153, 0x11a0, 0xa, 
       0x153, 0x3, 0x154, 0x5, 0x154, 0x11a3, 0xa, 0x154, 0x3, 0x154, 0x3, 
       0x154, 0x3, 0x154, 0x5, 0x154, 0x11a8, 0xa, 0x154, 0x3, 0x154, 0x3, 
       0x154, 0x3, 0x154, 0x3, 0x155, 0x3, 0x155, 0x3, 0x155, 0x3, 0x156, 
       0x3, 0x156, 0x5, 0x156, 0x11b2, 0xa, 0x156, 0x3, 0x156, 0x5, 0x156, 
       0x11b5, 0xa, 0x156, 0x3, 0x156, 0x3, 0x156, 0x3, 0x156, 0x3, 0x157, 
       0x5, 0x157, 0x11bb, 0xa, 0x157, 0x3, 0x157, 0x3, 0x157, 0x3, 0x157, 
       0x5, 0x157, 0x11c0, 0xa, 0x157, 0x3, 0x157, 0x3, 0x157, 0x3, 0x157, 
       0x3, 0x157, 0x5, 0x157, 0x11c6, 0xa, 0x157, 0x3, 0x157, 0x3, 0x157, 
       0x3, 0x157, 0x5, 0x157, 0x11cb, 0xa, 0x157, 0x3, 0x157, 0x3, 0x157, 
       0x3, 0x157, 0x3, 0x157, 0x3, 0x157, 0x3, 0x157, 0x5, 0x157, 0x11d3, 
       0xa, 0x157, 0x3, 0x157, 0x3, 0x157, 0x3, 0x157, 0x5, 0x157, 0x11d8, 
       0xa, 0x157, 0x3, 0x157, 0x3, 0x157, 0x3, 0x157, 0x3, 0x157, 0x3, 
       0x157, 0x3, 0x157, 0x3, 0x157, 0x5, 0x157, 0x11e1, 0xa, 0x157, 0x3, 
       0x157, 0x3, 0x157, 0x3, 0x157, 0x5, 0x157, 0x11e6, 0xa, 0x157, 0x3, 
       0x157, 0x3, 0x157, 0x3, 0x157, 0x3, 0x157, 0x5, 0x157, 0x11ec, 0xa, 
       0x157, 0x3, 0x158, 0x7, 0x158, 0x11ef, 0xa, 0x158, 0xc, 0x158, 0xe, 
       0x158, 0x11f2, 0xb, 0x158, 0x3, 0x158, 0x3, 0x158, 0x3, 0x158, 0x5, 
       0x158, 0x11f7, 0xa, 0x158, 0x3, 0x158, 0x3, 0x158, 0x3, 0x158, 0x3, 
       0x159, 0x3, 0x159, 0x5, 0x159, 0x11fe, 0xa, 0x159, 0x3, 0x159, 0x5, 
       0x159, 0x1201, 0xa, 0x159, 0x3, 0x159, 0x5, 0x159, 0x1204, 0xa, 0x159, 
       0x3, 0x159, 0x3, 0x159, 0x3, 0x159, 0x3, 0x15a, 0x3, 0x15a, 0x3, 
       0x15a, 0x7, 0x15a, 0x120c, 0xa, 0x15a, 0xc, 0x15a, 0xe, 0x15a, 0x120f, 
       0xb, 0x15a, 0x3, 0x15a, 0x3, 0x15a, 0x3, 0x15b, 0x7, 0x15b, 0x1214, 
       0xa, 0x15b, 0xc, 0x15b, 0xe, 0x15b, 0x1217, 0xb, 0x15b, 0x3, 0x15b, 
       0x3, 0x15b, 0x3, 0x15b, 0x5, 0x15b, 0x121c, 0xa, 0x15b, 0x3, 0x15b, 
       0x5, 0x15b, 0x121f, 0xa, 0x15b, 0x3, 0x15b, 0x5, 0x15b, 0x1222, 0xa, 
       0x15b, 0x3, 0x15b, 0x3, 0x15b, 0x3, 0x15c, 0x3, 0x15c, 0x3, 0x15c, 
       0x3, 0x15d, 0x3, 0x15d, 0x7, 0x15d, 0x122b, 0xa, 0x15d, 0xc, 0x15d, 
       0xe, 0x15d, 0x122e, 0xb, 0x15d, 0x3, 0x15d, 0x3, 0x15d, 0x3, 0x15e, 
       0x3, 0x15e, 0x3, 0x15e, 0x3, 0x15e, 0x3, 0x15e, 0x3, 0x15e, 0x5, 
       0x15e, 0x1238, 0xa, 0x15e, 0x3, 0x15f, 0x7, 0x15f, 0x123b, 0xa, 0x15f, 
       0xc, 0x15f, 0xe, 0x15f, 0x123e, 0xb, 0x15f, 0x3, 0x15f, 0x3, 0x15f, 
       0x3, 0x15f, 0x5, 0x15f, 0x1243, 0xa, 0x15f, 0x3, 0x15f, 0x5, 0x15f, 
       0x1246, 0xa, 0x15f, 0x3, 0x15f, 0x3, 0x15f, 0x3, 0x15f, 0x3, 0x160, 
       0x3, 0x160, 0x3, 0x160, 0x3, 0x160, 0x3, 0x160, 0x3, 0x160, 0x3, 
       0x160, 0x3, 0x160, 0x3, 0x160, 0x3, 0x160, 0x3, 0x160, 0x3, 0x160, 
       0x3, 0x160, 0x3, 0x160, 0x3, 0x160, 0x5, 0x160, 0x125a, 0xa, 0x160, 
       0x3, 0x161, 0x3, 0x161, 0x3, 0x161, 0x3, 0x161, 0x3, 0x162, 0x3, 
       0x162, 0x7, 0x162, 0x1262, 0xa, 0x162, 0xc, 0x162, 0xe, 0x162, 0x1265, 
       0xb, 0x162, 0x3, 0x162, 0x3, 0x162, 0x3, 0x162, 0x3, 0x163, 0x3, 
       0x163, 0x3, 0x163, 0x3, 0x163, 0x3, 0x163, 0x3, 0x163, 0x3, 0x163, 
       0x3, 0x163, 0x3, 0x163, 0x3, 0x163, 0x3, 0x163, 0x3, 0x163, 0x3, 
       0x163, 0x3, 0x163, 0x5, 0x163, 0x1278, 0xa, 0x163, 0x3, 0x164, 0x7, 
       0x164, 0x127b, 0xa, 0x164, 0xc, 0x164, 0xe, 0x164, 0x127e, 0xb, 0x164, 
       0x3, 0x164, 0x3, 0x164, 0x3, 0x164, 0x3, 0x164, 0x3, 0x164, 0x3, 
       0x165, 0x3, 0x165, 0x3, 0x165, 0x3, 0x165, 0x3, 0x165, 0x3, 0x165, 
       0x3, 0x165, 0x3, 0x165, 0x3, 0x165, 0x5, 0x165, 0x128e, 0xa, 0x165, 
       0x3, 0x166, 0x7, 0x166, 0x1291, 0xa, 0x166, 0xc, 0x166, 0xe, 0x166, 
       0x1294, 0xb, 0x166, 0x3, 0x166, 0x3, 0x166, 0x3, 0x166, 0x3, 0x166, 
       0x3, 0x167, 0x3, 0x167, 0x3, 0x167, 0x3, 0x167, 0x3, 0x167, 0x3, 
       0x167, 0x3, 0x167, 0x3, 0x167, 0x3, 0x167, 0x3, 0x167, 0x3, 0x167, 
       0x3, 0x167, 0x3, 0x167, 0x3, 0x167, 0x3, 0x167, 0x5, 0x167, 0x12a9, 
       0xa, 0x167, 0x3, 0x168, 0x7, 0x168, 0x12ac, 0xa, 0x168, 0xc, 0x168, 
       0xe, 0x168, 0x12af, 0xb, 0x168, 0x3, 0x168, 0x3, 0x168, 0x3, 0x168, 
       0x3, 0x168, 0x3, 0x168, 0x3, 0x168, 0x3, 0x169, 0x3, 0x169, 0x7, 
       0x169, 0x12b9, 0xa, 0x169, 0xc, 0x169, 0xe, 0x169, 0x12bc, 0xb, 0x169, 
       0x3, 0x169, 0x3, 0x169, 0x3, 0x169, 0x3, 0x16a, 0x3, 0x16a, 0x3, 
       0x16a, 0x3, 0x16a, 0x3, 0x16a, 0x3, 0x16a, 0x3, 0x16a, 0x3, 0x16a, 
       0x3, 0x16a, 0x3, 0x16a, 0x3, 0x16a, 0x3, 0x16a, 0x3, 0x16a, 0x3, 
       0x16a, 0x5, 0x16a, 0x12cf, 0xa, 0x16a, 0x3, 0x16b, 0x7, 0x16b, 0x12d2, 
       0xa, 0x16b, 0xc, 0x16b, 0xe, 0x16b, 0x12d5, 0xb, 0x16b, 0x3, 0x16b, 
       0x3, 0x16b, 0x3, 0x16b, 0x3, 0x16b, 0x3, 0x16b, 0x5, 0x16b, 0x12dc, 
       0xa, 0x16b, 0x3, 0x16b, 0x5, 0x16b, 0x12df, 0xa, 0x16b, 0x3, 0x16b, 
       0x3, 0x16b, 0x3, 0x16b, 0x3, 0x16c, 0x3, 0x16c, 0x3, 0x16c, 0x3, 
       0x16c, 0x3, 0x16c, 0x3, 0x16c, 0x3, 0x16c, 0x5, 0x16c, 0x12eb, 0xa, 
       0x16c, 0x3, 0x16d, 0x3, 0x16d, 0x3, 0x16d, 0x3, 0x16d, 0x3, 0x16e, 
       0x3, 0x16e, 0x3, 0x16e, 0x3, 0x16e, 0x3, 0x16e, 0x3, 0x16e, 0x3, 
       0x16e, 0x3, 0x16e, 0x3, 0x16e, 0x5, 0x16e, 0x12fa, 0xa, 0x16e, 0x3, 
       0x16f, 0x3, 0x16f, 0x3, 0x16f, 0x3, 0x16f, 0x5, 0x16f, 0x1300, 0xa, 
       0x16f, 0x3, 0x16f, 0x3, 0x16f, 0x3, 0x16f, 0x3, 0x170, 0x3, 0x170, 
       0x3, 0x170, 0x7, 0x170, 0x1308, 0xa, 0x170, 0xc, 0x170, 0xe, 0x170, 
       0x130b, 0xb, 0x170, 0x3, 0x170, 0x3, 0x170, 0x3, 0x171, 0x3, 0x171, 
       0x3, 0x171, 0x3, 0x171, 0x3, 0x171, 0x3, 0x172, 0x3, 0x172, 0x3, 
       0x172, 0x3, 0x172, 0x3, 0x172, 0x3, 0x172, 0x3, 0x172, 0x3, 0x172, 
       0x3, 0x172, 0x5, 0x172, 0x131d, 0xa, 0x172, 0x3, 0x173, 0x3, 0x173, 
       0x5, 0x173, 0x1321, 0xa, 0x173, 0x3, 0x173, 0x5, 0x173, 0x1324, 0xa, 
       0x173, 0x3, 0x173, 0x3, 0x173, 0x3, 0x173, 0x3, 0x174, 0x3, 0x174, 
       0x3, 0x174, 0x7, 0x174, 0x132c, 0xa, 0x174, 0xc, 0x174, 0xe, 0x174, 
       0x132f, 0xb, 0x174, 0x3, 0x174, 0x3, 0x174, 0x3, 0x175, 0x3, 0x175, 
       0x3, 0x175, 0x3, 0x175, 0x3, 0x176, 0x3, 0x176, 0x3, 0x176, 0x3, 
       0x176, 0x3, 0x176, 0x3, 0x176, 0x3, 0x176, 0x3, 0x177, 0x3, 0x177, 
       0x5, 0x177, 0x1340, 0xa, 0x177, 0x3, 0x177, 0x5, 0x177, 0x1343, 0xa, 
       0x177, 0x3, 0x177, 0x3, 0x177, 0x3, 0x177, 0x3, 0x178, 0x3, 0x178, 
       0x3, 0x178, 0x7, 0x178, 0x134b, 0xa, 0x178, 0xc, 0x178, 0xe, 0x178, 
       0x134e, 0xb, 0x178, 0x3, 0x178, 0x3, 0x178, 0x3, 0x179, 0x3, 0x179, 
       0x5, 0x179, 0x1354, 0xa, 0x179, 0x3, 0x179, 0x3, 0x179, 0x3, 0x179, 
       0x3, 0x17a, 0x6, 0x17a, 0x135a, 0xa, 0x17a, 0xd, 0x17a, 0xe, 0x17a, 
       0x135b, 0x3, 0x17a, 0x3, 0x17a, 0x3, 0x17b, 0x3, 0x17b, 0x3, 0x17b, 
       0x3, 0x17b, 0x3, 0x17b, 0x3, 0x17b, 0x3, 0x17b, 0x3, 0x17b, 0x3, 
       0x17b, 0x5, 0x17b, 0x1369, 0xa, 0x17b, 0x3, 0x17c, 0x3, 0x17c, 0x3, 
       0x17c, 0x3, 0x17c, 0x3, 0x17d, 0x7, 0x17d, 0x1370, 0xa, 0x17d, 0xc, 
       0x17d, 0xe, 0x17d, 0x1373, 0xb, 0x17d, 0x3, 0x17d, 0x3, 0x17d, 0x3, 
       0x17d, 0x3, 0x17d, 0x3, 0x17e, 0x3, 0x17e, 0x3, 0x17e, 0x3, 0x17e, 
       0x3, 0x17e, 0x3, 0x17e, 0x3, 0x17e, 0x3, 0x17e, 0x3, 0x17e, 0x3, 
       0x17e, 0x3, 0x17e, 0x3, 0x17e, 0x3, 0x17e, 0x3, 0x17e, 0x3, 0x17e, 
       0x3, 0x17e, 0x3, 0x17e, 0x3, 0x17e, 0x5, 0x17e, 0x138b, 0xa, 0x17e, 
       0x3, 0x17f, 0x3, 0x17f, 0x3, 0x17f, 0x3, 0x17f, 0x3, 0x17f, 0x3, 
       0x17f, 0x3, 0x17f, 0x3, 0x17f, 0x3, 0x17f, 0x3, 0x17f, 0x3, 0x17f, 
       0x3, 0x17f, 0x3, 0x17f, 0x3, 0x17f, 0x3, 0x17f, 0x5, 0x17f, 0x139c, 
       0xa, 0x17f, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 
       0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 
       0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 
       0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 
       0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 
       0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 
       0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x3, 0x180, 0x5, 0x180, 0x13c2, 
       0xa, 0x180, 0x3, 0x181, 0x3, 0x181, 0x3, 0x181, 0x3, 0x182, 0x3, 
       0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x182, 0x3, 0x183, 0x3, 0x183, 
       0x3, 0x183, 0x3, 0x183, 0x3, 0x183, 0x3, 0x184, 0x3, 0x184, 0x3, 
       0x184, 0x3, 0x184, 0x3, 0x185, 0x3, 0x185, 0x3, 0x185, 0x3, 0x185, 
       0x3, 0x185, 0x3, 0x185, 0x3, 0x185, 0x3, 0x185, 0x3, 0x185, 0x3, 
       0x185, 0x3, 0x185, 0x3, 0x185, 0x3, 0x185, 0x3, 0x185, 0x3, 0x185, 
       0x3, 0x185, 0x3, 0x185, 0x3, 0x185, 0x3, 0x185, 0x3, 0x185, 0x3, 
       0x185, 0x5, 0x185, 0x13ea, 0xa, 0x185, 0x3, 0x186, 0x3, 0x186, 0x3, 
       0x186, 0x3, 0x186, 0x3, 0x186, 0x3, 0x186, 0x3, 0x186, 0x3, 0x187, 
       0x3, 0x187, 0x3, 0x187, 0x3, 0x187, 0x3, 0x187, 0x3, 0x187, 0x3, 
       0x187, 0x3, 0x187, 0x3, 0x187, 0x3, 0x188, 0x3, 0x188, 0x3, 0x188, 
       0x3, 0x188, 0x3, 0x188, 0x3, 0x188, 0x3, 0x188, 0x3, 0x188, 0x3, 
       0x188, 0x3, 0x189, 0x3, 0x189, 0x3, 0x189, 0x3, 0x189, 0x3, 0x189, 
       0x3, 0x189, 0x3, 0x189, 0x3, 0x189, 0x3, 0x189, 0x3, 0x189, 0x3, 
       0x189, 0x3, 0x189, 0x5, 0x189, 0x1411, 0xa, 0x189, 0x3, 0x18a, 0x3, 
       0x18a, 0x3, 0x18a, 0x3, 0x18a, 0x3, 0x18a, 0x3, 0x18a, 0x3, 0x18a, 
       0x3, 0x18b, 0x3, 0x18b, 0x7, 0x18b, 0x141c, 0xa, 0x18b, 0xc, 0x18b, 
       0xe, 0x18b, 0x141f, 0xb, 0x18b, 0x3, 0x18b, 0x7, 0x18b, 0x1422, 0xa, 
       0x18b, 0xc, 0x18b, 0xe, 0x18b, 0x1425, 0xb, 0x18b, 0x3, 0x18b, 0x3, 
       0x18b, 0x3, 0x18b, 0x3, 0x18c, 0x3, 0x18c, 0x3, 0x18c, 0x3, 0x18c, 
       0x3, 0x18d, 0x6, 0x18d, 0x142f, 0xa, 0x18d, 0xd, 0x18d, 0xe, 0x18d, 
       0x1430, 0x3, 0x18d, 0x3, 0x18d, 0x3, 0x18e, 0x3, 0x18e, 0x3, 0x18e, 
       0x3, 0x18e, 0x3, 0x18e, 0x3, 0x18e, 0x3, 0x18e, 0x3, 0x18e, 0x3, 
       0x18e, 0x3, 0x18e, 0x3, 0x18e, 0x3, 0x18e, 0x3, 0x18e, 0x5, 0x18e, 
       0x1442, 0xa, 0x18e, 0x3, 0x18f, 0x3, 0x18f, 0x3, 0x18f, 0x3, 0x190, 
       0x3, 0x190, 0x3, 0x190, 0x3, 0x190, 0x3, 0x190, 0x3, 0x190, 0x3, 
       0x190, 0x3, 0x191, 0x3, 0x191, 0x3, 0x191, 0x3, 0x191, 0x3, 0x191, 
       0x3, 0x191, 0x3, 0x191, 0x3, 0x192, 0x3, 0x192, 0x3, 0x192, 0x3, 
       0x192, 0x3, 0x192, 0x3, 0x192, 0x3, 0x192, 0x3, 0x192, 0x3, 0x192, 
       0x3, 0x193, 0x3, 0x193, 0x3, 0x193, 0x3, 0x193, 0x3, 0x193, 0x3, 
       0x193, 0x5, 0x193, 0x1464, 0xa, 0x193, 0x3, 0x194, 0x3, 0x194, 0x3, 
       0x194, 0x3, 0x194, 0x3, 0x194, 0x3, 0x194, 0x5, 0x194, 0x146c, 0xa, 
       0x194, 0x3, 0x195, 0x3, 0x195, 0x3, 0x195, 0x5, 0x195, 0x1471, 0xa, 
       0x195, 0x3, 0x195, 0x3, 0x195, 0x5, 0x195, 0x1475, 0xa, 0x195, 0x3, 
       0x195, 0x3, 0x195, 0x5, 0x195, 0x1479, 0xa, 0x195, 0x3, 0x195, 0x3, 
       0x195, 0x3, 0x195, 0x3, 0x195, 0x3, 0x196, 0x3, 0x196, 0x3, 0x196, 
       0x5, 0x196, 0x1482, 0xa, 0x196, 0x3, 0x196, 0x3, 0x196, 0x5, 0x196, 
       0x1486, 0xa, 0x196, 0x3, 0x196, 0x3, 0x196, 0x5, 0x196, 0x148a, 0xa, 
       0x196, 0x3, 0x196, 0x3, 0x196, 0x3, 0x196, 0x3, 0x196, 0x3, 0x197, 
       0x3, 0x197, 0x3, 0x197, 0x3, 0x197, 0x3, 0x197, 0x3, 0x197, 0x5, 
       0x197, 0x1496, 0xa, 0x197, 0x3, 0x198, 0x3, 0x198, 0x3, 0x198, 0x3, 
       0x199, 0x3, 0x199, 0x3, 0x199, 0x7, 0x199, 0x149e, 0xa, 0x199, 0xc, 
       0x199, 0xe, 0x199, 0x14a1, 0xb, 0x199, 0x3, 0x199, 0x3, 0x199, 0x3, 
       0x19a, 0x3, 0x19a, 0x3, 0x19a, 0x7, 0x19a, 0x14a8, 0xa, 0x19a, 0xc, 
       0x19a, 0xe, 0x19a, 0x14ab, 0xb, 0x19a, 0x3, 0x19a, 0x3, 0x19a, 0x3, 
       0x19a, 0x3, 0x19a, 0x3, 0x19a, 0x3, 0x19a, 0x3, 0x19a, 0x3, 0x19a, 
       0x3, 0x19b, 0x3, 0x19b, 0x3, 0x19b, 0x7, 0x19b, 0x14b8, 0xa, 0x19b, 
       0xc, 0x19b, 0xe, 0x19b, 0x14bb, 0xb, 0x19b, 0x3, 0x19b, 0x3, 0x19b, 
       0x3, 0x19b, 0x3, 0x19b, 0x3, 0x19b, 0x3, 0x19b, 0x3, 0x19b, 0x3, 
       0x19c, 0x3, 0x19c, 0x5, 0x19c, 0x14c6, 0xa, 0x19c, 0x3, 0x19c, 0x3, 
       0x19c, 0x3, 0x19c, 0x3, 0x19d, 0x3, 0x19d, 0x5, 0x19d, 0x14cd, 0xa, 
       0x19d, 0x3, 0x19d, 0x3, 0x19d, 0x3, 0x19d, 0x3, 0x19e, 0x3, 0x19e, 
       0x5, 0x19e, 0x14d4, 0xa, 0x19e, 0x3, 0x19e, 0x3, 0x19e, 0x3, 0x19e, 
       0x3, 0x19f, 0x3, 0x19f, 0x3, 0x19f, 0x3, 0x19f, 0x3, 0x19f, 0x3, 
       0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 0x3, 0x1a0, 
       0x3, 0x1a0, 0x3, 0x1a1, 0x3, 0x1a1, 0x3, 0x1a1, 0x3, 0x1a1, 0x3, 
       0x1a1, 0x3, 0x1a1, 0x3, 0x1a1, 0x3, 0x1a1, 0x5, 0x1a1, 0x14ed, 0xa, 
       0x1a1, 0x3, 0x1a1, 0x3, 0x1a1, 0x3, 0x1a1, 0x3, 0x1a1, 0x3, 0x1a1, 
       0x3, 0x1a1, 0x5, 0x1a1, 0x14f5, 0xa, 0x1a1, 0x3, 0x1a2, 0x6, 0x1a2, 
       0x14f8, 0xa, 0x1a2, 0xd, 0x1a2, 0xe, 0x1a2, 0x14f9, 0x3, 0x1a2, 0x3, 
       0x1a2, 0x3, 0x1a3, 0x3, 0x1a3, 0x3, 0x1a3, 0x3, 0x1a3, 0x3, 0x1a3, 
       0x3, 0x1a3, 0x3, 0x1a3, 0x3, 0x1a4, 0x7, 0x1a4, 0x1506, 0xa, 0x1a4, 
       0xc, 0x1a4, 0xe, 0x1a4, 0x1509, 0xb, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a4, 
       0x3, 0x1a4, 0x3, 0x1a4, 0x3, 0x1a5, 0x3, 0x1a5, 0x3, 0x1a5, 0x7, 
       0x1a5, 0x1512, 0xa, 0x1a5, 0xc, 0x1a5, 0xe, 0x1a5, 0x1515, 0xb, 0x1a5, 
       0x3, 0x1a5, 0x3, 0x1a5, 0x3, 0x1a6, 0x3, 0x1a6, 0x3, 0x1a6, 0x3, 
       0x1a6, 0x3, 0x1a7, 0x3, 0x1a7, 0x3, 0x1a7, 0x3, 0x1a7, 0x5, 0x1a7, 
       0x1521, 0xa, 0x1a7, 0x3, 0x1a7, 0x5, 0x1a7, 0x1524, 0xa, 0x1a7, 0x3, 
       0x1a7, 0x3, 0x1a7, 0x3, 0x1a8, 0x3, 0x1a8, 0x3, 0x1a8, 0x5, 0x1a8, 
       0x152b, 0xa, 0x1a8, 0x3, 0x1a8, 0x3, 0x1a8, 0x3, 0x1a8, 0x3, 0x1a9, 
       0x3, 0x1a9, 0x3, 0x1a9, 0x7, 0x1a9, 0x1533, 0xa, 0x1a9, 0xc, 0x1a9, 
       0xe, 0x1a9, 0x1536, 0xb, 0x1a9, 0x3, 0x1a9, 0x3, 0x1a9, 0x3, 0x1aa, 
       0x7, 0x1aa, 0x153b, 0xa, 0x1aa, 0xc, 0x1aa, 0xe, 0x1aa, 0x153e, 0xb, 
       0x1aa, 0x3, 0x1aa, 0x3, 0x1aa, 0x3, 0x1aa, 0x3, 0x1aa, 0x3, 0x1aa, 
       0x3, 0x1aa, 0x3, 0x1aa, 0x3, 0x1aa, 0x3, 0x1aa, 0x5, 0x1aa, 0x1549, 
       0xa, 0x1aa, 0x3, 0x1ab, 0x3, 0x1ab, 0x3, 0x1ab, 0x3, 0x1ab, 0x3, 
       0x1ab, 0x3, 0x1ab, 0x5, 0x1ab, 0x1551, 0xa, 0x1ab, 0x3, 0x1ac, 0x3, 
       0x1ac, 0x3, 0x1ac, 0x3, 0x1ac, 0x3, 0x1ac, 0x3, 0x1ac, 0x5, 0x1ac, 
       0x1559, 0xa, 0x1ac, 0x3, 0x1ac, 0x3, 0x1ac, 0x3, 0x1ac, 0x7, 0x1ac, 
       0x155e, 0xa, 0x1ac, 0xc, 0x1ac, 0xe, 0x1ac, 0x1561, 0xb, 0x1ac, 0x3, 
       0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 
       0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 
       0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 
       0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 
       0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 
       0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x3, 0x1ad, 0x5, 
       0x1ad, 0x1584, 0xa, 0x1ad, 0x3, 0x1ae, 0x3, 0x1ae, 0x3, 0x1af, 0x3, 
       0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x7, 0x1af, 
       0x158e, 0xa, 0x1af, 0xc, 0x1af, 0xe, 0x1af, 0x1591, 0xb, 0x1af, 0x3, 
       0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 
       0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 
       0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 
       0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 
       0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 
       0x3, 0x1af, 0x3, 0x1af, 0x3, 0x1af, 0x5, 0x1af, 0x15b2, 0xa, 0x1af, 
       0x3, 0x1b0, 0x3, 0x1b0, 0x3, 0x1b0, 0x3, 0x1b0, 0x3, 0x1b0, 0x3, 
       0x1b0, 0x3, 0x1b0, 0x3, 0x1b0, 0x3, 0x1b0, 0x3, 0x1b0, 0x3, 0x1b0, 
       0x3, 0x1b0, 0x3, 0x1b0, 0x3, 0x1b0, 0x3, 0x1b0, 0x5, 0x1b0, 0x15c3, 
       0xa, 0x1b0, 0x3, 0x1b1, 0x3, 0x1b1, 0x3, 0x1b2, 0x3, 0x1b2, 0x3, 
       0x1b2, 0x3, 0x1b2, 0x3, 0x1b2, 0x3, 0x1b2, 0x3, 0x1b2, 0x3, 0x1b2, 
       0x3, 0x1b2, 0x3, 0x1b2, 0x3, 0x1b2, 0x3, 0x1b2, 0x5, 0x1b2, 0x15d3, 
       0xa, 0x1b2, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 
       0x1b3, 0x3, 0x1b3, 0x7, 0x1b3, 0x15db, 0xa, 0x1b3, 0xc, 0x1b3, 0xe, 
       0x1b3, 0x15de, 0xb, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 
       0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x7, 0x1b3, 0x15e7, 0xa, 
       0x1b3, 0xc, 0x1b3, 0xe, 0x1b3, 0x15ea, 0xb, 0x1b3, 0x3, 0x1b3, 0x3, 
       0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 
       0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 
       0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 
       0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 
       0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 
       0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 0x1b3, 0x3, 
       0x1b3, 0x5, 0x1b3, 0x160f, 0xa, 0x1b3, 0x3, 0x1b4, 0x3, 0x1b4, 0x3, 
       0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 
       0x7, 0x1b5, 0x1619, 0xa, 0x1b5, 0xc, 0x1b5, 0xe, 0x1b5, 0x161c, 0xb, 
       0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 
       0x3, 0x1b5, 0x3, 0x1b5, 0x7, 0x1b5, 0x1625, 0xa, 0x1b5, 0xc, 0x1b5, 
       0xe, 0x1b5, 0x1628, 0xb, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 
       0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 
       0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 
       0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 
       0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 
       0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 0x1b5, 0x3, 
       0x1b5, 0x3, 0x1b5, 0x5, 0x1b5, 0x164a, 0xa, 0x1b5, 0x3, 0x1b6, 0x3, 
       0x1b6, 0x3, 0x1b6, 0x5, 0x1b6, 0x164f, 0xa, 0x1b6, 0x3, 0x1b6, 0x3, 
       0x1b6, 0x7, 0x1b6, 0x1653, 0xa, 0x1b6, 0xc, 0x1b6, 0xe, 0x1b6, 0x1656, 
       0xb, 0x1b6, 0x3, 0x1b6, 0x3, 0x1b6, 0x3, 0x1b6, 0x3, 0x1b6, 0x3, 
       0x1b6, 0x3, 0x1b6, 0x3, 0x1b6, 0x5, 0x1b6, 0x165f, 0xa, 0x1b6, 0x3, 
       0x1b7, 0x3, 0x1b7, 0x5, 0x1b7, 0x1663, 0xa, 0x1b7, 0x3, 0x1b7, 0x7, 
       0x1b7, 0x1666, 0xa, 0x1b7, 0xc, 0x1b7, 0xe, 0x1b7, 0x1669, 0xb, 0x1b7, 
       0x3, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x7, 0x1b7, 0x166e, 0xa, 0x1b7, 
       0xc, 0x1b7, 0xe, 0x1b7, 0x1671, 0xb, 0x1b7, 0x3, 0x1b7, 0x7, 0x1b7, 
       0x1674, 0xa, 0x1b7, 0xc, 0x1b7, 0xe, 0x1b7, 0x1677, 0xb, 0x1b7, 0x3, 
       0x1b7, 0x5, 0x1b7, 0x167a, 0xa, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x5, 
       0x1b7, 0x167e, 0xa, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x5, 0x1b7, 0x1682, 
       0xa, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x3, 
       0x1b7, 0x3, 0x1b7, 0x5, 0x1b7, 0x168a, 0xa, 0x1b7, 0x3, 0x1b7, 0x7, 
       0x1b7, 0x168d, 0xa, 0x1b7, 0xc, 0x1b7, 0xe, 0x1b7, 0x1690, 0xb, 0x1b7, 
       0x3, 0x1b7, 0x3, 0x1b7, 0x5, 0x1b7, 0x1694, 0xa, 0x1b7, 0x3, 0x1b7, 
       0x3, 0x1b7, 0x5, 0x1b7, 0x1698, 0xa, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 
       0x5, 0x1b7, 0x169c, 0xa, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 
       0x3, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x5, 0x1b7, 0x16a4, 0xa, 0x1b7, 
       0x3, 0x1b7, 0x7, 0x1b7, 0x16a7, 0xa, 0x1b7, 0xc, 0x1b7, 0xe, 0x1b7, 
       0x16aa, 0xb, 0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x5, 0x1b7, 0x16ae, 0xa, 
       0x1b7, 0x3, 0x1b7, 0x3, 0x1b7, 0x5, 0x1b7, 0x16b2, 0xa, 0x1b7, 0x3, 
       0x1b7, 0x3, 0x1b7, 0x5, 0x1b7, 0x16b6, 0xa, 0x1b7, 0x3, 0x1b7, 0x3, 
       0x1b7, 0x5, 0x1b7, 0x16ba, 0xa, 0x1b7, 0x3, 0x1b8, 0x3, 0x1b8, 0x3, 
       0x1b8, 0x5, 0x1b8, 0x16bf, 0xa, 0x1b8, 0x3, 0x1b8, 0x7, 0x1b8, 0x16c2, 
       0xa, 0x1b8, 0xc, 0x1b8, 0xe, 0x1b8, 0x16c5, 0xb, 0x1b8, 0x3, 0x1b8, 
       0x3, 0x1b8, 0x5, 0x1b8, 0x16c9, 0xa, 0x1b8, 0x3, 0x1b8, 0x3, 0x1b8, 
       0x5, 0x1b8, 0x16cd, 0xa, 0x1b8, 0x3, 0x1b8, 0x3, 0x1b8, 0x5, 0x1b8, 
       0x16d1, 0xa, 0x1b8, 0x3, 0x1b8, 0x3, 0x1b8, 0x3, 0x1b9, 0x3, 0x1b9, 
       0x5, 0x1b9, 0x16d7, 0xa, 0x1b9, 0x3, 0x1b9, 0x7, 0x1b9, 0x16da, 0xa, 
       0x1b9, 0xc, 0x1b9, 0xe, 0x1b9, 0x16dd, 0xb, 0x1b9, 0x3, 0x1b9, 0x3, 
       0x1b9, 0x3, 0x1b9, 0x7, 0x1b9, 0x16e2, 0xa, 0x1b9, 0xc, 0x1b9, 0xe, 
       0x1b9, 0x16e5, 0xb, 0x1b9, 0x3, 0x1b9, 0x7, 0x1b9, 0x16e8, 0xa, 0x1b9, 
       0xc, 0x1b9, 0xe, 0x1b9, 0x16eb, 0xb, 0x1b9, 0x3, 0x1b9, 0x5, 0x1b9, 
       0x16ee, 0xa, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x5, 0x1b9, 0x16f2, 0xa, 
       0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x5, 0x1b9, 0x16f6, 0xa, 0x1b9, 0x3, 
       0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 
       0x5, 0x1b9, 0x16fe, 0xa, 0x1b9, 0x3, 0x1b9, 0x7, 0x1b9, 0x1701, 0xa, 
       0x1b9, 0xc, 0x1b9, 0xe, 0x1b9, 0x1704, 0xb, 0x1b9, 0x3, 0x1b9, 0x3, 
       0x1b9, 0x5, 0x1b9, 0x1708, 0xa, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x5, 
       0x1b9, 0x170c, 0xa, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x5, 0x1b9, 0x1710, 
       0xa, 0x1b9, 0x3, 0x1b9, 0x3, 0x1b9, 0x5, 0x1b9, 0x1714, 0xa, 0x1b9, 
       0x3, 0x1ba, 0x3, 0x1ba, 0x3, 0x1ba, 0x3, 0x1ba, 0x3, 0x1ba, 0x3, 
       0x1ba, 0x5, 0x1ba, 0x171c, 0xa, 0x1ba, 0x3, 0x1bb, 0x3, 0x1bb, 0x3, 
       0x1bb, 0x3, 0x1bb, 0x3, 0x1bb, 0x3, 0x1bb, 0x3, 0x1bb, 0x3, 0x1bb, 
       0x3, 0x1bb, 0x3, 0x1bb, 0x3, 0x1bb, 0x3, 0x1bb, 0x3, 0x1bb, 0x3, 
       0x1bb, 0x3, 0x1bb, 0x3, 0x1bb, 0x3, 0x1bb, 0x5, 0x1bb, 0x172f, 0xa, 
       0x1bb, 0x3, 0x1bc, 0x3, 0x1bc, 0x3, 0x1bc, 0x3, 0x1bc, 0x3, 0x1bd, 
       0x3, 0x1bd, 0x3, 0x1bd, 0x3, 0x1bd, 0x3, 0x1bd, 0x3, 0x1bd, 0x3, 
       0x1bd, 0x3, 0x1bd, 0x3, 0x1bd, 0x3, 0x1bd, 0x3, 0x1bd, 0x3, 0x1bd, 
       0x5, 0x1bd, 0x1741, 0xa, 0x1bd, 0x3, 0x1be, 0x3, 0x1be, 0x3, 0x1be, 
       0x3, 0x1be, 0x3, 0x1be, 0x3, 0x1be, 0x3, 0x1be, 0x3, 0x1be, 0x3, 
       0x1be, 0x3, 0x1be, 0x3, 0x1be, 0x3, 0x1be, 0x5, 0x1be, 0x174f, 0xa, 
       0x1be, 0x3, 0x1be, 0x3, 0x1be, 0x3, 0x1be, 0x3, 0x1be, 0x3, 0x1be, 
       0x3, 0x1be, 0x7, 0x1be, 0x1757, 0xa, 0x1be, 0xc, 0x1be, 0xe, 0x1be, 
       0x175a, 0xb, 0x1be, 0x3, 0x1bf, 0x3, 0x1bf, 0x3, 0x1bf, 0x3, 0x1bf, 
       0x3, 0x1bf, 0x3, 0x1bf, 0x3, 0x1bf, 0x3, 0x1bf, 0x3, 0x1bf, 0x3, 
       0x1bf, 0x3, 0x1bf, 0x3, 0x1bf, 0x7, 0x1bf, 0x1768, 0xa, 0x1bf, 0xc, 
       0x1bf, 0xe, 0x1bf, 0x176b, 0xb, 0x1bf, 0x3, 0x1c0, 0x3, 0x1c0, 0x3, 
       0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 
       0x3, 0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 0x5, 0x1c0, 0x1779, 
       0xa, 0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 0x3, 0x1c0, 0x3, 
       0x1c0, 0x3, 0x1c0, 0x7, 0x1c0, 0x1781, 0xa, 0x1c0, 0xc, 0x1c0, 0xe, 
       0x1c0, 0x1784, 0xb, 0x1c0, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x5, 
       0x1c1, 0x1789, 0xa, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 
       0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x5, 0x1c1, 0x1791, 0xa, 0x1c1, 0x3, 
       0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x5, 0x1c1, 0x1796, 0xa, 0x1c1, 0x3, 
       0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 
       0x5, 0x1c1, 0x179e, 0xa, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 
       0x5, 0x1c1, 0x17a3, 0xa, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 
       0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x5, 0x1c1, 0x17ab, 0xa, 0x1c1, 
       0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x5, 0x1c1, 0x17b0, 0xa, 0x1c1, 
       0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 
       0x1c1, 0x5, 0x1c1, 0x17b8, 0xa, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 
       0x1c1, 0x5, 0x1c1, 0x17bd, 0xa, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 
       0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 
       0x5, 0x1c1, 0x17c7, 0xa, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 
       0x5, 0x1c1, 0x17cc, 0xa, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 0x3, 0x1c1, 
       0x5, 0x1c1, 0x17d1, 0xa, 0x1c1, 0x3, 0x1c2, 0x3, 0x1c2, 0x5, 0x1c2, 
       0x17d5, 0xa, 0x1c2, 0x3, 0x1c2, 0x3, 0x1c2, 0x3, 0x1c2, 0x5, 0x1c2, 
       0x17da, 0xa, 0x1c2, 0x3, 0x1c2, 0x3, 0x1c2, 0x3, 0x1c2, 0x3, 0x1c3, 
       0x3, 0x1c3, 0x3, 0x1c3, 0x5, 0x1c3, 0x17e2, 0xa, 0x1c3, 0x3, 0x1c3, 
       0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x5, 
       0x1c3, 0x17ea, 0xa, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x5, 
       0x1c3, 0x17ef, 0xa, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 
       0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x5, 0x1c3, 0x17f7, 0xa, 0x1c3, 0x3, 
       0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x5, 0x1c3, 0x17fc, 0xa, 0x1c3, 0x3, 
       0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 
       0x5, 0x1c3, 0x1804, 0xa, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 
       0x5, 0x1c3, 0x1809, 0xa, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 
       0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x5, 
       0x1c3, 0x1813, 0xa, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x5, 
       0x1c3, 0x1818, 0xa, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x3, 0x1c3, 0x5, 
       0x1c3, 0x181d, 0xa, 0x1c3, 0x3, 0x1c4, 0x3, 0x1c4, 0x3, 0x1c4, 0x7, 
       0x1c4, 0x1822, 0xa, 0x1c4, 0xc, 0x1c4, 0xe, 0x1c4, 0x1825, 0xb, 0x1c4, 
       0x3, 0x1c4, 0x3, 0x1c4, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x5, 
       0x1c5, 0x182c, 0xa, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 
       0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x5, 0x1c5, 0x1834, 0xa, 0x1c5, 0x3, 
       0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 
       0x5, 0x1c5, 0x183c, 0xa, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 
       0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x5, 0x1c5, 0x1844, 0xa, 0x1c5, 
       0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 
       0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x5, 0x1c5, 0x184e, 0xa, 0x1c5, 0x3, 
       0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 
       0x5, 0x1c5, 0x1856, 0xa, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 
       0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x3, 0x1c5, 0x5, 
       0x1c5, 0x1860, 0xa, 0x1c5, 0x3, 0x1c6, 0x3, 0x1c6, 0x5, 0x1c6, 0x1864, 
       0xa, 0x1c6, 0x3, 0x1c6, 0x3, 0x1c6, 0x3, 0x1c6, 0x3, 0x1c7, 0x3, 
       0x1c7, 0x3, 0x1c7, 0x5, 0x1c7, 0x186c, 0xa, 0x1c7, 0x3, 0x1c7, 0x3, 
       0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x5, 0x1c7, 
       0x1874, 0xa, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 
       0x3, 0x1c7, 0x3, 0x1c7, 0x5, 0x1c7, 0x187c, 0xa, 0x1c7, 0x3, 0x1c7, 
       0x3, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x3, 
       0x1c7, 0x3, 0x1c7, 0x5, 0x1c7, 0x1886, 0xa, 0x1c7, 0x3, 0x1c7, 0x3, 
       0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x5, 0x1c7, 
       0x188e, 0xa, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 
       0x3, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x3, 0x1c7, 0x5, 0x1c7, 0x1898, 
       0xa, 0x1c7, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x5, 
       0x1c8, 0x189e, 0xa, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 
       0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x5, 0x1c8, 0x18a6, 0xa, 0x1c8, 0x3, 
       0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 
       0x3, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x3, 
       0x1c8, 0x3, 0x1c8, 0x3, 0x1c8, 0x5, 0x1c8, 0x18b6, 0xa, 0x1c8, 0x3, 
       0x1c9, 0x6, 0x1c9, 0x18b9, 0xa, 0x1c9, 0xd, 0x1c9, 0xe, 0x1c9, 0x18ba, 
       0x3, 0x1c9, 0x3, 0x1c9, 0x3, 0x1ca, 0x7, 0x1ca, 0x18c0, 0xa, 0x1ca, 
       0xc, 0x1ca, 0xe, 0x1ca, 0x18c3, 0xb, 0x1ca, 0x3, 0x1ca, 0x3, 0x1ca, 
       0x3, 0x1ca, 0x3, 0x1ca, 0x3, 0x1ca, 0x3, 0x1cb, 0x3, 0x1cb, 0x3, 
       0x1cb, 0x3, 0x1cc, 0x3, 0x1cc, 0x3, 0x1cc, 0x3, 0x1cc, 0x3, 0x1cc, 
       0x3, 0x1cc, 0x5, 0x1cc, 0x18d3, 0xa, 0x1cc, 0x3, 0x1cd, 0x3, 0x1cd, 
       0x3, 0x1cd, 0x3, 0x1cd, 0x3, 0x1cd, 0x3, 0x1ce, 0x3, 0x1ce, 0x3, 
       0x1ce, 0x3, 0x1ce, 0x3, 0x1ce, 0x5, 0x1ce, 0x18df, 0xa, 0x1ce, 0x3, 
       0x1ce, 0x3, 0x1ce, 0x3, 0x1ce, 0x3, 0x1ce, 0x3, 0x1ce, 0x3, 0x1ce, 
       0x3, 0x1ce, 0x5, 0x1ce, 0x18e8, 0xa, 0x1ce, 0x3, 0x1cf, 0x3, 0x1cf, 
       0x3, 0x1cf, 0x7, 0x1cf, 0x18ed, 0xa, 0x1cf, 0xc, 0x1cf, 0xe, 0x1cf, 
       0x18f0, 0xb, 0x1cf, 0x3, 0x1cf, 0x3, 0x1cf, 0x3, 0x1d0, 0x3, 0x1d0, 
       0x3, 0x1d0, 0x3, 0x1d0, 0x3, 0x1d0, 0x3, 0x1d0, 0x5, 0x1d0, 0x18fa, 
       0xa, 0x1d0, 0x3, 0x1d1, 0x3, 0x1d1, 0x3, 0x1d1, 0x3, 0x1d1, 0x3, 
       0x1d1, 0x3, 0x1d1, 0x5, 0x1d1, 0x1902, 0xa, 0x1d1, 0x3, 0x1d2, 0x3, 
       0x1d2, 0x3, 0x1d2, 0x3, 0x1d2, 0x3, 0x1d2, 0x3, 0x1d3, 0x3, 0x1d3, 
       0x3, 0x1d3, 0x3, 0x1d3, 0x3, 0x1d3, 0x3, 0x1d3, 0x3, 0x1d3, 0x3, 
       0x1d3, 0x3, 0x1d3, 0x5, 0x1d3, 0x1912, 0xa, 0x1d3, 0x3, 0x1d4, 0x3, 
       0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 
       0x3, 0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 0x3, 
       0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 
       0x3, 0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 0x3, 0x1d4, 0x3, 
       0x1d4, 0x5, 0x1d4, 0x192c, 0xa, 0x1d4, 0x3, 0x1d5, 0x3, 0x1d5, 0x3, 
       0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 
       0x3, 0x1d5, 0x5, 0x1d5, 0x1937, 0xa, 0x1d5, 0x3, 0x1d5, 0x3, 0x1d5, 
       0x5, 0x1d5, 0x193b, 0xa, 0x1d5, 0x3, 0x1d6, 0x3, 0x1d6, 0x3, 0x1d6, 
       0x3, 0x1d6, 0x3, 0x1d6, 0x3, 0x1d6, 0x3, 0x1d6, 0x3, 0x1d6, 0x5, 
       0x1d6, 0x1945, 0xa, 0x1d6, 0x3, 0x1d7, 0x3, 0x1d7, 0x3, 0x1d7, 0x3, 
       0x1d7, 0x3, 0x1d7, 0x3, 0x1d7, 0x3, 0x1d7, 0x3, 0x1d7, 0x5, 0x1d7, 
       0x194f, 0xa, 0x1d7, 0x3, 0x1d8, 0x3, 0x1d8, 0x3, 0x1d8, 0x3, 0x1d8, 
       0x3, 0x1d8, 0x3, 0x1d8, 0x3, 0x1d8, 0x3, 0x1d8, 0x5, 0x1d8, 0x1959, 
       0xa, 0x1d8, 0x3, 0x1d9, 0x3, 0x1d9, 0x3, 0x1d9, 0x3, 0x1d9, 0x3, 
       0x1d9, 0x3, 0x1d9, 0x3, 0x1d9, 0x3, 0x1d9, 0x5, 0x1d9, 0x1963, 0xa, 
       0x1d9, 0x3, 0x1da, 0x3, 0x1da, 0x3, 0x1da, 0x3, 0x1da, 0x3, 0x1da, 
       0x3, 0x1da, 0x3, 0x1da, 0x3, 0x1da, 0x5, 0x1da, 0x196d, 0xa, 0x1da, 
       0x3, 0x1db, 0x3, 0x1db, 0x3, 0x1db, 0x3, 0x1db, 0x3, 0x1db, 0x3, 
       0x1db, 0x3, 0x1db, 0x3, 0x1db, 0x3, 0x1db, 0x3, 0x1db, 0x3, 0x1db, 
       0x3, 0x1db, 0x3, 0x1db, 0x5, 0x1db, 0x197c, 0xa, 0x1db, 0x3, 0x1dc, 
       0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 
       0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 
       0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 
       0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 
       0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x3, 0x1dc, 0x5, 
       0x1dc, 0x199a, 0xa, 0x1dc, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 
       0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 
       0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 
       0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 0x3, 0x1dd, 
       0x3, 0x1dd, 0x3, 0x1dd, 0x5, 0x1dd, 0x19b2, 0xa, 0x1dd, 0x3, 0x1de, 
       0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 
       0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 0x3, 0x1de, 
       0x3, 0x1de, 0x5, 0x1de, 0x19c1, 0xa, 0x1de, 0x3, 0x1df, 0x3, 0x1df, 
       0x3, 0x1df, 0x3, 0x1df, 0x3, 0x1df, 0x3, 0x1df, 0x3, 0x1df, 0x3, 
       0x1df, 0x3, 0x1df, 0x3, 0x1df, 0x3, 0x1df, 0x3, 0x1df, 0x3, 0x1df, 
       0x3, 0x1df, 0x3, 0x1df, 0x3, 0x1df, 0x3, 0x1df, 0x3, 0x1df, 0x5, 
       0x1df, 0x19d5, 0xa, 0x1df, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 
       0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 
       0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x3, 
       0x1e0, 0x3, 0x1e0, 0x3, 0x1e0, 0x5, 0x1e0, 0x19e8, 0xa, 0x1e0, 0x3, 
       0x1e1, 0x3, 0x1e1, 0x3, 0x1e1, 0x3, 0x1e1, 0x3, 0x1e2, 0x3, 0x1e2, 
       0x3, 0x1e2, 0x3, 0x1e2, 0x3, 0x1e3, 0x3, 0x1e3, 0x3, 0x1e3, 0x3, 
       0x1e3, 0x3, 0x1e3, 0x3, 0x1e3, 0x3, 0x1e3, 0x3, 0x1e3, 0x3, 0x1e3, 
       0x3, 0x1e3, 0x3, 0x1e3, 0x3, 0x1e3, 0x3, 0x1e3, 0x3, 0x1e3, 0x5, 
       0x1e3, 0x1a00, 0xa, 0x1e3, 0x3, 0x1e4, 0x3, 0x1e4, 0x3, 0x1e4, 0x3, 
       0x1e4, 0x3, 0x1e4, 0x3, 0x1e4, 0x5, 0x1e4, 0x1a08, 0xa, 0x1e4, 0x3, 
       0x1e4, 0x3, 0x1e4, 0x3, 0x1e4, 0x3, 0x1e4, 0x3, 0x1e4, 0x3, 0x1e4, 
       0x7, 0x1e4, 0x1a10, 0xa, 0x1e4, 0xc, 0x1e4, 0xe, 0x1e4, 0x1a13, 0xb, 
       0x1e4, 0x3, 0x1e5, 0x3, 0x1e5, 0x3, 0x1e5, 0x3, 0x1e5, 0x3, 0x1e6, 
       0x3, 0x1e6, 0x3, 0x1e6, 0x3, 0x1e7, 0x3, 0x1e7, 0x3, 0x1e7, 0x3, 
       0x1e7, 0x3, 0x1e8, 0x3, 0x1e8, 0x3, 0x1e8, 0x3, 0x1e9, 0x3, 0x1e9, 
       0x3, 0x1e9, 0x3, 0x1e9, 0x3, 0x1e9, 0x3, 0x1e9, 0x3, 0x1e9, 0x3, 
       0x1e9, 0x3, 0x1e9, 0x7, 0x1e9, 0x1a2c, 0xa, 0x1e9, 0xc, 0x1e9, 0xe, 
       0x1e9, 0x1a2f, 0xb, 0x1e9, 0x3, 0x1e9, 0x3, 0x1e9, 0x3, 0x1e9, 0x3, 
       0x1e9, 0x3, 0x1e9, 0x3, 0x1e9, 0x3, 0x1e9, 0x7, 0x1e9, 0x1a38, 0xa, 
       0x1e9, 0xc, 0x1e9, 0xe, 0x1e9, 0x1a3b, 0xb, 0x1e9, 0x3, 0x1e9, 0x3, 
       0x1e9, 0x3, 0x1e9, 0x3, 0x1e9, 0x5, 0x1e9, 0x1a41, 0xa, 0x1e9, 0x3, 
       0x1ea, 0x3, 0x1ea, 0x3, 0x1ea, 0x2, 0x10, 0x34, 0x36, 0x3a, 0x40, 
       0x1c2, 0x1c4, 0x1c6, 0x1c8, 0x1ca, 0x1cc, 0x1ce, 0x1d0, 0x1d2, 0x1d4, 
       0x1eb, 0x2, 0x4, 0x6, 0x8, 0xa, 0xc, 0xe, 0x10, 0x12, 0x14, 0x16, 
       0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 
       0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 
       0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 
       0x5a, 0x5c, 0x5e, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 
       0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 
       0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 
       0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 
       0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 
       0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 
       0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 
       0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x100, 0x102, 0x104, 0x106, 0x108, 
       0x10a, 0x10c, 0x10e, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11a, 0x11c, 
       0x11e, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12a, 0x12c, 0x12e, 0x130, 
       0x132, 0x134, 0x136, 0x138, 0x13a, 0x13c, 0x13e, 0x140, 0x142, 0x144, 
       0x146, 0x148, 0x14a, 0x14c, 0x14e, 0x150, 0x152, 0x154, 0x156, 0x158, 
       0x15a, 0x15c, 0x15e, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16a, 0x16c, 
       0x16e, 0x170, 0x172, 0x174, 0x176, 0x178, 0x17a, 0x17c, 0x17e, 0x180, 
       0x182, 0x184, 0x186, 0x188, 0x18a, 0x18c, 0x18e, 0x190, 0x192, 0x194, 
       0x196, 0x198, 0x19a, 0x19c, 0x19e, 0x1a0, 0x1a2, 0x1a4, 0x1a6, 0x1a8, 
       0x1aa, 0x1ac, 0x1ae, 0x1b0, 0x1b2, 0x1b4, 0x1b6, 0x1b8, 0x1ba, 0x1bc, 
       0x1be, 0x1c0, 0x1c2, 0x1c4, 0x1c6, 0x1c8, 0x1ca, 0x1cc, 0x1ce, 0x1d0, 
       0x1d2, 0x1d4, 0x1d6, 0x1d8, 0x1da, 0x1dc, 0x1de, 0x1e0, 0x1e2, 0x1e4, 
       0x1e6, 0x1e8, 0x1ea, 0x1ec, 0x1ee, 0x1f0, 0x1f2, 0x1f4, 0x1f6, 0x1f8, 
       0x1fa, 0x1fc, 0x1fe, 0x200, 0x202, 0x204, 0x206, 0x208, 0x20a, 0x20c, 
       0x20e, 0x210, 0x212, 0x214, 0x216, 0x218, 0x21a, 0x21c, 0x21e, 0x220, 
       0x222, 0x224, 0x226, 0x228, 0x22a, 0x22c, 0x22e, 0x230, 0x232, 0x234, 
       0x236, 0x238, 0x23a, 0x23c, 0x23e, 0x240, 0x242, 0x244, 0x246, 0x248, 
       0x24a, 0x24c, 0x24e, 0x250, 0x252, 0x254, 0x256, 0x258, 0x25a, 0x25c, 
       0x25e, 0x260, 0x262, 0x264, 0x266, 0x268, 0x26a, 0x26c, 0x26e, 0x270, 
       0x272, 0x274, 0x276, 0x278, 0x27a, 0x27c, 0x27e, 0x280, 0x282, 0x284, 
       0x286, 0x288, 0x28a, 0x28c, 0x28e, 0x290, 0x292, 0x294, 0x296, 0x298, 
       0x29a, 0x29c, 0x29e, 0x2a0, 0x2a2, 0x2a4, 0x2a6, 0x2a8, 0x2aa, 0x2ac, 
       0x2ae, 0x2b0, 0x2b2, 0x2b4, 0x2b6, 0x2b8, 0x2ba, 0x2bc, 0x2be, 0x2c0, 
       0x2c2, 0x2c4, 0x2c6, 0x2c8, 0x2ca, 0x2cc, 0x2ce, 0x2d0, 0x2d2, 0x2d4, 
       0x2d6, 0x2d8, 0x2da, 0x2dc, 0x2de, 0x2e0, 0x2e2, 0x2e4, 0x2e6, 0x2e8, 
       0x2ea, 0x2ec, 0x2ee, 0x2f0, 0x2f2, 0x2f4, 0x2f6, 0x2f8, 0x2fa, 0x2fc, 
       0x2fe, 0x300, 0x302, 0x304, 0x306, 0x308, 0x30a, 0x30c, 0x30e, 0x310, 
       0x312, 0x314, 0x316, 0x318, 0x31a, 0x31c, 0x31e, 0x320, 0x322, 0x324, 
       0x326, 0x328, 0x32a, 0x32c, 0x32e, 0x330, 0x332, 0x334, 0x336, 0x338, 
       0x33a, 0x33c, 0x33e, 0x340, 0x342, 0x344, 0x346, 0x348, 0x34a, 0x34c, 
       0x34e, 0x350, 0x352, 0x354, 0x356, 0x358, 0x35a, 0x35c, 0x35e, 0x360, 
       0x362, 0x364, 0x366, 0x368, 0x36a, 0x36c, 0x36e, 0x370, 0x372, 0x374, 
       0x376, 0x378, 0x37a, 0x37c, 0x37e, 0x380, 0x382, 0x384, 0x386, 0x388, 
       0x38a, 0x38c, 0x38e, 0x390, 0x392, 0x394, 0x396, 0x398, 0x39a, 0x39c, 
       0x39e, 0x3a0, 0x3a2, 0x3a4, 0x3a6, 0x3a8, 0x3aa, 0x3ac, 0x3ae, 0x3b0, 
       0x3b2, 0x3b4, 0x3b6, 0x3b8, 0x3ba, 0x3bc, 0x3be, 0x3c0, 0x3c2, 0x3c4, 
       0x3c6, 0x3c8, 0x3ca, 0x3cc, 0x3ce, 0x3d0, 0x3d2, 0x2, 0x8, 0x3, 0x2, 
       0x40, 0x45, 0x7, 0x2, 0x11, 0x11, 0x14, 0x14, 0x27, 0x27, 0x29, 0x29, 
       0x31, 0x31, 0x4, 0x2, 0x1a, 0x1a, 0x20, 0x20, 0x4, 0x2, 0xc, 0xc, 
       0x32, 0x32, 0x4, 0x2, 0x52, 0x52, 0x6a, 0x74, 0x6, 0x2, 0x3, 0x4, 
       0x7, 0x7, 0xb, 0xb, 0x75, 0x75, 0x2, 0x1c59, 0x2, 0x3d4, 0x3, 0x2, 
       0x2, 0x2, 0x4, 0x3e4, 0x3, 0x2, 0x2, 0x2, 0x6, 0x3e8, 0x3, 0x2, 0x2, 
       0x2, 0x8, 0x3ea, 0x3, 0x2, 0x2, 0x2, 0xa, 0x3ec, 0x3, 0x2, 0x2, 0x2, 
       0xc, 0x3f1, 0x3, 0x2, 0x2, 0x2, 0xe, 0x3f5, 0x3, 0x2, 0x2, 0x2, 0x10, 
       0x414, 0x3, 0x2, 0x2, 0x2, 0x12, 0x416, 0x3, 0x2, 0x2, 0x2, 0x14, 
       0x424, 0x3, 0x2, 0x2, 0x2, 0x16, 0x42b, 0x3, 0x2, 0x2, 0x2, 0x18, 
       0x42d, 0x3, 0x2, 0x2, 0x2, 0x1a, 0x42f, 0x3, 0x2, 0x2, 0x2, 0x1c, 
       0x434, 0x3, 0x2, 0x2, 0x2, 0x1e, 0x442, 0x3, 0x2, 0x2, 0x2, 0x20, 
       0x447, 0x3, 0x2, 0x2, 0x2, 0x22, 0x45c, 0x3, 0x2, 0x2, 0x2, 0x24, 
       0x463, 0x3, 0x2, 0x2, 0x2, 0x26, 0x46f, 0x3, 0x2, 0x2, 0x2, 0x28, 
       0x471, 0x3, 0x2, 0x2, 0x2, 0x2a, 0x474, 0x3, 0x2, 0x2, 0x2, 0x2c, 
       0x478, 0x3, 0x2, 0x2, 0x2, 0x2e, 0x482, 0x3, 0x2, 0x2, 0x2, 0x30, 
       0x487, 0x3, 0x2, 0x2, 0x2, 0x32, 0x492, 0x3, 0x2, 0x2, 0x2, 0x34, 
       0x494, 0x3, 0x2, 0x2, 0x2, 0x36, 0x49f, 0x3, 0x2, 0x2, 0x2, 0x38, 
       0x4af, 0x3, 0x2, 0x2, 0x2, 0x3a, 0x4b1, 0x3, 0x2, 0x2, 0x2, 0x3c, 
       0x4c1, 0x3, 0x2, 0x2, 0x2, 0x3e, 0x4c3, 0x3, 0x2, 0x2, 0x2, 0x40, 
       0x4c5, 0x3, 0x2, 0x2, 0x2, 0x42, 0x4d2, 0x3, 0x2, 0x2, 0x2, 0x44, 
       0x4d5, 0x3, 0x2, 0x2, 0x2, 0x46, 0x4e8, 0x3, 0x2, 0x2, 0x2, 0x48, 
       0x4f0, 0x3, 0x2, 0x2, 0x2, 0x4a, 0x4f7, 0x3, 0x2, 0x2, 0x2, 0x4c, 
       0x4fd, 0x3, 0x2, 0x2, 0x2, 0x4e, 0x4ff, 0x3, 0x2, 0x2, 0x2, 0x50, 
       0x503, 0x3, 0x2, 0x2, 0x2, 0x52, 0x509, 0x3, 0x2, 0x2, 0x2, 0x54, 
       0x510, 0x3, 0x2, 0x2, 0x2, 0x56, 0x51a, 0x3, 0x2, 0x2, 0x2, 0x58, 
       0x51f, 0x3, 0x2, 0x2, 0x2, 0x5a, 0x569, 0x3, 0x2, 0x2, 0x2, 0x5c, 
       0x56b, 0x3, 0x2, 0x2, 0x2, 0x5e, 0x56f, 0x3, 0x2, 0x2, 0x2, 0x60, 
       0x574, 0x3, 0x2, 0x2, 0x2, 0x62, 0x58c, 0x3, 0x2, 0x2, 0x2, 0x64, 
       0x58e, 0x3, 0x2, 0x2, 0x2, 0x66, 0x592, 0x3, 0x2, 0x2, 0x2, 0x68, 
       0x59a, 0x3, 0x2, 0x2, 0x2, 0x6a, 0x59d, 0x3, 0x2, 0x2, 0x2, 0x6c, 
       0x5a0, 0x3, 0x2, 0x2, 0x2, 0x6e, 0x5a8, 0x3, 0x2, 0x2, 0x2, 0x70, 
       0x5b5, 0x3, 0x2, 0x2, 0x2, 0x72, 0x5bc, 0x3, 0x2, 0x2, 0x2, 0x74, 
       0x5c1, 0x3, 0x2, 0x2, 0x2, 0x76, 0x5d0, 0x3, 0x2, 0x2, 0x2, 0x78, 
       0x5d2, 0x3, 0x2, 0x2, 0x2, 0x7a, 0x5da, 0x3, 0x2, 0x2, 0x2, 0x7c, 
       0x5df, 0x3, 0x2, 0x2, 0x2, 0x7e, 0x5e5, 0x3, 0x2, 0x2, 0x2, 0x80, 
       0x5e9, 0x3, 0x2, 0x2, 0x2, 0x82, 0x5ed, 0x3, 0x2, 0x2, 0x2, 0x84, 
       0x5f2, 0x3, 0x2, 0x2, 0x2, 0x86, 0x5f6, 0x3, 0x2, 0x2, 0x2, 0x88, 
       0x60f, 0x3, 0x2, 0x2, 0x2, 0x8a, 0x611, 0x3, 0x2, 0x2, 0x2, 0x8c, 
       0x61c, 0x3, 0x2, 0x2, 0x2, 0x8e, 0x620, 0x3, 0x2, 0x2, 0x2, 0x90, 
       0x622, 0x3, 0x2, 0x2, 0x2, 0x92, 0x624, 0x3, 0x2, 0x2, 0x2, 0x94, 
       0x626, 0x3, 0x2, 0x2, 0x2, 0x96, 0x631, 0x3, 0x2, 0x2, 0x2, 0x98, 
       0x636, 0x3, 0x2, 0x2, 0x2, 0x9a, 0x646, 0x3, 0x2, 0x2, 0x2, 0x9c, 
       0x659, 0x3, 0x2, 0x2, 0x2, 0x9e, 0x65d, 0x3, 0x2, 0x2, 0x2, 0xa0, 
       0x65f, 0x3, 0x2, 0x2, 0x2, 0xa2, 0x66e, 0x3, 0x2, 0x2, 0x2, 0xa4, 
       0x680, 0x3, 0x2, 0x2, 0x2, 0xa6, 0x685, 0x3, 0x2, 0x2, 0x2, 0xa8, 
       0x68d, 0x3, 0x2, 0x2, 0x2, 0xaa, 0x6a0, 0x3, 0x2, 0x2, 0x2, 0xac, 
       0x6a5, 0x3, 0x2, 0x2, 0x2, 0xae, 0x6b0, 0x3, 0x2, 0x2, 0x2, 0xb0, 
       0x6b3, 0x3, 0x2, 0x2, 0x2, 0xb2, 0x6bd, 0x3, 0x2, 0x2, 0x2, 0xb4, 
       0x6c1, 0x3, 0x2, 0x2, 0x2, 0xb6, 0x6c3, 0x3, 0x2, 0x2, 0x2, 0xb8, 
       0x6c5, 0x3, 0x2, 0x2, 0x2, 0xba, 0x6cb, 0x3, 0x2, 0x2, 0x2, 0xbc, 
       0x6d8, 0x3, 0x2, 0x2, 0x2, 0xbe, 0x6db, 0x3, 0x2, 0x2, 0x2, 0xc0, 
       0x6e4, 0x3, 0x2, 0x2, 0x2, 0xc2, 0x6e6, 0x3, 0x2, 0x2, 0x2, 0xc4, 
       0x71d, 0x3, 0x2, 0x2, 0x2, 0xc6, 0x722, 0x3, 0x2, 0x2, 0x2, 0xc8, 
       0x72c, 0x3, 0x2, 0x2, 0x2, 0xca, 0x738, 0x3, 0x2, 0x2, 0x2, 0xcc, 
       0x743, 0x3, 0x2, 0x2, 0x2, 0xce, 0x751, 0x3, 0x2, 0x2, 0x2, 0xd0, 
       0x753, 0x3, 0x2, 0x2, 0x2, 0xd2, 0x75c, 0x3, 0x2, 0x2, 0x2, 0xd4, 
       0x761, 0x3, 0x2, 0x2, 0x2, 0xd6, 0x775, 0x3, 0x2, 0x2, 0x2, 0xd8, 
       0x777, 0x3, 0x2, 0x2, 0x2, 0xda, 0x77a, 0x3, 0x2, 0x2, 0x2, 0xdc, 
       0x788, 0x3, 0x2, 0x2, 0x2, 0xde, 0x78d, 0x3, 0x2, 0x2, 0x2, 0xe0, 
       0x798, 0x3, 0x2, 0x2, 0x2, 0xe2, 0x79d, 0x3, 0x2, 0x2, 0x2, 0xe4, 
       0x7aa, 0x3, 0x2, 0x2, 0x2, 0xe6, 0x7af, 0x3, 0x2, 0x2, 0x2, 0xe8, 
       0x7b7, 0x3, 0x2, 0x2, 0x2, 0xea, 0x7c5, 0x3, 0x2, 0x2, 0x2, 0xec, 
       0x7ca, 0x3, 0x2, 0x2, 0x2, 0xee, 0x7dc, 0x3, 0x2, 0x2, 0x2, 0xf0, 
       0x7de, 0x3, 0x2, 0x2, 0x2, 0xf2, 0x7e4, 0x3, 0x2, 0x2, 0x2, 0xf4, 
       0x7e6, 0x3, 0x2, 0x2, 0x2, 0xf6, 0x7ee, 0x3, 0x2, 0x2, 0x2, 0xf8, 
       0x7f6, 0x3, 0x2, 0x2, 0x2, 0xfa, 0x7fd, 0x3, 0x2, 0x2, 0x2, 0xfc, 
       0x7ff, 0x3, 0x2, 0x2, 0x2, 0xfe, 0x808, 0x3, 0x2, 0x2, 0x2, 0x100, 
       0x810, 0x3, 0x2, 0x2, 0x2, 0x102, 0x813, 0x3, 0x2, 0x2, 0x2, 0x104, 
       0x819, 0x3, 0x2, 0x2, 0x2, 0x106, 0x822, 0x3, 0x2, 0x2, 0x2, 0x108, 
       0x82a, 0x3, 0x2, 0x2, 0x2, 0x10a, 0x831, 0x3, 0x2, 0x2, 0x2, 0x10c, 
       0x838, 0x3, 0x2, 0x2, 0x2, 0x10e, 0x83a, 0x3, 0x2, 0x2, 0x2, 0x110, 
       0x840, 0x3, 0x2, 0x2, 0x2, 0x112, 0x84c, 0x3, 0x2, 0x2, 0x2, 0x114, 
       0x853, 0x3, 0x2, 0x2, 0x2, 0x116, 0x861, 0x3, 0x2, 0x2, 0x2, 0x118, 
       0x863, 0x3, 0x2, 0x2, 0x2, 0x11a, 0x865, 0x3, 0x2, 0x2, 0x2, 0x11c, 
       0x869, 0x3, 0x2, 0x2, 0x2, 0x11e, 0x86d, 0x3, 0x2, 0x2, 0x2, 0x120, 
       0x877, 0x3, 0x2, 0x2, 0x2, 0x122, 0x879, 0x3, 0x2, 0x2, 0x2, 0x124, 
       0x87f, 0x3, 0x2, 0x2, 0x2, 0x126, 0x887, 0x3, 0x2, 0x2, 0x2, 0x128, 
       0x899, 0x3, 0x2, 0x2, 0x2, 0x12a, 0x89b, 0x3, 0x2, 0x2, 0x2, 0x12c, 
       0x8a1, 0x3, 0x2, 0x2, 0x2, 0x12e, 0x8b0, 0x3, 0x2, 0x2, 0x2, 0x130, 
       0x8b4, 0x3, 0x2, 0x2, 0x2, 0x132, 0x8c2, 0x3, 0x2, 0x2, 0x2, 0x134, 
       0x8c4, 0x3, 0x2, 0x2, 0x2, 0x136, 0x8c6, 0x3, 0x2, 0x2, 0x2, 0x138, 
       0x8cc, 0x3, 0x2, 0x2, 0x2, 0x13a, 0x8d2, 0x3, 0x2, 0x2, 0x2, 0x13c, 
       0x8dc, 0x3, 0x2, 0x2, 0x2, 0x13e, 0x8e0, 0x3, 0x2, 0x2, 0x2, 0x140, 
       0x8e2, 0x3, 0x2, 0x2, 0x2, 0x142, 0x8f2, 0x3, 0x2, 0x2, 0x2, 0x144, 
       0x904, 0x3, 0x2, 0x2, 0x2, 0x146, 0x906, 0x3, 0x2, 0x2, 0x2, 0x148, 
       0x908, 0x3, 0x2, 0x2, 0x2, 0x14a, 0x910, 0x3, 0x2, 0x2, 0x2, 0x14c, 
       0x91f, 0x3, 0x2, 0x2, 0x2, 0x14e, 0x92e, 0x3, 0x2, 0x2, 0x2, 0x150, 
       0x934, 0x3, 0x2, 0x2, 0x2, 0x152, 0x93a, 0x3, 0x2, 0x2, 0x2, 0x154, 
       0x940, 0x3, 0x2, 0x2, 0x2, 0x156, 0x944, 0x3, 0x2, 0x2, 0x2, 0x158, 
       0x956, 0x3, 0x2, 0x2, 0x2, 0x15a, 0x959, 0x3, 0x2, 0x2, 0x2, 0x15c, 
       0x95d, 0x3, 0x2, 0x2, 0x2, 0x15e, 0x966, 0x3, 0x2, 0x2, 0x2, 0x160, 
       0x96c, 0x3, 0x2, 0x2, 0x2, 0x162, 0x974, 0x3, 0x2, 0x2, 0x2, 0x164, 
       0x977, 0x3, 0x2, 0x2, 0x2, 0x166, 0x980, 0x3, 0x2, 0x2, 0x2, 0x168, 
       0x987, 0x3, 0x2, 0x2, 0x2, 0x16a, 0x99b, 0x3, 0x2, 0x2, 0x2, 0x16c, 
       0x99f, 0x3, 0x2, 0x2, 0x2, 0x16e, 0x9a3, 0x3, 0x2, 0x2, 0x2, 0x170, 
       0x9bb, 0x3, 0x2, 0x2, 0x2, 0x172, 0x9bd, 0x3, 0x2, 0x2, 0x2, 0x174, 
       0x9db, 0x3, 0x2, 0x2, 0x2, 0x176, 0x9e2, 0x3, 0x2, 0x2, 0x2, 0x178, 
       0x9e4, 0x3, 0x2, 0x2, 0x2, 0x17a, 0x9ea, 0x3, 0x2, 0x2, 0x2, 0x17c, 
       0xa14, 0x3, 0x2, 0x2, 0x2, 0x17e, 0xa16, 0x3, 0x2, 0x2, 0x2, 0x180, 
       0xa3f, 0x3, 0x2, 0x2, 0x2, 0x182, 0xa52, 0x3, 0x2, 0x2, 0x2, 0x184, 
       0xaa7, 0x3, 0x2, 0x2, 0x2, 0x186, 0xaa9, 0x3, 0x2, 0x2, 0x2, 0x188, 
       0xafb, 0x3, 0x2, 0x2, 0x2, 0x18a, 0xb00, 0x3, 0x2, 0x2, 0x2, 0x18c, 
       0xb0f, 0x3, 0x2, 0x2, 0x2, 0x18e, 0xb11, 0x3, 0x2, 0x2, 0x2, 0x190, 
       0xb1d, 0x3, 0x2, 0x2, 0x2, 0x192, 0xb29, 0x3, 0x2, 0x2, 0x2, 0x194, 
       0xb35, 0x3, 0x2, 0x2, 0x2, 0x196, 0xb4e, 0x3, 0x2, 0x2, 0x2, 0x198, 
       0xb9f, 0x3, 0x2, 0x2, 0x2, 0x19a, 0xba1, 0x3, 0x2, 0x2, 0x2, 0x19c, 
       0xbe5, 0x3, 0x2, 0x2, 0x2, 0x19e, 0xbe7, 0x3, 0x2, 0x2, 0x2, 0x1a0, 
       0xc1e, 0x3, 0x2, 0x2, 0x2, 0x1a2, 0xc20, 0x3, 0x2, 0x2, 0x2, 0x1a4, 
       0xc4e, 0x3, 0x2, 0x2, 0x2, 0x1a6, 0xc66, 0x3, 0x2, 0x2, 0x2, 0x1a8, 
       0xc69, 0x3, 0x2, 0x2, 0x2, 0x1aa, 0xc70, 0x3, 0x2, 0x2, 0x2, 0x1ac, 
       0xc77, 0x3, 0x2, 0x2, 0x2, 0x1ae, 0xc7b, 0x3, 0x2, 0x2, 0x2, 0x1b0, 
       0xc7d, 0x3, 0x2, 0x2, 0x2, 0x1b2, 0xc8b, 0x3, 0x2, 0x2, 0x2, 0x1b4, 
       0xc8d, 0x3, 0x2, 0x2, 0x2, 0x1b6, 0xc97, 0x3, 0x2, 0x2, 0x2, 0x1b8, 
       0xc9b, 0x3, 0x2, 0x2, 0x2, 0x1ba, 0xc9d, 0x3, 0x2, 0x2, 0x2, 0x1bc, 
       0xca4, 0x3, 0x2, 0x2, 0x2, 0x1be, 0xca6, 0x3, 0x2, 0x2, 0x2, 0x1c0, 
       0xcb1, 0x3, 0x2, 0x2, 0x2, 0x1c2, 0xcb3, 0x3, 0x2, 0x2, 0x2, 0x1c4, 
       0xcbe, 0x3, 0x2, 0x2, 0x2, 0x1c6, 0xcc9, 0x3, 0x2, 0x2, 0x2, 0x1c8, 
       0xcd4, 0x3, 0x2, 0x2, 0x2, 0x1ca, 0xcdf, 0x3, 0x2, 0x2, 0x2, 0x1cc, 
       0xcea, 0x3, 0x2, 0x2, 0x2, 0x1ce, 0xcf8, 0x3, 0x2, 0x2, 0x2, 0x1d0, 
       0xd0f, 0x3, 0x2, 0x2, 0x2, 0x1d2, 0xd24, 0x3, 0x2, 0x2, 0x2, 0x1d4, 
       0xd32, 0x3, 0x2, 0x2, 0x2, 0x1d6, 0xd4a, 0x3, 0x2, 0x2, 0x2, 0x1d8, 
       0xd4c, 0x3, 0x2, 0x2, 0x2, 0x1da, 0xd4f, 0x3, 0x2, 0x2, 0x2, 0x1dc, 
       0xd58, 0x3, 0x2, 0x2, 0x2, 0x1de, 0xd5c, 0x3, 0x2, 0x2, 0x2, 0x1e0, 
       0xd65, 0x3, 0x2, 0x2, 0x2, 0x1e2, 0xd68, 0x3, 0x2, 0x2, 0x2, 0x1e4, 
       0xd6a, 0x3, 0x2, 0x2, 0x2, 0x1e6, 0xd6d, 0x3, 0x2, 0x2, 0x2, 0x1e8, 
       0xd8a, 0x3, 0x2, 0x2, 0x2, 0x1ea, 0xd98, 0x3, 0x2, 0x2, 0x2, 0x1ec, 
       0xdab, 0x3, 0x2, 0x2, 0x2, 0x1ee, 0xdb3, 0x3, 0x2, 0x2, 0x2, 0x1f0, 
       0xdbf, 0x3, 0x2, 0x2, 0x2, 0x1f2, 0xdc5, 0x3, 0x2, 0x2, 0x2, 0x1f4, 
       0xdd0, 0x3, 0x2, 0x2, 0x2, 0x1f6, 0xdd8, 0x3, 0x2, 0x2, 0x2, 0x1f8, 
       0xdff, 0x3, 0x2, 0x2, 0x2, 0x1fa, 0xe01, 0x3, 0x2, 0x2, 0x2, 0x1fc, 
       0xe11, 0x3, 0x2, 0x2, 0x2, 0x1fe, 0xe1a, 0x3, 0x2, 0x2, 0x2, 0x200, 
       0xe1d, 0x3, 0x2, 0x2, 0x2, 0x202, 0xe20, 0x3, 0x2, 0x2, 0x2, 0x204, 
       0xe26, 0x3, 0x2, 0x2, 0x2, 0x206, 0xe38, 0x3, 0x2, 0x2, 0x2, 0x208, 
       0xe3d, 0x3, 0x2, 0x2, 0x2, 0x20a, 0xe54, 0x3, 0x2, 0x2, 0x2, 0x20c, 
       0xe5b, 0x3, 0x2, 0x2, 0x2, 0x20e, 0xe6c, 0x3, 0x2, 0x2, 0x2, 0x210, 
       0xe6e, 0x3, 0x2, 0x2, 0x2, 0x212, 0xe72, 0x3, 0x2, 0x2, 0x2, 0x214, 
       0xe77, 0x3, 0x2, 0x2, 0x2, 0x216, 0xe87, 0x3, 0x2, 0x2, 0x2, 0x218, 
       0xe8c, 0x3, 0x2, 0x2, 0x2, 0x21a, 0xe9d, 0x3, 0x2, 0x2, 0x2, 0x21c, 
       0xea7, 0x3, 0x2, 0x2, 0x2, 0x21e, 0xeb1, 0x3, 0x2, 0x2, 0x2, 0x220, 
       0xebb, 0x3, 0x2, 0x2, 0x2, 0x222, 0xec5, 0x3, 0x2, 0x2, 0x2, 0x224, 
       0xecf, 0x3, 0x2, 0x2, 0x2, 0x226, 0xed1, 0x3, 0x2, 0x2, 0x2, 0x228, 
       0xedc, 0x3, 0x2, 0x2, 0x2, 0x22a, 0xee4, 0x3, 0x2, 0x2, 0x2, 0x22c, 
       0xee7, 0x3, 0x2, 0x2, 0x2, 0x22e, 0xefa, 0x3, 0x2, 0x2, 0x2, 0x230, 
       0xf03, 0x3, 0x2, 0x2, 0x2, 0x232, 0xf0b, 0x3, 0x2, 0x2, 0x2, 0x234, 
       0xf1a, 0x3, 0x2, 0x2, 0x2, 0x236, 0xf1c, 0x3, 0x2, 0x2, 0x2, 0x238, 
       0xf21, 0x3, 0x2, 0x2, 0x2, 0x23a, 0xf28, 0x3, 0x2, 0x2, 0x2, 0x23c, 
       0xf30, 0x3, 0x2, 0x2, 0x2, 0x23e, 0xf40, 0x3, 0x2, 0x2, 0x2, 0x240, 
       0xf45, 0x3, 0x2, 0x2, 0x2, 0x242, 0xf95, 0x3, 0x2, 0x2, 0x2, 0x244, 
       0xf9b, 0x3, 0x2, 0x2, 0x2, 0x246, 0xfa3, 0x3, 0x2, 0x2, 0x2, 0x248, 
       0xfa8, 0x3, 0x2, 0x2, 0x2, 0x24a, 0xfca, 0x3, 0x2, 0x2, 0x2, 0x24c, 
       0xfcc, 0x3, 0x2, 0x2, 0x2, 0x24e, 0xfd1, 0x3, 0x2, 0x2, 0x2, 0x250, 
       0xfdb, 0x3, 0x2, 0x2, 0x2, 0x252, 0xfdf, 0x3, 0x2, 0x2, 0x2, 0x254, 
       0xfe3, 0x3, 0x2, 0x2, 0x2, 0x256, 0xfed, 0x3, 0x2, 0x2, 0x2, 0x258, 
       0x1003, 0x3, 0x2, 0x2, 0x2, 0x25a, 0x1013, 0x3, 0x2, 0x2, 0x2, 0x25c, 
       0x1018, 0x3, 0x2, 0x2, 0x2, 0x25e, 0x1031, 0x3, 0x2, 0x2, 0x2, 0x260, 
       0x1033, 0x3, 0x2, 0x2, 0x2, 0x262, 0x103d, 0x3, 0x2, 0x2, 0x2, 0x264, 
       0x1044, 0x3, 0x2, 0x2, 0x2, 0x266, 0x1050, 0x3, 0x2, 0x2, 0x2, 0x268, 
       0x1058, 0x3, 0x2, 0x2, 0x2, 0x26a, 0x105f, 0x3, 0x2, 0x2, 0x2, 0x26c, 
       0x106a, 0x3, 0x2, 0x2, 0x2, 0x26e, 0x1072, 0x3, 0x2, 0x2, 0x2, 0x270, 
       0x1093, 0x3, 0x2, 0x2, 0x2, 0x272, 0x1095, 0x3, 0x2, 0x2, 0x2, 0x274, 
       0x10a2, 0x3, 0x2, 0x2, 0x2, 0x276, 0x10a8, 0x3, 0x2, 0x2, 0x2, 0x278, 
       0x10ab, 0x3, 0x2, 0x2, 0x2, 0x27a, 0x10ae, 0x3, 0x2, 0x2, 0x2, 0x27c, 
       0x10b1, 0x3, 0x2, 0x2, 0x2, 0x27e, 0x10c0, 0x3, 0x2, 0x2, 0x2, 0x280, 
       0x10c5, 0x3, 0x2, 0x2, 0x2, 0x282, 0x10e1, 0x3, 0x2, 0x2, 0x2, 0x284, 
       0x10f8, 0x3, 0x2, 0x2, 0x2, 0x286, 0x10ff, 0x3, 0x2, 0x2, 0x2, 0x288, 
       0x1101, 0x3, 0x2, 0x2, 0x2, 0x28a, 0x1117, 0x3, 0x2, 0x2, 0x2, 0x28c, 
       0x112d, 0x3, 0x2, 0x2, 0x2, 0x28e, 0x1132, 0x3, 0x2, 0x2, 0x2, 0x290, 
       0x113e, 0x3, 0x2, 0x2, 0x2, 0x292, 0x1154, 0x3, 0x2, 0x2, 0x2, 0x294, 
       0x1159, 0x3, 0x2, 0x2, 0x2, 0x296, 0x1165, 0x3, 0x2, 0x2, 0x2, 0x298, 
       0x1169, 0x3, 0x2, 0x2, 0x2, 0x29a, 0x1179, 0x3, 0x2, 0x2, 0x2, 0x29c, 
       0x1180, 0x3, 0x2, 0x2, 0x2, 0x29e, 0x1182, 0x3, 0x2, 0x2, 0x2, 0x2a0, 
       0x1185, 0x3, 0x2, 0x2, 0x2, 0x2a2, 0x118c, 0x3, 0x2, 0x2, 0x2, 0x2a4, 
       0x119f, 0x3, 0x2, 0x2, 0x2, 0x2a6, 0x11a2, 0x3, 0x2, 0x2, 0x2, 0x2a8, 
       0x11ac, 0x3, 0x2, 0x2, 0x2, 0x2aa, 0x11af, 0x3, 0x2, 0x2, 0x2, 0x2ac, 
       0x11eb, 0x3, 0x2, 0x2, 0x2, 0x2ae, 0x11f0, 0x3, 0x2, 0x2, 0x2, 0x2b0, 
       0x11fb, 0x3, 0x2, 0x2, 0x2, 0x2b2, 0x1208, 0x3, 0x2, 0x2, 0x2, 0x2b4, 
       0x1215, 0x3, 0x2, 0x2, 0x2, 0x2b6, 0x1225, 0x3, 0x2, 0x2, 0x2, 0x2b8, 
       0x1228, 0x3, 0x2, 0x2, 0x2, 0x2ba, 0x1237, 0x3, 0x2, 0x2, 0x2, 0x2bc, 
       0x123c, 0x3, 0x2, 0x2, 0x2, 0x2be, 0x1259, 0x3, 0x2, 0x2, 0x2, 0x2c0, 
       0x125b, 0x3, 0x2, 0x2, 0x2, 0x2c2, 0x125f, 0x3, 0x2, 0x2, 0x2, 0x2c4, 
       0x1277, 0x3, 0x2, 0x2, 0x2, 0x2c6, 0x127c, 0x3, 0x2, 0x2, 0x2, 0x2c8, 
       0x128d, 0x3, 0x2, 0x2, 0x2, 0x2ca, 0x1292, 0x3, 0x2, 0x2, 0x2, 0x2cc, 
       0x12a8, 0x3, 0x2, 0x2, 0x2, 0x2ce, 0x12ad, 0x3, 0x2, 0x2, 0x2, 0x2d0, 
       0x12b6, 0x3, 0x2, 0x2, 0x2, 0x2d2, 0x12ce, 0x3, 0x2, 0x2, 0x2, 0x2d4, 
       0x12d3, 0x3, 0x2, 0x2, 0x2, 0x2d6, 0x12ea, 0x3, 0x2, 0x2, 0x2, 0x2d8, 
       0x12ec, 0x3, 0x2, 0x2, 0x2, 0x2da, 0x12f9, 0x3, 0x2, 0x2, 0x2, 0x2dc, 
       0x12fb, 0x3, 0x2, 0x2, 0x2, 0x2de, 0x1304, 0x3, 0x2, 0x2, 0x2, 0x2e0, 
       0x130e, 0x3, 0x2, 0x2, 0x2, 0x2e2, 0x131c, 0x3, 0x2, 0x2, 0x2, 0x2e4, 
       0x131e, 0x3, 0x2, 0x2, 0x2, 0x2e6, 0x1328, 0x3, 0x2, 0x2, 0x2, 0x2e8, 
       0x1332, 0x3, 0x2, 0x2, 0x2, 0x2ea, 0x1336, 0x3, 0x2, 0x2, 0x2, 0x2ec, 
       0x133d, 0x3, 0x2, 0x2, 0x2, 0x2ee, 0x1347, 0x3, 0x2, 0x2, 0x2, 0x2f0, 
       0x1351, 0x3, 0x2, 0x2, 0x2, 0x2f2, 0x1359, 0x3, 0x2, 0x2, 0x2, 0x2f4, 
       0x1368, 0x3, 0x2, 0x2, 0x2, 0x2f6, 0x136a, 0x3, 0x2, 0x2, 0x2, 0x2f8, 
       0x1371, 0x3, 0x2, 0x2, 0x2, 0x2fa, 0x138a, 0x3, 0x2, 0x2, 0x2, 0x2fc, 
       0x139b, 0x3, 0x2, 0x2, 0x2, 0x2fe, 0x13c1, 0x3, 0x2, 0x2, 0x2, 0x300, 
       0x13c3, 0x3, 0x2, 0x2, 0x2, 0x302, 0x13c6, 0x3, 0x2, 0x2, 0x2, 0x304, 
       0x13cb, 0x3, 0x2, 0x2, 0x2, 0x306, 0x13d0, 0x3, 0x2, 0x2, 0x2, 0x308, 
       0x13e9, 0x3, 0x2, 0x2, 0x2, 0x30a, 0x13eb, 0x3, 0x2, 0x2, 0x2, 0x30c, 
       0x13f2, 0x3, 0x2, 0x2, 0x2, 0x30e, 0x13fb, 0x3, 0x2, 0x2, 0x2, 0x310, 
       0x1410, 0x3, 0x2, 0x2, 0x2, 0x312, 0x1412, 0x3, 0x2, 0x2, 0x2, 0x314, 
       0x1419, 0x3, 0x2, 0x2, 0x2, 0x316, 0x1429, 0x3, 0x2, 0x2, 0x2, 0x318, 
       0x142e, 0x3, 0x2, 0x2, 0x2, 0x31a, 0x1441, 0x3, 0x2, 0x2, 0x2, 0x31c, 
       0x1443, 0x3, 0x2, 0x2, 0x2, 0x31e, 0x1446, 0x3, 0x2, 0x2, 0x2, 0x320, 
       0x144d, 0x3, 0x2, 0x2, 0x2, 0x322, 0x1454, 0x3, 0x2, 0x2, 0x2, 0x324, 
       0x1463, 0x3, 0x2, 0x2, 0x2, 0x326, 0x146b, 0x3, 0x2, 0x2, 0x2, 0x328, 
       0x146d, 0x3, 0x2, 0x2, 0x2, 0x32a, 0x147e, 0x3, 0x2, 0x2, 0x2, 0x32c, 
       0x1495, 0x3, 0x2, 0x2, 0x2, 0x32e, 0x1497, 0x3, 0x2, 0x2, 0x2, 0x330, 
       0x149a, 0x3, 0x2, 0x2, 0x2, 0x332, 0x14a4, 0x3, 0x2, 0x2, 0x2, 0x334, 
       0x14b4, 0x3, 0x2, 0x2, 0x2, 0x336, 0x14c3, 0x3, 0x2, 0x2, 0x2, 0x338, 
       0x14ca, 0x3, 0x2, 0x2, 0x2, 0x33a, 0x14d1, 0x3, 0x2, 0x2, 0x2, 0x33c, 
       0x14d8, 0x3, 0x2, 0x2, 0x2, 0x33e, 0x14dd, 0x3, 0x2, 0x2, 0x2, 0x340, 
       0x14f4, 0x3, 0x2, 0x2, 0x2, 0x342, 0x14f7, 0x3, 0x2, 0x2, 0x2, 0x344, 
       0x14fd, 0x3, 0x2, 0x2, 0x2, 0x346, 0x1507, 0x3, 0x2, 0x2, 0x2, 0x348, 
       0x150e, 0x3, 0x2, 0x2, 0x2, 0x34a, 0x1518, 0x3, 0x2, 0x2, 0x2, 0x34c, 
       0x151c, 0x3, 0x2, 0x2, 0x2, 0x34e, 0x1527, 0x3, 0x2, 0x2, 0x2, 0x350, 
       0x152f, 0x3, 0x2, 0x2, 0x2, 0x352, 0x1548, 0x3, 0x2, 0x2, 0x2, 0x354, 
       0x1550, 0x3, 0x2, 0x2, 0x2, 0x356, 0x1558, 0x3, 0x2, 0x2, 0x2, 0x358, 
       0x1583, 0x3, 0x2, 0x2, 0x2, 0x35a, 0x1585, 0x3, 0x2, 0x2, 0x2, 0x35c, 
       0x15b1, 0x3, 0x2, 0x2, 0x2, 0x35e, 0x15c2, 0x3, 0x2, 0x2, 0x2, 0x360, 
       0x15c4, 0x3, 0x2, 0x2, 0x2, 0x362, 0x15d2, 0x3, 0x2, 0x2, 0x2, 0x364, 
       0x160e, 0x3, 0x2, 0x2, 0x2, 0x366, 0x1610, 0x3, 0x2, 0x2, 0x2, 0x368, 
       0x1649, 0x3, 0x2, 0x2, 0x2, 0x36a, 0x165e, 0x3, 0x2, 0x2, 0x2, 0x36c, 
       0x16b9, 0x3, 0x2, 0x2, 0x2, 0x36e, 0x16bb, 0x3, 0x2, 0x2, 0x2, 0x370, 
       0x1713, 0x3, 0x2, 0x2, 0x2, 0x372, 0x171b, 0x3, 0x2, 0x2, 0x2, 0x374, 
       0x172e, 0x3, 0x2, 0x2, 0x2, 0x376, 0x1730, 0x3, 0x2, 0x2, 0x2, 0x378, 
       0x1740, 0x3, 0x2, 0x2, 0x2, 0x37a, 0x174e, 0x3, 0x2, 0x2, 0x2, 0x37c, 
       0x175b, 0x3, 0x2, 0x2, 0x2, 0x37e, 0x1778, 0x3, 0x2, 0x2, 0x2, 0x380, 
       0x17d0, 0x3, 0x2, 0x2, 0x2, 0x382, 0x17d2, 0x3, 0x2, 0x2, 0x2, 0x384, 
       0x181c, 0x3, 0x2, 0x2, 0x2, 0x386, 0x181e, 0x3, 0x2, 0x2, 0x2, 0x388, 
       0x185f, 0x3, 0x2, 0x2, 0x2, 0x38a, 0x1861, 0x3, 0x2, 0x2, 0x2, 0x38c, 
       0x1897, 0x3, 0x2, 0x2, 0x2, 0x38e, 0x18b5, 0x3, 0x2, 0x2, 0x2, 0x390, 
       0x18b8, 0x3, 0x2, 0x2, 0x2, 0x392, 0x18c1, 0x3, 0x2, 0x2, 0x2, 0x394, 
       0x18c9, 0x3, 0x2, 0x2, 0x2, 0x396, 0x18d2, 0x3, 0x2, 0x2, 0x2, 0x398, 
       0x18d4, 0x3, 0x2, 0x2, 0x2, 0x39a, 0x18e7, 0x3, 0x2, 0x2, 0x2, 0x39c, 
       0x18e9, 0x3, 0x2, 0x2, 0x2, 0x39e, 0x18f9, 0x3, 0x2, 0x2, 0x2, 0x3a0, 
       0x1901, 0x3, 0x2, 0x2, 0x2, 0x3a2, 0x1903, 0x3, 0x2, 0x2, 0x2, 0x3a4, 
       0x1911, 0x3, 0x2, 0x2, 0x2, 0x3a6, 0x192b, 0x3, 0x2, 0x2, 0x2, 0x3a8, 
       0x193a, 0x3, 0x2, 0x2, 0x2, 0x3aa, 0x1944, 0x3, 0x2, 0x2, 0x2, 0x3ac, 
       0x194e, 0x3, 0x2, 0x2, 0x2, 0x3ae, 0x1958, 0x3, 0x2, 0x2, 0x2, 0x3b0, 
       0x1962, 0x3, 0x2, 0x2, 0x2, 0x3b2, 0x196c, 0x3, 0x2, 0x2, 0x2, 0x3b4, 
       0x197b, 0x3, 0x2, 0x2, 0x2, 0x3b6, 0x1999, 0x3, 0x2, 0x2, 0x2, 0x3b8, 
       0x19b1, 0x3, 0x2, 0x2, 0x2, 0x3ba, 0x19c0, 0x3, 0x2, 0x2, 0x2, 0x3bc, 
       0x19d4, 0x3, 0x2, 0x2, 0x2, 0x3be, 0x19e7, 0x3, 0x2, 0x2, 0x2, 0x3c0, 
       0x19e9, 0x3, 0x2, 0x2, 0x2, 0x3c2, 0x19ed, 0x3, 0x2, 0x2, 0x2, 0x3c4, 
       0x19ff, 0x3, 0x2, 0x2, 0x2, 0x3c6, 0x1a07, 0x3, 0x2, 0x2, 0x2, 0x3c8, 
       0x1a14, 0x3, 0x2, 0x2, 0x2, 0x3ca, 0x1a18, 0x3, 0x2, 0x2, 0x2, 0x3cc, 
       0x1a1b, 0x3, 0x2, 0x2, 0x2, 0x3ce, 0x1a1f, 0x3, 0x2, 0x2, 0x2, 0x3d0, 
       0x1a40, 0x3, 0x2, 0x2, 0x2, 0x3d2, 0x1a42, 0x3, 0x2, 0x2, 0x2, 0x3d4, 
       0x3d5, 0x9, 0x2, 0x2, 0x2, 0x3d5, 0x3, 0x3, 0x2, 0x2, 0x2, 0x3d6, 
       0x3d8, 0x5, 0xf2, 0x7a, 0x2, 0x3d7, 0x3d6, 0x3, 0x2, 0x2, 0x2, 0x3d8, 
       0x3db, 0x3, 0x2, 0x2, 0x2, 0x3d9, 0x3d7, 0x3, 0x2, 0x2, 0x2, 0x3d9, 
       0x3da, 0x3, 0x2, 0x2, 0x2, 0x3da, 0x3dc, 0x3, 0x2, 0x2, 0x2, 0x3db, 
       0x3d9, 0x3, 0x2, 0x2, 0x2, 0x3dc, 0x3e5, 0x5, 0x6, 0x4, 0x2, 0x3dd, 
       0x3df, 0x5, 0xf2, 0x7a, 0x2, 0x3de, 0x3dd, 0x3, 0x2, 0x2, 0x2, 0x3df, 
       0x3e2, 0x3, 0x2, 0x2, 0x2, 0x3e0, 0x3de, 0x3, 0x2, 0x2, 0x2, 0x3e0, 
       0x3e1, 0x3, 0x2, 0x2, 0x2, 0x3e1, 0x3e3, 0x3, 0x2, 0x2, 0x2, 0x3e2, 
       0x3e0, 0x3, 0x2, 0x2, 0x2, 0x3e3, 0x3e5, 0x7, 0xf, 0x2, 0x2, 0x3e4, 
       0x3d9, 0x3, 0x2, 0x2, 0x2, 0x3e4, 0x3e0, 0x3, 0x2, 0x2, 0x2, 0x3e5, 
       0x5, 0x3, 0x2, 0x2, 0x2, 0x3e6, 0x3e9, 0x5, 0x8, 0x5, 0x2, 0x3e7, 
       0x3e9, 0x5, 0xa, 0x6, 0x2, 0x3e8, 0x3e6, 0x3, 0x2, 0x2, 0x2, 0x3e8, 
       0x3e7, 0x3, 0x2, 0x2, 0x2, 0x3e9, 0x7, 0x3, 0x2, 0x2, 0x2, 0x3ea, 
       0x3eb, 0x9, 0x3, 0x2, 0x2, 0x3eb, 0x9, 0x3, 0x2, 0x2, 0x2, 0x3ec, 
       0x3ed, 0x9, 0x4, 0x2, 0x2, 0x3ed, 0xb, 0x3, 0x2, 0x2, 0x2, 0x3ee, 
       0x3f2, 0x5, 0xe, 0x8, 0x2, 0x3ef, 0x3f2, 0x5, 0x1c, 0xf, 0x2, 0x3f0, 
       0x3f2, 0x5, 0x1e, 0x10, 0x2, 0x3f1, 0x3ee, 0x3, 0x2, 0x2, 0x2, 0x3f1, 
       0x3ef, 0x3, 0x2, 0x2, 0x2, 0x3f1, 0x3f0, 0x3, 0x2, 0x2, 0x2, 0x3f2, 
       0xd, 0x3, 0x2, 0x2, 0x2, 0x3f3, 0x3f6, 0x5, 0x14, 0xb, 0x2, 0x3f4, 
       0x3f6, 0x5, 0x1a, 0xe, 0x2, 0x3f5, 0x3f3, 0x3, 0x2, 0x2, 0x2, 0x3f5, 
       0x3f4, 0x3, 0x2, 0x2, 0x2, 0x3f6, 0x3fb, 0x3, 0x2, 0x2, 0x2, 0x3f7, 
       0x3fa, 0x5, 0x12, 0xa, 0x2, 0x3f8, 0x3fa, 0x5, 0x18, 0xd, 0x2, 0x3f9, 
       0x3f7, 0x3, 0x2, 0x2, 0x2, 0x3f9, 0x3f8, 0x3, 0x2, 0x2, 0x2, 0x3fa, 
       0x3fd, 0x3, 0x2, 0x2, 0x2, 0x3fb, 0x3f9, 0x3, 0x2, 0x2, 0x2, 0x3fb, 
       0x3fc, 0x3, 0x2, 0x2, 0x2, 0x3fc, 0xf, 0x3, 0x2, 0x2, 0x2, 0x3fd, 
       0x3fb, 0x3, 0x2, 0x2, 0x2, 0x3fe, 0x400, 0x5, 0xf2, 0x7a, 0x2, 0x3ff, 
       0x3fe, 0x3, 0x2, 0x2, 0x2, 0x400, 0x403, 0x3, 0x2, 0x2, 0x2, 0x401, 
       0x3ff, 0x3, 0x2, 0x2, 0x2, 0x401, 0x402, 0x3, 0x2, 0x2, 0x2, 0x402, 
       0x404, 0x3, 0x2, 0x2, 0x2, 0x403, 0x401, 0x3, 0x2, 0x2, 0x2, 0x404, 
       0x406, 0x5, 0x3d2, 0x1ea, 0x2, 0x405, 0x407, 0x5, 0x2a, 0x16, 0x2, 
       0x406, 0x405, 0x3, 0x2, 0x2, 0x2, 0x406, 0x407, 0x3, 0x2, 0x2, 0x2, 
       0x407, 0x415, 0x3, 0x2, 0x2, 0x2, 0x408, 0x409, 0x5, 0xe, 0x8, 0x2, 
       0x409, 0x40d, 0x7, 0x4e, 0x2, 0x2, 0x40a, 0x40c, 0x5, 0xf2, 0x7a, 
       0x2, 0x40b, 0x40a, 0x3, 0x2, 0x2, 0x2, 0x40c, 0x40f, 0x3, 0x2, 0x2, 
       0x2, 0x40d, 0x40b, 0x3, 0x2, 0x2, 0x2, 0x40d, 0x40e, 0x3, 0x2, 0x2, 
       0x2, 0x40e, 0x410, 0x3, 0x2, 0x2, 0x2, 0x40f, 0x40d, 0x3, 0x2, 0x2, 
       0x2, 0x410, 0x412, 0x5, 0x3d2, 0x1ea, 0x2, 0x411, 0x413, 0x5, 0x2a, 
       0x16, 0x2, 0x412, 0x411, 0x3, 0x2, 0x2, 0x2, 0x412, 0x413, 0x3, 0x2, 
       0x2, 0x2, 0x413, 0x415, 0x3, 0x2, 0x2, 0x2, 0x414, 0x401, 0x3, 0x2, 
       0x2, 0x2, 0x414, 0x408, 0x3, 0x2, 0x2, 0x2, 0x415, 0x11, 0x3, 0x2, 
       0x2, 0x2, 0x416, 0x41a, 0x7, 0x4e, 0x2, 0x2, 0x417, 0x419, 0x5, 0xf2, 
       0x7a, 0x2, 0x418, 0x417, 0x3, 0x2, 0x2, 0x2, 0x419, 0x41c, 0x3, 0x2, 
       0x2, 0x2, 0x41a, 0x418, 0x3, 0x2, 0x2, 0x2, 0x41a, 0x41b, 0x3, 0x2, 
       0x2, 0x2, 0x41b, 0x41d, 0x3, 0x2, 0x2, 0x2, 0x41c, 0x41a, 0x3, 0x2, 
       0x2, 0x2, 0x41d, 0x41f, 0x5, 0x3d2, 0x1ea, 0x2, 0x41e, 0x420, 0x5, 
       0x2a, 0x16, 0x2, 0x41f, 0x41e, 0x3, 0x2, 0x2, 0x2, 0x41f, 0x420, 
       0x3, 0x2, 0x2, 0x2, 0x420, 0x13, 0x3, 0x2, 0x2, 0x2, 0x421, 0x423, 
       0x5, 0xf2, 0x7a, 0x2, 0x422, 0x421, 0x3, 0x2, 0x2, 0x2, 0x423, 0x426, 
       0x3, 0x2, 0x2, 0x2, 0x424, 0x422, 0x3, 0x2, 0x2, 0x2, 0x424, 0x425, 
       0x3, 0x2, 0x2, 0x2, 0x425, 0x427, 0x3, 0x2, 0x2, 0x2, 0x426, 0x424, 
       0x3, 0x2, 0x2, 0x2, 0x427, 0x429, 0x5, 0x3d2, 0x1ea, 0x2, 0x428, 
       0x42a, 0x5, 0x2a, 0x16, 0x2, 0x429, 0x428, 0x3, 0x2, 0x2, 0x2, 0x429, 
       0x42a, 0x3, 0x2, 0x2, 0x2, 0x42a, 0x15, 0x3, 0x2, 0x2, 0x2, 0x42b, 
       0x42c, 0x5, 0x10, 0x9, 0x2, 0x42c, 0x17, 0x3, 0x2, 0x2, 0x2, 0x42d, 
       0x42e, 0x5, 0x12, 0xa, 0x2, 0x42e, 0x19, 0x3, 0x2, 0x2, 0x2, 0x42f, 
       0x430, 0x5, 0x14, 0xb, 0x2, 0x430, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x431, 
       0x433, 0x5, 0xf2, 0x7a, 0x2, 0x432, 0x431, 0x3, 0x2, 0x2, 0x2, 0x433, 
       0x436, 0x3, 0x2, 0x2, 0x2, 0x434, 0x432, 0x3, 0x2, 0x2, 0x2, 0x434, 
       0x435, 0x3, 0x2, 0x2, 0x2, 0x435, 0x437, 0x3, 0x2, 0x2, 0x2, 0x436, 
       0x434, 0x3, 0x2, 0x2, 0x2, 0x437, 0x438, 0x5, 0x3d2, 0x1ea, 0x2, 
       0x438, 0x1d, 0x3, 0x2, 0x2, 0x2, 0x439, 0x43a, 0x5, 0x4, 0x3, 0x2, 
       0x43a, 0x43b, 0x5, 0x20, 0x11, 0x2, 0x43b, 0x443, 0x3, 0x2, 0x2, 
       0x2, 0x43c, 0x43d, 0x5, 0xe, 0x8, 0x2, 0x43d, 0x43e, 0x5, 0x20, 0x11, 
       0x2, 0x43e, 0x443, 0x3, 0x2, 0x2, 0x2, 0x43f, 0x440, 0x5, 0x1c, 0xf, 
       0x2, 0x440, 0x441, 0x5, 0x20, 0x11, 0x2, 0x441, 0x443, 0x3, 0x2, 
       0x2, 0x2, 0x442, 0x439, 0x3, 0x2, 0x2, 0x2, 0x442, 0x43c, 0x3, 0x2, 
       0x2, 0x2, 0x442, 0x43f, 0x3, 0x2, 0x2, 0x2, 0x443, 0x1f, 0x3, 0x2, 
       0x2, 0x2, 0x444, 0x446, 0x5, 0xf2, 0x7a, 0x2, 0x445, 0x444, 0x3, 
       0x2, 0x2, 0x2, 0x446, 0x449, 0x3, 0x2, 0x2, 0x2, 0x447, 0x445, 0x3, 
       0x2, 0x2, 0x2, 0x447, 0x448, 0x3, 0x2, 0x2, 0x2, 0x448, 0x44a, 0x3, 
       0x2, 0x2, 0x2, 0x449, 0x447, 0x3, 0x2, 0x2, 0x2, 0x44a, 0x44b, 0x7, 
       0x4a, 0x2, 0x2, 0x44b, 0x456, 0x7, 0x4b, 0x2, 0x2, 0x44c, 0x44e, 
       0x5, 0xf2, 0x7a, 0x2, 0x44d, 0x44c, 0x3, 0x2, 0x2, 0x2, 0x44e, 0x451, 
       0x3, 0x2, 0x2, 0x2, 0x44f, 0x44d, 0x3, 0x2, 0x2, 0x2, 0x44f, 0x450, 
       0x3, 0x2, 0x2, 0x2, 0x450, 0x452, 0x3, 0x2, 0x2, 0x2, 0x451, 0x44f, 
       0x3, 0x2, 0x2, 0x2, 0x452, 0x453, 0x7, 0x4a, 0x2, 0x2, 0x453, 0x455, 
       0x7, 0x4b, 0x2, 0x2, 0x454, 0x44f, 0x3, 0x2, 0x2, 0x2, 0x455, 0x458, 
       0x3, 0x2, 0x2, 0x2, 0x456, 0x454, 0x3, 0x2, 0x2, 0x2, 0x456, 0x457, 
       0x3, 0x2, 0x2, 0x2, 0x457, 0x21, 0x3, 0x2, 0x2, 0x2, 0x458, 0x456, 
       0x3, 0x2, 0x2, 0x2, 0x459, 0x45b, 0x5, 0x24, 0x13, 0x2, 0x45a, 0x459, 
       0x3, 0x2, 0x2, 0x2, 0x45b, 0x45e, 0x3, 0x2, 0x2, 0x2, 0x45c, 0x45a, 
       0x3, 0x2, 0x2, 0x2, 0x45c, 0x45d, 0x3, 0x2, 0x2, 0x2, 0x45d, 0x45f, 
       0x3, 0x2, 0x2, 0x2, 0x45e, 0x45c, 0x3, 0x2, 0x2, 0x2, 0x45f, 0x461, 
       0x5, 0x3d2, 0x1ea, 0x2, 0x460, 0x462, 0x5, 0x26, 0x14, 0x2, 0x461, 
       0x460, 0x3, 0x2, 0x2, 0x2, 0x461, 0x462, 0x3, 0x2, 0x2, 0x2, 0x462, 
       0x23, 0x3, 0x2, 0x2, 0x2, 0x463, 0x464, 0x5, 0xf2, 0x7a, 0x2, 0x464, 
       0x25, 0x3, 0x2, 0x2, 0x2, 0x465, 0x466, 0x7, 0x1d, 0x2, 0x2, 0x466, 
       0x470, 0x5, 0x1c, 0xf, 0x2, 0x467, 0x468, 0x7, 0x1d, 0x2, 0x2, 0x468, 
       0x46c, 0x5, 0xe, 0x8, 0x2, 0x469, 0x46b, 0x5, 0x28, 0x15, 0x2, 0x46a, 
       0x469, 0x3, 0x2, 0x2, 0x2, 0x46b, 0x46e, 0x3, 0x2, 0x2, 0x2, 0x46c, 
       0x46a, 0x3, 0x2, 0x2, 0x2, 0x46c, 0x46d, 0x3, 0x2, 0x2, 0x2, 0x46d, 
       0x470, 0x3, 0x2, 0x2, 0x2, 0x46e, 0x46c, 0x3, 0x2, 0x2, 0x2, 0x46f, 
       0x465, 0x3, 0x2, 0x2, 0x2, 0x46f, 0x467, 0x3, 0x2, 0x2, 0x2, 0x470, 
       0x27, 0x3, 0x2, 0x2, 0x2, 0x471, 0x472, 0x7, 0x66, 0x2, 0x2, 0x472, 
       0x473, 0x5, 0x16, 0xc, 0x2, 0x473, 0x29, 0x3, 0x2, 0x2, 0x2, 0x474, 
       0x475, 0x7, 0x54, 0x2, 0x2, 0x475, 0x476, 0x5, 0x2c, 0x17, 0x2, 0x476, 
       0x477, 0x7, 0x53, 0x2, 0x2, 0x477, 0x2b, 0x3, 0x2, 0x2, 0x2, 0x478, 
       0x47d, 0x5, 0x2e, 0x18, 0x2, 0x479, 0x47a, 0x7, 0x4d, 0x2, 0x2, 0x47a, 
       0x47c, 0x5, 0x2e, 0x18, 0x2, 0x47b, 0x479, 0x3, 0x2, 0x2, 0x2, 0x47c, 
       0x47f, 0x3, 0x2, 0x2, 0x2, 0x47d, 0x47b, 0x3, 0x2, 0x2, 0x2, 0x47d, 
       0x47e, 0x3, 0x2, 0x2, 0x2, 0x47e, 0x2d, 0x3, 0x2, 0x2, 0x2, 0x47f, 
       0x47d, 0x3, 0x2, 0x2, 0x2, 0x480, 0x483, 0x5, 0xc, 0x7, 0x2, 0x481, 
       0x483, 0x5, 0x30, 0x19, 0x2, 0x482, 0x480, 0x3, 0x2, 0x2, 0x2, 0x482, 
       0x481, 0x3, 0x2, 0x2, 0x2, 0x483, 0x2f, 0x3, 0x2, 0x2, 0x2, 0x484, 
       0x486, 0x5, 0xf2, 0x7a, 0x2, 0x485, 0x484, 0x3, 0x2, 0x2, 0x2, 0x486, 
       0x489, 0x3, 0x2, 0x2, 0x2, 0x487, 0x485, 0x3, 0x2, 0x2, 0x2, 0x487, 
       0x488, 0x3, 0x2, 0x2, 0x2, 0x488, 0x48a, 0x3, 0x2, 0x2, 0x2, 0x489, 
       0x487, 0x3, 0x2, 0x2, 0x2, 0x48a, 0x48c, 0x7, 0x57, 0x2, 0x2, 0x48b, 
       0x48d, 0x5, 0x32, 0x1a, 0x2, 0x48c, 0x48b, 0x3, 0x2, 0x2, 0x2, 0x48c, 
       0x48d, 0x3, 0x2, 0x2, 0x2, 0x48d, 0x31, 0x3, 0x2, 0x2, 0x2, 0x48e, 
       0x48f, 0x7, 0x1d, 0x2, 0x2, 0x48f, 0x493, 0x5, 0xc, 0x7, 0x2, 0x490, 
       0x491, 0x7, 0x34, 0x2, 0x2, 0x491, 0x493, 0x5, 0xc, 0x7, 0x2, 0x492, 
       0x48e, 0x3, 0x2, 0x2, 0x2, 0x492, 0x490, 0x3, 0x2, 0x2, 0x2, 0x493, 
       0x33, 0x3, 0x2, 0x2, 0x2, 0x494, 0x495, 0x8, 0x1b, 0x1, 0x2, 0x495, 
       0x496, 0x5, 0x3d2, 0x1ea, 0x2, 0x496, 0x49c, 0x3, 0x2, 0x2, 0x2, 
       0x497, 0x498, 0xc, 0x3, 0x2, 0x2, 0x498, 0x499, 0x7, 0x4e, 0x2, 0x2, 
       0x499, 0x49b, 0x5, 0x3d2, 0x1ea, 0x2, 0x49a, 0x497, 0x3, 0x2, 0x2, 
       0x2, 0x49b, 0x49e, 0x3, 0x2, 0x2, 0x2, 0x49c, 0x49a, 0x3, 0x2, 0x2, 
       0x2, 0x49c, 0x49d, 0x3, 0x2, 0x2, 0x2, 0x49d, 0x35, 0x3, 0x2, 0x2, 
       0x2, 0x49e, 0x49c, 0x3, 0x2, 0x2, 0x2, 0x49f, 0x4a0, 0x8, 0x1c, 0x1, 
       0x2, 0x4a0, 0x4a1, 0x5, 0x3d2, 0x1ea, 0x2, 0x4a1, 0x4a7, 0x3, 0x2, 
       0x2, 0x2, 0x4a2, 0x4a3, 0xc, 0x3, 0x2, 0x2, 0x4a3, 0x4a4, 0x7, 0x4e, 
       0x2, 0x2, 0x4a4, 0x4a6, 0x5, 0x3d2, 0x1ea, 0x2, 0x4a5, 0x4a2, 0x3, 
       0x2, 0x2, 0x2, 0x4a6, 0x4a9, 0x3, 0x2, 0x2, 0x2, 0x4a7, 0x4a5, 0x3, 
       0x2, 0x2, 0x2, 0x4a7, 0x4a8, 0x3, 0x2, 0x2, 0x2, 0x4a8, 0x37, 0x3, 
       0x2, 0x2, 0x2, 0x4a9, 0x4a7, 0x3, 0x2, 0x2, 0x2, 0x4aa, 0x4b0, 0x5, 
       0x3d2, 0x1ea, 0x2, 0x4ab, 0x4ac, 0x5, 0x3a, 0x1e, 0x2, 0x4ac, 0x4ad, 
       0x7, 0x4e, 0x2, 0x2, 0x4ad, 0x4ae, 0x5, 0x3d2, 0x1ea, 0x2, 0x4ae, 
       0x4b0, 0x3, 0x2, 0x2, 0x2, 0x4af, 0x4aa, 0x3, 0x2, 0x2, 0x2, 0x4af, 
       0x4ab, 0x3, 0x2, 0x2, 0x2, 0x4b0, 0x39, 0x3, 0x2, 0x2, 0x2, 0x4b1, 
       0x4b2, 0x8, 0x1e, 0x1, 0x2, 0x4b2, 0x4b3, 0x5, 0x3d2, 0x1ea, 0x2, 
       0x4b3, 0x4b9, 0x3, 0x2, 0x2, 0x2, 0x4b4, 0x4b5, 0xc, 0x3, 0x2, 0x2, 
       0x4b5, 0x4b6, 0x7, 0x4e, 0x2, 0x2, 0x4b6, 0x4b8, 0x5, 0x3d2, 0x1ea, 
       0x2, 0x4b7, 0x4b4, 0x3, 0x2, 0x2, 0x2, 0x4b8, 0x4bb, 0x3, 0x2, 0x2, 
       0x2, 0x4b9, 0x4b7, 0x3, 0x2, 0x2, 0x2, 0x4b9, 0x4ba, 0x3, 0x2, 0x2, 
       0x2, 0x4ba, 0x3b, 0x3, 0x2, 0x2, 0x2, 0x4bb, 0x4b9, 0x3, 0x2, 0x2, 
       0x2, 0x4bc, 0x4c2, 0x5, 0x3d2, 0x1ea, 0x2, 0x4bd, 0x4be, 0x5, 0x40, 
       0x21, 0x2, 0x4be, 0x4bf, 0x7, 0x4e, 0x2, 0x2, 0x4bf, 0x4c0, 0x5, 
       0x3d2, 0x1ea, 0x2, 0x4c0, 0x4c2, 0x3, 0x2, 0x2, 0x2, 0x4c1, 0x4bc, 
       0x3, 0x2, 0x2, 0x2, 0x4c1, 0x4bd, 0x3, 0x2, 0x2, 0x2, 0x4c2, 0x3d, 
       0x3, 0x2, 0x2, 0x2, 0x4c3, 0x4c4, 0x5, 0x3d2, 0x1ea, 0x2, 0x4c4, 
       0x3f, 0x3, 0x2, 0x2, 0x2, 0x4c5, 0x4c6, 0x8, 0x21, 0x1, 0x2, 0x4c6, 
       0x4c7, 0x5, 0x3d2, 0x1ea, 0x2, 0x4c7, 0x4cd, 0x3, 0x2, 0x2, 0x2, 
       0x4c8, 0x4c9, 0xc, 0x3, 0x2, 0x2, 0x4c9, 0x4ca, 0x7, 0x4e, 0x2, 0x2, 
       0x4ca, 0x4cc, 0x5, 0x3d2, 0x1ea, 0x2, 0x4cb, 0x4c8, 0x3, 0x2, 0x2, 
       0x2, 0x4cc, 0x4cf, 0x3, 0x2, 0x2, 0x2, 0x4cd, 0x4cb, 0x3, 0x2, 0x2, 
       0x2, 0x4cd, 0x4ce, 0x3, 0x2, 0x2, 0x2, 0x4ce, 0x41, 0x3, 0x2, 0x2, 
       0x2, 0x4cf, 0x4cd, 0x3, 0x2, 0x2, 0x2, 0x4d0, 0x4d3, 0x5, 0x44, 0x23, 
       0x2, 0x4d1, 0x4d3, 0x5, 0x46, 0x24, 0x2, 0x4d2, 0x4d0, 0x3, 0x2, 
       0x2, 0x2, 0x4d2, 0x4d1, 0x3, 0x2, 0x2, 0x2, 0x4d3, 0x43, 0x3, 0x2, 
       0x2, 0x2, 0x4d4, 0x4d6, 0x5, 0x48, 0x25, 0x2, 0x4d5, 0x4d4, 0x3, 
       0x2, 0x2, 0x2, 0x4d5, 0x4d6, 0x3, 0x2, 0x2, 0x2, 0x4d6, 0x4da, 0x3, 
       0x2, 0x2, 0x2, 0x4d7, 0x4d9, 0x5, 0x4c, 0x27, 0x2, 0x4d8, 0x4d7, 
       0x3, 0x2, 0x2, 0x2, 0x4d9, 0x4dc, 0x3, 0x2, 0x2, 0x2, 0x4da, 0x4d8, 
       0x3, 0x2, 0x2, 0x2, 0x4da, 0x4db, 0x3, 0x2, 0x2, 0x2, 0x4db, 0x4e0, 
       0x3, 0x2, 0x2, 0x2, 0x4dc, 0x4da, 0x3, 0x2, 0x2, 0x2, 0x4dd, 0x4df, 
       0x5, 0x56, 0x2c, 0x2, 0x4de, 0x4dd, 0x3, 0x2, 0x2, 0x2, 0x4df, 0x4e2, 
       0x3, 0x2, 0x2, 0x2, 0x4e0, 0x4de, 0x3, 0x2, 0x2, 0x2, 0x4e0, 0x4e1, 
       0x3, 0x2, 0x2, 0x2, 0x4e1, 0x4e3, 0x3, 0x2, 0x2, 0x2, 0x4e2, 0x4e0, 
       0x3, 0x2, 0x2, 0x2, 0x4e3, 0x4e4, 0x7, 0x2, 0x2, 0x3, 0x4e4, 0x45, 
       0x3, 0x2, 0x2, 0x2, 0x4e5, 0x4e7, 0x5, 0x4c, 0x27, 0x2, 0x4e6, 0x4e5, 
       0x3, 0x2, 0x2, 0x2, 0x4e7, 0x4ea, 0x3, 0x2, 0x2, 0x2, 0x4e8, 0x4e6, 
       0x3, 0x2, 0x2, 0x2, 0x4e8, 0x4e9, 0x3, 0x2, 0x2, 0x2, 0x4e9, 0x4eb, 
       0x3, 0x2, 0x2, 0x2, 0x4ea, 0x4e8, 0x3, 0x2, 0x2, 0x2, 0x4eb, 0x4ec, 
       0x5, 0x58, 0x2d, 0x2, 0x4ec, 0x47, 0x3, 0x2, 0x2, 0x2, 0x4ed, 0x4ef, 
       0x5, 0x4a, 0x26, 0x2, 0x4ee, 0x4ed, 0x3, 0x2, 0x2, 0x2, 0x4ef, 0x4f2, 
       0x3, 0x2, 0x2, 0x2, 0x4f0, 0x4ee, 0x3, 0x2, 0x2, 0x2, 0x4f0, 0x4f1, 
       0x3, 0x2, 0x2, 0x2, 0x4f1, 0x4f3, 0x3, 0x2, 0x2, 0x2, 0x4f2, 0x4f0, 
       0x3, 0x2, 0x2, 0x2, 0x4f3, 0x4f4, 0x7, 0x2c, 0x2, 0x2, 0x4f4, 0x4f5, 
       0x5, 0x36, 0x1c, 0x2, 0x4f5, 0x4f6, 0x7, 0x4c, 0x2, 0x2, 0x4f6, 0x49, 
       0x3, 0x2, 0x2, 0x2, 0x4f7, 0x4f8, 0x5, 0xf2, 0x7a, 0x2, 0x4f8, 0x4b, 
       0x3, 0x2, 0x2, 0x2, 0x4f9, 0x4fe, 0x5, 0x4e, 0x28, 0x2, 0x4fa, 0x4fe, 
       0x5, 0x50, 0x29, 0x2, 0x4fb, 0x4fe, 0x5, 0x52, 0x2a, 0x2, 0x4fc, 
       0x4fe, 0x5, 0x54, 0x2b, 0x2, 0x4fd, 0x4f9, 0x3, 0x2, 0x2, 0x2, 0x4fd, 
       0x4fa, 0x3, 0x2, 0x2, 0x2, 0x4fd, 0x4fb, 0x3, 0x2, 0x2, 0x2, 0x4fd, 
       0x4fc, 0x3, 0x2, 0x2, 0x2, 0x4fe, 0x4d, 0x3, 0x2, 0x2, 0x2, 0x4ff, 
       0x500, 0x7, 0x25, 0x2, 0x2, 0x500, 0x501, 0x5, 0x38, 0x1d, 0x2, 0x501, 
       0x502, 0x7, 0x4c, 0x2, 0x2, 0x502, 0x4f, 0x3, 0x2, 0x2, 0x2, 0x503, 
       0x504, 0x7, 0x25, 0x2, 0x2, 0x504, 0x505, 0x5, 0x3a, 0x1e, 0x2, 0x505, 
       0x506, 0x7, 0x4e, 0x2, 0x2, 0x506, 0x507, 0x7, 0x64, 0x2, 0x2, 0x507, 
       0x508, 0x7, 0x4c, 0x2, 0x2, 0x508, 0x51, 0x3, 0x2, 0x2, 0x2, 0x509, 
       0x50a, 0x7, 0x25, 0x2, 0x2, 0x50a, 0x50b, 0x7, 0x32, 0x2, 0x2, 0x50b, 
       0x50c, 0x5, 0x38, 0x1d, 0x2, 0x50c, 0x50d, 0x7, 0x4e, 0x2, 0x2, 0x50d, 
       0x50e, 0x5, 0x3d2, 0x1ea, 0x2, 0x50e, 0x50f, 0x7, 0x4c, 0x2, 0x2, 
       0x50f, 0x53, 0x3, 0x2, 0x2, 0x2, 0x510, 0x511, 0x7, 0x25, 0x2, 0x2, 
       0x511, 0x512, 0x7, 0x32, 0x2, 0x2, 0x512, 0x513, 0x5, 0x38, 0x1d, 
       0x2, 0x513, 0x514, 0x7, 0x4e, 0x2, 0x2, 0x514, 0x515, 0x7, 0x64, 
       0x2, 0x2, 0x515, 0x516, 0x7, 0x4c, 0x2, 0x2, 0x516, 0x55, 0x3, 0x2, 
       0x2, 0x2, 0x517, 0x51b, 0x5, 0x5e, 0x30, 0x2, 0x518, 0x51b, 0x5, 
       0xd2, 0x6a, 0x2, 0x519, 0x51b, 0x7, 0x4c, 0x2, 0x2, 0x51a, 0x517, 
       0x3, 0x2, 0x2, 0x2, 0x51a, 0x518, 0x3, 0x2, 0x2, 0x2, 0x51a, 0x519, 
       0x3, 0x2, 0x2, 0x2, 0x51b, 0x57, 0x3, 0x2, 0x2, 0x2, 0x51c, 0x51e, 
       0x5, 0xf2, 0x7a, 0x2, 0x51d, 0x51c, 0x3, 0x2, 0x2, 0x2, 0x51e, 0x521, 
       0x3, 0x2, 0x2, 0x2, 0x51f, 0x51d, 0x3, 0x2, 0x2, 0x2, 0x51f, 0x520, 
       0x3, 0x2, 0x2, 0x2, 0x520, 0x523, 0x3, 0x2, 0x2, 0x2, 0x521, 0x51f, 
       0x3, 0x2, 0x2, 0x2, 0x522, 0x524, 0x7, 0x3, 0x2, 0x2, 0x523, 0x522, 
       0x3, 0x2, 0x2, 0x2, 0x523, 0x524, 0x3, 0x2, 0x2, 0x2, 0x524, 0x525, 
       0x3, 0x2, 0x2, 0x2, 0x525, 0x526, 0x7, 0x4, 0x2, 0x2, 0x526, 0x527, 
       0x5, 0x34, 0x1b, 0x2, 0x527, 0x52b, 0x7, 0x48, 0x2, 0x2, 0x528, 0x52a, 
       0x5, 0x5a, 0x2e, 0x2, 0x529, 0x528, 0x3, 0x2, 0x2, 0x2, 0x52a, 0x52d, 
       0x3, 0x2, 0x2, 0x2, 0x52b, 0x529, 0x3, 0x2, 0x2, 0x2, 0x52b, 0x52c, 
       0x3, 0x2, 0x2, 0x2, 0x52c, 0x52e, 0x3, 0x2, 0x2, 0x2, 0x52d, 0x52b, 
       0x3, 0x2, 0x2, 0x2, 0x52e, 0x52f, 0x7, 0x49, 0x2, 0x2, 0x52f, 0x59, 
       0x3, 0x2, 0x2, 0x2, 0x530, 0x534, 0x7, 0x5, 0x2, 0x2, 0x531, 0x533, 
       0x5, 0x5c, 0x2f, 0x2, 0x532, 0x531, 0x3, 0x2, 0x2, 0x2, 0x533, 0x536, 
       0x3, 0x2, 0x2, 0x2, 0x534, 0x532, 0x3, 0x2, 0x2, 0x2, 0x534, 0x535, 
       0x3, 0x2, 0x2, 0x2, 0x535, 0x537, 0x3, 0x2, 0x2, 0x2, 0x536, 0x534, 
       0x3, 0x2, 0x2, 0x2, 0x537, 0x538, 0x5, 0x34, 0x1b, 0x2, 0x538, 0x539, 
       0x7, 0x4c, 0x2, 0x2, 0x539, 0x56a, 0x3, 0x2, 0x2, 0x2, 0x53a, 0x53b, 
       0x7, 0x6, 0x2, 0x2, 0x53b, 0x545, 0x5, 0x36, 0x1c, 0x2, 0x53c, 0x53d, 
       0x7, 0x7, 0x2, 0x2, 0x53d, 0x542, 0x5, 0x34, 0x1b, 0x2, 0x53e, 0x53f, 
       0x7, 0x4d, 0x2, 0x2, 0x53f, 0x541, 0x5, 0x34, 0x1b, 0x2, 0x540, 0x53e, 
       0x3, 0x2, 0x2, 0x2, 0x541, 0x544, 0x3, 0x2, 0x2, 0x2, 0x542, 0x540, 
       0x3, 0x2, 0x2, 0x2, 0x542, 0x543, 0x3, 0x2, 0x2, 0x2, 0x543, 0x546, 
       0x3, 0x2, 0x2, 0x2, 0x544, 0x542, 0x3, 0x2, 0x2, 0x2, 0x545, 0x53c, 
       0x3, 0x2, 0x2, 0x2, 0x545, 0x546, 0x3, 0x2, 0x2, 0x2, 0x546, 0x547, 
       0x3, 0x2, 0x2, 0x2, 0x547, 0x548, 0x7, 0x4c, 0x2, 0x2, 0x548, 0x56a, 
       0x3, 0x2, 0x2, 0x2, 0x549, 0x54a, 0x7, 0x8, 0x2, 0x2, 0x54a, 0x554, 
       0x5, 0x36, 0x1c, 0x2, 0x54b, 0x54c, 0x7, 0x7, 0x2, 0x2, 0x54c, 0x551, 
       0x5, 0x34, 0x1b, 0x2, 0x54d, 0x54e, 0x7, 0x4d, 0x2, 0x2, 0x54e, 0x550, 
       0x5, 0x34, 0x1b, 0x2, 0x54f, 0x54d, 0x3, 0x2, 0x2, 0x2, 0x550, 0x553, 
       0x3, 0x2, 0x2, 0x2, 0x551, 0x54f, 0x3, 0x2, 0x2, 0x2, 0x551, 0x552, 
       0x3, 0x2, 0x2, 0x2, 0x552, 0x555, 0x3, 0x2, 0x2, 0x2, 0x553, 0x551, 
       0x3, 0x2, 0x2, 0x2, 0x554, 0x54b, 0x3, 0x2, 0x2, 0x2, 0x554, 0x555, 
       0x3, 0x2, 0x2, 0x2, 0x555, 0x556, 0x3, 0x2, 0x2, 0x2, 0x556, 0x557, 
       0x7, 0x4c, 0x2, 0x2, 0x557, 0x56a, 0x3, 0x2, 0x2, 0x2, 0x558, 0x559, 
       0x7, 0x9, 0x2, 0x2, 0x559, 0x55a, 0x5, 0x38, 0x1d, 0x2, 0x55a, 0x55b, 
       0x7, 0x4c, 0x2, 0x2, 0x55b, 0x56a, 0x3, 0x2, 0x2, 0x2, 0x55c, 0x55d, 
       0x7, 0xa, 0x2, 0x2, 0x55d, 0x55e, 0x5, 0x38, 0x1d, 0x2, 0x55e, 0x55f, 
       0x7, 0xb, 0x2, 0x2, 0x55f, 0x564, 0x5, 0x38, 0x1d, 0x2, 0x560, 0x561, 
       0x7, 0x4d, 0x2, 0x2, 0x561, 0x563, 0x5, 0x38, 0x1d, 0x2, 0x562, 0x560, 
       0x3, 0x2, 0x2, 0x2, 0x563, 0x566, 0x3, 0x2, 0x2, 0x2, 0x564, 0x562, 
       0x3, 0x2, 0x2, 0x2, 0x564, 0x565, 0x3, 0x2, 0x2, 0x2, 0x565, 0x567, 
       0x3, 0x2, 0x2, 0x2, 0x566, 0x564, 0x3, 0x2, 0x2, 0x2, 0x567, 0x568, 
       0x7, 0x4c, 0x2, 0x2, 0x568, 0x56a, 0x3, 0x2, 0x2, 0x2, 0x569, 0x530, 
       0x3, 0x2, 0x2, 0x2, 0x569, 0x53a, 0x3, 0x2, 0x2, 0x2, 0x569, 0x549, 
       0x3, 0x2, 0x2, 0x2, 0x569, 0x558, 0x3, 0x2, 0x2, 0x2, 0x569, 0x55c, 
       0x3, 0x2, 0x2, 0x2, 0x56a, 0x5b, 0x3, 0x2, 0x2, 0x2, 0x56b, 0x56c, 
       0x9, 0x5, 0x2, 0x2, 0x56c, 0x5d, 0x3, 0x2, 0x2, 0x2, 0x56d, 0x570, 
       0x5, 0x60, 0x31, 0x2, 0x56e, 0x570, 0x5, 0xc6, 0x64, 0x2, 0x56f, 
       0x56d, 0x3, 0x2, 0x2, 0x2, 0x56f, 0x56e, 0x3, 0x2, 0x2, 0x2, 0x570, 
       0x5f, 0x3, 0x2, 0x2, 0x2, 0x571, 0x573, 0x5, 0x62, 0x32, 0x2, 0x572, 
       0x571, 0x3, 0x2, 0x2, 0x2, 0x573, 0x576, 0x3, 0x2, 0x2, 0x2, 0x574, 
       0x572, 0x3, 0x2, 0x2, 0x2, 0x574, 0x575, 0x3, 0x2, 0x2, 0x2, 0x575, 
       0x577, 0x3, 0x2, 0x2, 0x2, 0x576, 0x574, 0x3, 0x2, 0x2, 0x2, 0x577, 
       0x578, 0x7, 0x15, 0x2, 0x2, 0x578, 0x57a, 0x5, 0x3d2, 0x1ea, 0x2, 
       0x579, 0x57b, 0x5, 0x64, 0x33, 0x2, 0x57a, 0x579, 0x3, 0x2, 0x2, 
       0x2, 0x57a, 0x57b, 0x3, 0x2, 0x2, 0x2, 0x57b, 0x57d, 0x3, 0x2, 0x2, 
       0x2, 0x57c, 0x57e, 0x5, 0x68, 0x35, 0x2, 0x57d, 0x57c, 0x3, 0x2, 
       0x2, 0x2, 0x57d, 0x57e, 0x3, 0x2, 0x2, 0x2, 0x57e, 0x580, 0x3, 0x2, 
       0x2, 0x2, 0x57f, 0x581, 0x5, 0x6a, 0x36, 0x2, 0x580, 0x57f, 0x3, 
       0x2, 0x2, 0x2, 0x580, 0x581, 0x3, 0x2, 0x2, 0x2, 0x581, 0x582, 0x3, 
       0x2, 0x2, 0x2, 0x582, 0x583, 0x5, 0x6e, 0x38, 0x2, 0x583, 0x61, 0x3, 
       0x2, 0x2, 0x2, 0x584, 0x58d, 0x5, 0xf2, 0x7a, 0x2, 0x585, 0x58d, 
       0x7, 0x2f, 0x2, 0x2, 0x586, 0x58d, 0x7, 0x2e, 0x2, 0x2, 0x587, 0x58d, 
       0x7, 0x2d, 0x2, 0x2, 0x588, 0x58d, 0x7, 0xd, 0x2, 0x2, 0x589, 0x58d, 
       0x7, 0x32, 0x2, 0x2, 0x58a, 0x58d, 0x7, 0x1e, 0x2, 0x2, 0x58b, 0x58d, 
       0x7, 0x33, 0x2, 0x2, 0x58c, 0x584, 0x3, 0x2, 0x2, 0x2, 0x58c, 0x585, 
       0x3, 0x2, 0x2, 0x2, 0x58c, 0x586, 0x3, 0x2, 0x2, 0x2, 0x58c, 0x587, 
       0x3, 0x2, 0x2, 0x2, 0x58c, 0x588, 0x3, 0x2, 0x2, 0x2, 0x58c, 0x589, 
       0x3, 0x2, 0x2, 0x2, 0x58c, 0x58a, 0x3, 0x2, 0x2, 0x2, 0x58c, 0x58b, 
       0x3, 0x2, 0x2, 0x2, 0x58d, 0x63, 0x3, 0x2, 0x2, 0x2, 0x58e, 0x58f, 
       0x7, 0x54, 0x2, 0x2, 0x58f, 0x590, 0x5, 0x66, 0x34, 0x2, 0x590, 0x591, 
       0x7, 0x53, 0x2, 0x2, 0x591, 0x65, 0x3, 0x2, 0x2, 0x2, 0x592, 0x597, 
       0x5, 0x22, 0x12, 0x2, 0x593, 0x594, 0x7, 0x4d, 0x2, 0x2, 0x594, 0x596, 
       0x5, 0x22, 0x12, 0x2, 0x595, 0x593, 0x3, 0x2, 0x2, 0x2, 0x596, 0x599, 
       0x3, 0x2, 0x2, 0x2, 0x597, 0x595, 0x3, 0x2, 0x2, 0x2, 0x597, 0x598, 
       0x3, 0x2, 0x2, 0x2, 0x598, 0x67, 0x3, 0x2, 0x2, 0x2, 0x599, 0x597, 
       0x3, 0x2, 0x2, 0x2, 0x59a, 0x59b, 0x7, 0x1d, 0x2, 0x2, 0x59b, 0x59c, 
       0x5, 0x10, 0x9, 0x2, 0x59c, 0x69, 0x3, 0x2, 0x2, 0x2, 0x59d, 0x59e, 
       0x7, 0x24, 0x2, 0x2, 0x59e, 0x59f, 0x5, 0x6c, 0x37, 0x2, 0x59f, 0x6b, 
       0x3, 0x2, 0x2, 0x2, 0x5a0, 0x5a5, 0x5, 0x16, 0xc, 0x2, 0x5a1, 0x5a2, 
       0x7, 0x4d, 0x2, 0x2, 0x5a2, 0x5a4, 0x5, 0x16, 0xc, 0x2, 0x5a3, 0x5a1, 
       0x3, 0x2, 0x2, 0x2, 0x5a4, 0x5a7, 0x3, 0x2, 0x2, 0x2, 0x5a5, 0x5a3, 
       0x3, 0x2, 0x2, 0x2, 0x5a5, 0x5a6, 0x3, 0x2, 0x2, 0x2, 0x5a6, 0x6d, 
       0x3, 0x2, 0x2, 0x2, 0x5a7, 0x5a5, 0x3, 0x2, 0x2, 0x2, 0x5a8, 0x5ac, 
       0x7, 0x48, 0x2, 0x2, 0x5a9, 0x5ab, 0x5, 0x70, 0x39, 0x2, 0x5aa, 0x5a9, 
       0x3, 0x2, 0x2, 0x2, 0x5ab, 0x5ae, 0x3, 0x2, 0x2, 0x2, 0x5ac, 0x5aa, 
       0x3, 0x2, 0x2, 0x2, 0x5ac, 0x5ad, 0x3, 0x2, 0x2, 0x2, 0x5ad, 0x5af, 
       0x3, 0x2, 0x2, 0x2, 0x5ae, 0x5ac, 0x3, 0x2, 0x2, 0x2, 0x5af, 0x5b0, 
       0x7, 0x49, 0x2, 0x2, 0x5b0, 0x6f, 0x3, 0x2, 0x2, 0x2, 0x5b1, 0x5b6, 
       0x5, 0x72, 0x3a, 0x2, 0x5b2, 0x5b6, 0x5, 0xb6, 0x5c, 0x2, 0x5b3, 
       0x5b6, 0x5, 0xb8, 0x5d, 0x2, 0x5b4, 0x5b6, 0x5, 0xba, 0x5e, 0x2, 
       0x5b5, 0x5b1, 0x3, 0x2, 0x2, 0x2, 0x5b5, 0x5b2, 0x3, 0x2, 0x2, 0x2, 
       0x5b5, 0x5b3, 0x3, 0x2, 0x2, 0x2, 0x5b5, 0x5b4, 0x3, 0x2, 0x2, 0x2, 
       0x5b6, 0x71, 0x3, 0x2, 0x2, 0x2, 0x5b7, 0x5bd, 0x5, 0x74, 0x3b, 0x2, 
       0x5b8, 0x5bd, 0x5, 0x98, 0x4d, 0x2, 0x5b9, 0x5bd, 0x5, 0x5e, 0x30, 
       0x2, 0x5ba, 0x5bd, 0x5, 0xd2, 0x6a, 0x2, 0x5bb, 0x5bd, 0x7, 0x4c, 
       0x2, 0x2, 0x5bc, 0x5b7, 0x3, 0x2, 0x2, 0x2, 0x5bc, 0x5b8, 0x3, 0x2, 
       0x2, 0x2, 0x5bc, 0x5b9, 0x3, 0x2, 0x2, 0x2, 0x5bc, 0x5ba, 0x3, 0x2, 
       0x2, 0x2, 0x5bc, 0x5bb, 0x3, 0x2, 0x2, 0x2, 0x5bd, 0x73, 0x3, 0x2, 
       0x2, 0x2, 0x5be, 0x5c0, 0x5, 0x76, 0x3c, 0x2, 0x5bf, 0x5be, 0x3, 
       0x2, 0x2, 0x2, 0x5c0, 0x5c3, 0x3, 0x2, 0x2, 0x2, 0x5c1, 0x5bf, 0x3, 
       0x2, 0x2, 0x2, 0x5c1, 0x5c2, 0x3, 0x2, 0x2, 0x2, 0x5c2, 0x5c4, 0x3, 
       0x2, 0x2, 0x2, 0x5c3, 0x5c1, 0x3, 0x2, 0x2, 0x2, 0x5c4, 0x5c5, 0x5, 
       0x80, 0x41, 0x2, 0x5c5, 0x5c6, 0x5, 0x78, 0x3d, 0x2, 0x5c6, 0x5c7, 
       0x7, 0x4c, 0x2, 0x2, 0x5c7, 0x75, 0x3, 0x2, 0x2, 0x2, 0x5c8, 0x5d1, 
       0x5, 0xf2, 0x7a, 0x2, 0x5c9, 0x5d1, 0x7, 0x2f, 0x2, 0x2, 0x5ca, 0x5d1, 
       0x7, 0x2e, 0x2, 0x2, 0x5cb, 0x5d1, 0x7, 0x2d, 0x2, 0x2, 0x5cc, 0x5d1, 
       0x7, 0x32, 0x2, 0x2, 0x5cd, 0x5d1, 0x7, 0x1e, 0x2, 0x2, 0x5ce, 0x5d1, 
       0x7, 0x3a, 0x2, 0x2, 0x5cf, 0x5d1, 0x7, 0x3d, 0x2, 0x2, 0x5d0, 0x5c8, 
       0x3, 0x2, 0x2, 0x2, 0x5d0, 0x5c9, 0x3, 0x2, 0x2, 0x2, 0x5d0, 0x5ca, 
       0x3, 0x2, 0x2, 0x2, 0x5d0, 0x5cb, 0x3, 0x2, 0x2, 0x2, 0x5d0, 0x5cc, 
       0x3, 0x2, 0x2, 0x2, 0x5d0, 0x5cd, 0x3, 0x2, 0x2, 0x2, 0x5d0, 0x5ce, 
       0x3, 0x2, 0x2, 0x2, 0x5d0, 0x5cf, 0x3, 0x2, 0x2, 0x2, 0x5d1, 0x77, 
       0x3, 0x2, 0x2, 0x2, 0x5d2, 0x5d7, 0x5, 0x7a, 0x3e, 0x2, 0x5d3, 0x5d4, 
       0x7, 0x4d, 0x2, 0x2, 0x5d4, 0x5d6, 0x5, 0x7a, 0x3e, 0x2, 0x5d5, 0x5d3, 
       0x3, 0x2, 0x2, 0x2, 0x5d6, 0x5d9, 0x3, 0x2, 0x2, 0x2, 0x5d7, 0x5d5, 
       0x3, 0x2, 0x2, 0x2, 0x5d7, 0x5d8, 0x3, 0x2, 0x2, 0x2, 0x5d8, 0x79, 
       0x3, 0x2, 0x2, 0x2, 0x5d9, 0x5d7, 0x3, 0x2, 0x2, 0x2, 0x5da, 0x5dd, 
       0x5, 0x7c, 0x3f, 0x2, 0x5db, 0x5dc, 0x7, 0x52, 0x2, 0x2, 0x5dc, 0x5de, 
       0x5, 0x7e, 0x40, 0x2, 0x5dd, 0x5db, 0x3, 0x2, 0x2, 0x2, 0x5dd, 0x5de, 
       0x3, 0x2, 0x2, 0x2, 0x5de, 0x7b, 0x3, 0x2, 0x2, 0x2, 0x5df, 0x5e1, 
       0x5, 0x3d2, 0x1ea, 0x2, 0x5e0, 0x5e2, 0x5, 0x20, 0x11, 0x2, 0x5e1, 
       0x5e0, 0x3, 0x2, 0x2, 0x2, 0x5e1, 0x5e2, 0x3, 0x2, 0x2, 0x2, 0x5e2, 
       0x7d, 0x3, 0x2, 0x2, 0x2, 0x5e3, 0x5e6, 0x5, 0x1ae, 0xd8, 0x2, 0x5e4, 
       0x5e6, 0x5, 0x104, 0x83, 0x2, 0x5e5, 0x5e3, 0x3, 0x2, 0x2, 0x2, 0x5e5, 
       0x5e4, 0x3, 0x2, 0x2, 0x2, 0x5e6, 0x7f, 0x3, 0x2, 0x2, 0x2, 0x5e7, 
       0x5ea, 0x5, 0x82, 0x42, 0x2, 0x5e8, 0x5ea, 0x5, 0x84, 0x43, 0x2, 
       0x5e9, 0x5e7, 0x3, 0x2, 0x2, 0x2, 0x5e9, 0x5e8, 0x3, 0x2, 0x2, 0x2, 
       0x5ea, 0x81, 0x3, 0x2, 0x2, 0x2, 0x5eb, 0x5ee, 0x5, 0x6, 0x4, 0x2, 
       0x5ec, 0x5ee, 0x7, 0xf, 0x2, 0x2, 0x5ed, 0x5eb, 0x3, 0x2, 0x2, 0x2, 
       0x5ed, 0x5ec, 0x3, 0x2, 0x2, 0x2, 0x5ee, 0x83, 0x3, 0x2, 0x2, 0x2, 
       0x5ef, 0x5f3, 0x5, 0x86, 0x44, 0x2, 0x5f0, 0x5f3, 0x5, 0x94, 0x4b, 
       0x2, 0x5f1, 0x5f3, 0x5, 0x96, 0x4c, 0x2, 0x5f2, 0x5ef, 0x3, 0x2, 
       0x2, 0x2, 0x5f2, 0x5f0, 0x3, 0x2, 0x2, 0x2, 0x5f2, 0x5f1, 0x3, 0x2, 
       0x2, 0x2, 0x5f3, 0x85, 0x3, 0x2, 0x2, 0x2, 0x5f4, 0x5f7, 0x5, 0x8c, 
       0x47, 0x2, 0x5f5, 0x5f7, 0x5, 0x92, 0x4a, 0x2, 0x5f6, 0x5f4, 0x3, 
       0x2, 0x2, 0x2, 0x5f6, 0x5f5, 0x3, 0x2, 0x2, 0x2, 0x5f7, 0x5fc, 0x3, 
       0x2, 0x2, 0x2, 0x5f8, 0x5fb, 0x5, 0x8a, 0x46, 0x2, 0x5f9, 0x5fb, 
       0x5, 0x90, 0x49, 0x2, 0x5fa, 0x5f8, 0x3, 0x2, 0x2, 0x2, 0x5fa, 0x5f9, 
       0x3, 0x2, 0x2, 0x2, 0x5fb, 0x5fe, 0x3, 0x2, 0x2, 0x2, 0x5fc, 0x5fa, 
       0x3, 0x2, 0x2, 0x2, 0x5fc, 0x5fd, 0x3, 0x2, 0x2, 0x2, 0x5fd, 0x87, 
       0x3, 0x2, 0x2, 0x2, 0x5fe, 0x5fc, 0x3, 0x2, 0x2, 0x2, 0x5ff, 0x601, 
       0x5, 0x3d2, 0x1ea, 0x2, 0x600, 0x602, 0x5, 0x2a, 0x16, 0x2, 0x601, 
       0x600, 0x3, 0x2, 0x2, 0x2, 0x601, 0x602, 0x3, 0x2, 0x2, 0x2, 0x602, 
       0x610, 0x3, 0x2, 0x2, 0x2, 0x603, 0x604, 0x5, 0x86, 0x44, 0x2, 0x604, 
       0x608, 0x7, 0x4e, 0x2, 0x2, 0x605, 0x607, 0x5, 0xf2, 0x7a, 0x2, 0x606, 
       0x605, 0x3, 0x2, 0x2, 0x2, 0x607, 0x60a, 0x3, 0x2, 0x2, 0x2, 0x608, 
       0x606, 0x3, 0x2, 0x2, 0x2, 
  };
  static uint16_t serializedATNSegment1[] = {
    0x608, 0x609, 0x3, 0x2, 0x2, 0x2, 0x609, 0x60b, 0x3, 0x2, 0x2, 0x2, 
       0x60a, 0x608, 0x3, 0x2, 0x2, 0x2, 0x60b, 0x60d, 0x5, 0x3d2, 0x1ea, 
       0x2, 0x60c, 0x60e, 0x5, 0x2a, 0x16, 0x2, 0x60d, 0x60c, 0x3, 0x2, 
       0x2, 0x2, 0x60d, 0x60e, 0x3, 0x2, 0x2, 0x2, 0x60e, 0x610, 0x3, 0x2, 
       0x2, 0x2, 0x60f, 0x5ff, 0x3, 0x2, 0x2, 0x2, 0x60f, 0x603, 0x3, 0x2, 
       0x2, 0x2, 0x610, 0x89, 0x3, 0x2, 0x2, 0x2, 0x611, 0x615, 0x7, 0x4e, 
       0x2, 0x2, 0x612, 0x614, 0x5, 0xf2, 0x7a, 0x2, 0x613, 0x612, 0x3, 
       0x2, 0x2, 0x2, 0x614, 0x617, 0x3, 0x2, 0x2, 0x2, 0x615, 0x613, 0x3, 
       0x2, 0x2, 0x2, 0x615, 0x616, 0x3, 0x2, 0x2, 0x2, 0x616, 0x618, 0x3, 
       0x2, 0x2, 0x2, 0x617, 0x615, 0x3, 0x2, 0x2, 0x2, 0x618, 0x61a, 0x5, 
       0x3d2, 0x1ea, 0x2, 0x619, 0x61b, 0x5, 0x2a, 0x16, 0x2, 0x61a, 0x619, 
       0x3, 0x2, 0x2, 0x2, 0x61a, 0x61b, 0x3, 0x2, 0x2, 0x2, 0x61b, 0x8b, 
       0x3, 0x2, 0x2, 0x2, 0x61c, 0x61e, 0x5, 0x3d2, 0x1ea, 0x2, 0x61d, 
       0x61f, 0x5, 0x2a, 0x16, 0x2, 0x61e, 0x61d, 0x3, 0x2, 0x2, 0x2, 0x61e, 
       0x61f, 0x3, 0x2, 0x2, 0x2, 0x61f, 0x8d, 0x3, 0x2, 0x2, 0x2, 0x620, 
       0x621, 0x5, 0x88, 0x45, 0x2, 0x621, 0x8f, 0x3, 0x2, 0x2, 0x2, 0x622, 
       0x623, 0x5, 0x8a, 0x46, 0x2, 0x623, 0x91, 0x3, 0x2, 0x2, 0x2, 0x624, 
       0x625, 0x5, 0x8c, 0x47, 0x2, 0x625, 0x93, 0x3, 0x2, 0x2, 0x2, 0x626, 
       0x627, 0x5, 0x3d2, 0x1ea, 0x2, 0x627, 0x95, 0x3, 0x2, 0x2, 0x2, 0x628, 
       0x629, 0x5, 0x82, 0x42, 0x2, 0x629, 0x62a, 0x5, 0x20, 0x11, 0x2, 
       0x62a, 0x632, 0x3, 0x2, 0x2, 0x2, 0x62b, 0x62c, 0x5, 0x86, 0x44, 
       0x2, 0x62c, 0x62d, 0x5, 0x20, 0x11, 0x2, 0x62d, 0x632, 0x3, 0x2, 
       0x2, 0x2, 0x62e, 0x62f, 0x5, 0x94, 0x4b, 0x2, 0x62f, 0x630, 0x5, 
       0x20, 0x11, 0x2, 0x630, 0x632, 0x3, 0x2, 0x2, 0x2, 0x631, 0x628, 
       0x3, 0x2, 0x2, 0x2, 0x631, 0x62b, 0x3, 0x2, 0x2, 0x2, 0x631, 0x62e, 
       0x3, 0x2, 0x2, 0x2, 0x632, 0x97, 0x3, 0x2, 0x2, 0x2, 0x633, 0x635, 
       0x5, 0x9a, 0x4e, 0x2, 0x634, 0x633, 0x3, 0x2, 0x2, 0x2, 0x635, 0x638, 
       0x3, 0x2, 0x2, 0x2, 0x636, 0x634, 0x3, 0x2, 0x2, 0x2, 0x636, 0x637, 
       0x3, 0x2, 0x2, 0x2, 0x637, 0x639, 0x3, 0x2, 0x2, 0x2, 0x638, 0x636, 
       0x3, 0x2, 0x2, 0x2, 0x639, 0x63a, 0x5, 0x9c, 0x4f, 0x2, 0x63a, 0x63b, 
       0x5, 0xb4, 0x5b, 0x2, 0x63b, 0x99, 0x3, 0x2, 0x2, 0x2, 0x63c, 0x647, 
       0x5, 0xf2, 0x7a, 0x2, 0x63d, 0x647, 0x7, 0x2f, 0x2, 0x2, 0x63e, 0x647, 
       0x7, 0x2e, 0x2, 0x2, 0x63f, 0x647, 0x7, 0x2d, 0x2, 0x2, 0x640, 0x647, 
       0x7, 0xd, 0x2, 0x2, 0x641, 0x647, 0x7, 0x32, 0x2, 0x2, 0x642, 0x647, 
       0x7, 0x1e, 0x2, 0x2, 0x643, 0x647, 0x7, 0x36, 0x2, 0x2, 0x644, 0x647, 
       0x7, 0x2a, 0x2, 0x2, 0x645, 0x647, 0x7, 0x33, 0x2, 0x2, 0x646, 0x63c, 
       0x3, 0x2, 0x2, 0x2, 0x646, 0x63d, 0x3, 0x2, 0x2, 0x2, 0x646, 0x63e, 
       0x3, 0x2, 0x2, 0x2, 0x646, 0x63f, 0x3, 0x2, 0x2, 0x2, 0x646, 0x640, 
       0x3, 0x2, 0x2, 0x2, 0x646, 0x641, 0x3, 0x2, 0x2, 0x2, 0x646, 0x642, 
       0x3, 0x2, 0x2, 0x2, 0x646, 0x643, 0x3, 0x2, 0x2, 0x2, 0x646, 0x644, 
       0x3, 0x2, 0x2, 0x2, 0x646, 0x645, 0x3, 0x2, 0x2, 0x2, 0x647, 0x9b, 
       0x3, 0x2, 0x2, 0x2, 0x648, 0x649, 0x5, 0x9e, 0x50, 0x2, 0x649, 0x64b, 
       0x5, 0xa0, 0x51, 0x2, 0x64a, 0x64c, 0x5, 0xae, 0x58, 0x2, 0x64b, 
       0x64a, 0x3, 0x2, 0x2, 0x2, 0x64b, 0x64c, 0x3, 0x2, 0x2, 0x2, 0x64c, 
       0x65a, 0x3, 0x2, 0x2, 0x2, 0x64d, 0x651, 0x5, 0x64, 0x33, 0x2, 0x64e, 
       0x650, 0x5, 0xf2, 0x7a, 0x2, 0x64f, 0x64e, 0x3, 0x2, 0x2, 0x2, 0x650, 
       0x653, 0x3, 0x2, 0x2, 0x2, 0x651, 0x64f, 0x3, 0x2, 0x2, 0x2, 0x651, 
       0x652, 0x3, 0x2, 0x2, 0x2, 0x652, 0x654, 0x3, 0x2, 0x2, 0x2, 0x653, 
       0x651, 0x3, 0x2, 0x2, 0x2, 0x654, 0x655, 0x5, 0x9e, 0x50, 0x2, 0x655, 
       0x657, 0x5, 0xa0, 0x51, 0x2, 0x656, 0x658, 0x5, 0xae, 0x58, 0x2, 
       0x657, 0x656, 0x3, 0x2, 0x2, 0x2, 0x657, 0x658, 0x3, 0x2, 0x2, 0x2, 
       0x658, 0x65a, 0x3, 0x2, 0x2, 0x2, 0x659, 0x648, 0x3, 0x2, 0x2, 0x2, 
       0x659, 0x64d, 0x3, 0x2, 0x2, 0x2, 0x65a, 0x9d, 0x3, 0x2, 0x2, 0x2, 
       0x65b, 0x65e, 0x5, 0x80, 0x41, 0x2, 0x65c, 0x65e, 0x7, 0x3c, 0x2, 
       0x2, 0x65d, 0x65b, 0x3, 0x2, 0x2, 0x2, 0x65d, 0x65c, 0x3, 0x2, 0x2, 
       0x2, 0x65e, 0x9f, 0x3, 0x2, 0x2, 0x2, 0x65f, 0x660, 0x5, 0x3d2, 0x1ea, 
       0x2, 0x660, 0x662, 0x7, 0x46, 0x2, 0x2, 0x661, 0x663, 0x5, 0xa2, 
       0x52, 0x2, 0x662, 0x661, 0x3, 0x2, 0x2, 0x2, 0x662, 0x663, 0x3, 0x2, 
       0x2, 0x2, 0x663, 0x664, 0x3, 0x2, 0x2, 0x2, 0x664, 0x666, 0x7, 0x47, 
       0x2, 0x2, 0x665, 0x667, 0x5, 0x20, 0x11, 0x2, 0x666, 0x665, 0x3, 
       0x2, 0x2, 0x2, 0x666, 0x667, 0x3, 0x2, 0x2, 0x2, 0x667, 0xa1, 0x3, 
       0x2, 0x2, 0x2, 0x668, 0x669, 0x5, 0xa4, 0x53, 0x2, 0x669, 0x66a, 
       0x7, 0x4d, 0x2, 0x2, 0x66a, 0x66b, 0x5, 0xaa, 0x56, 0x2, 0x66b, 0x66f, 
       0x3, 0x2, 0x2, 0x2, 0x66c, 0x66f, 0x5, 0xaa, 0x56, 0x2, 0x66d, 0x66f, 
       0x5, 0xac, 0x57, 0x2, 0x66e, 0x668, 0x3, 0x2, 0x2, 0x2, 0x66e, 0x66c, 
       0x3, 0x2, 0x2, 0x2, 0x66e, 0x66d, 0x3, 0x2, 0x2, 0x2, 0x66f, 0xa3, 
       0x3, 0x2, 0x2, 0x2, 0x670, 0x675, 0x5, 0xa6, 0x54, 0x2, 0x671, 0x672, 
       0x7, 0x4d, 0x2, 0x2, 0x672, 0x674, 0x5, 0xa6, 0x54, 0x2, 0x673, 0x671, 
       0x3, 0x2, 0x2, 0x2, 0x674, 0x677, 0x3, 0x2, 0x2, 0x2, 0x675, 0x673, 
       0x3, 0x2, 0x2, 0x2, 0x675, 0x676, 0x3, 0x2, 0x2, 0x2, 0x676, 0x681, 
       0x3, 0x2, 0x2, 0x2, 0x677, 0x675, 0x3, 0x2, 0x2, 0x2, 0x678, 0x67d, 
       0x5, 0xac, 0x57, 0x2, 0x679, 0x67a, 0x7, 0x4d, 0x2, 0x2, 0x67a, 0x67c, 
       0x5, 0xa6, 0x54, 0x2, 0x67b, 0x679, 0x3, 0x2, 0x2, 0x2, 0x67c, 0x67f, 
       0x3, 0x2, 0x2, 0x2, 0x67d, 0x67b, 0x3, 0x2, 0x2, 0x2, 0x67d, 0x67e, 
       0x3, 0x2, 0x2, 0x2, 0x67e, 0x681, 0x3, 0x2, 0x2, 0x2, 0x67f, 0x67d, 
       0x3, 0x2, 0x2, 0x2, 0x680, 0x670, 0x3, 0x2, 0x2, 0x2, 0x680, 0x678, 
       0x3, 0x2, 0x2, 0x2, 0x681, 0xa5, 0x3, 0x2, 0x2, 0x2, 0x682, 0x684, 
       0x5, 0xa8, 0x55, 0x2, 0x683, 0x682, 0x3, 0x2, 0x2, 0x2, 0x684, 0x687, 
       0x3, 0x2, 0x2, 0x2, 0x685, 0x683, 0x3, 0x2, 0x2, 0x2, 0x685, 0x686, 
       0x3, 0x2, 0x2, 0x2, 0x686, 0x688, 0x3, 0x2, 0x2, 0x2, 0x687, 0x685, 
       0x3, 0x2, 0x2, 0x2, 0x688, 0x689, 0x5, 0x80, 0x41, 0x2, 0x689, 0x68a, 
       0x5, 0x7c, 0x3f, 0x2, 0x68a, 0xa7, 0x3, 0x2, 0x2, 0x2, 0x68b, 0x68e, 
       0x5, 0xf2, 0x7a, 0x2, 0x68c, 0x68e, 0x7, 0x1e, 0x2, 0x2, 0x68d, 0x68b, 
       0x3, 0x2, 0x2, 0x2, 0x68d, 0x68c, 0x3, 0x2, 0x2, 0x2, 0x68e, 0xa9, 
       0x3, 0x2, 0x2, 0x2, 0x68f, 0x691, 0x5, 0xa8, 0x55, 0x2, 0x690, 0x68f, 
       0x3, 0x2, 0x2, 0x2, 0x691, 0x694, 0x3, 0x2, 0x2, 0x2, 0x692, 0x690, 
       0x3, 0x2, 0x2, 0x2, 0x692, 0x693, 0x3, 0x2, 0x2, 0x2, 0x693, 0x695, 
       0x3, 0x2, 0x2, 0x2, 0x694, 0x692, 0x3, 0x2, 0x2, 0x2, 0x695, 0x699, 
       0x5, 0x80, 0x41, 0x2, 0x696, 0x698, 0x5, 0xf2, 0x7a, 0x2, 0x697, 
       0x696, 0x3, 0x2, 0x2, 0x2, 0x698, 0x69b, 0x3, 0x2, 0x2, 0x2, 0x699, 
       0x697, 0x3, 0x2, 0x2, 0x2, 0x699, 0x69a, 0x3, 0x2, 0x2, 0x2, 0x69a, 
       0x69c, 0x3, 0x2, 0x2, 0x2, 0x69b, 0x699, 0x3, 0x2, 0x2, 0x2, 0x69c, 
       0x69d, 0x7, 0x4f, 0x2, 0x2, 0x69d, 0x69e, 0x5, 0x7c, 0x3f, 0x2, 0x69e, 
       0x6a1, 0x3, 0x2, 0x2, 0x2, 0x69f, 0x6a1, 0x5, 0xa6, 0x54, 0x2, 0x6a0, 
       0x692, 0x3, 0x2, 0x2, 0x2, 0x6a0, 0x69f, 0x3, 0x2, 0x2, 0x2, 0x6a1, 
       0xab, 0x3, 0x2, 0x2, 0x2, 0x6a2, 0x6a4, 0x5, 0xf2, 0x7a, 0x2, 0x6a3, 
       0x6a2, 0x3, 0x2, 0x2, 0x2, 0x6a4, 0x6a7, 0x3, 0x2, 0x2, 0x2, 0x6a5, 
       0x6a3, 0x3, 0x2, 0x2, 0x2, 0x6a5, 0x6a6, 0x3, 0x2, 0x2, 0x2, 0x6a6, 
       0x6a8, 0x3, 0x2, 0x2, 0x2, 0x6a7, 0x6a5, 0x3, 0x2, 0x2, 0x2, 0x6a8, 
       0x6ac, 0x5, 0x80, 0x41, 0x2, 0x6a9, 0x6aa, 0x5, 0x3d2, 0x1ea, 0x2, 
       0x6aa, 0x6ab, 0x7, 0x4e, 0x2, 0x2, 0x6ab, 0x6ad, 0x3, 0x2, 0x2, 0x2, 
       0x6ac, 0x6a9, 0x3, 0x2, 0x2, 0x2, 0x6ac, 0x6ad, 0x3, 0x2, 0x2, 0x2, 
       0x6ad, 0x6ae, 0x3, 0x2, 0x2, 0x2, 0x6ae, 0x6af, 0x7, 0x37, 0x2, 0x2, 
       0x6af, 0xad, 0x3, 0x2, 0x2, 0x2, 0x6b0, 0x6b1, 0x7, 0x39, 0x2, 0x2, 
       0x6b1, 0x6b2, 0x5, 0xb0, 0x59, 0x2, 0x6b2, 0xaf, 0x3, 0x2, 0x2, 0x2, 
       0x6b3, 0x6b8, 0x5, 0xb2, 0x5a, 0x2, 0x6b4, 0x6b5, 0x7, 0x4d, 0x2, 
       0x2, 0x6b5, 0x6b7, 0x5, 0xb2, 0x5a, 0x2, 0x6b6, 0x6b4, 0x3, 0x2, 
       0x2, 0x2, 0x6b7, 0x6ba, 0x3, 0x2, 0x2, 0x2, 0x6b8, 0x6b6, 0x3, 0x2, 
       0x2, 0x2, 0x6b8, 0x6b9, 0x3, 0x2, 0x2, 0x2, 0x6b9, 0xb1, 0x3, 0x2, 
       0x2, 0x2, 0x6ba, 0x6b8, 0x3, 0x2, 0x2, 0x2, 0x6bb, 0x6be, 0x5, 0x10, 
       0x9, 0x2, 0x6bc, 0x6be, 0x5, 0x1c, 0xf, 0x2, 0x6bd, 0x6bb, 0x3, 0x2, 
       0x2, 0x2, 0x6bd, 0x6bc, 0x3, 0x2, 0x2, 0x2, 0x6be, 0xb3, 0x3, 0x2, 
       0x2, 0x2, 0x6bf, 0x6c2, 0x5, 0x108, 0x85, 0x2, 0x6c0, 0x6c2, 0x7, 
       0x4c, 0x2, 0x2, 0x6c1, 0x6bf, 0x3, 0x2, 0x2, 0x2, 0x6c1, 0x6c0, 0x3, 
       0x2, 0x2, 0x2, 0x6c2, 0xb5, 0x3, 0x2, 0x2, 0x2, 0x6c3, 0x6c4, 0x5, 
       0x108, 0x85, 0x2, 0x6c4, 0xb7, 0x3, 0x2, 0x2, 0x2, 0x6c5, 0x6c6, 
       0x7, 0x32, 0x2, 0x2, 0x6c6, 0x6c7, 0x5, 0x108, 0x85, 0x2, 0x6c7, 
       0xb9, 0x3, 0x2, 0x2, 0x2, 0x6c8, 0x6ca, 0x5, 0xbc, 0x5f, 0x2, 0x6c9, 
       0x6c8, 0x3, 0x2, 0x2, 0x2, 0x6ca, 0x6cd, 0x3, 0x2, 0x2, 0x2, 0x6cb, 
       0x6c9, 0x3, 0x2, 0x2, 0x2, 0x6cb, 0x6cc, 0x3, 0x2, 0x2, 0x2, 0x6cc, 
       0x6ce, 0x3, 0x2, 0x2, 0x2, 0x6cd, 0x6cb, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x6d0, 0x5, 0xbe, 0x60, 0x2, 0x6cf, 0x6d1, 0x5, 0xae, 0x58, 0x2, 
       0x6d0, 0x6cf, 0x3, 0x2, 0x2, 0x2, 0x6d0, 0x6d1, 0x3, 0x2, 0x2, 0x2, 
       0x6d1, 0x6d2, 0x3, 0x2, 0x2, 0x2, 0x6d2, 0x6d3, 0x5, 0xc2, 0x62, 
       0x2, 0x6d3, 0xbb, 0x3, 0x2, 0x2, 0x2, 0x6d4, 0x6d9, 0x5, 0xf2, 0x7a, 
       0x2, 0x6d5, 0x6d9, 0x7, 0x2f, 0x2, 0x2, 0x6d6, 0x6d9, 0x7, 0x2e, 
       0x2, 0x2, 0x6d7, 0x6d9, 0x7, 0x2d, 0x2, 0x2, 0x6d8, 0x6d4, 0x3, 0x2, 
       0x2, 0x2, 0x6d8, 0x6d5, 0x3, 0x2, 0x2, 0x2, 0x6d8, 0x6d6, 0x3, 0x2, 
       0x2, 0x2, 0x6d8, 0x6d7, 0x3, 0x2, 0x2, 0x2, 0x6d9, 0xbd, 0x3, 0x2, 
       0x2, 0x2, 0x6da, 0x6dc, 0x5, 0x64, 0x33, 0x2, 0x6db, 0x6da, 0x3, 
       0x2, 0x2, 0x2, 0x6db, 0x6dc, 0x3, 0x2, 0x2, 0x2, 0x6dc, 0x6dd, 0x3, 
       0x2, 0x2, 0x2, 0x6dd, 0x6de, 0x5, 0xc0, 0x61, 0x2, 0x6de, 0x6e0, 
       0x7, 0x46, 0x2, 0x2, 0x6df, 0x6e1, 0x5, 0xa2, 0x52, 0x2, 0x6e0, 0x6df, 
       0x3, 0x2, 0x2, 0x2, 0x6e0, 0x6e1, 0x3, 0x2, 0x2, 0x2, 0x6e1, 0x6e2, 
       0x3, 0x2, 0x2, 0x2, 0x6e2, 0x6e3, 0x7, 0x47, 0x2, 0x2, 0x6e3, 0xbf, 
       0x3, 0x2, 0x2, 0x2, 0x6e4, 0x6e5, 0x5, 0x3d2, 0x1ea, 0x2, 0x6e5, 
       0xc1, 0x3, 0x2, 0x2, 0x2, 0x6e6, 0x6e8, 0x7, 0x48, 0x2, 0x2, 0x6e7, 
       0x6e9, 0x5, 0xc4, 0x63, 0x2, 0x6e8, 0x6e7, 0x3, 0x2, 0x2, 0x2, 0x6e8, 
       0x6e9, 0x3, 0x2, 0x2, 0x2, 0x6e9, 0x6eb, 0x3, 0x2, 0x2, 0x2, 0x6ea, 
       0x6ec, 0x5, 0x10a, 0x86, 0x2, 0x6eb, 0x6ea, 0x3, 0x2, 0x2, 0x2, 0x6eb, 
       0x6ec, 0x3, 0x2, 0x2, 0x2, 0x6ec, 0x6ed, 0x3, 0x2, 0x2, 0x2, 0x6ed, 
       0x6ee, 0x7, 0x49, 0x2, 0x2, 0x6ee, 0xc3, 0x3, 0x2, 0x2, 0x2, 0x6ef, 
       0x6f1, 0x5, 0x2a, 0x16, 0x2, 0x6f0, 0x6ef, 0x3, 0x2, 0x2, 0x2, 0x6f0, 
       0x6f1, 0x3, 0x2, 0x2, 0x2, 0x6f1, 0x6f2, 0x3, 0x2, 0x2, 0x2, 0x6f2, 
       0x6f3, 0x7, 0x37, 0x2, 0x2, 0x6f3, 0x6f5, 0x7, 0x46, 0x2, 0x2, 0x6f4, 
       0x6f6, 0x5, 0x19e, 0xd0, 0x2, 0x6f5, 0x6f4, 0x3, 0x2, 0x2, 0x2, 0x6f5, 
       0x6f6, 0x3, 0x2, 0x2, 0x2, 0x6f6, 0x6f7, 0x3, 0x2, 0x2, 0x2, 0x6f7, 
       0x6f8, 0x7, 0x47, 0x2, 0x2, 0x6f8, 0x71e, 0x7, 0x4c, 0x2, 0x2, 0x6f9, 
       0x6fb, 0x5, 0x2a, 0x16, 0x2, 0x6fa, 0x6f9, 0x3, 0x2, 0x2, 0x2, 0x6fa, 
       0x6fb, 0x3, 0x2, 0x2, 0x2, 0x6fb, 0x6fc, 0x3, 0x2, 0x2, 0x2, 0x6fc, 
       0x6fd, 0x7, 0x34, 0x2, 0x2, 0x6fd, 0x6ff, 0x7, 0x46, 0x2, 0x2, 0x6fe, 
       0x700, 0x5, 0x19e, 0xd0, 0x2, 0x6ff, 0x6fe, 0x3, 0x2, 0x2, 0x2, 0x6ff, 
       0x700, 0x3, 0x2, 0x2, 0x2, 0x700, 0x701, 0x3, 0x2, 0x2, 0x2, 0x701, 
       0x702, 0x7, 0x47, 0x2, 0x2, 0x702, 0x71e, 0x7, 0x4c, 0x2, 0x2, 0x703, 
       0x704, 0x5, 0x3c, 0x1f, 0x2, 0x704, 0x706, 0x7, 0x4e, 0x2, 0x2, 0x705, 
       0x707, 0x5, 0x2a, 0x16, 0x2, 0x706, 0x705, 0x3, 0x2, 0x2, 0x2, 0x706, 
       0x707, 0x3, 0x2, 0x2, 0x2, 0x707, 0x708, 0x3, 0x2, 0x2, 0x2, 0x708, 
       0x709, 0x7, 0x34, 0x2, 0x2, 0x709, 0x70b, 0x7, 0x46, 0x2, 0x2, 0x70a, 
       0x70c, 0x5, 0x19e, 0xd0, 0x2, 0x70b, 0x70a, 0x3, 0x2, 0x2, 0x2, 0x70b, 
       0x70c, 0x3, 0x2, 0x2, 0x2, 0x70c, 0x70d, 0x3, 0x2, 0x2, 0x2, 0x70d, 
       0x70e, 0x7, 0x47, 0x2, 0x2, 0x70e, 0x70f, 0x7, 0x4c, 0x2, 0x2, 0x70f, 
       0x71e, 0x3, 0x2, 0x2, 0x2, 0x710, 0x711, 0x5, 0x16e, 0xb8, 0x2, 0x711, 
       0x713, 0x7, 0x4e, 0x2, 0x2, 0x712, 0x714, 0x5, 0x2a, 0x16, 0x2, 0x713, 
       0x712, 0x3, 0x2, 0x2, 0x2, 0x713, 0x714, 0x3, 0x2, 0x2, 0x2, 0x714, 
       0x715, 0x3, 0x2, 0x2, 0x2, 0x715, 0x716, 0x7, 0x34, 0x2, 0x2, 0x716, 
       0x718, 0x7, 0x46, 0x2, 0x2, 0x717, 0x719, 0x5, 0x19e, 0xd0, 0x2, 
       0x718, 0x717, 0x3, 0x2, 0x2, 0x2, 0x718, 0x719, 0x3, 0x2, 0x2, 0x2, 
       0x719, 0x71a, 0x3, 0x2, 0x2, 0x2, 0x71a, 0x71b, 0x7, 0x47, 0x2, 0x2, 
       0x71b, 0x71c, 0x7, 0x4c, 0x2, 0x2, 0x71c, 0x71e, 0x3, 0x2, 0x2, 0x2, 
       0x71d, 0x6f0, 0x3, 0x2, 0x2, 0x2, 0x71d, 0x6fa, 0x3, 0x2, 0x2, 0x2, 
       0x71d, 0x703, 0x3, 0x2, 0x2, 0x2, 0x71d, 0x710, 0x3, 0x2, 0x2, 0x2, 
       0x71e, 0xc5, 0x3, 0x2, 0x2, 0x2, 0x71f, 0x721, 0x5, 0x62, 0x32, 0x2, 
       0x720, 0x71f, 0x3, 0x2, 0x2, 0x2, 0x721, 0x724, 0x3, 0x2, 0x2, 0x2, 
       0x722, 0x720, 0x3, 0x2, 0x2, 0x2, 0x722, 0x723, 0x3, 0x2, 0x2, 0x2, 
       0x723, 0x725, 0x3, 0x2, 0x2, 0x2, 0x724, 0x722, 0x3, 0x2, 0x2, 0x2, 
       0x725, 0x726, 0x7, 0x1c, 0x2, 0x2, 0x726, 0x728, 0x5, 0x3d2, 0x1ea, 
       0x2, 0x727, 0x729, 0x5, 0x6a, 0x36, 0x2, 0x728, 0x727, 0x3, 0x2, 
       0x2, 0x2, 0x728, 0x729, 0x3, 0x2, 0x2, 0x2, 0x729, 0x72a, 0x3, 0x2, 
       0x2, 0x2, 0x72a, 0x72b, 0x5, 0xc8, 0x65, 0x2, 0x72b, 0xc7, 0x3, 0x2, 
       0x2, 0x2, 0x72c, 0x72e, 0x7, 0x48, 0x2, 0x2, 0x72d, 0x72f, 0x5, 0xca, 
       0x66, 0x2, 0x72e, 0x72d, 0x3, 0x2, 0x2, 0x2, 0x72e, 0x72f, 0x3, 0x2, 
       0x2, 0x2, 0x72f, 0x731, 0x3, 0x2, 0x2, 0x2, 0x730, 0x732, 0x7, 0x4d, 
       0x2, 0x2, 0x731, 0x730, 0x3, 0x2, 0x2, 0x2, 0x731, 0x732, 0x3, 0x2, 
       0x2, 0x2, 0x732, 0x734, 0x3, 0x2, 0x2, 0x2, 0x733, 0x735, 0x5, 0xd0, 
       0x69, 0x2, 0x734, 0x733, 0x3, 0x2, 0x2, 0x2, 0x734, 0x735, 0x3, 0x2, 
       0x2, 0x2, 0x735, 0x736, 0x3, 0x2, 0x2, 0x2, 0x736, 0x737, 0x7, 0x49, 
       0x2, 0x2, 0x737, 0xc9, 0x3, 0x2, 0x2, 0x2, 0x738, 0x73d, 0x5, 0xcc, 
       0x67, 0x2, 0x739, 0x73a, 0x7, 0x4d, 0x2, 0x2, 0x73a, 0x73c, 0x5, 
       0xcc, 0x67, 0x2, 0x73b, 0x739, 0x3, 0x2, 0x2, 0x2, 0x73c, 0x73f, 
       0x3, 0x2, 0x2, 0x2, 0x73d, 0x73b, 0x3, 0x2, 0x2, 0x2, 0x73d, 0x73e, 
       0x3, 0x2, 0x2, 0x2, 0x73e, 0xcb, 0x3, 0x2, 0x2, 0x2, 0x73f, 0x73d, 
       0x3, 0x2, 0x2, 0x2, 0x740, 0x742, 0x5, 0xce, 0x68, 0x2, 0x741, 0x740, 
       0x3, 0x2, 0x2, 0x2, 0x742, 0x745, 0x3, 0x2, 0x2, 0x2, 0x743, 0x741, 
       0x3, 0x2, 0x2, 0x2, 0x743, 0x744, 0x3, 0x2, 0x2, 0x2, 0x744, 0x746, 
       0x3, 0x2, 0x2, 0x2, 0x745, 0x743, 0x3, 0x2, 0x2, 0x2, 0x746, 0x74c, 
       0x5, 0x3d2, 0x1ea, 0x2, 0x747, 0x749, 0x7, 0x46, 0x2, 0x2, 0x748, 
       0x74a, 0x5, 0x19e, 0xd0, 0x2, 0x749, 0x748, 0x3, 0x2, 0x2, 0x2, 0x749, 
       0x74a, 0x3, 0x2, 0x2, 0x2, 0x74a, 0x74b, 0x3, 0x2, 0x2, 0x2, 0x74b, 
       0x74d, 0x7, 0x47, 0x2, 0x2, 0x74c, 0x747, 0x3, 0x2, 0x2, 0x2, 0x74c, 
       0x74d, 0x3, 0x2, 0x2, 0x2, 0x74d, 0x74f, 0x3, 0x2, 0x2, 0x2, 0x74e, 
       0x750, 0x5, 0x6e, 0x38, 0x2, 0x74f, 0x74e, 0x3, 0x2, 0x2, 0x2, 0x74f, 
       0x750, 0x3, 0x2, 0x2, 0x2, 0x750, 0xcd, 0x3, 0x2, 0x2, 0x2, 0x751, 
       0x752, 0x5, 0xf2, 0x7a, 0x2, 0x752, 0xcf, 0x3, 0x2, 0x2, 0x2, 0x753, 
       0x757, 0x7, 0x4c, 0x2, 0x2, 0x754, 0x756, 0x5, 0x70, 0x39, 0x2, 0x755, 
       0x754, 0x3, 0x2, 0x2, 0x2, 0x756, 0x759, 0x3, 0x2, 0x2, 0x2, 0x757, 
       0x755, 0x3, 0x2, 0x2, 0x2, 0x757, 0x758, 0x3, 0x2, 0x2, 0x2, 0x758, 
       0xd1, 0x3, 0x2, 0x2, 0x2, 0x759, 0x757, 0x3, 0x2, 0x2, 0x2, 0x75a, 
       0x75d, 0x5, 0xd4, 0x6b, 0x2, 0x75b, 0x75d, 0x5, 0xe6, 0x74, 0x2, 
       0x75c, 0x75a, 0x3, 0x2, 0x2, 0x2, 0x75c, 0x75b, 0x3, 0x2, 0x2, 0x2, 
       0x75d, 0xd3, 0x3, 0x2, 0x2, 0x2, 0x75e, 0x760, 0x5, 0xd6, 0x6c, 0x2, 
       0x75f, 0x75e, 0x3, 0x2, 0x2, 0x2, 0x760, 0x763, 0x3, 0x2, 0x2, 0x2, 
       0x761, 0x75f, 0x3, 0x2, 0x2, 0x2, 0x761, 0x762, 0x3, 0x2, 0x2, 0x2, 
       0x762, 0x764, 0x3, 0x2, 0x2, 0x2, 0x763, 0x761, 0x3, 0x2, 0x2, 0x2, 
       0x764, 0x765, 0x7, 0x28, 0x2, 0x2, 0x765, 0x767, 0x5, 0x3d2, 0x1ea, 
       0x2, 0x766, 0x768, 0x5, 0x64, 0x33, 0x2, 0x767, 0x766, 0x3, 0x2, 
       0x2, 0x2, 0x767, 0x768, 0x3, 0x2, 0x2, 0x2, 0x768, 0x76a, 0x3, 0x2, 
       0x2, 0x2, 0x769, 0x76b, 0x5, 0xd8, 0x6d, 0x2, 0x76a, 0x769, 0x3, 
       0x2, 0x2, 0x2, 0x76a, 0x76b, 0x3, 0x2, 0x2, 0x2, 0x76b, 0x76c, 0x3, 
       0x2, 0x2, 0x2, 0x76c, 0x76d, 0x5, 0xda, 0x6e, 0x2, 0x76d, 0xd5, 0x3, 
       0x2, 0x2, 0x2, 0x76e, 0x776, 0x5, 0xf2, 0x7a, 0x2, 0x76f, 0x776, 
       0x7, 0x2f, 0x2, 0x2, 0x770, 0x776, 0x7, 0x2e, 0x2, 0x2, 0x771, 0x776, 
       0x7, 0x2d, 0x2, 0x2, 0x772, 0x776, 0x7, 0xd, 0x2, 0x2, 0x773, 0x776, 
       0x7, 0x32, 0x2, 0x2, 0x774, 0x776, 0x7, 0x33, 0x2, 0x2, 0x775, 0x76e, 
       0x3, 0x2, 0x2, 0x2, 0x775, 0x76f, 0x3, 0x2, 0x2, 0x2, 0x775, 0x770, 
       0x3, 0x2, 0x2, 0x2, 0x775, 0x771, 0x3, 0x2, 0x2, 0x2, 0x775, 0x772, 
       0x3, 0x2, 0x2, 0x2, 0x775, 0x773, 0x3, 0x2, 0x2, 0x2, 0x775, 0x774, 
       0x3, 0x2, 0x2, 0x2, 0x776, 0xd7, 0x3, 0x2, 0x2, 0x2, 0x777, 0x778, 
       0x7, 0x1d, 0x2, 0x2, 0x778, 0x779, 0x5, 0x6c, 0x37, 0x2, 0x779, 0xd9, 
       0x3, 0x2, 0x2, 0x2, 0x77a, 0x77e, 0x7, 0x48, 0x2, 0x2, 0x77b, 0x77d, 
       0x5, 0xdc, 0x6f, 0x2, 0x77c, 0x77b, 0x3, 0x2, 0x2, 0x2, 0x77d, 0x780, 
       0x3, 0x2, 0x2, 0x2, 0x77e, 0x77c, 0x3, 0x2, 0x2, 0x2, 0x77e, 0x77f, 
       0x3, 0x2, 0x2, 0x2, 0x77f, 0x781, 0x3, 0x2, 0x2, 0x2, 0x780, 0x77e, 
       0x3, 0x2, 0x2, 0x2, 0x781, 0x782, 0x7, 0x49, 0x2, 0x2, 0x782, 0xdb, 
       0x3, 0x2, 0x2, 0x2, 0x783, 0x789, 0x5, 0xde, 0x70, 0x2, 0x784, 0x789, 
       0x5, 0xe2, 0x72, 0x2, 0x785, 0x789, 0x5, 0x5e, 0x30, 0x2, 0x786, 
       0x789, 0x5, 0xd2, 0x6a, 0x2, 0x787, 0x789, 0x7, 0x4c, 0x2, 0x2, 0x788, 
       0x783, 0x3, 0x2, 0x2, 0x2, 0x788, 0x784, 0x3, 0x2, 0x2, 0x2, 0x788, 
       0x785, 0x3, 0x2, 0x2, 0x2, 0x788, 0x786, 0x3, 0x2, 0x2, 0x2, 0x788, 
       0x787, 0x3, 0x2, 0x2, 0x2, 0x789, 0xdd, 0x3, 0x2, 0x2, 0x2, 0x78a, 
       0x78c, 0x5, 0xe0, 0x71, 0x2, 0x78b, 0x78a, 0x3, 0x2, 0x2, 0x2, 0x78c, 
       0x78f, 0x3, 0x2, 0x2, 0x2, 0x78d, 0x78b, 0x3, 0x2, 0x2, 0x2, 0x78d, 
       0x78e, 0x3, 0x2, 0x2, 0x2, 0x78e, 0x790, 0x3, 0x2, 0x2, 0x2, 0x78f, 
       0x78d, 0x3, 0x2, 0x2, 0x2, 0x790, 0x791, 0x5, 0x80, 0x41, 0x2, 0x791, 
       0x792, 0x5, 0x78, 0x3d, 0x2, 0x792, 0x793, 0x7, 0x4c, 0x2, 0x2, 0x793, 
       0xdf, 0x3, 0x2, 0x2, 0x2, 0x794, 0x799, 0x5, 0xf2, 0x7a, 0x2, 0x795, 
       0x799, 0x7, 0x2f, 0x2, 0x2, 0x796, 0x799, 0x7, 0x32, 0x2, 0x2, 0x797, 
       0x799, 0x7, 0x1e, 0x2, 0x2, 0x798, 0x794, 0x3, 0x2, 0x2, 0x2, 0x798, 
       0x795, 0x3, 0x2, 0x2, 0x2, 0x798, 0x796, 0x3, 0x2, 0x2, 0x2, 0x798, 
       0x797, 0x3, 0x2, 0x2, 0x2, 0x799, 0xe1, 0x3, 0x2, 0x2, 0x2, 0x79a, 
       0x79c, 0x5, 0xe4, 0x73, 0x2, 0x79b, 0x79a, 0x3, 0x2, 0x2, 0x2, 0x79c, 
       0x79f, 0x3, 0x2, 0x2, 0x2, 0x79d, 0x79b, 0x3, 0x2, 0x2, 0x2, 0x79d, 
       0x79e, 0x3, 0x2, 0x2, 0x2, 0x79e, 0x7a0, 0x3, 0x2, 0x2, 0x2, 0x79f, 
       0x79d, 0x3, 0x2, 0x2, 0x2, 0x7a0, 0x7a1, 0x5, 0x9c, 0x4f, 0x2, 0x7a1, 
       0x7a2, 0x5, 0xb4, 0x5b, 0x2, 0x7a2, 0xe3, 0x3, 0x2, 0x2, 0x2, 0x7a3, 
       0x7ab, 0x5, 0xf2, 0x7a, 0x2, 0x7a4, 0x7ab, 0x7, 0x2f, 0x2, 0x2, 0x7a5, 
       0x7ab, 0x7, 0x2d, 0x2, 0x2, 0x7a6, 0x7ab, 0x7, 0xd, 0x2, 0x2, 0x7a7, 
       0x7ab, 0x7, 0x18, 0x2, 0x2, 0x7a8, 0x7ab, 0x7, 0x32, 0x2, 0x2, 0x7a9, 
       0x7ab, 0x7, 0x33, 0x2, 0x2, 0x7aa, 0x7a3, 0x3, 0x2, 0x2, 0x2, 0x7aa, 
       0x7a4, 0x3, 0x2, 0x2, 0x2, 0x7aa, 0x7a5, 0x3, 0x2, 0x2, 0x2, 0x7aa, 
       0x7a6, 0x3, 0x2, 0x2, 0x2, 0x7aa, 0x7a7, 0x3, 0x2, 0x2, 0x2, 0x7aa, 
       0x7a8, 0x3, 0x2, 0x2, 0x2, 0x7aa, 0x7a9, 0x3, 0x2, 0x2, 0x2, 0x7ab, 
       0xe5, 0x3, 0x2, 0x2, 0x2, 0x7ac, 0x7ae, 0x5, 0xd6, 0x6c, 0x2, 0x7ad, 
       0x7ac, 0x3, 0x2, 0x2, 0x2, 0x7ae, 0x7b1, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x7ad, 0x3, 0x2, 0x2, 0x2, 0x7af, 0x7b0, 0x3, 0x2, 0x2, 0x2, 0x7b0, 
       0x7b2, 0x3, 0x2, 0x2, 0x2, 0x7b1, 0x7af, 0x3, 0x2, 0x2, 0x2, 0x7b2, 
       0x7b3, 0x7, 0x50, 0x2, 0x2, 0x7b3, 0x7b4, 0x7, 0x28, 0x2, 0x2, 0x7b4, 
       0x7b5, 0x5, 0x3d2, 0x1ea, 0x2, 0x7b5, 0x7b6, 0x5, 0xe8, 0x75, 0x2, 
       0x7b6, 0xe7, 0x3, 0x2, 0x2, 0x2, 0x7b7, 0x7bb, 0x7, 0x48, 0x2, 0x2, 
       0x7b8, 0x7ba, 0x5, 0xea, 0x76, 0x2, 0x7b9, 0x7b8, 0x3, 0x2, 0x2, 
       0x2, 0x7ba, 0x7bd, 0x3, 0x2, 0x2, 0x2, 0x7bb, 0x7b9, 0x3, 0x2, 0x2, 
       0x2, 0x7bb, 0x7bc, 0x3, 0x2, 0x2, 0x2, 0x7bc, 0x7be, 0x3, 0x2, 0x2, 
       0x2, 0x7bd, 0x7bb, 0x3, 0x2, 0x2, 0x2, 0x7be, 0x7bf, 0x7, 0x49, 0x2, 
       0x2, 0x7bf, 0xe9, 0x3, 0x2, 0x2, 0x2, 0x7c0, 0x7c6, 0x5, 0xec, 0x77, 
       0x2, 0x7c1, 0x7c6, 0x5, 0xde, 0x70, 0x2, 0x7c2, 0x7c6, 0x5, 0x5e, 
       0x30, 0x2, 0x7c3, 0x7c6, 0x5, 0xd2, 0x6a, 0x2, 0x7c4, 0x7c6, 0x7, 
       0x4c, 0x2, 0x2, 0x7c5, 0x7c0, 0x3, 0x2, 0x2, 0x2, 0x7c5, 0x7c1, 0x3, 
       0x2, 0x2, 0x2, 0x7c5, 0x7c2, 0x3, 0x2, 0x2, 0x2, 0x7c5, 0x7c3, 0x3, 
       0x2, 0x2, 0x2, 0x7c5, 0x7c4, 0x3, 0x2, 0x2, 0x2, 0x7c6, 0xeb, 0x3, 
       0x2, 0x2, 0x2, 0x7c7, 0x7c9, 0x5, 0xee, 0x78, 0x2, 0x7c8, 0x7c7, 
       0x3, 0x2, 0x2, 0x2, 0x7c9, 0x7cc, 0x3, 0x2, 0x2, 0x2, 0x7ca, 0x7c8, 
       0x3, 0x2, 0x2, 0x2, 0x7ca, 0x7cb, 0x3, 0x2, 0x2, 0x2, 0x7cb, 0x7cd, 
       0x3, 0x2, 0x2, 0x2, 0x7cc, 0x7ca, 0x3, 0x2, 0x2, 0x2, 0x7cd, 0x7ce, 
       0x5, 0x80, 0x41, 0x2, 0x7ce, 0x7cf, 0x5, 0x3d2, 0x1ea, 0x2, 0x7cf, 
       0x7d0, 0x7, 0x46, 0x2, 0x2, 0x7d0, 0x7d2, 0x7, 0x47, 0x2, 0x2, 0x7d1, 
       0x7d3, 0x5, 0x20, 0x11, 0x2, 0x7d2, 0x7d1, 0x3, 0x2, 0x2, 0x2, 0x7d2, 
       0x7d3, 0x3, 0x2, 0x2, 0x2, 0x7d3, 0x7d5, 0x3, 0x2, 0x2, 0x2, 0x7d4, 
       0x7d6, 0x5, 0xf0, 0x79, 0x2, 0x7d5, 0x7d4, 0x3, 0x2, 0x2, 0x2, 0x7d5, 
       0x7d6, 0x3, 0x2, 0x2, 0x2, 0x7d6, 0x7d7, 0x3, 0x2, 0x2, 0x2, 0x7d7, 
       0x7d8, 0x7, 0x4c, 0x2, 0x2, 0x7d8, 0xed, 0x3, 0x2, 0x2, 0x2, 0x7d9, 
       0x7dd, 0x5, 0xf2, 0x7a, 0x2, 0x7da, 0x7dd, 0x7, 0x2f, 0x2, 0x2, 0x7db, 
       0x7dd, 0x7, 0xd, 0x2, 0x2, 0x7dc, 0x7d9, 0x3, 0x2, 0x2, 0x2, 0x7dc, 
       0x7da, 0x3, 0x2, 0x2, 0x2, 0x7dc, 0x7db, 0x3, 0x2, 0x2, 0x2, 0x7dd, 
       0xef, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x7df, 0x7, 0x18, 0x2, 0x2, 0x7df, 
       0x7e0, 0x5, 0xfa, 0x7e, 0x2, 0x7e0, 0xf1, 0x3, 0x2, 0x2, 0x2, 0x7e1, 
       0x7e5, 0x5, 0xf4, 0x7b, 0x2, 0x7e2, 0x7e5, 0x5, 0x100, 0x81, 0x2, 
       0x7e3, 0x7e5, 0x5, 0x102, 0x82, 0x2, 0x7e4, 0x7e1, 0x3, 0x2, 0x2, 
       0x2, 0x7e4, 0x7e2, 0x3, 0x2, 0x2, 0x2, 0x7e4, 0x7e3, 0x3, 0x2, 0x2, 
       0x2, 0x7e5, 0xf3, 0x3, 0x2, 0x2, 0x2, 0x7e6, 0x7e7, 0x7, 0x50, 0x2, 
       0x2, 0x7e7, 0x7e8, 0x5, 0x38, 0x1d, 0x2, 0x7e8, 0x7ea, 0x7, 0x46, 
       0x2, 0x2, 0x7e9, 0x7eb, 0x5, 0xf6, 0x7c, 0x2, 0x7ea, 0x7e9, 0x3, 
       0x2, 0x2, 0x2, 0x7ea, 0x7eb, 0x3, 0x2, 0x2, 0x2, 0x7eb, 0x7ec, 0x3, 
       0x2, 0x2, 0x2, 0x7ec, 0x7ed, 0x7, 0x47, 0x2, 0x2, 0x7ed, 0xf5, 0x3, 
       0x2, 0x2, 0x2, 0x7ee, 0x7f3, 0x5, 0xf8, 0x7d, 0x2, 0x7ef, 0x7f0, 
       0x7, 0x4d, 0x2, 0x2, 0x7f0, 0x7f2, 0x5, 0xf8, 0x7d, 0x2, 0x7f1, 0x7ef, 
       0x3, 0x2, 0x2, 0x2, 0x7f2, 0x7f5, 0x3, 0x2, 0x2, 0x2, 0x7f3, 0x7f1, 
       0x3, 0x2, 0x2, 0x2, 0x7f3, 0x7f4, 0x3, 0x2, 0x2, 0x2, 0x7f4, 0xf7, 
       0x3, 0x2, 0x2, 0x2, 0x7f5, 0x7f3, 0x3, 0x2, 0x2, 0x2, 0x7f6, 0x7f7, 
       0x5, 0x3d2, 0x1ea, 0x2, 0x7f7, 0x7f8, 0x7, 0x52, 0x2, 0x2, 0x7f8, 
       0x7f9, 0x5, 0xfa, 0x7e, 0x2, 0x7f9, 0xf9, 0x3, 0x2, 0x2, 0x2, 0x7fa, 
       0x7fe, 0x5, 0x1c0, 0xe1, 0x2, 0x7fb, 0x7fe, 0x5, 0xfc, 0x7f, 0x2, 
       0x7fc, 0x7fe, 0x5, 0xf2, 0x7a, 0x2, 0x7fd, 0x7fa, 0x3, 0x2, 0x2, 
       0x2, 0x7fd, 0x7fb, 0x3, 0x2, 0x2, 0x2, 0x7fd, 0x7fc, 0x3, 0x2, 0x2, 
       0x2, 0x7fe, 0xfb, 0x3, 0x2, 0x2, 0x2, 0x7ff, 0x801, 0x7, 0x48, 0x2, 
       0x2, 0x800, 0x802, 0x5, 0xfe, 0x80, 0x2, 0x801, 0x800, 0x3, 0x2, 
       0x2, 0x2, 0x801, 0x802, 0x3, 0x2, 0x2, 0x2, 0x802, 0x804, 0x3, 0x2, 
       0x2, 0x2, 0x803, 0x805, 0x7, 0x4d, 0x2, 0x2, 0x804, 0x803, 0x3, 0x2, 
       0x2, 0x2, 0x804, 0x805, 0x3, 0x2, 0x2, 0x2, 0x805, 0x806, 0x3, 0x2, 
       0x2, 0x2, 0x806, 0x807, 0x7, 0x49, 0x2, 0x2, 0x807, 0xfd, 0x3, 0x2, 
       0x2, 0x2, 0x808, 0x80d, 0x5, 0xfa, 0x7e, 0x2, 0x809, 0x80a, 0x7, 
       0x4d, 0x2, 0x2, 0x80a, 0x80c, 0x5, 0xfa, 0x7e, 0x2, 0x80b, 0x809, 
       0x3, 0x2, 0x2, 0x2, 0x80c, 0x80f, 0x3, 0x2, 0x2, 0x2, 0x80d, 0x80b, 
       0x3, 0x2, 0x2, 0x2, 0x80d, 0x80e, 0x3, 0x2, 0x2, 0x2, 0x80e, 0xff, 
       0x3, 0x2, 0x2, 0x2, 0x80f, 0x80d, 0x3, 0x2, 0x2, 0x2, 0x810, 0x811, 
       0x7, 0x50, 0x2, 0x2, 0x811, 0x812, 0x5, 0x38, 0x1d, 0x2, 0x812, 0x101, 
       0x3, 0x2, 0x2, 0x2, 0x813, 0x814, 0x7, 0x50, 0x2, 0x2, 0x814, 0x815, 
       0x5, 0x38, 0x1d, 0x2, 0x815, 0x816, 0x7, 0x46, 0x2, 0x2, 0x816, 0x817, 
       0x5, 0xfa, 0x7e, 0x2, 0x817, 0x818, 0x7, 0x47, 0x2, 0x2, 0x818, 0x103, 
       0x3, 0x2, 0x2, 0x2, 0x819, 0x81b, 0x7, 0x48, 0x2, 0x2, 0x81a, 0x81c, 
       0x5, 0x106, 0x84, 0x2, 0x81b, 0x81a, 0x3, 0x2, 0x2, 0x2, 0x81b, 0x81c, 
       0x3, 0x2, 0x2, 0x2, 0x81c, 0x81e, 0x3, 0x2, 0x2, 0x2, 0x81d, 0x81f, 
       0x7, 0x4d, 0x2, 0x2, 0x81e, 0x81d, 0x3, 0x2, 0x2, 0x2, 0x81e, 0x81f, 
       0x3, 0x2, 0x2, 0x2, 0x81f, 0x820, 0x3, 0x2, 0x2, 0x2, 0x820, 0x821, 
       0x7, 0x49, 0x2, 0x2, 0x821, 0x105, 0x3, 0x2, 0x2, 0x2, 0x822, 0x827, 
       0x5, 0x7e, 0x40, 0x2, 0x823, 0x824, 0x7, 0x4d, 0x2, 0x2, 0x824, 0x826, 
       0x5, 0x7e, 0x40, 0x2, 0x825, 0x823, 0x3, 0x2, 0x2, 0x2, 0x826, 0x829, 
       0x3, 0x2, 0x2, 0x2, 0x827, 0x825, 0x3, 0x2, 0x2, 0x2, 0x827, 0x828, 
       0x3, 0x2, 0x2, 0x2, 0x828, 0x107, 0x3, 0x2, 0x2, 0x2, 0x829, 0x827, 
       0x3, 0x2, 0x2, 0x2, 0x82a, 0x82c, 0x7, 0x48, 0x2, 0x2, 0x82b, 0x82d, 
       0x5, 0x10a, 0x86, 0x2, 0x82c, 0x82b, 0x3, 0x2, 0x2, 0x2, 0x82c, 0x82d, 
       0x3, 0x2, 0x2, 0x2, 0x82d, 0x82e, 0x3, 0x2, 0x2, 0x2, 0x82e, 0x82f, 
       0x7, 0x49, 0x2, 0x2, 0x82f, 0x109, 0x3, 0x2, 0x2, 0x2, 0x830, 0x832, 
       0x5, 0x10c, 0x87, 0x2, 0x831, 0x830, 0x3, 0x2, 0x2, 0x2, 0x832, 0x833, 
       0x3, 0x2, 0x2, 0x2, 0x833, 0x831, 0x3, 0x2, 0x2, 0x2, 0x833, 0x834, 
       0x3, 0x2, 0x2, 0x2, 0x834, 0x10b, 0x3, 0x2, 0x2, 0x2, 0x835, 0x839, 
       0x5, 0x10e, 0x88, 0x2, 0x836, 0x839, 0x5, 0x5e, 0x30, 0x2, 0x837, 
       0x839, 0x5, 0x112, 0x8a, 0x2, 0x838, 0x835, 0x3, 0x2, 0x2, 0x2, 0x838, 
       0x836, 0x3, 0x2, 0x2, 0x2, 0x838, 0x837, 0x3, 0x2, 0x2, 0x2, 0x839, 
       0x10d, 0x3, 0x2, 0x2, 0x2, 0x83a, 0x83b, 0x5, 0x110, 0x89, 0x2, 0x83b, 
       0x83c, 0x7, 0x4c, 0x2, 0x2, 0x83c, 0x10f, 0x3, 0x2, 0x2, 0x2, 0x83d, 
       0x83f, 0x5, 0xa8, 0x55, 0x2, 0x83e, 0x83d, 0x3, 0x2, 0x2, 0x2, 0x83f, 
       0x842, 0x3, 0x2, 0x2, 0x2, 0x840, 0x83e, 0x3, 0x2, 0x2, 0x2, 0x840, 
       0x841, 0x3, 0x2, 0x2, 0x2, 0x841, 0x843, 0x3, 0x2, 0x2, 0x2, 0x842, 
       0x840, 0x3, 0x2, 0x2, 0x2, 0x843, 0x844, 0x5, 0x80, 0x41, 0x2, 0x844, 
       0x845, 0x5, 0x78, 0x3d, 0x2, 0x845, 0x111, 0x3, 0x2, 0x2, 0x2, 0x846, 
       0x84d, 0x5, 0x116, 0x8c, 0x2, 0x847, 0x84d, 0x5, 0x11a, 0x8e, 0x2, 
       0x848, 0x84d, 0x5, 0x122, 0x92, 0x2, 0x849, 0x84d, 0x5, 0x124, 0x93, 
       0x2, 0x84a, 0x84d, 0x5, 0x136, 0x9c, 0x2, 0x84b, 0x84d, 0x5, 0x13c, 
       0x9f, 0x2, 0x84c, 0x846, 0x3, 0x2, 0x2, 0x2, 0x84c, 0x847, 0x3, 0x2, 
       0x2, 0x2, 0x84c, 0x848, 0x3, 0x2, 0x2, 0x2, 0x84c, 0x849, 0x3, 0x2, 
       0x2, 0x2, 0x84c, 0x84a, 0x3, 0x2, 0x2, 0x2, 0x84c, 0x84b, 0x3, 0x2, 
       0x2, 0x2, 0x84d, 0x113, 0x3, 0x2, 0x2, 0x2, 0x84e, 0x854, 0x5, 0x116, 
       0x8c, 0x2, 0x84f, 0x854, 0x5, 0x11c, 0x8f, 0x2, 0x850, 0x854, 0x5, 
       0x126, 0x94, 0x2, 0x851, 0x854, 0x5, 0x138, 0x9d, 0x2, 0x852, 0x854, 
       0x5, 0x13e, 0xa0, 0x2, 0x853, 0x84e, 0x3, 0x2, 0x2, 0x2, 0x853, 0x84f, 
       0x3, 0x2, 0x2, 0x2, 0x853, 0x850, 0x3, 0x2, 0x2, 0x2, 0x853, 0x851, 
       0x3, 0x2, 0x2, 0x2, 0x853, 0x852, 0x3, 0x2, 0x2, 0x2, 0x854, 0x115, 
       0x3, 0x2, 0x2, 0x2, 0x855, 0x862, 0x5, 0x108, 0x85, 0x2, 0x856, 0x862, 
       0x5, 0x118, 0x8d, 0x2, 0x857, 0x862, 0x5, 0x11e, 0x90, 0x2, 0x858, 
       0x862, 0x5, 0x128, 0x95, 0x2, 0x859, 0x862, 0x5, 0x12a, 0x96, 0x2, 
       0x85a, 0x862, 0x5, 0x13a, 0x9e, 0x2, 0x85b, 0x862, 0x5, 0x14e, 0xa8, 
       0x2, 0x85c, 0x862, 0x5, 0x150, 0xa9, 0x2, 0x85d, 0x862, 0x5, 0x152, 
       0xaa, 0x2, 0x85e, 0x862, 0x5, 0x156, 0xac, 0x2, 0x85f, 0x862, 0x5, 
       0x154, 0xab, 0x2, 0x860, 0x862, 0x5, 0x158, 0xad, 0x2, 0x861, 0x855, 
       0x3, 0x2, 0x2, 0x2, 0x861, 0x856, 0x3, 0x2, 0x2, 0x2, 0x861, 0x857, 
       0x3, 0x2, 0x2, 0x2, 0x861, 0x858, 0x3, 0x2, 0x2, 0x2, 0x861, 0x859, 
       0x3, 0x2, 0x2, 0x2, 0x861, 0x85a, 0x3, 0x2, 0x2, 0x2, 0x861, 0x85b, 
       0x3, 0x2, 0x2, 0x2, 0x861, 0x85c, 0x3, 0x2, 0x2, 0x2, 0x861, 0x85d, 
       0x3, 0x2, 0x2, 0x2, 0x861, 0x85e, 0x3, 0x2, 0x2, 0x2, 0x861, 0x85f, 
       0x3, 0x2, 0x2, 0x2, 0x861, 0x860, 0x3, 0x2, 0x2, 0x2, 0x862, 0x117, 
       0x3, 0x2, 0x2, 0x2, 0x863, 0x864, 0x7, 0x4c, 0x2, 0x2, 0x864, 0x119, 
       0x3, 0x2, 0x2, 0x2, 0x865, 0x866, 0x5, 0x3d2, 0x1ea, 0x2, 0x866, 
       0x867, 0x7, 0x58, 0x2, 0x2, 0x867, 0x868, 0x5, 0x112, 0x8a, 0x2, 
       0x868, 0x11b, 0x3, 0x2, 0x2, 0x2, 0x869, 0x86a, 0x5, 0x3d2, 0x1ea, 
       0x2, 0x86a, 0x86b, 0x7, 0x58, 0x2, 0x2, 0x86b, 0x86c, 0x5, 0x114, 
       0x8b, 0x2, 0x86c, 0x11d, 0x3, 0x2, 0x2, 0x2, 0x86d, 0x86e, 0x5, 0x120, 
       0x91, 0x2, 0x86e, 0x86f, 0x7, 0x4c, 0x2, 0x2, 0x86f, 0x11f, 0x3, 
       0x2, 0x2, 0x2, 0x870, 0x878, 0x5, 0x1ba, 0xde, 0x2, 0x871, 0x878, 
       0x5, 0x1d8, 0xed, 0x2, 0x872, 0x878, 0x5, 0x1da, 0xee, 0x2, 0x873, 
       0x878, 0x5, 0x1e0, 0xf1, 0x2, 0x874, 0x878, 0x5, 0x1e4, 0xf3, 0x2, 
       0x875, 0x878, 0x5, 0x198, 0xcd, 0x2, 0x876, 0x878, 0x5, 0x184, 0xc3, 
       0x2, 0x877, 0x870, 0x3, 0x2, 0x2, 0x2, 0x877, 0x871, 0x3, 0x2, 0x2, 
       0x2, 0x877, 0x872, 0x3, 0x2, 0x2, 0x2, 0x877, 0x873, 0x3, 0x2, 0x2, 
       0x2, 0x877, 0x874, 0x3, 0x2, 0x2, 0x2, 0x877, 0x875, 0x3, 0x2, 0x2, 
       0x2, 0x877, 0x876, 0x3, 0x2, 0x2, 0x2, 0x878, 0x121, 0x3, 0x2, 0x2, 
       0x2, 0x879, 0x87a, 0x7, 0x22, 0x2, 0x2, 0x87a, 0x87b, 0x7, 0x46, 
       0x2, 0x2, 0x87b, 0x87c, 0x5, 0x1ae, 0xd8, 0x2, 0x87c, 0x87d, 0x7, 
       0x47, 0x2, 0x2, 0x87d, 0x87e, 0x5, 0x112, 0x8a, 0x2, 0x87e, 0x123, 
       0x3, 0x2, 0x2, 0x2, 0x87f, 0x880, 0x7, 0x22, 0x2, 0x2, 0x880, 0x881, 
       0x7, 0x46, 0x2, 0x2, 0x881, 0x882, 0x5, 0x1ae, 0xd8, 0x2, 0x882, 
       0x883, 0x7, 0x47, 0x2, 0x2, 0x883, 0x884, 0x5, 0x114, 0x8b, 0x2, 
       0x884, 0x885, 0x7, 0x1b, 0x2, 0x2, 0x885, 0x886, 0x5, 0x112, 0x8a, 
       0x2, 0x886, 0x125, 0x3, 0x2, 0x2, 0x2, 0x887, 0x888, 0x7, 0x22, 0x2, 
       0x2, 0x888, 0x889, 0x7, 0x46, 0x2, 0x2, 0x889, 0x88a, 0x5, 0x1ae, 
       0xd8, 0x2, 0x88a, 0x88b, 0x7, 0x47, 0x2, 0x2, 0x88b, 0x88c, 0x5, 
       0x114, 0x8b, 0x2, 0x88c, 0x88d, 0x7, 0x1b, 0x2, 0x2, 0x88d, 0x88e, 
       0x5, 0x114, 0x8b, 0x2, 0x88e, 0x127, 0x3, 0x2, 0x2, 0x2, 0x88f, 0x890, 
       0x7, 0xe, 0x2, 0x2, 0x890, 0x891, 0x5, 0x1ae, 0xd8, 0x2, 0x891, 0x892, 
       0x7, 0x4c, 0x2, 0x2, 0x892, 0x89a, 0x3, 0x2, 0x2, 0x2, 0x893, 0x894, 
       0x7, 0xe, 0x2, 0x2, 0x894, 0x895, 0x5, 0x1ae, 0xd8, 0x2, 0x895, 0x896, 
       0x7, 0x58, 0x2, 0x2, 0x896, 0x897, 0x5, 0x1ae, 0xd8, 0x2, 0x897, 
       0x898, 0x7, 0x4c, 0x2, 0x2, 0x898, 0x89a, 0x3, 0x2, 0x2, 0x2, 0x899, 
       0x88f, 0x3, 0x2, 0x2, 0x2, 0x899, 0x893, 0x3, 0x2, 0x2, 0x2, 0x89a, 
       0x129, 0x3, 0x2, 0x2, 0x2, 0x89b, 0x89c, 0x7, 0x35, 0x2, 0x2, 0x89c, 
       0x89d, 0x7, 0x46, 0x2, 0x2, 0x89d, 0x89e, 0x5, 0x1ae, 0xd8, 0x2, 
       0x89e, 0x89f, 0x7, 0x47, 0x2, 0x2, 0x89f, 0x8a0, 0x5, 0x12c, 0x97, 
       0x2, 0x8a0, 0x12b, 0x3, 0x2, 0x2, 0x2, 0x8a1, 0x8a5, 0x7, 0x48, 0x2, 
       0x2, 0x8a2, 0x8a4, 0x5, 0x12e, 0x98, 0x2, 0x8a3, 0x8a2, 0x3, 0x2, 
       0x2, 0x2, 0x8a4, 0x8a7, 0x3, 0x2, 0x2, 0x2, 0x8a5, 0x8a3, 0x3, 0x2, 
       0x2, 0x2, 0x8a5, 0x8a6, 0x3, 0x2, 0x2, 0x2, 0x8a6, 0x8ab, 0x3, 0x2, 
       0x2, 0x2, 0x8a7, 0x8a5, 0x3, 0x2, 0x2, 0x2, 0x8a8, 0x8aa, 0x5, 0x132, 
       0x9a, 0x2, 0x8a9, 0x8a8, 0x3, 0x2, 0x2, 0x2, 0x8aa, 0x8ad, 0x3, 0x2, 
       0x2, 0x2, 0x8ab, 0x8a9, 0x3, 0x2, 0x2, 0x2, 0x8ab, 0x8ac, 0x3, 0x2, 
       0x2, 0x2, 0x8ac, 0x8ae, 0x3, 0x2, 0x2, 0x2, 0x8ad, 0x8ab, 0x3, 0x2, 
       0x2, 0x2, 0x8ae, 0x8af, 0x7, 0x49, 0x2, 0x2, 0x8af, 0x12d, 0x3, 0x2, 
       0x2, 0x2, 0x8b0, 0x8b1, 0x5, 0x130, 0x99, 0x2, 0x8b1, 0x8b2, 0x5, 
       0x10a, 0x86, 0x2, 0x8b2, 0x12f, 0x3, 0x2, 0x2, 0x2, 0x8b3, 0x8b5, 
       0x5, 0x132, 0x9a, 0x2, 0x8b4, 0x8b3, 0x3, 0x2, 0x2, 0x2, 0x8b5, 0x8b6, 
       0x3, 0x2, 0x2, 0x2, 0x8b6, 0x8b4, 0x3, 0x2, 0x2, 0x2, 0x8b6, 0x8b7, 
       0x3, 0x2, 0x2, 0x2, 0x8b7, 0x131, 0x3, 0x2, 0x2, 0x2, 0x8b8, 0x8b9, 
       0x7, 0x12, 0x2, 0x2, 0x8b9, 0x8ba, 0x5, 0x1ac, 0xd7, 0x2, 0x8ba, 
       0x8bb, 0x7, 0x58, 0x2, 0x2, 0x8bb, 0x8c3, 0x3, 0x2, 0x2, 0x2, 0x8bc, 
       0x8bd, 0x7, 0x12, 0x2, 0x2, 0x8bd, 0x8be, 0x5, 0x134, 0x9b, 0x2, 
       0x8be, 0x8bf, 0x7, 0x58, 0x2, 0x2, 0x8bf, 0x8c3, 0x3, 0x2, 0x2, 0x2, 
       0x8c0, 0x8c1, 0x7, 0x18, 0x2, 0x2, 0x8c1, 0x8c3, 0x7, 0x58, 0x2, 
       0x2, 0x8c2, 0x8b8, 0x3, 0x2, 0x2, 0x2, 0x8c2, 0x8bc, 0x3, 0x2, 0x2, 
       0x2, 0x8c2, 0x8c0, 0x3, 0x2, 0x2, 0x2, 0x8c3, 0x133, 0x3, 0x2, 0x2, 
       0x2, 0x8c4, 0x8c5, 0x5, 0x3d2, 0x1ea, 0x2, 0x8c5, 0x135, 0x3, 0x2, 
       0x2, 0x2, 0x8c6, 0x8c7, 0x7, 0x3e, 0x2, 0x2, 0x8c7, 0x8c8, 0x7, 0x46, 
       0x2, 0x2, 0x8c8, 0x8c9, 0x5, 0x1ae, 0xd8, 0x2, 0x8c9, 0x8ca, 0x7, 
       0x47, 0x2, 0x2, 0x8ca, 0x8cb, 0x5, 0x112, 0x8a, 0x2, 0x8cb, 0x137, 
       0x3, 0x2, 0x2, 0x2, 0x8cc, 0x8cd, 0x7, 0x3e, 0x2, 0x2, 0x8cd, 0x8ce, 
       0x7, 0x46, 0x2, 0x2, 0x8ce, 0x8cf, 0x5, 0x1ae, 0xd8, 0x2, 0x8cf, 
       0x8d0, 0x7, 0x47, 0x2, 0x2, 0x8d0, 0x8d1, 0x5, 0x114, 0x8b, 0x2, 
       0x8d1, 0x139, 0x3, 0x2, 0x2, 0x2, 0x8d2, 0x8d3, 0x7, 0x19, 0x2, 0x2, 
       0x8d3, 0x8d4, 0x5, 0x112, 0x8a, 0x2, 0x8d4, 0x8d5, 0x7, 0x3e, 0x2, 
       0x2, 0x8d5, 0x8d6, 0x7, 0x46, 0x2, 0x2, 0x8d6, 0x8d7, 0x5, 0x1ae, 
       0xd8, 0x2, 0x8d7, 0x8d8, 0x7, 0x47, 0x2, 0x2, 0x8d8, 0x8d9, 0x7, 
       0x4c, 0x2, 0x2, 0x8d9, 0x13b, 0x3, 0x2, 0x2, 0x2, 0x8da, 0x8dd, 0x5, 
       0x140, 0xa1, 0x2, 0x8db, 0x8dd, 0x5, 0x14a, 0xa6, 0x2, 0x8dc, 0x8da, 
       0x3, 0x2, 0x2, 0x2, 0x8dc, 0x8db, 0x3, 0x2, 0x2, 0x2, 0x8dd, 0x13d, 
       0x3, 0x2, 0x2, 0x2, 0x8de, 0x8e1, 0x5, 0x142, 0xa2, 0x2, 0x8df, 0x8e1, 
       0x5, 0x14c, 0xa7, 0x2, 0x8e0, 0x8de, 0x3, 0x2, 0x2, 0x2, 0x8e0, 0x8df, 
       0x3, 0x2, 0x2, 0x2, 0x8e1, 0x13f, 0x3, 0x2, 0x2, 0x2, 0x8e2, 0x8e3, 
       0x7, 0x21, 0x2, 0x2, 0x8e3, 0x8e5, 0x7, 0x46, 0x2, 0x2, 0x8e4, 0x8e6, 
       0x5, 0x144, 0xa3, 0x2, 0x8e5, 0x8e4, 0x3, 0x2, 0x2, 0x2, 0x8e5, 0x8e6, 
       0x3, 0x2, 0x2, 0x2, 0x8e6, 0x8e7, 0x3, 0x2, 0x2, 0x2, 0x8e7, 0x8e9, 
       0x7, 0x4c, 0x2, 0x2, 0x8e8, 0x8ea, 0x5, 0x1ae, 0xd8, 0x2, 0x8e9, 
       0x8e8, 0x3, 0x2, 0x2, 0x2, 0x8e9, 0x8ea, 0x3, 0x2, 0x2, 0x2, 0x8ea, 
       0x8eb, 0x3, 0x2, 0x2, 0x2, 0x8eb, 0x8ed, 0x7, 0x4c, 0x2, 0x2, 0x8ec, 
       0x8ee, 0x5, 0x146, 0xa4, 0x2, 0x8ed, 0x8ec, 0x3, 0x2, 0x2, 0x2, 0x8ed, 
       0x8ee, 0x3, 0x2, 0x2, 0x2, 0x8ee, 0x8ef, 0x3, 0x2, 0x2, 0x2, 0x8ef, 
       0x8f0, 0x7, 0x47, 0x2, 0x2, 0x8f0, 0x8f1, 0x5, 0x112, 0x8a, 0x2, 
       0x8f1, 0x141, 0x3, 0x2, 0x2, 0x2, 0x8f2, 0x8f3, 0x7, 0x21, 0x2, 0x2, 
       0x8f3, 0x8f5, 0x7, 0x46, 0x2, 0x2, 0x8f4, 0x8f6, 0x5, 0x144, 0xa3, 
       0x2, 0x8f5, 0x8f4, 0x3, 0x2, 0x2, 0x2, 0x8f5, 0x8f6, 0x3, 0x2, 0x2, 
       0x2, 0x8f6, 0x8f7, 0x3, 0x2, 0x2, 0x2, 0x8f7, 0x8f9, 0x7, 0x4c, 0x2, 
       0x2, 0x8f8, 0x8fa, 0x5, 0x1ae, 0xd8, 0x2, 0x8f9, 0x8f8, 0x3, 0x2, 
       0x2, 0x2, 0x8f9, 0x8fa, 0x3, 0x2, 0x2, 0x2, 0x8fa, 0x8fb, 0x3, 0x2, 
       0x2, 0x2, 0x8fb, 0x8fd, 0x7, 0x4c, 0x2, 0x2, 0x8fc, 0x8fe, 0x5, 0x146, 
       0xa4, 0x2, 0x8fd, 0x8fc, 0x3, 0x2, 0x2, 0x2, 0x8fd, 0x8fe, 0x3, 0x2, 
       0x2, 0x2, 0x8fe, 0x8ff, 0x3, 0x2, 0x2, 0x2, 0x8ff, 0x900, 0x7, 0x47, 
       0x2, 0x2, 0x900, 0x901, 0x5, 0x114, 0x8b, 0x2, 0x901, 0x143, 0x3, 
       0x2, 0x2, 0x2, 0x902, 0x905, 0x5, 0x148, 0xa5, 0x2, 0x903, 0x905, 
       0x5, 0x110, 0x89, 0x2, 0x904, 0x902, 0x3, 0x2, 0x2, 0x2, 0x904, 0x903, 
       0x3, 0x2, 0x2, 0x2, 0x905, 0x145, 0x3, 0x2, 0x2, 0x2, 0x906, 0x907, 
       0x5, 0x148, 0xa5, 0x2, 0x907, 0x147, 0x3, 0x2, 0x2, 0x2, 0x908, 0x90d, 
       0x5, 0x120, 0x91, 0x2, 0x909, 0x90a, 0x7, 0x4d, 0x2, 0x2, 0x90a, 
       0x90c, 0x5, 0x120, 0x91, 0x2, 0x90b, 0x909, 0x3, 0x2, 0x2, 0x2, 0x90c, 
       0x90f, 0x3, 0x2, 0x2, 0x2, 0x90d, 0x90b, 0x3, 0x2, 0x2, 0x2, 0x90d, 
       0x90e, 0x3, 0x2, 0x2, 0x2, 0x90e, 0x149, 0x3, 0x2, 0x2, 0x2, 0x90f, 
       0x90d, 0x3, 0x2, 0x2, 0x2, 0x910, 0x911, 0x7, 0x21, 0x2, 0x2, 0x911, 
       0x915, 0x7, 0x46, 0x2, 0x2, 0x912, 0x914, 0x5, 0xa8, 0x55, 0x2, 0x913, 
       0x912, 0x3, 0x2, 0x2, 0x2, 0x914, 0x917, 0x3, 0x2, 0x2, 0x2, 0x915, 
       0x913, 0x3, 0x2, 0x2, 0x2, 0x915, 0x916, 0x3, 0x2, 0x2, 0x2, 0x916, 
       0x918, 0x3, 0x2, 0x2, 0x2, 0x917, 0x915, 0x3, 0x2, 0x2, 0x2, 0x918, 
       0x919, 0x5, 0x80, 0x41, 0x2, 0x919, 0x91a, 0x5, 0x7c, 0x3f, 0x2, 
       0x91a, 0x91b, 0x7, 0x58, 0x2, 0x2, 0x91b, 0x91c, 0x5, 0x1ae, 0xd8, 
       0x2, 0x91c, 0x91d, 0x7, 0x47, 0x2, 0x2, 0x91d, 0x91e, 0x5, 0x112, 
       0x8a, 0x2, 0x91e, 0x14b, 0x3, 0x2, 0x2, 0x2, 0x91f, 0x920, 0x7, 0x21, 
       0x2, 0x2, 0x920, 0x924, 0x7, 0x46, 0x2, 0x2, 0x921, 0x923, 0x5, 0xa8, 
       0x55, 0x2, 0x922, 0x921, 0x3, 0x2, 0x2, 0x2, 0x923, 0x926, 0x3, 0x2, 
       0x2, 0x2, 0x924, 0x922, 0x3, 0x2, 0x2, 0x2, 0x924, 0x925, 0x3, 0x2, 
       0x2, 0x2, 0x925, 0x927, 0x3, 0x2, 0x2, 0x2, 0x926, 0x924, 0x3, 0x2, 
       0x2, 0x2, 0x927, 0x928, 0x5, 0x80, 0x41, 0x2, 0x928, 0x929, 0x5, 
       0x7c, 0x3f, 0x2, 0x929, 0x92a, 0x7, 0x58, 0x2, 0x2, 0x92a, 0x92b, 
       0x5, 0x1ae, 0xd8, 0x2, 0x92b, 0x92c, 0x7, 0x47, 0x2, 0x2, 0x92c, 
       0x92d, 0x5, 0x114, 0x8b, 0x2, 0x92d, 0x14d, 0x3, 0x2, 0x2, 0x2, 0x92e, 
       0x930, 0x7, 0x10, 0x2, 0x2, 0x92f, 0x931, 0x5, 0x3d2, 0x1ea, 0x2, 
       0x930, 0x92f, 0x3, 0x2, 0x2, 0x2, 0x930, 0x931, 0x3, 0x2, 0x2, 0x2, 
       0x931, 0x932, 0x3, 0x2, 0x2, 0x2, 0x932, 0x933, 0x7, 0x4c, 0x2, 0x2, 
       0x933, 0x14f, 0x3, 0x2, 0x2, 0x2, 0x934, 0x936, 0x7, 0x17, 0x2, 0x2, 
       0x935, 0x937, 0x5, 0x3d2, 0x1ea, 0x2, 0x936, 0x935, 0x3, 0x2, 0x2, 
       0x2, 0x936, 0x937, 0x3, 0x2, 0x2, 0x2, 0x937, 0x938, 0x3, 0x2, 0x2, 
       0x2, 0x938, 0x939, 0x7, 0x4c, 0x2, 0x2, 0x939, 0x151, 0x3, 0x2, 0x2, 
       0x2, 0x93a, 0x93c, 0x7, 0x30, 0x2, 0x2, 0x93b, 0x93d, 0x5, 0x1ae, 
       0xd8, 0x2, 0x93c, 0x93b, 0x3, 0x2, 0x2, 0x2, 0x93c, 0x93d, 0x3, 0x2, 
       0x2, 0x2, 0x93d, 0x93e, 0x3, 0x2, 0x2, 0x2, 0x93e, 0x93f, 0x7, 0x4c, 
       0x2, 0x2, 0x93f, 0x153, 0x3, 0x2, 0x2, 0x2, 0x940, 0x941, 0x7, 0x38, 
       0x2, 0x2, 0x941, 0x942, 0x5, 0x1ae, 0xd8, 0x2, 0x942, 0x943, 0x7, 
       0x4c, 0x2, 0x2, 0x943, 0x155, 0x3, 0x2, 0x2, 0x2, 0x944, 0x945, 0x7, 
       0x36, 0x2, 0x2, 0x945, 0x946, 0x7, 0x46, 0x2, 0x2, 0x946, 0x947, 
       0x5, 0x1ae, 0xd8, 0x2, 0x947, 0x948, 0x7, 0x47, 0x2, 0x2, 0x948, 
       0x949, 0x5, 0x108, 0x85, 0x2, 0x949, 0x157, 0x3, 0x2, 0x2, 0x2, 0x94a, 
       0x94b, 0x7, 0x3b, 0x2, 0x2, 0x94b, 0x94c, 0x5, 0x108, 0x85, 0x2, 
       0x94c, 0x94d, 0x5, 0x15a, 0xae, 0x2, 0x94d, 0x957, 0x3, 0x2, 0x2, 
       0x2, 0x94e, 0x94f, 0x7, 0x3b, 0x2, 0x2, 0x94f, 0x951, 0x5, 0x108, 
       0x85, 0x2, 0x950, 0x952, 0x5, 0x15a, 0xae, 0x2, 0x951, 0x950, 0x3, 
       0x2, 0x2, 0x2, 0x951, 0x952, 0x3, 0x2, 0x2, 0x2, 0x952, 0x953, 0x3, 
       0x2, 0x2, 0x2, 0x953, 0x954, 0x5, 0x162, 0xb2, 0x2, 0x954, 0x957, 
       0x3, 0x2, 0x2, 0x2, 0x955, 0x957, 0x5, 0x164, 0xb3, 0x2, 0x956, 0x94a, 
       0x3, 0x2, 0x2, 0x2, 0x956, 0x94e, 0x3, 0x2, 0x2, 0x2, 0x956, 0x955, 
       0x3, 0x2, 0x2, 0x2, 0x957, 0x159, 0x3, 0x2, 0x2, 0x2, 0x958, 0x95a, 
       0x5, 0x15c, 0xaf, 0x2, 0x959, 0x958, 0x3, 0x2, 0x2, 0x2, 0x95a, 0x95b, 
       0x3, 0x2, 0x2, 0x2, 0x95b, 0x959, 0x3, 0x2, 0x2, 0x2, 0x95b, 0x95c, 
       0x3, 0x2, 0x2, 0x2, 0x95c, 0x15b, 0x3, 0x2, 0x2, 0x2, 0x95d, 0x95e, 
       0x7, 0x13, 0x2, 0x2, 0x95e, 0x95f, 0x7, 0x46, 0x2, 0x2, 0x95f, 0x960, 
       0x5, 0x15e, 0xb0, 0x2, 0x960, 0x961, 0x7, 0x47, 0x2, 0x2, 0x961, 
       0x962, 0x5, 0x108, 0x85, 0x2, 0x962, 0x15d, 0x3, 0x2, 0x2, 0x2, 0x963, 
       0x965, 0x5, 0xa8, 0x55, 0x2, 0x964, 0x963, 0x3, 0x2, 0x2, 0x2, 0x965, 
       0x968, 0x3, 0x2, 0x2, 0x2, 0x966, 0x964, 0x3, 0x2, 0x2, 0x2, 0x966, 
       0x967, 0x3, 0x2, 0x2, 0x2, 0x967, 0x969, 0x3, 0x2, 0x2, 0x2, 0x968, 
       0x966, 0x3, 0x2, 0x2, 0x2, 0x969, 0x96a, 0x5, 0x160, 0xb1, 0x2, 0x96a, 
       0x96b, 0x5, 0x7c, 0x3f, 0x2, 0x96b, 0x15f, 0x3, 0x2, 0x2, 0x2, 0x96c, 
       0x971, 0x5, 0x88, 0x45, 0x2, 0x96d, 0x96e, 0x7, 0x67, 0x2, 0x2, 0x96e, 
       0x970, 0x5, 0x10, 0x9, 0x2, 0x96f, 0x96d, 0x3, 0x2, 0x2, 0x2, 0x970, 
       0x973, 0x3, 0x2, 0x2, 0x2, 0x971, 0x96f, 0x3, 0x2, 0x2, 0x2, 0x971, 
       0x972, 0x3, 0x2, 0x2, 0x2, 0x972, 0x161, 0x3, 0x2, 0x2, 0x2, 0x973, 
       0x971, 0x3, 0x2, 0x2, 0x2, 0x974, 0x975, 0x7, 0x1f, 0x2, 0x2, 0x975, 
       0x976, 0x5, 0x108, 0x85, 0x2, 0x976, 0x163, 0x3, 0x2, 0x2, 0x2, 0x977, 
       0x978, 0x7, 0x3b, 0x2, 0x2, 0x978, 0x979, 0x5, 0x166, 0xb4, 0x2, 
       0x979, 0x97b, 0x5, 0x108, 0x85, 0x2, 0x97a, 0x97c, 0x5, 0x15a, 0xae, 
       0x2, 0x97b, 0x97a, 0x3, 0x2, 0x2, 0x2, 0x97b, 0x97c, 0x3, 0x2, 0x2, 
       0x2, 0x97c, 0x97e, 0x3, 0x2, 0x2, 0x2, 0x97d, 0x97f, 0x5, 0x162, 
       0xb2, 0x2, 0x97e, 0x97d, 0x3, 0x2, 0x2, 0x2, 0x97e, 0x97f, 0x3, 0x2, 
       0x2, 0x2, 0x97f, 0x165, 0x3, 0x2, 0x2, 0x2, 0x980, 0x981, 0x7, 0x46, 
       0x2, 0x2, 0x981, 0x983, 0x5, 0x168, 0xb5, 0x2, 0x982, 0x984, 0x7, 
       0x4c, 0x2, 0x2, 0x983, 0x982, 0x3, 0x2, 0x2, 0x2, 0x983, 0x984, 0x3, 
       0x2, 0x2, 0x2, 0x984, 0x985, 0x3, 0x2, 0x2, 0x2, 0x985, 0x986, 0x7, 
       0x47, 0x2, 0x2, 0x986, 0x167, 0x3, 0x2, 0x2, 0x2, 0x987, 0x98c, 0x5, 
       0x16a, 0xb6, 0x2, 0x988, 0x989, 0x7, 0x4c, 0x2, 0x2, 0x989, 0x98b, 
       0x5, 0x16a, 0xb6, 0x2, 0x98a, 0x988, 0x3, 0x2, 0x2, 0x2, 0x98b, 0x98e, 
       0x3, 0x2, 0x2, 0x2, 0x98c, 0x98a, 0x3, 0x2, 0x2, 0x2, 0x98c, 0x98d, 
       0x3, 0x2, 0x2, 0x2, 0x98d, 0x169, 0x3, 0x2, 0x2, 0x2, 0x98e, 0x98c, 
       0x3, 0x2, 0x2, 0x2, 0x98f, 0x991, 0x5, 0xa8, 0x55, 0x2, 0x990, 0x98f, 
       0x3, 0x2, 0x2, 0x2, 0x991, 0x994, 0x3, 0x2, 0x2, 0x2, 0x992, 0x990, 
       0x3, 0x2, 0x2, 0x2, 0x992, 0x993, 0x3, 0x2, 0x2, 0x2, 0x993, 0x995, 
       0x3, 0x2, 0x2, 0x2, 0x994, 0x992, 0x3, 0x2, 0x2, 0x2, 0x995, 0x996, 
       0x5, 0x80, 0x41, 0x2, 0x996, 0x997, 0x5, 0x7c, 0x3f, 0x2, 0x997, 
       0x998, 0x7, 0x52, 0x2, 0x2, 0x998, 0x999, 0x5, 0x1ae, 0xd8, 0x2, 
       0x999, 0x99c, 0x3, 0x2, 0x2, 0x2, 0x99a, 0x99c, 0x5, 0x16c, 0xb7, 
       0x2, 0x99b, 0x992, 0x3, 0x2, 0x2, 0x2, 0x99b, 0x99a, 0x3, 0x2, 0x2, 
       0x2, 0x99c, 0x16b, 0x3, 0x2, 0x2, 0x2, 0x99d, 0x9a0, 0x5, 0x3c, 0x1f, 
       0x2, 0x99e, 0x9a0, 0x5, 0x18c, 0xc7, 0x2, 0x99f, 0x99d, 0x3, 0x2, 
       0x2, 0x2, 0x99f, 0x99e, 0x3, 0x2, 0x2, 0x2, 0x9a0, 0x16d, 0x3, 0x2, 
       0x2, 0x2, 0x9a1, 0x9a4, 0x5, 0x17c, 0xbf, 0x2, 0x9a2, 0x9a4, 0x5, 
       0x1a6, 0xd4, 0x2, 0x9a3, 0x9a1, 0x3, 0x2, 0x2, 0x2, 0x9a3, 0x9a2, 
       0x3, 0x2, 0x2, 0x2, 0x9a4, 0x9a8, 0x3, 0x2, 0x2, 0x2, 0x9a5, 0x9a7, 
       0x5, 0x176, 0xbc, 0x2, 0x9a6, 0x9a5, 0x3, 0x2, 0x2, 0x2, 0x9a7, 0x9aa, 
       0x3, 0x2, 0x2, 0x2, 0x9a8, 0x9a6, 0x3, 0x2, 0x2, 0x2, 0x9a8, 0x9a9, 
       0x3, 0x2, 0x2, 0x2, 0x9a9, 0x16f, 0x3, 0x2, 0x2, 0x2, 0x9aa, 0x9a8, 
       0x3, 0x2, 0x2, 0x2, 0x9ab, 0x9bc, 0x5, 0x2, 0x2, 0x2, 0x9ac, 0x9bc, 
       0x5, 0x182, 0xc2, 0x2, 0x9ad, 0x9bc, 0x7, 0x37, 0x2, 0x2, 0x9ae, 
       0x9af, 0x5, 0x38, 0x1d, 0x2, 0x9af, 0x9b0, 0x7, 0x4e, 0x2, 0x2, 0x9b0, 
       0x9b1, 0x7, 0x37, 0x2, 0x2, 0x9b1, 0x9bc, 0x3, 0x2, 0x2, 0x2, 0x9b2, 
       0x9b3, 0x7, 0x46, 0x2, 0x2, 0x9b3, 0x9b4, 0x5, 0x1ae, 0xd8, 0x2, 
       0x9b4, 0x9b5, 0x7, 0x47, 0x2, 0x2, 0x9b5, 0x9bc, 0x3, 0x2, 0x2, 0x2, 
       0x9b6, 0x9bc, 0x5, 0x184, 0xc3, 0x2, 0x9b7, 0x9bc, 0x5, 0x18c, 0xc7, 
       0x2, 0x9b8, 0x9bc, 0x5, 0x192, 0xca, 0x2, 0x9b9, 0x9bc, 0x5, 0x198, 
       0xcd, 0x2, 0x9ba, 0x9bc, 0x5, 0x1a0, 0xd1, 0x2, 0x9bb, 0x9ab, 0x3, 
       0x2, 0x2, 0x2, 0x9bb, 0x9ac, 0x3, 0x2, 0x2, 0x2, 0x9bb, 0x9ad, 0x3, 
       0x2, 0x2, 0x2, 0x9bb, 0x9ae, 0x3, 0x2, 0x2, 0x2, 0x9bb, 0x9b2, 0x3, 
       0x2, 0x2, 0x2, 0x9bb, 0x9b6, 0x3, 0x2, 0x2, 0x2, 0x9bb, 0x9b7, 0x3, 
       0x2, 0x2, 0x2, 0x9bb, 0x9b8, 0x3, 0x2, 0x2, 0x2, 0x9bb, 0x9b9, 0x3, 
       0x2, 0x2, 0x2, 0x9bb, 0x9ba, 0x3, 0x2, 0x2, 0x2, 0x9bc, 0x171, 0x3, 
       0x2, 0x2, 0x2, 0x9bd, 0x9be, 0x3, 0x2, 0x2, 0x2, 0x9be, 0x173, 0x3, 
       0x2, 0x2, 0x2, 0x9bf, 0x9dc, 0x5, 0x2, 0x2, 0x2, 0x9c0, 0x9c5, 0x5, 
       0x38, 0x1d, 0x2, 0x9c1, 0x9c2, 0x7, 0x4a, 0x2, 0x2, 0x9c2, 0x9c4, 
       0x7, 0x4b, 0x2, 0x2, 0x9c3, 0x9c1, 0x3, 0x2, 0x2, 0x2, 0x9c4, 0x9c7, 
       0x3, 0x2, 0x2, 0x2, 0x9c5, 0x9c3, 0x3, 0x2, 0x2, 0x2, 0x9c5, 0x9c6, 
       0x3, 0x2, 0x2, 0x2, 0x9c6, 0x9c8, 0x3, 0x2, 0x2, 0x2, 0x9c7, 0x9c5, 
       0x3, 0x2, 0x2, 0x2, 0x9c8, 0x9c9, 0x7, 0x4e, 0x2, 0x2, 0x9c9, 0x9ca, 
       0x7, 0x15, 0x2, 0x2, 0x9ca, 0x9dc, 0x3, 0x2, 0x2, 0x2, 0x9cb, 0x9cc, 
       0x7, 0x3c, 0x2, 0x2, 0x9cc, 0x9cd, 0x7, 0x4e, 0x2, 0x2, 0x9cd, 0x9dc, 
       0x7, 0x15, 0x2, 0x2, 0x9ce, 0x9dc, 0x7, 0x37, 0x2, 0x2, 0x9cf, 0x9d0, 
       0x5, 0x38, 0x1d, 0x2, 0x9d0, 0x9d1, 0x7, 0x4e, 0x2, 0x2, 0x9d1, 0x9d2, 
       0x7, 0x37, 0x2, 0x2, 0x9d2, 0x9dc, 0x3, 0x2, 0x2, 0x2, 0x9d3, 0x9d4, 
       0x7, 0x46, 0x2, 0x2, 0x9d4, 0x9d5, 0x5, 0x1ae, 0xd8, 0x2, 0x9d5, 
       0x9d6, 0x7, 0x47, 0x2, 0x2, 0x9d6, 0x9dc, 0x3, 0x2, 0x2, 0x2, 0x9d7, 
       0x9dc, 0x5, 0x184, 0xc3, 0x2, 0x9d8, 0x9dc, 0x5, 0x18c, 0xc7, 0x2, 
       0x9d9, 0x9dc, 0x5, 0x198, 0xcd, 0x2, 0x9da, 0x9dc, 0x5, 0x1a0, 0xd1, 
       0x2, 0x9db, 0x9bf, 0x3, 0x2, 0x2, 0x2, 0x9db, 0x9c0, 0x3, 0x2, 0x2, 
       0x2, 0x9db, 0x9cb, 0x3, 0x2, 0x2, 0x2, 0x9db, 0x9ce, 0x3, 0x2, 0x2, 
       0x2, 0x9db, 0x9cf, 0x3, 0x2, 0x2, 0x2, 0x9db, 0x9d3, 0x3, 0x2, 0x2, 
       0x2, 0x9db, 0x9d7, 0x3, 0x2, 0x2, 0x2, 0x9db, 0x9d8, 0x3, 0x2, 0x2, 
       0x2, 0x9db, 0x9d9, 0x3, 0x2, 0x2, 0x2, 0x9db, 0x9da, 0x3, 0x2, 0x2, 
       0x2, 0x9dc, 0x175, 0x3, 0x2, 0x2, 0x2, 0x9dd, 0x9e3, 0x5, 0x186, 
       0xc4, 0x2, 0x9de, 0x9e3, 0x5, 0x18e, 0xc8, 0x2, 0x9df, 0x9e3, 0x5, 
       0x194, 0xcb, 0x2, 0x9e0, 0x9e3, 0x5, 0x19a, 0xce, 0x2, 0x9e1, 0x9e3, 
       0x5, 0x1a2, 0xd2, 0x2, 0x9e2, 0x9dd, 0x3, 0x2, 0x2, 0x2, 0x9e2, 0x9de, 
       0x3, 0x2, 0x2, 0x2, 0x9e2, 0x9df, 0x3, 0x2, 0x2, 0x2, 0x9e2, 0x9e0, 
       0x3, 0x2, 0x2, 0x2, 0x9e2, 0x9e1, 0x3, 0x2, 0x2, 0x2, 0x9e3, 0x177, 
       0x3, 0x2, 0x2, 0x2, 0x9e4, 0x9e5, 0x3, 0x2, 0x2, 0x2, 0x9e5, 0x179, 
       0x3, 0x2, 0x2, 0x2, 0x9e6, 0x9eb, 0x5, 0x186, 0xc4, 0x2, 0x9e7, 0x9eb, 
       0x5, 0x18e, 0xc8, 0x2, 0x9e8, 0x9eb, 0x5, 0x19a, 0xce, 0x2, 0x9e9, 
       0x9eb, 0x5, 0x1a2, 0xd2, 0x2, 0x9ea, 0x9e6, 0x3, 0x2, 0x2, 0x2, 0x9ea, 
       0x9e7, 0x3, 0x2, 0x2, 0x2, 0x9ea, 0x9e8, 0x3, 0x2, 0x2, 0x2, 0x9ea, 
       0x9e9, 0x3, 0x2, 0x2, 0x2, 0x9eb, 0x17b, 0x3, 0x2, 0x2, 0x2, 0x9ec, 
       0xa15, 0x5, 0x2, 0x2, 0x2, 0x9ed, 0x9f2, 0x5, 0x38, 0x1d, 0x2, 0x9ee, 
       0x9ef, 0x7, 0x4a, 0x2, 0x2, 0x9ef, 0x9f1, 0x7, 0x4b, 0x2, 0x2, 0x9f0, 
       0x9ee, 0x3, 0x2, 0x2, 0x2, 0x9f1, 0x9f4, 0x3, 0x2, 0x2, 0x2, 0x9f2, 
       0x9f0, 0x3, 0x2, 0x2, 0x2, 0x9f2, 0x9f3, 0x3, 0x2, 0x2, 0x2, 0x9f3, 
       0x9f5, 0x3, 0x2, 0x2, 0x2, 0x9f4, 0x9f2, 0x3, 0x2, 0x2, 0x2, 0x9f5, 
       0x9f6, 0x7, 0x4e, 0x2, 0x2, 0x9f6, 0x9f7, 0x7, 0x15, 0x2, 0x2, 0x9f7, 
       0xa15, 0x3, 0x2, 0x2, 0x2, 0x9f8, 0x9fd, 0x5, 0x82, 0x42, 0x2, 0x9f9, 
       0x9fa, 0x7, 0x4a, 0x2, 0x2, 0x9fa, 0x9fc, 0x7, 0x4b, 0x2, 0x2, 0x9fb, 
       0x9f9, 0x3, 0x2, 0x2, 0x2, 0x9fc, 0x9ff, 0x3, 0x2, 0x2, 0x2, 0x9fd, 
       0x9fb, 0x3, 0x2, 0x2, 0x2, 0x9fd, 0x9fe, 0x3, 0x2, 0x2, 0x2, 0x9fe, 
       0xa00, 0x3, 0x2, 0x2, 0x2, 0x9ff, 0x9fd, 0x3, 0x2, 0x2, 0x2, 0xa00, 
       0xa01, 0x7, 0x4e, 0x2, 0x2, 0xa01, 0xa02, 0x7, 0x15, 0x2, 0x2, 0xa02, 
       0xa15, 0x3, 0x2, 0x2, 0x2, 0xa03, 0xa04, 0x7, 0x3c, 0x2, 0x2, 0xa04, 
       0xa05, 0x7, 0x4e, 0x2, 0x2, 0xa05, 0xa15, 0x7, 0x15, 0x2, 0x2, 0xa06, 
       0xa15, 0x7, 0x37, 0x2, 0x2, 0xa07, 0xa08, 0x5, 0x38, 0x1d, 0x2, 0xa08, 
       0xa09, 0x7, 0x4e, 0x2, 0x2, 0xa09, 0xa0a, 0x7, 0x37, 0x2, 0x2, 0xa0a, 
       0xa15, 0x3, 0x2, 0x2, 0x2, 0xa0b, 0xa0c, 0x7, 0x46, 0x2, 0x2, 0xa0c, 
       0xa0d, 0x5, 0x1ae, 0xd8, 0x2, 0xa0d, 0xa0e, 0x7, 0x47, 0x2, 0x2, 
       0xa0e, 0xa15, 0x3, 0x2, 0x2, 0x2, 0xa0f, 0xa15, 0x5, 0x188, 0xc5, 
       0x2, 0xa10, 0xa15, 0x5, 0x190, 0xc9, 0x2, 0xa11, 0xa15, 0x5, 0x196, 
       0xcc, 0x2, 0xa12, 0xa15, 0x5, 0x19c, 0xcf, 0x2, 0xa13, 0xa15, 0x5, 
       0x1a4, 0xd3, 0x2, 0xa14, 0x9ec, 0x3, 0x2, 0x2, 0x2, 0xa14, 0x9ed, 
       0x3, 0x2, 0x2, 0x2, 0xa14, 0x9f8, 0x3, 0x2, 0x2, 0x2, 0xa14, 0xa03, 
       0x3, 0x2, 0x2, 0x2, 0xa14, 0xa06, 0x3, 0x2, 0x2, 0x2, 0xa14, 0xa07, 
       0x3, 0x2, 0x2, 0x2, 0xa14, 0xa0b, 0x3, 0x2, 0x2, 0x2, 0xa14, 0xa0f, 
       0x3, 0x2, 0x2, 0x2, 0xa14, 0xa10, 0x3, 0x2, 0x2, 0x2, 0xa14, 0xa11, 
       0x3, 0x2, 0x2, 0x2, 0xa14, 0xa12, 0x3, 0x2, 0x2, 0x2, 0xa14, 0xa13, 
       0x3, 0x2, 0x2, 0x2, 0xa15, 0x17d, 0x3, 0x2, 0x2, 0x2, 0xa16, 0xa17, 
       0x3, 0x2, 0x2, 0x2, 0xa17, 0x17f, 0x3, 0x2, 0x2, 0x2, 0xa18, 0xa40, 
       0x5, 0x2, 0x2, 0x2, 0xa19, 0xa1e, 0x5, 0x38, 0x1d, 0x2, 0xa1a, 0xa1b, 
       0x7, 0x4a, 0x2, 0x2, 0xa1b, 0xa1d, 0x7, 0x4b, 0x2, 0x2, 0xa1c, 0xa1a, 
       0x3, 0x2, 0x2, 0x2, 0xa1d, 0xa20, 0x3, 0x2, 0x2, 0x2, 0xa1e, 0xa1c, 
       0x3, 0x2, 0x2, 0x2, 0xa1e, 0xa1f, 0x3, 0x2, 0x2, 0x2, 0xa1f, 0xa21, 
       0x3, 0x2, 0x2, 0x2, 0xa20, 0xa1e, 0x3, 0x2, 0x2, 0x2, 0xa21, 0xa22, 
       0x7, 0x4e, 0x2, 0x2, 0xa22, 0xa23, 0x7, 0x15, 0x2, 0x2, 0xa23, 0xa40, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0xa29, 0x5, 0x82, 0x42, 0x2, 0xa25, 0xa26, 
       0x7, 0x4a, 0x2, 0x2, 0xa26, 0xa28, 0x7, 0x4b, 0x2, 0x2, 0xa27, 0xa25, 
       0x3, 0x2, 0x2, 0x2, 0xa28, 0xa2b, 0x3, 0x2, 0x2, 0x2, 0xa29, 0xa27, 
       0x3, 0x2, 0x2, 0x2, 0xa29, 0xa2a, 0x3, 0x2, 0x2, 0x2, 0xa2a, 0xa2c, 
       0x3, 0x2, 0x2, 0x2, 0xa2b, 0xa29, 0x3, 0x2, 0x2, 0x2, 0xa2c, 0xa2d, 
       0x7, 0x4e, 0x2, 0x2, 0xa2d, 0xa2e, 0x7, 0x15, 0x2, 0x2, 0xa2e, 0xa40, 
       0x3, 0x2, 0x2, 0x2, 0xa2f, 0xa30, 0x7, 0x3c, 0x2, 0x2, 0xa30, 0xa31, 
       0x7, 0x4e, 0x2, 0x2, 0xa31, 0xa40, 0x7, 0x15, 0x2, 0x2, 0xa32, 0xa40, 
       0x7, 0x37, 0x2, 0x2, 0xa33, 0xa34, 0x5, 0x38, 0x1d, 0x2, 0xa34, 0xa35, 
       0x7, 0x4e, 0x2, 0x2, 0xa35, 0xa36, 0x7, 0x37, 0x2, 0x2, 0xa36, 0xa40, 
       0x3, 0x2, 0x2, 0x2, 0xa37, 0xa38, 0x7, 0x46, 0x2, 0x2, 0xa38, 0xa39, 
       0x5, 0x1ae, 0xd8, 0x2, 0xa39, 0xa3a, 0x7, 0x47, 0x2, 0x2, 0xa3a, 
       0xa40, 0x3, 0x2, 0x2, 0x2, 0xa3b, 0xa40, 0x5, 0x188, 0xc5, 0x2, 0xa3c, 
       0xa40, 0x5, 0x190, 0xc9, 0x2, 0xa3d, 0xa40, 0x5, 0x19c, 0xcf, 0x2, 
       0xa3e, 0xa40, 0x5, 0x1a4, 0xd3, 0x2, 0xa3f, 0xa18, 0x3, 0x2, 0x2, 
       0x2, 0xa3f, 0xa19, 0x3, 0x2, 0x2, 0x2, 0xa3f, 0xa24, 0x3, 0x2, 0x2, 
       0x2, 0xa3f, 0xa2f, 0x3, 0x2, 0x2, 0x2, 0xa3f, 0xa32, 0x3, 0x2, 0x2, 
       0x2, 0xa3f, 0xa33, 0x3, 0x2, 0x2, 0x2, 0xa3f, 0xa37, 0x3, 0x2, 0x2, 
       0x2, 0xa3f, 0xa3b, 0x3, 0x2, 0x2, 0x2, 0xa3f, 0xa3c, 0x3, 0x2, 0x2, 
       0x2, 0xa3f, 0xa3d, 0x3, 0x2, 0x2, 0x2, 0xa3f, 0xa3e, 0x3, 0x2, 0x2, 
       0x2, 0xa40, 0x181, 0x3, 0x2, 0x2, 0x2, 0xa41, 0xa45, 0x5, 0x38, 0x1d, 
       0x2, 0xa42, 0xa45, 0x5, 0x6, 0x4, 0x2, 0xa43, 0xa45, 0x7, 0xf, 0x2, 
       0x2, 0xa44, 0xa41, 0x3, 0x2, 0x2, 0x2, 0xa44, 0xa42, 0x3, 0x2, 0x2, 
       0x2, 0xa44, 0xa43, 0x3, 0x2, 0x2, 0x2, 0xa45, 0xa4a, 0x3, 0x2, 0x2, 
       0x2, 0xa46, 0xa47, 0x7, 0x4a, 0x2, 0x2, 0xa47, 0xa49, 0x7, 0x4b, 
       0x2, 0x2, 0xa48, 0xa46, 0x3, 0x2, 0x2, 0x2, 0xa49, 0xa4c, 0x3, 0x2, 
       0x2, 0x2, 0xa4a, 0xa48, 0x3, 0x2, 0x2, 0x2, 0xa4a, 0xa4b, 0x3, 0x2, 
       0x2, 0x2, 0xa4b, 0xa4d, 0x3, 0x2, 0x2, 0x2, 0xa4c, 0xa4a, 0x3, 0x2, 
       0x2, 0x2, 0xa4d, 0xa4e, 0x7, 0x4e, 0x2, 0x2, 0xa4e, 0xa53, 0x7, 0x15, 
       0x2, 0x2, 0xa4f, 0xa50, 0x7, 0x3c, 0x2, 0x2, 0xa50, 0xa51, 0x7, 0x4e, 
       0x2, 0x2, 0xa51, 0xa53, 0x7, 0x15, 0x2, 0x2, 0xa52, 0xa44, 0x3, 0x2, 
       0x2, 0x2, 0xa52, 0xa4f, 0x3, 0x2, 0x2, 0x2, 0xa53, 0x183, 0x3, 0x2, 
       0x2, 0x2, 0xa54, 0xa56, 0x7, 0x2b, 0x2, 0x2, 0xa55, 0xa57, 0x5, 0x2a, 
       0x16, 0x2, 0xa56, 0xa55, 0x3, 0x2, 0x2, 0x2, 0xa56, 0xa57, 0x3, 0x2, 
       0x2, 0x2, 0xa57, 0xa5b, 0x3, 0x2, 0x2, 0x2, 0xa58, 0xa5a, 0x5, 0xf2, 
       0x7a, 0x2, 0xa59, 0xa58, 0x3, 0x2, 0x2, 0x2, 0xa5a, 0xa5d, 0x3, 0x2, 
       0x2, 0x2, 0xa5b, 0xa59, 0x3, 0x2, 0x2, 0x2, 0xa5b, 0xa5c, 0x3, 0x2, 
       0x2, 0x2, 0xa5c, 0xa5e, 0x3, 0x2, 0x2, 0x2, 0xa5d, 0xa5b, 0x3, 0x2, 
       0x2, 0x2, 0xa5e, 0xa69, 0x5, 0x3d2, 0x1ea, 0x2, 0xa5f, 0xa63, 0x7, 
       0x4e, 0x2, 0x2, 0xa60, 0xa62, 0x5, 0xf2, 0x7a, 0x2, 0xa61, 0xa60, 
       0x3, 0x2, 0x2, 0x2, 0xa62, 0xa65, 0x3, 0x2, 0x2, 0x2, 0xa63, 0xa61, 
       0x3, 0x2, 0x2, 0x2, 0xa63, 0xa64, 0x3, 0x2, 0x2, 0x2, 0xa64, 0xa66, 
       0x3, 0x2, 0x2, 0x2, 0xa65, 0xa63, 0x3, 0x2, 0x2, 0x2, 0xa66, 0xa68, 
       0x5, 0x3d2, 0x1ea, 0x2, 0xa67, 0xa5f, 0x3, 0x2, 0x2, 0x2, 0xa68, 
       0xa6b, 0x3, 0x2, 0x2, 0x2, 0xa69, 0xa67, 0x3, 0x2, 0x2, 0x2, 0xa69, 
       0xa6a, 0x3, 0x2, 0x2, 0x2, 0xa6a, 0xa6d, 0x3, 0x2, 0x2, 0x2, 0xa6b, 
       0xa69, 0x3, 0x2, 0x2, 0x2, 0xa6c, 0xa6e, 0x5, 0x18a, 0xc6, 0x2, 0xa6d, 
       0xa6c, 0x3, 0x2, 0x2, 0x2, 0xa6d, 0xa6e, 0x3, 0x2, 0x2, 0x2, 0xa6e, 
       0xa6f, 0x3, 0x2, 0x2, 0x2, 0xa6f, 0xa71, 0x7, 0x46, 0x2, 0x2, 0xa70, 
       0xa72, 0x5, 0x19e, 0xd0, 0x2, 0xa71, 0xa70, 0x3, 0x2, 0x2, 0x2, 0xa71, 
       0xa72, 0x3, 0x2, 0x2, 0x2, 0xa72, 0xa73, 0x3, 0x2, 0x2, 0x2, 0xa73, 
       0xa75, 0x7, 0x47, 0x2, 0x2, 0xa74, 0xa76, 0x5, 0x6e, 0x38, 0x2, 0xa75, 
       0xa74, 0x3, 0x2, 0x2, 0x2, 0xa75, 0xa76, 0x3, 0x2, 0x2, 0x2, 0xa76, 
       0xaa8, 0x3, 0x2, 0x2, 0x2, 0xa77, 0xa78, 0x5, 0x3c, 0x1f, 0x2, 0xa78, 
       0xa79, 0x7, 0x4e, 0x2, 0x2, 0xa79, 0xa7b, 0x7, 0x2b, 0x2, 0x2, 0xa7a, 
       0xa7c, 0x5, 0x2a, 0x16, 0x2, 0xa7b, 0xa7a, 0x3, 0x2, 0x2, 0x2, 0xa7b, 
       0xa7c, 0x3, 0x2, 0x2, 0x2, 0xa7c, 0xa80, 0x3, 0x2, 0x2, 0x2, 0xa7d, 
       0xa7f, 0x5, 0xf2, 0x7a, 0x2, 0xa7e, 0xa7d, 0x3, 0x2, 0x2, 0x2, 0xa7f, 
       0xa82, 0x3, 0x2, 0x2, 0x2, 0xa80, 0xa7e, 0x3, 0x2, 0x2, 0x2, 0xa80, 
       0xa81, 0x3, 0x2, 0x2, 0x2, 0xa81, 0xa83, 0x3, 0x2, 0x2, 0x2, 0xa82, 
       0xa80, 0x3, 0x2, 0x2, 0x2, 0xa83, 0xa85, 0x5, 0x3d2, 0x1ea, 0x2, 
       0xa84, 0xa86, 0x5, 0x18a, 0xc6, 0x2, 0xa85, 0xa84, 0x3, 0x2, 0x2, 
       0x2, 0xa85, 0xa86, 0x3, 0x2, 0x2, 0x2, 0xa86, 0xa87, 0x3, 0x2, 0x2, 
       0x2, 0xa87, 0xa89, 0x7, 0x46, 0x2, 0x2, 0xa88, 0xa8a, 0x5, 0x19e, 
       0xd0, 0x2, 0xa89, 0xa88, 0x3, 0x2, 0x2, 0x2, 0xa89, 0xa8a, 0x3, 0x2, 
       0x2, 0x2, 0xa8a, 0xa8b, 0x3, 0x2, 0x2, 0x2, 0xa8b, 0xa8d, 0x7, 0x47, 
       0x2, 0x2, 0xa8c, 0xa8e, 0x5, 0x6e, 0x38, 0x2, 0xa8d, 0xa8c, 0x3, 
       0x2, 0x2, 0x2, 0xa8d, 0xa8e, 0x3, 0x2, 0x2, 0x2, 0xa8e, 0xaa8, 0x3, 
       0x2, 0x2, 0x2, 0xa8f, 0xa90, 0x5, 0x16e, 0xb8, 0x2, 0xa90, 0xa91, 
       0x7, 0x4e, 0x2, 0x2, 0xa91, 0xa93, 0x7, 0x2b, 0x2, 0x2, 0xa92, 0xa94, 
       0x5, 0x2a, 0x16, 0x2, 0xa93, 0xa92, 0x3, 0x2, 0x2, 0x2, 0xa93, 0xa94, 
       0x3, 0x2, 0x2, 0x2, 0xa94, 0xa98, 0x3, 0x2, 0x2, 0x2, 0xa95, 0xa97, 
       0x5, 0xf2, 0x7a, 0x2, 0xa96, 0xa95, 0x3, 0x2, 0x2, 0x2, 0xa97, 0xa9a, 
       0x3, 0x2, 0x2, 0x2, 0xa98, 0xa96, 0x3, 0x2, 0x2, 0x2, 0xa98, 0xa99, 
       0x3, 0x2, 0x2, 0x2, 0xa99, 0xa9b, 0x3, 0x2, 0x2, 0x2, 0xa9a, 0xa98, 
       0x3, 0x2, 0x2, 0x2, 0xa9b, 0xa9d, 0x5, 0x3d2, 0x1ea, 0x2, 0xa9c, 
       0xa9e, 0x5, 0x18a, 0xc6, 0x2, 0xa9d, 0xa9c, 0x3, 0x2, 0x2, 0x2, 0xa9d, 
       0xa9e, 0x3, 0x2, 0x2, 0x2, 0xa9e, 0xa9f, 0x3, 0x2, 0x2, 0x2, 0xa9f, 
       0xaa1, 0x7, 0x46, 0x2, 0x2, 0xaa0, 0xaa2, 0x5, 0x19e, 0xd0, 0x2, 
       0xaa1, 0xaa0, 0x3, 0x2, 0x2, 0x2, 0xaa1, 0xaa2, 0x3, 0x2, 0x2, 0x2, 
       0xaa2, 0xaa3, 0x3, 0x2, 0x2, 0x2, 0xaa3, 0xaa5, 0x7, 0x47, 0x2, 0x2, 
       0xaa4, 0xaa6, 0x5, 0x6e, 0x38, 0x2, 0xaa5, 0xaa4, 0x3, 0x2, 0x2, 
       0x2, 0xaa5, 0xaa6, 0x3, 0x2, 0x2, 0x2, 0xaa6, 0xaa8, 0x3, 0x2, 0x2, 
       0x2, 0xaa7, 0xa54, 0x3, 0x2, 0x2, 0x2, 0xaa7, 0xa77, 0x3, 0x2, 0x2, 
       0x2, 0xaa7, 0xa8f, 0x3, 0x2, 0x2, 0x2, 0xaa8, 0x185, 0x3, 0x2, 0x2, 
       0x2, 0xaa9, 0xaaa, 0x7, 0x4e, 0x2, 0x2, 0xaaa, 0xaac, 0x7, 0x2b, 
       0x2, 0x2, 0xaab, 0xaad, 0x5, 0x2a, 0x16, 0x2, 0xaac, 0xaab, 0x3, 
       0x2, 0x2, 0x2, 0xaac, 0xaad, 0x3, 0x2, 0x2, 0x2, 0xaad, 0xab1, 0x3, 
       0x2, 0x2, 0x2, 0xaae, 0xab0, 0x5, 0xf2, 0x7a, 0x2, 0xaaf, 0xaae, 
       0x3, 0x2, 0x2, 0x2, 0xab0, 0xab3, 0x3, 0x2, 0x2, 0x2, 0xab1, 0xaaf, 
       0x3, 0x2, 0x2, 0x2, 0xab1, 0xab2, 0x3, 0x2, 0x2, 0x2, 0xab2, 0xab4, 
       0x3, 0x2, 0x2, 0x2, 0xab3, 0xab1, 0x3, 0x2, 0x2, 0x2, 0xab4, 0xab6, 
       0x5, 0x3d2, 0x1ea, 0x2, 0xab5, 0xab7, 0x5, 0x18a, 0xc6, 0x2, 0xab6, 
       0xab5, 0x3, 0x2, 0x2, 0x2, 0xab6, 0xab7, 0x3, 0x2, 0x2, 0x2, 0xab7, 
       0xab8, 0x3, 0x2, 0x2, 0x2, 0xab8, 0xaba, 0x7, 0x46, 0x2, 0x2, 0xab9, 
       0xabb, 0x5, 0x19e, 0xd0, 0x2, 0xaba, 0xab9, 0x3, 0x2, 0x2, 0x2, 0xaba, 
       0xabb, 0x3, 0x2, 0x2, 0x2, 0xabb, 0xabc, 0x3, 0x2, 0x2, 0x2, 0xabc, 
       0xabe, 0x7, 0x47, 0x2, 0x2, 0xabd, 0xabf, 0x5, 0x6e, 0x38, 0x2, 0xabe, 
       0xabd, 0x3, 0x2, 0x2, 0x2, 0xabe, 0xabf, 0x3, 0x2, 0x2, 0x2, 0xabf, 
       0x187, 0x3, 0x2, 0x2, 0x2, 0xac0, 0xac2, 0x7, 0x2b, 0x2, 0x2, 0xac1, 
       0xac3, 0x5, 0x2a, 0x16, 0x2, 0xac2, 0xac1, 0x3, 0x2, 0x2, 0x2, 0xac2, 
       0xac3, 0x3, 0x2, 0x2, 0x2, 0xac3, 0xac7, 0x3, 0x2, 0x2, 0x2, 0xac4, 
       0xac6, 0x5, 0xf2, 0x7a, 0x2, 0xac5, 0xac4, 0x3, 0x2, 0x2, 0x2, 0xac6, 
       0xac9, 0x3, 0x2, 0x2, 0x2, 0xac7, 0xac5, 0x3, 0x2, 0x2, 0x2, 0xac7, 
       0xac8, 0x3, 0x2, 0x2, 0x2, 0xac8, 0xaca, 0x3, 0x2, 0x2, 0x2, 0xac9, 
       0xac7, 0x3, 0x2, 0x2, 0x2, 0xaca, 0xad5, 0x5, 0x3d2, 0x1ea, 0x2, 
       0xacb, 0xacf, 0x7, 0x4e, 0x2, 0x2, 0xacc, 0xace, 0x5, 0xf2, 0x7a, 
       0x2, 0xacd, 0xacc, 0x3, 0x2, 0x2, 0x2, 0xace, 0xad1, 0x3, 0x2, 0x2, 
       0x2, 0xacf, 0xacd, 0x3, 0x2, 0x2, 0x2, 0xacf, 0xad0, 0x3, 0x2, 0x2, 
       0x2, 0xad0, 0xad2, 0x3, 0x2, 0x2, 0x2, 0xad1, 0xacf, 0x3, 0x2, 0x2, 
       0x2, 0xad2, 0xad4, 0x5, 0x3d2, 0x1ea, 0x2, 0xad3, 0xacb, 0x3, 0x2, 
       0x2, 0x2, 0xad4, 0xad7, 0x3, 0x2, 0x2, 0x2, 0xad5, 0xad3, 0x3, 0x2, 
       0x2, 0x2, 0xad5, 0xad6, 0x3, 0x2, 0x2, 0x2, 0xad6, 0xad9, 0x3, 0x2, 
       0x2, 0x2, 0xad7, 0xad5, 0x3, 0x2, 0x2, 0x2, 0xad8, 0xada, 0x5, 0x18a, 
       0xc6, 0x2, 0xad9, 0xad8, 0x3, 0x2, 0x2, 0x2, 0xad9, 0xada, 0x3, 0x2, 
       0x2, 0x2, 0xada, 0xadb, 0x3, 0x2, 0x2, 0x2, 0xadb, 0xadd, 0x7, 0x46, 
       0x2, 0x2, 0xadc, 0xade, 0x5, 0x19e, 0xd0, 0x2, 0xadd, 0xadc, 0x3, 
       0x2, 0x2, 0x2, 0xadd, 0xade, 0x3, 0x2, 0x2, 0x2, 0xade, 0xadf, 0x3, 
       0x2, 0x2, 0x2, 0xadf, 0xae1, 0x7, 0x47, 0x2, 0x2, 0xae0, 0xae2, 0x5, 
       0x6e, 0x38, 0x2, 0xae1, 0xae0, 0x3, 0x2, 0x2, 0x2, 0xae1, 0xae2, 
       0x3, 0x2, 0x2, 0x2, 0xae2, 0xafc, 0x3, 0x2, 0x2, 0x2, 0xae3, 0xae4, 
       0x5, 0x3c, 0x1f, 0x2, 0xae4, 0xae5, 0x7, 0x4e, 0x2, 0x2, 0xae5, 0xae7, 
       0x7, 0x2b, 0x2, 0x2, 0xae6, 0xae8, 0x5, 0x2a, 0x16, 0x2, 0xae7, 0xae6, 
       0x3, 0x2, 0x2, 0x2, 0xae7, 0xae8, 0x3, 0x2, 0x2, 0x2, 0xae8, 0xaec, 
       0x3, 0x2, 0x2, 0x2, 0xae9, 0xaeb, 0x5, 0xf2, 0x7a, 0x2, 0xaea, 0xae9, 
       0x3, 0x2, 0x2, 0x2, 0xaeb, 0xaee, 0x3, 0x2, 0x2, 0x2, 0xaec, 0xaea, 
       0x3, 0x2, 0x2, 0x2, 0xaec, 0xaed, 0x3, 0x2, 0x2, 0x2, 0xaed, 0xaef, 
       0x3, 0x2, 0x2, 0x2, 0xaee, 0xaec, 0x3, 0x2, 0x2, 0x2, 0xaef, 0xaf1, 
       0x5, 0x3d2, 0x1ea, 0x2, 0xaf0, 0xaf2, 0x5, 0x18a, 0xc6, 0x2, 0xaf1, 
       0xaf0, 0x3, 0x2, 0x2, 0x2, 0xaf1, 0xaf2, 0x3, 0x2, 0x2, 0x2, 0xaf2, 
       0xaf3, 0x3, 0x2, 0x2, 0x2, 0xaf3, 0xaf5, 0x7, 0x46, 0x2, 0x2, 0xaf4, 
       0xaf6, 0x5, 0x19e, 0xd0, 0x2, 0xaf5, 0xaf4, 0x3, 0x2, 0x2, 0x2, 0xaf5, 
       0xaf6, 0x3, 0x2, 0x2, 0x2, 0xaf6, 0xaf7, 0x3, 0x2, 0x2, 0x2, 0xaf7, 
       0xaf9, 0x7, 0x47, 0x2, 0x2, 0xaf8, 0xafa, 0x5, 0x6e, 0x38, 0x2, 0xaf9, 
       0xaf8, 0x3, 0x2, 0x2, 0x2, 0xaf9, 0xafa, 0x3, 0x2, 0x2, 0x2, 0xafa, 
       0xafc, 0x3, 0x2, 0x2, 0x2, 0xafb, 0xac0, 0x3, 0x2, 0x2, 0x2, 0xafb, 
       0xae3, 0x3, 0x2, 0x2, 0x2, 0xafc, 0x189, 0x3, 0x2, 0x2, 0x2, 0xafd, 
       0xb01, 0x5, 0x2a, 0x16, 0x2, 0xafe, 0xaff, 0x7, 0x54, 0x2, 0x2, 0xaff, 
       0xb01, 0x7, 0x53, 0x2, 0x2, 0xb00, 0xafd, 0x3, 0x2, 0x2, 0x2, 0xb00, 
       0xafe, 0x3, 0x2, 0x2, 0x2, 0xb01, 0x18b, 0x3, 0x2, 0x2, 0x2, 0xb02, 
       0xb03, 0x5, 0x16e, 0xb8, 0x2, 0xb03, 0xb04, 0x7, 0x4e, 0x2, 0x2, 
       0xb04, 0xb05, 0x5, 0x3d2, 0x1ea, 0x2, 0xb05, 0xb10, 0x3, 0x2, 0x2, 
       0x2, 0xb06, 0xb07, 0x7, 0x34, 0x2, 0x2, 0xb07, 0xb08, 0x7, 0x4e, 
       0x2, 0x2, 0xb08, 0xb10, 0x5, 0x3d2, 0x1ea, 0x2, 0xb09, 0xb0a, 0x5, 
       0x38, 0x1d, 0x2, 0xb0a, 0xb0b, 0x7, 0x4e, 0x2, 0x2, 0xb0b, 0xb0c, 
       0x7, 0x34, 0x2, 0x2, 0xb0c, 0xb0d, 0x7, 0x4e, 0x2, 0x2, 0xb0d, 0xb0e, 
       0x5, 0x3d2, 0x1ea, 0x2, 0xb0e, 0xb10, 0x3, 0x2, 0x2, 0x2, 0xb0f, 
       0xb02, 0x3, 0x2, 0x2, 0x2, 0xb0f, 0xb06, 0x3, 0x2, 0x2, 0x2, 0xb0f, 
       0xb09, 0x3, 0x2, 0x2, 0x2, 0xb10, 0x18d, 0x3, 0x2, 0x2, 0x2, 0xb11, 
       0xb12, 0x7, 0x4e, 0x2, 0x2, 0xb12, 0xb13, 0x5, 0x3d2, 0x1ea, 0x2, 
       0xb13, 0x18f, 0x3, 0x2, 0x2, 0x2, 0xb14, 0xb15, 0x7, 0x34, 0x2, 0x2, 
       0xb15, 0xb16, 0x7, 0x4e, 0x2, 0x2, 0xb16, 0xb1e, 0x5, 0x3d2, 0x1ea, 
       0x2, 0xb17, 0xb18, 0x5, 0x38, 0x1d, 0x2, 0xb18, 0xb19, 0x7, 0x4e, 
       0x2, 0x2, 0xb19, 0xb1a, 0x7, 0x34, 0x2, 0x2, 0xb1a, 0xb1b, 0x7, 0x4e, 
       0x2, 0x2, 0xb1b, 0xb1c, 0x5, 0x3d2, 0x1ea, 0x2, 0xb1c, 0xb1e, 0x3, 
       0x2, 0x2, 0x2, 0xb1d, 0xb14, 0x3, 0x2, 0x2, 0x2, 0xb1d, 0xb17, 0x3, 
       0x2, 0x2, 0x2, 0xb1e, 0x191, 0x3, 0x2, 0x2, 0x2, 0xb1f, 0xb20, 0x5, 
       0x3c, 0x1f, 0x2, 0xb20, 0xb21, 0x7, 0x4a, 0x2, 0x2, 0xb21, 0xb22, 
       0x5, 0x1ae, 0xd8, 0x2, 0xb22, 0xb23, 0x7, 0x4b, 0x2, 0x2, 0xb23, 
       0xb2a, 0x3, 0x2, 0x2, 0x2, 0xb24, 0xb25, 0x5, 0x174, 0xbb, 0x2, 0xb25, 
       0xb26, 0x7, 0x4a, 0x2, 0x2, 0xb26, 0xb27, 0x5, 0x1ae, 0xd8, 0x2, 
       0xb27, 0xb28, 0x7, 0x4b, 0x2, 0x2, 0xb28, 0xb2a, 0x3, 0x2, 0x2, 0x2, 
       0xb29, 0xb1f, 0x3, 0x2, 0x2, 0x2, 0xb29, 0xb24, 0x3, 0x2, 0x2, 0x2, 
       0xb2a, 0xb32, 0x3, 0x2, 0x2, 0x2, 0xb2b, 0xb2c, 0x5, 0x172, 0xba, 
       0x2, 0xb2c, 0xb2d, 0x7, 0x4a, 0x2, 0x2, 0xb2d, 0xb2e, 0x5, 0x1ae, 
       0xd8, 0x2, 0xb2e, 0xb2f, 0x7, 0x4b, 0x2, 0x2, 0xb2f, 0xb31, 0x3, 
       0x2, 0x2, 0x2, 0xb30, 0xb2b, 0x3, 0x2, 0x2, 0x2, 0xb31, 0xb34, 0x3, 
       0x2, 0x2, 0x2, 0xb32, 0xb30, 0x3, 0x2, 0x2, 0x2, 0xb32, 0xb33, 0x3, 
       0x2, 0x2, 0x2, 0xb33, 0x193, 0x3, 0x2, 0x2, 0x2, 0xb34, 0xb32, 0x3, 
       0x2, 0x2, 0x2, 0xb35, 0xb36, 0x5, 0x17a, 0xbe, 0x2, 0xb36, 0xb37, 
       0x7, 0x4a, 0x2, 0x2, 0xb37, 0xb38, 0x5, 0x1ae, 0xd8, 0x2, 0xb38, 
       0xb39, 0x7, 0x4b, 0x2, 0x2, 0xb39, 0xb41, 0x3, 0x2, 0x2, 0x2, 0xb3a, 
       0xb3b, 0x5, 0x178, 0xbd, 0x2, 0xb3b, 0xb3c, 0x7, 0x4a, 0x2, 0x2, 
       0xb3c, 0xb3d, 0x5, 0x1ae, 0xd8, 0x2, 0xb3d, 0xb3e, 0x7, 0x4b, 0x2, 
       0x2, 0xb3e, 0xb40, 0x3, 0x2, 0x2, 0x2, 0xb3f, 0xb3a, 0x3, 0x2, 0x2, 
       0x2, 0xb40, 0xb43, 0x3, 0x2, 0x2, 0x2, 0xb41, 0xb3f, 0x3, 0x2, 0x2, 
       0x2, 0xb41, 0xb42, 0x3, 0x2, 0x2, 0x2, 0xb42, 0x195, 0x3, 0x2, 0x2, 
       0x2, 0xb43, 0xb41, 0x3, 0x2, 0x2, 0x2, 0xb44, 0xb45, 0x5, 0x3c, 0x1f, 
       0x2, 0xb45, 0xb46, 0x7, 0x4a, 0x2, 0x2, 0xb46, 0xb47, 0x5, 0x1ae, 
       0xd8, 0x2, 0xb47, 0xb48, 0x7, 0x4b, 0x2, 0x2, 0xb48, 0xb4f, 0x3, 
       0x2, 0x2, 0x2, 0xb49, 0xb4a, 0x5, 0x180, 0xc1, 0x2, 0xb4a, 0xb4b, 
       0x7, 0x4a, 0x2, 0x2, 0xb4b, 0xb4c, 0x5, 0x1ae, 0xd8, 0x2, 0xb4c, 
       0xb4d, 0x7, 0x4b, 0x2, 0x2, 0xb4d, 0xb4f, 0x3, 0x2, 0x2, 0x2, 0xb4e, 
       0xb44, 0x3, 0x2, 0x2, 0x2, 0xb4e, 0xb49, 0x3, 0x2, 0x2, 0x2, 0xb4f, 
       0xb57, 0x3, 0x2, 0x2, 0x2, 0xb50, 0xb51, 0x5, 0x17e, 0xc0, 0x2, 0xb51, 
       0xb52, 0x7, 0x4a, 0x2, 0x2, 0xb52, 0xb53, 0x5, 0x1ae, 0xd8, 0x2, 
       0xb53, 0xb54, 0x7, 0x4b, 0x2, 0x2, 0xb54, 0xb56, 0x3, 0x2, 0x2, 0x2, 
       0xb55, 0xb50, 0x3, 0x2, 0x2, 0x2, 0xb56, 0xb59, 0x3, 0x2, 0x2, 0x2, 
       0xb57, 0xb55, 0x3, 0x2, 0x2, 0x2, 0xb57, 0xb58, 0x3, 0x2, 0x2, 0x2, 
       0xb58, 0x197, 0x3, 0x2, 0x2, 0x2, 0xb59, 0xb57, 0x3, 0x2, 0x2, 0x2, 
       0xb5a, 0xb5b, 0x5, 0x3e, 0x20, 0x2, 0xb5b, 0xb5d, 0x7, 0x46, 0x2, 
       0x2, 0xb5c, 0xb5e, 0x5, 0x19e, 0xd0, 0x2, 0xb5d, 0xb5c, 0x3, 0x2, 
       0x2, 0x2, 0xb5d, 0xb5e, 0x3, 0x2, 0x2, 0x2, 0xb5e, 0xb5f, 0x3, 0x2, 
       0x2, 0x2, 0xb5f, 0xb60, 0x7, 0x47, 0x2, 0x2, 0xb60, 0xba0, 0x3, 0x2, 
       0x2, 0x2, 0xb61, 0xb62, 0x5, 0x38, 0x1d, 0x2, 0xb62, 0xb64, 0x7, 
       0x4e, 0x2, 0x2, 0xb63, 0xb65, 0x5, 0x2a, 0x16, 0x2, 0xb64, 0xb63, 
       0x3, 0x2, 0x2, 0x2, 0xb64, 0xb65, 0x3, 0x2, 0x2, 0x2, 0xb65, 0xb66, 
       0x3, 0x2, 0x2, 0x2, 0xb66, 0xb67, 0x5, 0x3d2, 0x1ea, 0x2, 0xb67, 
       0xb69, 0x7, 0x46, 0x2, 0x2, 0xb68, 0xb6a, 0x5, 0x19e, 0xd0, 0x2, 
       0xb69, 0xb68, 0x3, 0x2, 0x2, 0x2, 0xb69, 0xb6a, 0x3, 0x2, 0x2, 0x2, 
       0xb6a, 0xb6b, 0x3, 0x2, 0x2, 0x2, 0xb6b, 0xb6c, 0x7, 0x47, 0x2, 0x2, 
       0xb6c, 0xba0, 0x3, 0x2, 0x2, 0x2, 0xb6d, 0xb6e, 0x5, 0x3c, 0x1f, 
       0x2, 0xb6e, 0xb70, 0x7, 0x4e, 0x2, 0x2, 0xb6f, 0xb71, 0x5, 0x2a, 
       0x16, 0x2, 0xb70, 0xb6f, 0x3, 0x2, 0x2, 0x2, 0xb70, 0xb71, 0x3, 0x2, 
       0x2, 0x2, 0xb71, 0xb72, 0x3, 0x2, 0x2, 0x2, 0xb72, 0xb73, 0x5, 0x3d2, 
       0x1ea, 0x2, 0xb73, 0xb75, 0x7, 0x46, 0x2, 0x2, 0xb74, 0xb76, 0x5, 
       0x19e, 0xd0, 0x2, 0xb75, 0xb74, 0x3, 0x2, 0x2, 0x2, 0xb75, 0xb76, 
       0x3, 0x2, 0x2, 0x2, 0xb76, 0xb77, 0x3, 0x2, 0x2, 0x2, 0xb77, 0xb78, 
       0x7, 0x47, 0x2, 0x2, 0xb78, 0xba0, 0x3, 0x2, 0x2, 0x2, 0xb79, 0xb7a, 
       0x5, 0x16e, 0xb8, 0x2, 0xb7a, 0xb7c, 0x7, 0x4e, 0x2, 0x2, 0xb7b, 
       0xb7d, 0x5, 0x2a, 0x16, 0x2, 0xb7c, 0xb7b, 0x3, 0x2, 0x2, 0x2, 0xb7c, 
       0xb7d, 0x3, 0x2, 0x2, 0x2, 0xb7d, 0xb7e, 0x3, 0x2, 0x2, 0x2, 0xb7e, 
       0xb7f, 0x5, 0x3d2, 0x1ea, 0x2, 0xb7f, 0xb81, 0x7, 0x46, 0x2, 0x2, 
       0xb80, 0xb82, 0x5, 0x19e, 0xd0, 0x2, 0xb81, 0xb80, 0x3, 0x2, 0x2, 
       0x2, 0xb81, 0xb82, 0x3, 0x2, 0x2, 0x2, 0xb82, 0xb83, 0x3, 0x2, 0x2, 
       0x2, 0xb83, 0xb84, 0x7, 0x47, 0x2, 0x2, 0xb84, 0xba0, 0x3, 0x2, 0x2, 
       0x2, 0xb85, 0xb86, 0x7, 0x34, 0x2, 0x2, 0xb86, 0xb88, 0x7, 0x4e, 
       0x2, 0x2, 0xb87, 0xb89, 0x5, 0x2a, 0x16, 0x2, 0xb88, 0xb87, 0x3, 
       0x2, 0x2, 0x2, 0xb88, 0xb89, 0x3, 0x2, 0x2, 0x2, 0xb89, 0xb8a, 0x3, 
       0x2, 0x2, 0x2, 0xb8a, 0xb8b, 0x5, 0x3d2, 0x1ea, 0x2, 0xb8b, 0xb8d, 
       0x7, 0x46, 0x2, 0x2, 0xb8c, 0xb8e, 0x5, 0x19e, 0xd0, 0x2, 0xb8d, 
       0xb8c, 0x3, 0x2, 0x2, 0x2, 0xb8d, 0xb8e, 0x3, 0x2, 0x2, 0x2, 0xb8e, 
       0xb8f, 0x3, 0x2, 0x2, 0x2, 0xb8f, 0xb90, 0x7, 0x47, 0x2, 0x2, 0xb90, 
       0xba0, 0x3, 0x2, 0x2, 0x2, 0xb91, 0xb92, 0x5, 0x38, 0x1d, 0x2, 0xb92, 
       0xb93, 0x7, 0x4e, 0x2, 0x2, 0xb93, 0xb94, 0x7, 0x34, 0x2, 0x2, 0xb94, 
       0xb96, 0x7, 0x4e, 0x2, 0x2, 0xb95, 0xb97, 0x5, 0x2a, 0x16, 0x2, 0xb96, 
       0xb95, 0x3, 0x2, 0x2, 0x2, 0xb96, 0xb97, 0x3, 0x2, 0x2, 0x2, 0xb97, 
       0xb98, 0x3, 0x2, 0x2, 0x2, 0xb98, 0xb99, 0x5, 0x3d2, 0x1ea, 0x2, 
       0xb99, 0xb9b, 0x7, 0x46, 0x2, 0x2, 0xb9a, 0xb9c, 0x5, 0x19e, 0xd0, 
       0x2, 0xb9b, 0xb9a, 0x3, 0x2, 0x2, 0x2, 0xb9b, 0xb9c, 0x3, 0x2, 0x2, 
       0x2, 0xb9c, 0xb9d, 0x3, 0x2, 0x2, 0x2, 0xb9d, 0xb9e, 0x7, 0x47, 0x2, 
       0x2, 0xb9e, 0xba0, 0x3, 0x2, 0x2, 0x2, 0xb9f, 0xb5a, 0x3, 0x2, 0x2, 
       0x2, 0xb9f, 0xb61, 0x3, 0x2, 0x2, 0x2, 0xb9f, 0xb6d, 0x3, 0x2, 0x2, 
       0x2, 0xb9f, 0xb79, 0x3, 0x2, 0x2, 0x2, 0xb9f, 0xb85, 0x3, 0x2, 0x2, 
       0x2, 0xb9f, 0xb91, 0x3, 0x2, 0x2, 0x2, 0xba0, 0x199, 0x3, 0x2, 0x2, 
       0x2, 0xba1, 0xba3, 0x7, 0x4e, 0x2, 0x2, 0xba2, 0xba4, 0x5, 0x2a, 
       0x16, 0x2, 0xba3, 0xba2, 0x3, 0x2, 0x2, 0x2, 0xba3, 0xba4, 0x3, 0x2, 
       0x2, 0x2, 0xba4, 0xba5, 0x3, 0x2, 0x2, 0x2, 0xba5, 0xba6, 0x5, 0x3d2, 
       0x1ea, 0x2, 0xba6, 0xba8, 0x7, 0x46, 0x2, 0x2, 0xba7, 0xba9, 0x5, 
       0x19e, 0xd0, 0x2, 0xba8, 0xba7, 0x3, 0x2, 0x2, 0x2, 0xba8, 0xba9, 
       0x3, 0x2, 0x2, 0x2, 0xba9, 0xbaa, 0x3, 0x2, 0x2, 0x2, 0xbaa, 0xbab, 
       0x7, 0x47, 0x2, 0x2, 0xbab, 0x19b, 0x3, 0x2, 0x2, 0x2, 0xbac, 0xbad, 
       0x5, 0x3e, 0x20, 0x2, 0xbad, 0xbaf, 0x7, 0x46, 0x2, 0x2, 0xbae, 0xbb0, 
       0x5, 0x19e, 0xd0, 0x2, 0xbaf, 0xbae, 0x3, 0x2, 0x2, 0x2, 0xbaf, 0xbb0, 
       0x3, 0x2, 0x2, 0x2, 0xbb0, 0xbb1, 0x3, 0x2, 0x2, 0x2, 0xbb1, 0xbb2, 
       0x7, 0x47, 0x2, 0x2, 0xbb2, 0xbe6, 0x3, 0x2, 0x2, 0x2, 0xbb3, 0xbb4, 
       0x5, 0x38, 0x1d, 0x2, 0xbb4, 0xbb6, 0x7, 0x4e, 0x2, 0x2, 0xbb5, 0xbb7, 
       0x5, 0x2a, 0x16, 0x2, 0xbb6, 0xbb5, 0x3, 0x2, 0x2, 0x2, 0xbb6, 0xbb7, 
       0x3, 0x2, 0x2, 0x2, 0xbb7, 0xbb8, 0x3, 0x2, 0x2, 0x2, 0xbb8, 0xbb9, 
       0x5, 0x3d2, 0x1ea, 0x2, 0xbb9, 0xbbb, 0x7, 0x46, 0x2, 0x2, 0xbba, 
       0xbbc, 0x5, 0x19e, 0xd0, 0x2, 0xbbb, 0xbba, 0x3, 0x2, 0x2, 0x2, 0xbbb, 
       0xbbc, 0x3, 0x2, 0x2, 0x2, 0xbbc, 0xbbd, 0x3, 0x2, 0x2, 0x2, 0xbbd, 
       0xbbe, 0x7, 0x47, 0x2, 0x2, 0xbbe, 0xbe6, 0x3, 0x2, 0x2, 0x2, 0xbbf, 
       0xbc0, 0x5, 0x3c, 0x1f, 0x2, 0xbc0, 0xbc2, 0x7, 0x4e, 0x2, 0x2, 0xbc1, 
       0xbc3, 0x5, 0x2a, 0x16, 0x2, 0xbc2, 0xbc1, 0x3, 0x2, 0x2, 0x2, 0xbc2, 
       0xbc3, 0x3, 0x2, 0x2, 0x2, 0xbc3, 0xbc4, 0x3, 0x2, 0x2, 0x2, 0xbc4, 
       0xbc5, 0x5, 0x3d2, 0x1ea, 0x2, 0xbc5, 0xbc7, 0x7, 0x46, 0x2, 0x2, 
       0xbc6, 0xbc8, 0x5, 0x19e, 0xd0, 0x2, 0xbc7, 0xbc6, 0x3, 0x2, 0x2, 
       0x2, 0xbc7, 0xbc8, 0x3, 0x2, 0x2, 0x2, 0xbc8, 0xbc9, 0x3, 0x2, 0x2, 
       0x2, 0xbc9, 0xbca, 0x7, 0x47, 0x2, 0x2, 0xbca, 0xbe6, 0x3, 0x2, 0x2, 
       0x2, 0xbcb, 0xbcc, 0x7, 0x34, 0x2, 0x2, 0xbcc, 0xbce, 0x7, 0x4e, 
       0x2, 0x2, 0xbcd, 0xbcf, 0x5, 0x2a, 0x16, 0x2, 0xbce, 0xbcd, 0x3, 
       0x2, 0x2, 0x2, 0xbce, 0xbcf, 0x3, 0x2, 0x2, 0x2, 0xbcf, 0xbd0, 0x3, 
       0x2, 0x2, 0x2, 0xbd0, 0xbd1, 0x5, 0x3d2, 0x1ea, 0x2, 0xbd1, 0xbd3, 
       0x7, 0x46, 0x2, 0x2, 0xbd2, 0xbd4, 0x5, 0x19e, 0xd0, 0x2, 0xbd3, 
       0xbd2, 0x3, 0x2, 0x2, 0x2, 0xbd3, 0xbd4, 0x3, 0x2, 0x2, 0x2, 0xbd4, 
       0xbd5, 0x3, 0x2, 0x2, 0x2, 0xbd5, 0xbd6, 0x7, 0x47, 0x2, 0x2, 0xbd6, 
       0xbe6, 0x3, 0x2, 0x2, 0x2, 0xbd7, 0xbd8, 0x5, 0x38, 0x1d, 0x2, 0xbd8, 
       0xbd9, 0x7, 0x4e, 0x2, 0x2, 0xbd9, 0xbda, 0x7, 0x34, 0x2, 0x2, 0xbda, 
       0xbdc, 0x7, 0x4e, 0x2, 0x2, 0xbdb, 0xbdd, 0x5, 0x2a, 0x16, 0x2, 0xbdc, 
       0xbdb, 0x3, 0x2, 0x2, 0x2, 0xbdc, 0xbdd, 0x3, 0x2, 0x2, 0x2, 0xbdd, 
       0xbde, 0x3, 0x2, 0x2, 0x2, 0xbde, 0xbdf, 0x5, 0x3d2, 0x1ea, 0x2, 
       0xbdf, 0xbe1, 0x7, 0x46, 0x2, 0x2, 0xbe0, 0xbe2, 0x5, 0x19e, 0xd0, 
       0x2, 0xbe1, 0xbe0, 0x3, 0x2, 0x2, 0x2, 0xbe1, 0xbe2, 0x3, 0x2, 0x2, 
       0x2, 0xbe2, 0xbe3, 0x3, 0x2, 0x2, 0x2, 0xbe3, 0xbe4, 0x7, 0x47, 0x2, 
       0x2, 0xbe4, 0xbe6, 0x3, 0x2, 0x2, 0x2, 0xbe5, 0xbac, 0x3, 0x2, 0x2, 
       0x2, 0xbe5, 0xbb3, 0x3, 0x2, 0x2, 0x2, 0xbe5, 0xbbf, 0x3, 0x2, 0x2, 
       0x2, 0xbe5, 0xbcb, 0x3, 0x2, 0x2, 0x2, 0xbe5, 0xbd7, 0x3, 0x2, 0x2, 
       0x2, 0xbe6, 0x19d, 0x3, 0x2, 0x2, 0x2, 0xbe7, 0xbec, 0x5, 0x1ae, 
       0xd8, 0x2, 0xbe8, 0xbe9, 0x7, 0x4d, 0x2, 0x2, 0xbe9, 0xbeb, 0x5, 
       0x1ae, 0xd8, 0x2, 0xbea, 0xbe8, 0x3, 0x2, 0x2, 0x2, 0xbeb, 0xbee, 
       0x3, 0x2, 0x2, 0x2, 0xbec, 0xbea, 0x3, 0x2, 0x2, 0x2, 0xbec, 0xbed, 
       0x3, 0x2, 0x2, 0x2, 0xbed, 0x19f, 0x3, 0x2, 0x2, 0x2, 0xbee, 0xbec, 
       0x3, 0x2, 0x2, 0x2, 0xbef, 0xbf0, 0x5, 0x3c, 0x1f, 0x2, 0xbf0, 0xbf2, 
       0x7, 0x51, 0x2, 0x2, 0xbf1, 0xbf3, 0x5, 0x2a, 0x16, 0x2, 0xbf2, 0xbf1, 
       0x3, 0x2, 0x2, 0x2, 0xbf2, 0xbf3, 0x3, 0x2, 0x2, 0x2, 0xbf3, 0xbf4, 
       0x3, 0x2, 0x2, 0x2, 0xbf4, 0xbf5, 0x5, 0x3d2, 0x1ea, 0x2, 0xbf5, 
       0xc1f, 0x3, 0x2, 0x2, 0x2, 0xbf6, 0xbf7, 0x5, 0xc, 0x7, 0x2, 0xbf7, 
       0xbf9, 0x7, 0x51, 0x2, 0x2, 0xbf8, 0xbfa, 0x5, 0x2a, 0x16, 0x2, 0xbf9, 
       0xbf8, 0x3, 0x2, 0x2, 0x2, 0xbf9, 0xbfa, 0x3, 0x2, 0x2, 0x2, 0xbfa, 
       0xbfb, 0x3, 0x2, 0x2, 0x2, 0xbfb, 0xbfc, 0x5, 0x3d2, 0x1ea, 0x2, 
       0xbfc, 0xc1f, 0x3, 0x2, 0x2, 0x2, 0xbfd, 0xbfe, 0x5, 0x16e, 0xb8, 
       0x2, 0xbfe, 0xc00, 0x7, 0x51, 0x2, 0x2, 0xbff, 0xc01, 0x5, 0x2a, 
       0x16, 0x2, 0xc00, 0xbff, 0x3, 0x2, 0x2, 0x2, 0xc00, 0xc01, 0x3, 0x2, 
       0x2, 0x2, 0xc01, 0xc02, 0x3, 0x2, 0x2, 0x2, 0xc02, 0xc03, 0x5, 0x3d2, 
       0x1ea, 0x2, 0xc03, 0xc1f, 0x3, 0x2, 0x2, 0x2, 0xc04, 0xc05, 0x7, 
       0x34, 0x2, 0x2, 0xc05, 0xc07, 0x7, 0x51, 0x2, 0x2, 0xc06, 0xc08, 
       0x5, 0x2a, 0x16, 0x2, 0xc07, 0xc06, 0x3, 0x2, 0x2, 0x2, 0xc07, 0xc08, 
       0x3, 0x2, 0x2, 0x2, 0xc08, 0xc09, 0x3, 0x2, 0x2, 0x2, 0xc09, 0xc1f, 
       0x5, 0x3d2, 0x1ea, 0x2, 0xc0a, 0xc0b, 0x5, 0x38, 0x1d, 0x2, 0xc0b, 
       0xc0c, 0x7, 0x4e, 0x2, 0x2, 0xc0c, 0xc0d, 0x7, 0x34, 0x2, 0x2, 0xc0d, 
       0xc0f, 0x7, 0x51, 0x2, 0x2, 0xc0e, 0xc10, 0x5, 0x2a, 0x16, 0x2, 0xc0f, 
       0xc0e, 0x3, 0x2, 0x2, 0x2, 0xc0f, 0xc10, 0x3, 0x2, 0x2, 0x2, 0xc10, 
       0xc11, 0x3, 0x2, 0x2, 0x2, 0xc11, 0xc12, 0x5, 0x3d2, 0x1ea, 0x2, 
       0xc12, 0xc1f, 0x3, 0x2, 0x2, 0x2, 0xc13, 0xc14, 0x5, 0x10, 0x9, 0x2, 
       0xc14, 0xc16, 0x7, 0x51, 0x2, 0x2, 0xc15, 0xc17, 0x5, 0x2a, 0x16, 
       0x2, 0xc16, 0xc15, 0x3, 0x2, 0x2, 0x2, 0xc16, 0xc17, 0x3, 0x2, 0x2, 
       0x2, 0xc17, 0xc18, 0x3, 0x2, 0x2, 0x2, 0xc18, 0xc19, 0x7, 0x2b, 0x2, 
       0x2, 0xc19, 0xc1f, 0x3, 0x2, 0x2, 0x2, 0xc1a, 0xc1b, 0x5, 0x1e, 0x10, 
       0x2, 0xc1b, 0xc1c, 0x7, 0x51, 0x2, 0x2, 0xc1c, 0xc1d, 0x7, 0x2b, 
       0x2, 0x2, 0xc1d, 0xc1f, 0x3, 0x2, 0x2, 0x2, 0xc1e, 0xbef, 0x3, 0x2, 
       0x2, 0x2, 0xc1e, 0xbf6, 0x3, 0x2, 0x2, 0x2, 0xc1e, 0xbfd, 0x3, 0x2, 
       0x2, 0x2, 0xc1e, 0xc04, 0x3, 0x2, 0x2, 0x2, 0xc1e, 0xc0a, 0x3, 0x2, 
       0x2, 0x2, 0xc1e, 0xc13, 0x3, 0x2, 0x2, 0x2, 0xc1e, 0xc1a, 0x3, 0x2, 
       0x2, 0x2, 0xc1f, 0x1a1, 0x3, 0x2, 0x2, 0x2, 0xc20, 0xc22, 0x7, 0x51, 
       0x2, 0x2, 0xc21, 0xc23, 0x5, 0x2a, 0x16, 0x2, 0xc22, 0xc21, 0x3, 
       0x2, 0x2, 0x2, 0xc22, 0xc23, 0x3, 0x2, 0x2, 0x2, 0xc23, 0xc24, 0x3, 
       0x2, 0x2, 0x2, 0xc24, 0xc25, 0x5, 0x3d2, 0x1ea, 0x2, 0xc25, 0x1a3, 
       0x3, 0x2, 0x2, 0x2, 0xc26, 0xc27, 0x5, 0x3c, 0x1f, 0x2, 0xc27, 0xc29, 
       0x7, 0x51, 0x2, 0x2, 0xc28, 0xc2a, 0x5, 0x2a, 0x16, 0x2, 0xc29, 0xc28, 
       0x3, 0x2, 0x2, 0x2, 0xc29, 0xc2a, 0x3, 0x2, 0x2, 0x2, 0xc2a, 0xc2b, 
       0x3, 0x2, 0x2, 0x2, 0xc2b, 0xc2c, 0x5, 0x3d2, 0x1ea, 0x2, 0xc2c, 
       0xc4f, 0x3, 0x2, 0x2, 0x2, 0xc2d, 0xc2e, 0x5, 0xc, 0x7, 0x2, 0xc2e, 
       0xc30, 0x7, 0x51, 0x2, 0x2, 0xc2f, 0xc31, 0x5, 0x2a, 0x16, 0x2, 0xc30, 
       0xc2f, 0x3, 0x2, 0x2, 0x2, 0xc30, 0xc31, 0x3, 0x2, 0x2, 0x2, 0xc31, 
       0xc32, 0x3, 0x2, 0x2, 0x2, 0xc32, 0xc33, 0x5, 0x3d2, 0x1ea, 0x2, 
       0xc33, 0xc4f, 0x3, 0x2, 0x2, 0x2, 0xc34, 0xc35, 0x7, 0x34, 0x2, 0x2, 
       0xc35, 0xc37, 0x7, 0x51, 0x2, 0x2, 0xc36, 0xc38, 0x5, 0x2a, 0x16, 
       0x2, 0xc37, 0xc36, 0x3, 0x2, 0x2, 0x2, 0xc37, 0xc38, 0x3, 0x2, 0x2, 
       0x2, 0xc38, 0xc39, 0x3, 0x2, 0x2, 0x2, 0xc39, 0xc4f, 0x5, 0x3d2, 
       0x1ea, 0x2, 0xc3a, 0xc3b, 0x5, 0x38, 0x1d, 0x2, 0xc3b, 0xc3c, 0x7, 
       0x4e, 0x2, 0x2, 0xc3c, 0xc3d, 0x7, 0x34, 0x2, 0x2, 0xc3d, 0xc3f, 
       0x7, 0x51, 0x2, 0x2, 0xc3e, 0xc40, 0x5, 0x2a, 0x16, 0x2, 0xc3f, 0xc3e, 
       0x3, 0x2, 0x2, 0x2, 0xc3f, 0xc40, 0x3, 0x2, 0x2, 0x2, 0xc40, 0xc41, 
       0x3, 0x2, 0x2, 0x2, 0xc41, 0xc42, 0x5, 0x3d2, 0x1ea, 0x2, 0xc42, 
       0xc4f, 0x3, 0x2, 0x2, 0x2, 0xc43, 0xc44, 0x5, 0x10, 0x9, 0x2, 0xc44, 
       0xc46, 0x7, 0x51, 0x2, 0x2, 0xc45, 0xc47, 0x5, 0x2a, 0x16, 0x2, 0xc46, 
       0xc45, 0x3, 0x2, 0x2, 0x2, 0xc46, 0xc47, 0x3, 0x2, 0x2, 0x2, 0xc47, 
       0xc48, 0x3, 0x2, 0x2, 0x2, 0xc48, 0xc49, 0x7, 0x2b, 0x2, 0x2, 0xc49, 
       0xc4f, 0x3, 0x2, 0x2, 0x2, 0xc4a, 0xc4b, 0x5, 0x1e, 0x10, 0x2, 0xc4b, 
       0xc4c, 0x7, 0x51, 0x2, 0x2, 0xc4c, 0xc4d, 0x7, 0x2b, 0x2, 0x2, 0xc4d, 
       0xc4f, 0x3, 0x2, 0x2, 0x2, 0xc4e, 0xc26, 0x3, 0x2, 0x2, 0x2, 0xc4e, 
       0xc2d, 0x3, 0x2, 0x2, 0x2, 0xc4e, 0xc34, 0x3, 0x2, 0x2, 0x2, 0xc4e, 
       0xc3a, 0x3, 0x2, 0x2, 0x2, 0xc4e, 0xc43, 0x3, 0x2, 0x2, 0x2, 0xc4e, 
       0xc4a, 0x3, 0x2, 0x2, 0x2, 0xc4f, 0x1a5, 0x3, 0x2, 0x2, 0x2, 0xc50, 
       0xc51, 0x7, 0x2b, 0x2, 0x2, 0xc51, 0xc52, 0x5, 0x4, 0x3, 0x2, 0xc52, 
       0xc54, 0x5, 0x1a8, 0xd5, 0x2, 0xc53, 0xc55, 0x5, 0x20, 0x11, 0x2, 
       0xc54, 0xc53, 0x3, 0x2, 0x2, 0x2, 0xc54, 0xc55, 0x3, 0x2, 0x2, 0x2, 
       0xc55, 0xc67, 0x3, 0x2, 0x2, 0x2, 0xc56, 0xc57, 0x7, 0x2b, 0x2, 0x2, 
       0xc57, 0xc58, 0x5, 0xe, 0x8, 0x2, 0xc58, 0xc5a, 0x5, 0x1a8, 0xd5, 
       0x2, 0xc59, 0xc5b, 0x5, 0x20, 0x11, 0x2, 0xc5a, 0xc59, 0x3, 0x2, 
       0x2, 0x2, 0xc5a, 0xc5b, 0x3, 0x2, 0x2, 0x2, 0xc5b, 0xc67, 0x3, 0x2, 
       0x2, 0x2, 0xc5c, 0xc5d, 0x7, 0x2b, 0x2, 0x2, 0xc5d, 0xc5e, 0x5, 0x4, 
       0x3, 0x2, 0xc5e, 0xc5f, 0x5, 0x20, 0x11, 0x2, 0xc5f, 0xc60, 0x5, 
       0x104, 0x83, 0x2, 0xc60, 0xc67, 0x3, 0x2, 0x2, 0x2, 0xc61, 0xc62, 
       0x7, 0x2b, 0x2, 0x2, 0xc62, 0xc63, 0x5, 0xe, 0x8, 0x2, 0xc63, 0xc64, 
       0x5, 0x20, 0x11, 0x2, 0xc64, 0xc65, 0x5, 0x104, 0x83, 0x2, 0xc65, 
       0xc67, 0x3, 0x2, 0x2, 0x2, 0xc66, 0xc50, 0x3, 0x2, 0x2, 0x2, 0xc66, 
       0xc56, 0x3, 0x2, 0x2, 0x2, 0xc66, 0xc5c, 0x3, 0x2, 0x2, 0x2, 0xc66, 
       0xc61, 0x3, 0x2, 0x2, 0x2, 0xc67, 0x1a7, 0x3, 0x2, 0x2, 0x2, 0xc68, 
       0xc6a, 0x5, 0x1aa, 0xd6, 0x2, 0xc69, 0xc68, 0x3, 0x2, 0x2, 0x2, 0xc6a, 
       0xc6b, 0x3, 0x2, 0x2, 0x2, 0xc6b, 0xc69, 0x3, 0x2, 0x2, 0x2, 0xc6b, 
       0xc6c, 0x3, 0x2, 0x2, 0x2, 0xc6c, 0x1a9, 0x3, 0x2, 0x2, 0x2, 0xc6d, 
       0xc6f, 0x5, 0xf2, 0x7a, 0x2, 0xc6e, 0xc6d, 0x3, 0x2, 0x2, 0x2, 0xc6f, 
       0xc72, 0x3, 0x2, 0x2, 0x2, 0xc70, 0xc6e, 0x3, 0x2, 0x2, 0x2, 0xc70, 
       0xc71, 0x3, 0x2, 0x2, 0x2, 0xc71, 0xc73, 0x3, 0x2, 0x2, 0x2, 0xc72, 
       0xc70, 0x3, 0x2, 0x2, 0x2, 0xc73, 0xc74, 0x7, 0x4a, 0x2, 0x2, 0xc74, 
       0xc75, 0x5, 0x1ae, 0xd8, 0x2, 0xc75, 0xc76, 0x7, 0x4b, 0x2, 0x2, 
       0xc76, 0x1ab, 0x3, 0x2, 0x2, 0x2, 0xc77, 0xc78, 0x5, 0x1ae, 0xd8, 
       0x2, 0xc78, 0x1ad, 0x3, 0x2, 0x2, 0x2, 0xc79, 0xc7c, 0x5, 0x1b0, 
       0xd9, 0x2, 0xc7a, 0xc7c, 0x5, 0x1b8, 0xdd, 0x2, 0xc7b, 0xc79, 0x3, 
       0x2, 0x2, 0x2, 0xc7b, 0xc7a, 0x3, 0x2, 0x2, 0x2, 0xc7c, 0x1af, 0x3, 
       0x2, 0x2, 0x2, 0xc7d, 0xc7e, 0x5, 0x1b2, 0xda, 0x2, 0xc7e, 0xc7f, 
       0x7, 0x59, 0x2, 0x2, 0xc7f, 0xc80, 0x5, 0x1b6, 0xdc, 0x2, 0xc80, 
       0x1b1, 0x3, 0x2, 0x2, 0x2, 0xc81, 0xc8c, 0x5, 0x3d2, 0x1ea, 0x2, 
       0xc82, 0xc84, 0x7, 0x46, 0x2, 0x2, 0xc83, 0xc85, 0x5, 0xa2, 0x52, 
       0x2, 0xc84, 0xc83, 0x3, 0x2, 0x2, 0x2, 0xc84, 0xc85, 0x3, 0x2, 0x2, 
       0x2, 0xc85, 0xc86, 0x3, 0x2, 0x2, 0x2, 0xc86, 0xc8c, 0x7, 0x47, 0x2, 
       0x2, 0xc87, 0xc88, 0x7, 0x46, 0x2, 0x2, 0xc88, 0xc89, 0x5, 0x1b4, 
       0xdb, 0x2, 0xc89, 0xc8a, 0x7, 0x47, 0x2, 0x2, 0xc8a, 0xc8c, 0x3, 
       0x2, 0x2, 0x2, 0xc8b, 0xc81, 0x3, 0x2, 0x2, 0x2, 0xc8b, 0xc82, 0x3, 
       0x2, 0x2, 0x2, 0xc8b, 0xc87, 0x3, 0x2, 0x2, 0x2, 0xc8c, 0x1b3, 0x3, 
       0x2, 0x2, 0x2, 0xc8d, 0xc92, 0x5, 0x3d2, 0x1ea, 0x2, 0xc8e, 0xc8f, 
       0x7, 0x4d, 0x2, 0x2, 0xc8f, 0xc91, 0x5, 0x3d2, 0x1ea, 0x2, 0xc90, 
       0xc8e, 0x3, 0x2, 0x2, 0x2, 0xc91, 0xc94, 0x3, 0x2, 0x2, 0x2, 0xc92, 
       0xc90, 0x3, 0x2, 0x2, 0x2, 0xc92, 0xc93, 0x3, 0x2, 0x2, 0x2, 0xc93, 
       0x1b5, 0x3, 0x2, 0x2, 0x2, 0xc94, 0xc92, 0x3, 0x2, 0x2, 0x2, 0xc95, 
       0xc98, 0x5, 0x1ae, 0xd8, 0x2, 0xc96, 0xc98, 0x5, 0x108, 0x85, 0x2, 
       0xc97, 0xc95, 0x3, 0x2, 0x2, 0x2, 0xc97, 0xc96, 0x3, 0x2, 0x2, 0x2, 
       0xc98, 0x1b7, 0x3, 0x2, 0x2, 0x2, 0xc99, 0xc9c, 0x5, 0x1c0, 0xe1, 
       0x2, 0xc9a, 0xc9c, 0x5, 0x1ba, 0xde, 0x2, 0xc9b, 0xc99, 0x3, 0x2, 
       0x2, 0x2, 0xc9b, 0xc9a, 0x3, 0x2, 0x2, 0x2, 0xc9c, 0x1b9, 0x3, 0x2, 
       0x2, 0x2, 0xc9d, 0xc9e, 0x5, 0x1bc, 0xdf, 0x2, 0xc9e, 0xc9f, 0x5, 
       0x1be, 0xe0, 0x2, 0xc9f, 0xca0, 0x5, 0x1ae, 0xd8, 0x2, 0xca0, 0x1bb, 
       0x3, 0x2, 0x2, 0x2, 0xca1, 0xca5, 0x5, 0x3c, 0x1f, 0x2, 0xca2, 0xca5, 
       0x5, 0x18c, 0xc7, 0x2, 0xca3, 0xca5, 0x5, 0x192, 0xca, 0x2, 0xca4, 
       0xca1, 0x3, 0x2, 0x2, 0x2, 0xca4, 0xca2, 0x3, 0x2, 0x2, 0x2, 0xca4, 
       0xca3, 0x3, 0x2, 0x2, 0x2, 0xca5, 0x1bd, 0x3, 0x2, 0x2, 0x2, 0xca6, 
       0xca7, 0x9, 0x6, 0x2, 0x2, 0xca7, 0x1bf, 0x3, 0x2, 0x2, 0x2, 0xca8, 
       0xcb2, 0x5, 0x1c2, 0xe2, 0x2, 0xca9, 0xcaa, 0x5, 0x1c2, 0xe2, 0x2, 
       0xcaa, 0xcab, 0x7, 0x57, 0x2, 0x2, 0xcab, 0xcac, 0x5, 0x1ae, 0xd8, 
       0x2, 0xcac, 0xcaf, 0x7, 0x58, 0x2, 0x2, 0xcad, 0xcb0, 0x5, 0x1c0, 
       0xe1, 0x2, 0xcae, 0xcb0, 0x5, 0x1b0, 0xd9, 0x2, 0xcaf, 0xcad, 0x3, 
       0x2, 0x2, 0x2, 0xcaf, 0xcae, 0x3, 0x2, 0x2, 0x2, 0xcb0, 0xcb2, 0x3, 
       0x2, 0x2, 0x2, 0xcb1, 0xca8, 0x3, 0x2, 0x2, 0x2, 0xcb1, 0xca9, 0x3, 
       0x2, 0x2, 0x2, 0xcb2, 0x1c1, 0x3, 0x2, 0x2, 0x2, 0xcb3, 0xcb4, 0x8, 
       0xe2, 0x1, 0x2, 0xcb4, 0xcb5, 0x5, 0x1c4, 0xe3, 0x2, 0xcb5, 0xcbb, 
       0x3, 0x2, 0x2, 0x2, 0xcb6, 0xcb7, 0xc, 0x3, 0x2, 0x2, 0xcb7, 0xcb8, 
       0x7, 0x5f, 0x2, 0x2, 0xcb8, 0xcba, 0x5, 0x1c4, 0xe3, 0x2, 0xcb9, 
       0xcb6, 0x3, 0x2, 0x2, 0x2, 0xcba, 0xcbd, 0x3, 0x2, 0x2, 0x2, 0xcbb, 
       0xcb9, 0x3, 0x2, 0x2, 0x2, 0xcbb, 0xcbc, 0x3, 0x2, 0x2, 0x2, 0xcbc, 
       0x1c3, 0x3, 0x2, 0x2, 0x2, 0xcbd, 0xcbb, 0x3, 0x2, 0x2, 0x2, 0xcbe, 
       0xcbf, 0x8, 0xe3, 0x1, 0x2, 0xcbf, 0xcc0, 0x5, 0x1c6, 0xe4, 0x2, 
       0xcc0, 0xcc6, 0x3, 0x2, 0x2, 0x2, 0xcc1, 0xcc2, 0xc, 0x3, 0x2, 0x2, 
       0xcc2, 0xcc3, 0x7, 0x5e, 0x2, 0x2, 0xcc3, 0xcc5, 0x5, 0x1c6, 0xe4, 
       0x2, 0xcc4, 0xcc1, 0x3, 0x2, 0x2, 0x2, 0xcc5, 0xcc8, 0x3, 0x2, 0x2, 
       0x2, 0xcc6, 0xcc4, 0x3, 0x2, 0x2, 0x2, 0xcc6, 0xcc7, 0x3, 0x2, 0x2, 
       0x2, 0xcc7, 0x1c5, 0x3, 0x2, 0x2, 0x2, 0xcc8, 0xcc6, 0x3, 0x2, 0x2, 
       0x2, 0xcc9, 0xcca, 0x8, 0xe4, 0x1, 0x2, 0xcca, 0xccb, 0x5, 0x1c8, 
       0xe5, 0x2, 0xccb, 0xcd1, 0x3, 0x2, 0x2, 0x2, 0xccc, 0xccd, 0xc, 0x3, 
       0x2, 0x2, 0xccd, 0xcce, 0x7, 0x67, 0x2, 0x2, 0xcce, 0xcd0, 0x5, 0x1c8, 
       0xe5, 0x2, 0xccf, 0xccc, 0x3, 0x2, 0x2, 0x2, 0xcd0, 0xcd3, 0x3, 0x2, 
       0x2, 0x2, 0xcd1, 0xccf, 0x3, 0x2, 0x2, 0x2, 0xcd1, 0xcd2, 0x3, 0x2, 
       0x2, 0x2, 0xcd2, 0x1c7, 0x3, 0x2, 0x2, 0x2, 0xcd3, 0xcd1, 0x3, 0x2, 
       0x2, 0x2, 0xcd4, 0xcd5, 0x8, 0xe5, 0x1, 0x2, 0xcd5, 0xcd6, 0x5, 0x1ca, 
       0xe6, 0x2, 0xcd6, 0xcdc, 0x3, 0x2, 0x2, 0x2, 0xcd7, 0xcd8, 0xc, 0x3, 
       0x2, 0x2, 0xcd8, 0xcd9, 0x7, 0x68, 0x2, 0x2, 0xcd9, 0xcdb, 0x5, 0x1ca, 
       0xe6, 0x2, 0xcda, 0xcd7, 0x3, 0x2, 0x2, 0x2, 0xcdb, 0xcde, 0x3, 0x2, 
       0x2, 0x2, 0xcdc, 0xcda, 0x3, 0x2, 0x2, 0x2, 0xcdc, 0xcdd, 0x3, 0x2, 
       0x2, 0x2, 0xcdd, 0x1c9, 0x3, 0x2, 0x2, 0x2, 0xcde, 0xcdc, 0x3, 0x2, 
       0x2, 0x2, 0xcdf, 0xce0, 0x8, 0xe6, 0x1, 0x2, 0xce0, 0xce1, 0x5, 0x1cc, 
       0xe7, 0x2, 0xce1, 0xce7, 0x3, 0x2, 0x2, 0x2, 0xce2, 0xce3, 0xc, 0x3, 
       0x2, 0x2, 0xce3, 0xce4, 0x7, 0x66, 0x2, 0x2, 0xce4, 0xce6, 0x5, 0x1cc, 
       0xe7, 0x2, 0xce5, 0xce2, 0x3, 0x2, 0x2, 0x2, 0xce6, 0xce9, 0x3, 0x2, 
       0x2, 0x2, 0xce7, 0xce5, 0x3, 0x2, 0x2, 0x2, 0xce7, 0xce8, 0x3, 0x2, 
       0x2, 0x2, 0xce8, 0x1cb, 0x3, 0x2, 0x2, 0x2, 0xce9, 0xce7, 0x3, 0x2, 
       0x2, 0x2, 0xcea, 0xceb, 0x8, 0xe7, 0x1, 0x2, 0xceb, 0xcec, 0x5, 0x1ce, 
       0xe8, 0x2, 0xcec, 0xcf5, 0x3, 0x2, 0x2, 0x2, 0xced, 0xcee, 0xc, 0x4, 
       0x2, 0x2, 0xcee, 0xcef, 0x7, 0x5a, 0x2, 0x2, 0xcef, 0xcf4, 0x5, 0x1ce, 
       0xe8, 0x2, 0xcf0, 0xcf1, 0xc, 0x3, 0x2, 0x2, 0xcf1, 0xcf2, 0x7, 0x5d, 
       0x2, 0x2, 0xcf2, 0xcf4, 0x5, 0x1ce, 0xe8, 0x2, 0xcf3, 0xced, 0x3, 
       0x2, 0x2, 0x2, 0xcf3, 0xcf0, 0x3, 0x2, 0x2, 0x2, 0xcf4, 0xcf7, 0x3, 
       0x2, 0x2, 0x2, 0xcf5, 0xcf3, 0x3, 0x2, 0x2, 0x2, 0xcf5, 0xcf6, 0x3, 
       0x2, 0x2, 0x2, 0xcf6, 0x1cd, 0x3, 0x2, 0x2, 0x2, 0xcf7, 0xcf5, 0x3, 
       0x2, 0x2, 0x2, 0xcf8, 0xcf9, 0x8, 0xe8, 0x1, 0x2, 0xcf9, 0xcfa, 0x5, 
       0x1d0, 0xe9, 0x2, 0xcfa, 0xd0c, 0x3, 0x2, 0x2, 0x2, 0xcfb, 0xcfc, 
       0xc, 0x7, 0x2, 0x2, 0xcfc, 0xcfd, 0x7, 0x54, 0x2, 0x2, 0xcfd, 0xd0b, 
       0x5, 0x1d0, 0xe9, 0x2, 0xcfe, 0xcff, 0xc, 0x6, 0x2, 0x2, 0xcff, 0xd00, 
       0x7, 0x53, 0x2, 0x2, 0xd00, 0xd0b, 0x5, 0x1d0, 0xe9, 0x2, 0xd01, 
       0xd02, 0xc, 0x5, 0x2, 0x2, 0xd02, 0xd03, 0x7, 0x5b, 0x2, 0x2, 0xd03, 
       0xd0b, 0x5, 0x1d0, 0xe9, 0x2, 0xd04, 0xd05, 0xc, 0x4, 0x2, 0x2, 0xd05, 
       0xd06, 0x7, 0x5c, 0x2, 0x2, 0xd06, 0xd0b, 0x5, 0x1d0, 0xe9, 0x2, 
       0xd07, 0xd08, 0xc, 0x3, 0x2, 0x2, 0xd08, 0xd09, 0x7, 0x26, 0x2, 0x2, 
       0xd09, 0xd0b, 0x5, 0xc, 0x7, 0x2, 0xd0a, 0xcfb, 0x3, 0x2, 0x2, 0x2, 
       0xd0a, 0xcfe, 0x3, 0x2, 0x2, 0x2, 0xd0a, 0xd01, 0x3, 0x2, 0x2, 0x2, 
       0xd0a, 0xd04, 0x3, 0x2, 0x2, 0x2, 0xd0a, 0xd07, 0x3, 0x2, 0x2, 0x2, 
       0xd0b, 0xd0e, 0x3, 0x2, 0x2, 0x2, 0xd0c, 0xd0a, 0x3, 0x2, 0x2, 0x2, 
       0xd0c, 0xd0d, 0x3, 0x2, 0x2, 0x2, 0xd0d, 0x1cf, 0x3, 0x2, 0x2, 0x2, 
       0xd0e, 0xd0c, 0x3, 0x2, 0x2, 0x2, 0xd0f, 0xd10, 0x8, 0xe9, 0x1, 0x2, 
       0xd10, 0xd11, 0x5, 0x1d2, 0xea, 0x2, 0xd11, 0xd21, 0x3, 0x2, 0x2, 
       0x2, 0xd12, 0xd13, 0xc, 0x5, 0x2, 0x2, 0xd13, 0xd14, 0x7, 0x54, 0x2, 
       0x2, 0xd14, 0xd15, 0x7, 0x54, 0x2, 0x2, 0xd15, 0xd20, 0x5, 0x1d2, 
       0xea, 0x2, 0xd16, 0xd17, 0xc, 0x4, 0x2, 0x2, 0xd17, 0xd18, 0x7, 0x53, 
       0x2, 0x2, 0xd18, 0xd19, 0x7, 0x53, 0x2, 0x2, 0xd19, 0xd20, 0x5, 0x1d2, 
       0xea, 0x2, 0xd1a, 0xd1b, 0xc, 0x3, 0x2, 0x2, 0xd1b, 0xd1c, 0x7, 0x53, 
       0x2, 0x2, 0xd1c, 0xd1d, 0x7, 0x53, 0x2, 0x2, 0xd1d, 0xd1e, 0x7, 0x53, 
       0x2, 0x2, 0xd1e, 0xd20, 0x5, 0x1d2, 0xea, 0x2, 0xd1f, 0xd12, 0x3, 
       0x2, 0x2, 0x2, 0xd1f, 0xd16, 0x3, 0x2, 0x2, 0x2, 0xd1f, 0xd1a, 0x3, 
       0x2, 0x2, 0x2, 0xd20, 0xd23, 0x3, 0x2, 0x2, 0x2, 0xd21, 0xd1f, 0x3, 
       0x2, 0x2, 0x2, 0xd21, 0xd22, 0x3, 0x2, 0x2, 0x2, 0xd22, 0x1d1, 0x3, 
       0x2, 0x2, 0x2, 0xd23, 0xd21, 0x3, 0x2, 0x2, 0x2, 0xd24, 0xd25, 0x8, 
       0xea, 0x1, 0x2, 0xd25, 0xd26, 0x5, 0x1d4, 0xeb, 0x2, 0xd26, 0xd2f, 
       0x3, 0x2, 0x2, 0x2, 0xd27, 0xd28, 0xc, 0x4, 0x2, 0x2, 0xd28, 0xd29, 
       0x7, 0x62, 0x2, 0x2, 0xd29, 0xd2e, 0x5, 0x1d4, 0xeb, 0x2, 0xd2a, 
       0xd2b, 0xc, 0x3, 0x2, 0x2, 0xd2b, 0xd2c, 0x7, 0x63, 0x2, 0x2, 0xd2c, 
       0xd2e, 0x5, 0x1d4, 0xeb, 0x2, 0xd2d, 0xd27, 0x3, 0x2, 0x2, 0x2, 0xd2d, 
       0xd2a, 0x3, 0x2, 0x2, 0x2, 0xd2e, 0xd31, 0x3, 0x2, 0x2, 0x2, 0xd2f, 
       0xd2d, 0x3, 0x2, 0x2, 0x2, 0xd2f, 0xd30, 0x3, 0x2, 0x2, 0x2, 0xd30, 
       0x1d3, 0x3, 0x2, 0x2, 0x2, 0xd31, 0xd2f, 0x3, 0x2, 0x2, 0x2, 0xd32, 
       0xd33, 0x8, 0xeb, 0x1, 0x2, 0xd33, 0xd34, 0x5, 0x1d6, 0xec, 0x2, 
       0xd34, 0xd40, 0x3, 0x2, 0x2, 0x2, 0xd35, 0xd36, 0xc, 0x5, 0x2, 0x2, 
       0xd36, 0xd37, 0x7, 0x64, 0x2, 0x2, 0xd37, 0xd3f, 0x5, 0x1d6, 0xec, 
       0x2, 0xd38, 0xd39, 0xc, 0x4, 0x2, 0x2, 0xd39, 0xd3a, 0x7, 0x65, 0x2, 
       0x2, 0xd3a, 0xd3f, 0x5, 0x1d6, 0xec, 0x2, 0xd3b, 0xd3c, 0xc, 0x3, 
       0x2, 0x2, 0xd3c, 0xd3d, 0x7, 0x69, 0x2, 0x2, 0xd3d, 0xd3f, 0x5, 0x1d6, 
       0xec, 0x2, 0xd3e, 0xd35, 0x3, 0x2, 0x2, 0x2, 0xd3e, 0xd38, 0x3, 0x2, 
       0x2, 0x2, 0xd3e, 0xd3b, 0x3, 0x2, 0x2, 0x2, 0xd3f, 0xd42, 0x3, 0x2, 
       0x2, 0x2, 0xd40, 0xd3e, 0x3, 0x2, 0x2, 0x2, 0xd40, 0xd41, 0x3, 0x2, 
       0x2, 0x2, 0xd41, 0x1d5, 0x3, 0x2, 0x2, 0x2, 0xd42, 0xd40, 0x3, 0x2, 
       0x2, 0x2, 0xd43, 0xd4b, 0x5, 0x1d8, 0xed, 0x2, 0xd44, 0xd4b, 0x5, 
       0x1da, 0xee, 0x2, 0xd45, 0xd46, 0x7, 0x62, 0x2, 0x2, 0xd46, 0xd4b, 
       0x5, 0x1d6, 0xec, 0x2, 0xd47, 0xd48, 0x7, 0x63, 0x2, 0x2, 0xd48, 
       0xd4b, 0x5, 0x1d6, 0xec, 0x2, 0xd49, 0xd4b, 0x5, 0x1dc, 0xef, 0x2, 
       0xd4a, 0xd43, 0x3, 0x2, 0x2, 0x2, 0xd4a, 0xd44, 0x3, 0x2, 0x2, 0x2, 
       0xd4a, 0xd45, 0x3, 0x2, 0x2, 0x2, 0xd4a, 0xd47, 0x3, 0x2, 0x2, 0x2, 
       0xd4a, 0xd49, 0x3, 0x2, 0x2, 0x2, 0xd4b, 0x1d7, 0x3, 0x2, 0x2, 0x2, 
       0xd4c, 0xd4d, 0x7, 0x60, 0x2, 0x2, 0xd4d, 0xd4e, 0x5, 0x1d6, 0xec, 
       0x2, 0xd4e, 0x1d9, 0x3, 0x2, 0x2, 0x2, 0xd4f, 0xd50, 0x7, 0x61, 0x2, 
       0x2, 0xd50, 0xd51, 0x5, 0x1d6, 0xec, 0x2, 0xd51, 0x1db, 0x3, 0x2, 
       0x2, 0x2, 0xd52, 0xd59, 0x5, 0x1de, 0xf0, 0x2, 0xd53, 0xd54, 0x7, 
       0x56, 0x2, 0x2, 0xd54, 0xd59, 0x5, 0x1d6, 0xec, 0x2, 0xd55, 0xd56, 
       0x7, 0x55, 0x2, 0x2, 0xd56, 0xd59, 0x5, 0x1d6, 0xec, 0x2, 0xd57, 
       0xd59, 0x5, 0x1e8, 0xf5, 0x2, 0xd58, 0xd52, 0x3, 0x2, 0x2, 0x2, 0xd58, 
       0xd53, 0x3, 0x2, 0x2, 0x2, 0xd58, 0xd55, 0x3, 0x2, 0x2, 0x2, 0xd58, 
       0xd57, 0x3, 0x2, 0x2, 0x2, 0xd59, 0x1dd, 0x3, 0x2, 0x2, 0x2, 0xd5a, 
       0xd5d, 0x5, 0x16e, 0xb8, 0x2, 0xd5b, 0xd5d, 0x5, 0x3c, 0x1f, 0x2, 
       0xd5c, 0xd5a, 0x3, 0x2, 0x2, 0x2, 0xd5c, 0xd5b, 0x3, 0x2, 0x2, 0x2, 
       0xd5d, 0xd62, 0x3, 0x2, 0x2, 0x2, 0xd5e, 0xd61, 0x5, 0x1e2, 0xf2, 
       0x2, 0xd5f, 0xd61, 0x5, 0x1e6, 0xf4, 0x2, 0xd60, 0xd5e, 0x3, 0x2, 
       0x2, 0x2, 0xd60, 0xd5f, 0x3, 0x2, 0x2, 0x2, 0xd61, 0xd64, 0x3, 0x2, 
       0x2, 0x2, 0xd62, 0xd60, 0x3, 0x2, 0x2, 0x2, 0xd62, 0xd63, 0x3, 0x2, 
       0x2, 0x2, 0xd63, 0x1df, 0x3, 0x2, 0x2, 0x2, 0xd64, 0xd62, 0x3, 0x2, 
       0x2, 0x2, 0xd65, 0xd66, 0x5, 0x1de, 0xf0, 0x2, 0xd66, 0xd67, 0x7, 
       0x60, 0x2, 0x2, 0xd67, 0x1e1, 0x3, 0x2, 0x2, 0x2, 0xd68, 0xd69, 0x7, 
       0x60, 0x2, 0x2, 0xd69, 0x1e3, 0x3, 0x2, 0x2, 0x2, 0xd6a, 0xd6b, 0x5, 
       0x1de, 0xf0, 0x2, 0xd6b, 0xd6c, 0x7, 0x61, 0x2, 0x2, 0xd6c, 0x1e5, 
       0x3, 0x2, 0x2, 0x2, 0xd6d, 0xd6e, 0x7, 0x61, 0x2, 0x2, 0xd6e, 0x1e7, 
       0x3, 0x2, 0x2, 0x2, 0xd6f, 0xd70, 0x7, 0x46, 0x2, 0x2, 0xd70, 0xd71, 
       0x5, 0x4, 0x3, 0x2, 0xd71, 0xd72, 0x7, 0x47, 0x2, 0x2, 0xd72, 0xd73, 
       0x5, 0x1d6, 0xec, 0x2, 0xd73, 0xd8b, 0x3, 0x2, 0x2, 0x2, 0xd74, 0xd75, 
       0x7, 0x46, 0x2, 0x2, 0xd75, 0xd79, 0x5, 0xc, 0x7, 0x2, 0xd76, 0xd78, 
       0x5, 0x28, 0x15, 0x2, 0xd77, 0xd76, 0x3, 0x2, 0x2, 0x2, 0xd78, 0xd7b, 
       0x3, 0x2, 0x2, 0x2, 0xd79, 0xd77, 0x3, 0x2, 0x2, 0x2, 0xd79, 0xd7a, 
       0x3, 0x2, 0x2, 0x2, 0xd7a, 0xd7c, 0x3, 0x2, 0x2, 0x2, 0xd7b, 0xd79, 
       0x3, 0x2, 0x2, 0x2, 0xd7c, 0xd7d, 0x7, 0x47, 0x2, 0x2, 0xd7d, 0xd7e, 
       0x5, 0x1dc, 0xef, 0x2, 0xd7e, 0xd8b, 0x3, 0x2, 0x2, 0x2, 0xd7f, 0xd80, 
       0x7, 0x46, 0x2, 0x2, 0xd80, 0xd84, 0x5, 0xc, 0x7, 0x2, 0xd81, 0xd83, 
       0x5, 0x28, 0x15, 0x2, 0xd82, 0xd81, 0x3, 0x2, 0x2, 0x2, 0xd83, 0xd86, 
       0x3, 0x2, 0x2, 0x2, 0xd84, 0xd82, 0x3, 0x2, 0x2, 0x2, 0xd84, 0xd85, 
       0x3, 0x2, 0x2, 0x2, 0xd85, 0xd87, 0x3, 0x2, 0x2, 0x2, 0xd86, 0xd84, 
       0x3, 0x2, 0x2, 0x2, 0xd87, 0xd88, 0x7, 0x47, 0x2, 0x2, 0xd88, 0xd89, 
       0x5, 0x1b0, 0xd9, 0x2, 0xd89, 0xd8b, 0x3, 0x2, 0x2, 0x2, 0xd8a, 0xd6f, 
       0x3, 0x2, 0x2, 0x2, 0xd8a, 0xd74, 0x3, 0x2, 0x2, 0x2, 0xd8a, 0xd7f, 
       0x3, 0x2, 0x2, 0x2, 0xd8b, 0x1e9, 0x3, 0x2, 0x2, 0x2, 0xd8c, 0xd8d, 
       0x7, 0x40, 0x2, 0x2, 0xd8d, 0xd99, 0x7, 0x2, 0x2, 0x3, 0xd8e, 0xd8f, 
       0x7, 0x41, 0x2, 0x2, 0xd8f, 0xd99, 0x7, 0x2, 0x2, 0x3, 0xd90, 0xd91, 
       0x7, 0x42, 0x2, 0x2, 0xd91, 0xd99, 0x7, 0x2, 0x2, 0x3, 0xd92, 0xd93, 
       0x7, 0x43, 0x2, 0x2, 0xd93, 0xd99, 0x7, 0x2, 0x2, 0x3, 0xd94, 0xd95, 
       0x7, 0x44, 0x2, 0x2, 0xd95, 0xd99, 0x7, 0x2, 0x2, 0x3, 0xd96, 0xd97, 
       0x7, 0x45, 0x2, 0x2, 0xd97, 0xd99, 0x7, 0x2, 0x2, 0x3, 0xd98, 0xd8c, 
       0x3, 0x2, 0x2, 0x2, 0xd98, 0xd8e, 0x3, 0x2, 0x2, 0x2, 0xd98, 0xd90, 
       0x3, 0x2, 0x2, 0x2, 0xd98, 0xd92, 0x3, 0x2, 0x2, 0x2, 0xd98, 0xd94, 
       0x3, 0x2, 0x2, 0x2, 0xd98, 0xd96, 0x3, 0x2, 0x2, 0x2, 0xd99, 0x1eb, 
       0x3, 0x2, 0x2, 0x2, 0xd9a, 0xd9c, 0x5, 0xf2, 0x7a, 0x2, 0xd9b, 0xd9a, 
       0x3, 0x2, 0x2, 0x2, 0xd9c, 0xd9f, 0x3, 0x2, 0x2, 0x2, 0xd9d, 0xd9b, 
       0x3, 0x2, 0x2, 0x2, 0xd9d, 0xd9e, 0x3, 0x2, 0x2, 0x2, 0xd9e, 0xda0, 
       0x3, 0x2, 0x2, 0x2, 0xd9f, 0xd9d, 0x3, 0x2, 0x2, 0x2, 0xda0, 0xda1, 
       0x5, 0x6, 0x4, 0x2, 0xda1, 0xda2, 0x7, 0x2, 0x2, 0x3, 0xda2, 0xdac, 
       0x3, 0x2, 0x2, 0x2, 0xda3, 0xda5, 0x5, 0xf2, 0x7a, 0x2, 0xda4, 0xda3, 
       0x3, 0x2, 0x2, 0x2, 0xda5, 0xda8, 0x3, 0x2, 0x2, 0x2, 0xda6, 0xda4, 
       0x3, 0x2, 0x2, 0x2, 0xda6, 0xda7, 0x3, 0x2, 0x2, 0x2, 0xda7, 0xda9, 
       0x3, 0x2, 0x2, 0x2, 0xda8, 0xda6, 0x3, 0x2, 0x2, 0x2, 0xda9, 0xdaa, 
       0x7, 0xf, 0x2, 0x2, 0xdaa, 0xdac, 0x7, 0x2, 0x2, 0x3, 0xdab, 0xd9d, 
       0x3, 0x2, 0x2, 0x2, 0xdab, 0xda6, 0x3, 0x2, 0x2, 0x2, 0xdac, 0x1ed, 
       0x3, 0x2, 0x2, 0x2, 0xdad, 0xdae, 0x5, 0x8, 0x5, 0x2, 0xdae, 0xdaf, 
       0x7, 0x2, 0x2, 0x3, 0xdaf, 0xdb4, 0x3, 0x2, 0x2, 0x2, 0xdb0, 0xdb1, 
       0x5, 0xa, 0x6, 0x2, 0xdb1, 0xdb2, 0x7, 0x2, 0x2, 0x3, 0xdb2, 0xdb4, 
       0x3, 0x2, 0x2, 0x2, 0xdb3, 0xdad, 0x3, 0x2, 0x2, 0x2, 0xdb3, 0xdb0, 
       0x3, 0x2, 0x2, 0x2, 0xdb4, 0x1ef, 0x3, 0x2, 0x2, 0x2, 0xdb5, 0xdb6, 
       0x7, 0x11, 0x2, 0x2, 0xdb6, 0xdc0, 0x7, 0x2, 0x2, 0x3, 0xdb7, 0xdb8, 
       0x7, 0x31, 0x2, 0x2, 0xdb8, 0xdc0, 0x7, 0x2, 0x2, 0x3, 0xdb9, 0xdba, 
       0x7, 0x27, 0x2, 0x2, 0xdba, 0xdc0, 0x7, 0x2, 0x2, 0x3, 0xdbb, 0xdbc, 
       0x7, 0x29, 0x2, 0x2, 0xdbc, 0xdc0, 0x7, 0x2, 0x2, 0x3, 0xdbd, 0xdbe, 
       0x7, 0x14, 0x2, 0x2, 0xdbe, 0xdc0, 0x7, 0x2, 0x2, 0x3, 0xdbf, 0xdb5, 
       0x3, 0x2, 0x2, 0x2, 0xdbf, 0xdb7, 0x3, 0x2, 0x2, 0x2, 0xdbf, 0xdb9, 
       0x3, 0x2, 0x2, 0x2, 0xdbf, 0xdbb, 0x3, 0x2, 0x2, 0x2, 0xdbf, 0xdbd, 
       0x3, 0x2, 0x2, 0x2, 0xdc0, 0x1f1, 0x3, 0x2, 0x2, 0x2, 0xdc1, 0xdc2, 
       0x7, 0x20, 0x2, 0x2, 0xdc2, 0xdc6, 0x7, 0x2, 0x2, 0x3, 0xdc3, 0xdc4, 
       0x7, 0x1a, 0x2, 0x2, 0xdc4, 0xdc6, 0x7, 0x2, 0x2, 0x3, 0xdc5, 0xdc1, 
       0x3, 0x2, 0x2, 0x2, 0xdc5, 0xdc3, 0x3, 0x2, 0x2, 0x2, 0xdc6, 0x1f3, 
       0x3, 0x2, 0x2, 0x2, 0xdc7, 0xdc8, 0x5, 0xe, 0x8, 0x2, 0xdc8, 0xdc9, 
       0x7, 0x2, 0x2, 0x3, 0xdc9, 0xdd1, 0x3, 0x2, 0x2, 0x2, 0xdca, 0xdcb, 
       0x5, 0x1c, 0xf, 0x2, 0xdcb, 0xdcc, 0x7, 0x2, 0x2, 0x3, 0xdcc, 0xdd1, 
       0x3, 0x2, 0x2, 0x2, 0xdcd, 0xdce, 0x5, 0x1e, 0x10, 0x2, 0xdce, 0xdcf, 
       0x7, 0x2, 0x2, 0x3, 0xdcf, 0xdd1, 0x3, 0x2, 0x2, 0x2, 0xdd0, 0xdc7, 
       0x3, 0x2, 0x2, 0x2, 0xdd0, 0xdca, 0x3, 0x2, 0x2, 0x2, 0xdd0, 0xdcd, 
       0x3, 0x2, 0x2, 0x2, 0xdd1, 0x1f5, 0x3, 0x2, 0x2, 0x2, 0xdd2, 0xdd3, 
       0x5, 0x14, 0xb, 0x2, 0xdd3, 0xdd4, 0x7, 0x2, 0x2, 0x3, 0xdd4, 0xdd9, 
       0x3, 0x2, 0x2, 0x2, 0xdd5, 0xdd6, 0x5, 0x1a, 0xe, 0x2, 0xdd6, 0xdd7, 
       0x7, 0x2, 0x2, 0x3, 0xdd7, 0xdd9, 0x3, 0x2, 0x2, 0x2, 0xdd8, 0xdd2, 
       0x3, 0x2, 0x2, 0x2, 0xdd8, 0xdd5, 0x3, 0x2, 0x2, 0x2, 0xdd9, 0xde2, 
       0x3, 0x2, 0x2, 0x2, 0xdda, 0xddb, 0x5, 0x12, 0xa, 0x2, 0xddb, 0xddc, 
       0x7, 0x2, 0x2, 0x3, 0xddc, 0xde1, 0x3, 0x2, 0x2, 0x2, 0xddd, 0xdde, 
       0x5, 0x18, 0xd, 0x2, 0xdde, 0xddf, 0x7, 0x2, 0x2, 0x3, 0xddf, 0xde1, 
       0x3, 0x2, 0x2, 0x2, 0xde0, 0xdda, 0x3, 0x2, 0x2, 0x2, 0xde0, 0xddd, 
       0x3, 0x2, 0x2, 0x2, 0xde1, 0xde4, 0x3, 0x2, 0x2, 0x2, 0xde2, 0xde0, 
       0x3, 0x2, 0x2, 0x2, 0xde2, 0xde3, 0x3, 0x2, 0x2, 0x2, 0xde3, 0x1f7, 
       0x3, 0x2, 0x2, 0x2, 0xde4, 0xde2, 0x3, 0x2, 0x2, 0x2, 0xde5, 0xde7, 
       0x5, 0xf2, 0x7a, 0x2, 0xde6, 0xde5, 0x3, 0x2, 0x2, 0x2, 0xde7, 0xdea, 
       0x3, 0x2, 0x2, 0x2, 0xde8, 0xde6, 0x3, 0x2, 0x2, 0x2, 0xde8, 0xde9, 
       0x3, 0x2, 0x2, 0x2, 0xde9, 0xdeb, 0x3, 0x2, 0x2, 0x2, 0xdea, 0xde8, 
       0x3, 0x2, 0x2, 0x2, 0xdeb, 0xded, 0x5, 0x3d2, 0x1ea, 0x2, 0xdec, 
       0xdee, 0x5, 0x2a, 0x16, 0x2, 0xded, 0xdec, 0x3, 0x2, 0x2, 0x2, 0xded, 
       0xdee, 0x3, 0x2, 0x2, 0x2, 0xdee, 0xdef, 0x3, 0x2, 0x2, 0x2, 0xdef, 
       0xdf0, 0x7, 0x2, 0x2, 0x3, 0xdf0, 0xe00, 0x3, 0x2, 0x2, 0x2, 0xdf1, 
       0xdf2, 0x5, 0xe, 0x8, 0x2, 0xdf2, 0xdf6, 0x7, 0x4e, 0x2, 0x2, 0xdf3, 
       0xdf5, 0x5, 0xf2, 0x7a, 0x2, 0xdf4, 0xdf3, 0x3, 0x2, 0x2, 0x2, 0xdf5, 
       0xdf8, 0x3, 0x2, 0x2, 0x2, 0xdf6, 0xdf4, 0x3, 0x2, 0x2, 0x2, 0xdf6, 
       0xdf7, 0x3, 0x2, 0x2, 0x2, 0xdf7, 0xdf9, 0x3, 0x2, 0x2, 0x2, 0xdf8, 
       0xdf6, 0x3, 0x2, 0x2, 0x2, 0xdf9, 0xdfb, 0x5, 0x3d2, 0x1ea, 0x2, 
       0xdfa, 0xdfc, 0x5, 0x2a, 0x16, 0x2, 0xdfb, 0xdfa, 0x3, 0x2, 0x2, 
       0x2, 0xdfb, 0xdfc, 0x3, 0x2, 0x2, 0x2, 0xdfc, 0xdfd, 0x3, 0x2, 0x2, 
       0x2, 0xdfd, 0xdfe, 0x7, 0x2, 0x2, 0x3, 0xdfe, 0xe00, 0x3, 0x2, 0x2, 
       0x2, 0xdff, 0xde8, 0x3, 0x2, 0x2, 0x2, 0xdff, 0xdf1, 0x3, 0x2, 0x2, 
       0x2, 0xe00, 0x1f9, 0x3, 0x2, 0x2, 0x2, 0xe01, 0xe05, 0x7, 0x4e, 0x2, 
       0x2, 0xe02, 0xe04, 0x5, 0xf2, 0x7a, 0x2, 0xe03, 0xe02, 0x3, 0x2, 
       0x2, 0x2, 0xe04, 0xe07, 0x3, 0x2, 0x2, 0x2, 0xe05, 0xe03, 0x3, 0x2, 
       0x2, 0x2, 0xe05, 0xe06, 0x3, 0x2, 0x2, 0x2, 0xe06, 0xe08, 0x3, 0x2, 
       0x2, 0x2, 0xe07, 0xe05, 0x3, 0x2, 0x2, 0x2, 0xe08, 0xe0a, 0x5, 0x3d2, 
       0x1ea, 0x2, 0xe09, 0xe0b, 0x5, 0x2a, 0x16, 0x2, 0xe0a, 0xe09, 0x3, 
       0x2, 0x2, 0x2, 0xe0a, 0xe0b, 0x3, 0x2, 0x2, 0x2, 0xe0b, 0xe0c, 0x3, 
       0x2, 0x2, 0x2, 0xe0c, 0xe0d, 0x7, 0x2, 0x2, 0x3, 0xe0d, 0x1fb, 0x3, 
       0x2, 0x2, 0x2, 0xe0e, 0xe10, 0x5, 0xf2, 0x7a, 0x2, 0xe0f, 0xe0e, 
       0x3, 0x2, 0x2, 0x2, 0xe10, 0xe13, 0x3, 0x2, 0x2, 0x2, 0xe11, 0xe0f, 
       0x3, 0x2, 0x2, 0x2, 0xe11, 0xe12, 0x3, 0x2, 0x2, 0x2, 0xe12, 0xe14, 
       0x3, 0x2, 0x2, 0x2, 0xe13, 0xe11, 0x3, 0x2, 0x2, 0x2, 0xe14, 0xe16, 
       0x5, 0x3d2, 0x1ea, 0x2, 0xe15, 0xe17, 0x5, 0x2a, 0x16, 0x2, 0xe16, 
       0xe15, 0x3, 0x2, 0x2, 0x2, 0xe16, 0xe17, 0x3, 0x2, 0x2, 0x2, 0xe17, 
       0xe18, 0x3, 0x2, 0x2, 0x2, 0xe18, 0xe19, 0x7, 0x2, 0x2, 0x3, 0xe19, 
       0x1fd, 0x3, 0x2, 0x2, 0x2, 0xe1a, 0xe1b, 0x5, 0x10, 0x9, 0x2, 0xe1b, 
       0xe1c, 0x7, 0x2, 0x2, 0x3, 0xe1c, 0x1ff, 0x3, 0x2, 0x2, 0x2, 0xe1d, 
       0xe1e, 0x5, 0x12, 0xa, 0x2, 0xe1e, 0xe1f, 0x7, 0x2, 0x2, 0x3, 0xe1f, 
       0x201, 0x3, 0x2, 0x2, 0x2, 0xe20, 0xe21, 0x5, 0x14, 0xb, 0x2, 0xe21, 
       0xe22, 0x7, 0x2, 0x2, 0x3, 0xe22, 0x203, 0x3, 0x2, 0x2, 0x2, 0xe23, 
       0xe25, 0x5, 0xf2, 0x7a, 0x2, 0xe24, 0xe23, 0x3, 0x2, 0x2, 0x2, 0xe25, 
       0xe28, 0x3, 0x2, 0x2, 0x2, 0xe26, 0xe24, 0x3, 0x2, 0x2, 0x2, 0xe26, 
       0xe27, 0x3, 0x2, 0x2, 0x2, 0xe27, 0xe29, 0x3, 0x2, 0x2, 0x2, 0xe28, 
       0xe26, 0x3, 0x2, 0x2, 0x2, 0xe29, 0xe2a, 0x5, 0x3d2, 0x1ea, 0x2, 
       0xe2a, 0xe2b, 0x7, 0x2, 0x2, 0x3, 0xe2b, 0x205, 0x3, 0x2, 0x2, 0x2, 
       0xe2c, 0xe2d, 0x5, 0x4, 0x3, 0x2, 0xe2d, 0xe2e, 0x5, 0x20, 0x11, 
       0x2, 0xe2e, 0xe2f, 0x7, 0x2, 0x2, 0x3, 0xe2f, 0xe39, 0x3, 0x2, 0x2, 
       0x2, 0xe30, 0xe31, 0x5, 0xe, 0x8, 0x2, 0xe31, 0xe32, 0x5, 0x20, 0x11, 
       0x2, 0xe32, 0xe33, 0x7, 0x2, 0x2, 0x3, 0xe33, 0xe39, 0x3, 0x2, 0x2, 
       0x2, 0xe34, 0xe35, 0x5, 0x1c, 0xf, 0x2, 0xe35, 0xe36, 0x5, 0x20, 
       0x11, 0x2, 0xe36, 0xe37, 0x7, 0x2, 0x2, 0x3, 0xe37, 0xe39, 0x3, 0x2, 
       0x2, 0x2, 0xe38, 0xe2c, 0x3, 0x2, 0x2, 0x2, 0xe38, 0xe30, 0x3, 0x2, 
       0x2, 0x2, 0xe38, 0xe34, 0x3, 0x2, 0x2, 0x2, 0xe39, 0x207, 0x3, 0x2, 
       0x2, 0x2, 0xe3a, 0xe3c, 0x5, 0xf2, 0x7a, 0x2, 0xe3b, 0xe3a, 0x3, 
       0x2, 0x2, 0x2, 0xe3c, 0xe3f, 0x3, 0x2, 0x2, 0x2, 0xe3d, 0xe3b, 0x3, 
       0x2, 0x2, 0x2, 0xe3d, 0xe3e, 0x3, 0x2, 0x2, 0x2, 0xe3e, 0xe40, 0x3, 
       0x2, 0x2, 0x2, 0xe3f, 0xe3d, 0x3, 0x2, 0x2, 0x2, 0xe40, 0xe41, 0x7, 
       0x4a, 0x2, 0x2, 0xe41, 0xe4c, 0x7, 0x4b, 0x2, 0x2, 0xe42, 0xe44, 
       0x5, 0xf2, 0x7a, 0x2, 0xe43, 0xe42, 0x3, 0x2, 0x2, 0x2, 0xe44, 0xe47, 
       0x3, 0x2, 0x2, 0x2, 0xe45, 0xe43, 0x3, 0x2, 0x2, 0x2, 0xe45, 0xe46, 
       0x3, 0x2, 0x2, 0x2, 0xe46, 0xe48, 0x3, 0x2, 0x2, 0x2, 0xe47, 0xe45, 
       0x3, 0x2, 0x2, 0x2, 0xe48, 0xe49, 0x7, 0x4a, 0x2, 0x2, 0xe49, 0xe4b, 
       0x7, 0x4b, 0x2, 0x2, 0xe4a, 0xe45, 0x3, 0x2, 0x2, 0x2, 0xe4b, 0xe4e, 
       0x3, 0x2, 0x2, 0x2, 0xe4c, 0xe4a, 0x3, 0x2, 0x2, 0x2, 0xe4c, 0xe4d, 
       0x3, 0x2, 0x2, 0x2, 0xe4d, 0xe4f, 0x3, 0x2, 0x2, 0x2, 0xe4e, 0xe4c, 
       0x3, 0x2, 0x2, 0x2, 0xe4f, 0xe50, 0x7, 0x2, 0x2, 0x3, 0xe50, 0x209, 
       0x3, 0x2, 0x2, 0x2, 0xe51, 0xe53, 0x5, 0x24, 0x13, 0x2, 0xe52, 0xe51, 
       0x3, 0x2, 0x2, 0x2, 0xe53, 0xe56, 0x3, 0x2, 0x2, 0x2, 0xe54, 0xe52, 
       0x3, 0x2, 0x2, 0x2, 0xe54, 0xe55, 0x3, 0x2, 0x2, 0x2, 0xe55, 0xe57, 
       0x3, 0x2, 0x2, 0x2, 0xe56, 0xe54, 0x3, 0x2, 0x2, 0x2, 0xe57, 0xe59, 
       0x5, 0x3d2, 0x1ea, 0x2, 0xe58, 0xe5a, 0x5, 0x26, 0x14, 0x2, 0xe59, 
       0xe58, 0x3, 0x2, 0x2, 0x2, 0xe59, 0xe5a, 0x3, 0x2, 0x2, 0x2, 0xe5a, 
       0x20b, 0x3, 0x2, 0x2, 0x2, 0xe5b, 0xe5c, 0x5, 0xf2, 0x7a, 0x2, 0xe5c, 
       0xe5d, 0x7, 0x2, 0x2, 0x3, 0xe5d, 0x20d, 0x3, 0x2, 0x2, 0x2, 0xe5e, 
       0xe5f, 0x7, 0x1d, 0x2, 0x2, 0xe5f, 0xe60, 0x5, 0x1c, 0xf, 0x2, 0xe60, 
       0xe61, 0x7, 0x2, 0x2, 0x3, 0xe61, 0xe6d, 0x3, 0x2, 0x2, 0x2, 0xe62, 
       0xe63, 0x7, 0x1d, 0x2, 0x2, 0xe63, 0xe67, 0x5, 0xe, 0x8, 0x2, 0xe64, 
       0xe66, 0x5, 0x28, 0x15, 0x2, 0xe65, 0xe64, 0x3, 0x2, 0x2, 0x2, 0xe66, 
       0xe69, 0x3, 0x2, 0x2, 0x2, 0xe67, 0xe65, 0x3, 0x2, 0x2, 0x2, 0xe67, 
       0xe68, 0x3, 0x2, 0x2, 0x2, 0xe68, 0xe6a, 0x3, 0x2, 0x2, 0x2, 0xe69, 
       0xe67, 0x3, 0x2, 0x2, 0x2, 0xe6a, 0xe6b, 0x7, 0x2, 0x2, 0x3, 0xe6b, 
       0xe6d, 0x3, 0x2, 0x2, 0x2, 0xe6c, 0xe5e, 0x3, 0x2, 0x2, 0x2, 0xe6c, 
       0xe62, 0x3, 0x2, 0x2, 0x2, 0xe6d, 0x20f, 0x3, 0x2, 0x2, 0x2, 0xe6e, 
       0xe6f, 0x7, 0x66, 0x2, 0x2, 0xe6f, 0xe70, 0x5, 0x16, 0xc, 0x2, 0xe70, 
       0xe71, 0x7, 0x2, 0x2, 0x3, 0xe71, 0x211, 0x3, 0x2, 0x2, 0x2, 0xe72, 
       0xe73, 0x7, 0x54, 0x2, 0x2, 0xe73, 0xe74, 0x5, 0x2c, 0x17, 0x2, 0xe74, 
       0xe75, 0x7, 0x53, 0x2, 0x2, 0xe75, 0xe76, 0x7, 0x2, 0x2, 0x3, 0xe76, 
       0x213, 0x3, 0x2, 0x2, 0x2, 0xe77, 0xe7c, 0x5, 0x2e, 0x18, 0x2, 0xe78, 
       0xe79, 0x7, 0x4d, 0x2, 0x2, 0xe79, 0xe7b, 0x5, 0x2e, 0x18, 0x2, 0xe7a, 
       0xe78, 0x3, 0x2, 0x2, 0x2, 0xe7b, 0xe7e, 0x3, 0x2, 0x2, 0x2, 0xe7c, 
       0xe7a, 0x3, 0x2, 0x2, 0x2, 0xe7c, 0xe7d, 0x3, 0x2, 0x2, 0x2, 0xe7d, 
       0xe7f, 0x3, 0x2, 0x2, 0x2, 0xe7e, 0xe7c, 0x3, 0x2, 0x2, 0x2, 0xe7f, 
       0xe80, 0x7, 0x2, 0x2, 0x3, 0xe80, 0x215, 0x3, 0x2, 0x2, 0x2, 0xe81, 
       0xe82, 0x5, 0xc, 0x7, 0x2, 0xe82, 0xe83, 0x7, 0x2, 0x2, 0x3, 0xe83, 
       0xe88, 0x3, 0x2, 0x2, 0x2, 0xe84, 0xe85, 0x5, 0x30, 0x19, 0x2, 0xe85, 
       0xe86, 0x7, 0x2, 0x2, 0x3, 0xe86, 0xe88, 0x3, 0x2, 0x2, 0x2, 0xe87, 
       0xe81, 0x3, 0x2, 0x2, 0x2, 0xe87, 0xe84, 0x3, 0x2, 0x2, 0x2, 0xe88, 
       0x217, 0x3, 0x2, 0x2, 0x2, 0xe89, 0xe8b, 0x5, 0xf2, 0x7a, 0x2, 0xe8a, 
       0xe89, 0x3, 0x2, 0x2, 0x2, 0xe8b, 0xe8e, 0x3, 0x2, 0x2, 0x2, 0xe8c, 
       0xe8a, 0x3, 0x2, 0x2, 0x2, 0xe8c, 0xe8d, 0x3, 0x2, 0x2, 0x2, 0xe8d, 
       0xe8f, 0x3, 0x2, 0x2, 0x2, 0xe8e, 0xe8c, 0x3, 0x2, 0x2, 0x2, 0xe8f, 
       0xe91, 0x7, 0x57, 0x2, 0x2, 0xe90, 0xe92, 0x5, 0x32, 0x1a, 0x2, 0xe91, 
       0xe90, 0x3, 0x2, 0x2, 0x2, 0xe91, 0xe92, 0x3, 0x2, 0x2, 0x2, 0xe92, 
       0xe93, 0x3, 0x2, 0x2, 0x2, 0xe93, 0xe94, 0x7, 0x2, 0x2, 0x3, 0xe94, 
       0x219, 0x3, 0x2, 0x2, 0x2, 0xe95, 0xe96, 0x7, 0x1d, 0x2, 0x2, 0xe96, 
       0xe97, 0x5, 0xc, 0x7, 0x2, 0xe97, 0xe98, 0x7, 0x2, 0x2, 0x3, 0xe98, 
       0xe9e, 0x3, 0x2, 0x2, 0x2, 0xe99, 0xe9a, 0x7, 0x34, 0x2, 0x2, 0xe9a, 
       0xe9b, 0x5, 0xc, 0x7, 0x2, 0xe9b, 0xe9c, 0x7, 0x2, 0x2, 0x3, 0xe9c, 
       0xe9e, 0x3, 0x2, 0x2, 0x2, 0xe9d, 0xe95, 0x3, 0x2, 0x2, 0x2, 0xe9d, 
       0xe99, 0x3, 0x2, 0x2, 0x2, 0xe9e, 0x21b, 0x3, 0x2, 0x2, 0x2, 0xe9f, 
       0xea0, 0x5, 0x3d2, 0x1ea, 0x2, 0xea0, 0xea1, 0x7, 0x2, 0x2, 0x3, 
       0xea1, 0xea8, 0x3, 0x2, 0x2, 0x2, 0xea2, 0xea3, 0x5, 0x34, 0x1b, 
       0x2, 0xea3, 0xea4, 0x7, 0x4e, 0x2, 0x2, 0xea4, 0xea5, 0x5, 0x3d2, 
       0x1ea, 0x2, 0xea5, 0xea6, 0x7, 0x2, 0x2, 0x3, 0xea6, 0xea8, 0x3, 
       0x2, 0x2, 0x2, 0xea7, 0xe9f, 0x3, 0x2, 0x2, 0x2, 0xea7, 0xea2, 0x3, 
       0x2, 0x2, 0x2, 0xea8, 0x21d, 0x3, 0x2, 0x2, 0x2, 0xea9, 0xeaa, 0x5, 
       0x3d2, 0x1ea, 0x2, 0xeaa, 0xeab, 0x7, 0x2, 0x2, 0x3, 0xeab, 0xeb2, 
       0x3, 0x2, 0x2, 0x2, 0xeac, 0xead, 0x5, 0x36, 0x1c, 0x2, 0xead, 0xeae, 
       0x7, 0x4e, 0x2, 0x2, 0xeae, 0xeaf, 0x5, 0x3d2, 0x1ea, 0x2, 0xeaf, 
       0xeb0, 0x7, 0x2, 0x2, 0x3, 0xeb0, 0xeb2, 0x3, 0x2, 0x2, 0x2, 0xeb1, 
       0xea9, 0x3, 0x2, 0x2, 0x2, 0xeb1, 0xeac, 0x3, 0x2, 0x2, 0x2, 0xeb2, 
       0x21f, 0x3, 0x2, 0x2, 0x2, 0xeb3, 0xeb4, 0x5, 0x3d2, 0x1ea, 0x2, 
       0xeb4, 0xeb5, 0x7, 0x2, 0x2, 0x3, 0xeb5, 0xebc, 0x3, 0x2, 0x2, 0x2, 
       0xeb6, 0xeb7, 0x5, 0x3a, 0x1e, 0x2, 0xeb7, 0xeb8, 0x7, 0x4e, 0x2, 
       0x2, 0xeb8, 0xeb9, 0x5, 0x3d2, 0x1ea, 0x2, 0xeb9, 0xeba, 0x7, 0x2, 
       0x2, 0x3, 0xeba, 0xebc, 0x3, 0x2, 0x2, 0x2, 0xebb, 0xeb3, 0x3, 0x2, 
       0x2, 0x2, 0xebb, 0xeb6, 0x3, 0x2, 0x2, 0x2, 0xebc, 0x221, 0x3, 0x2, 
       0x2, 0x2, 0xebd, 0xebe, 0x5, 0x3d2, 0x1ea, 0x2, 0xebe, 0xebf, 0x7, 
       0x2, 0x2, 0x3, 0xebf, 0xec6, 0x3, 0x2, 0x2, 0x2, 0xec0, 0xec1, 0x5, 
       0x3a, 0x1e, 0x2, 0xec1, 0xec2, 0x7, 0x4e, 0x2, 0x2, 0xec2, 0xec3, 
       0x5, 0x3d2, 0x1ea, 0x2, 0xec3, 0xec4, 0x7, 0x2, 0x2, 0x3, 0xec4, 
       0xec6, 0x3, 0x2, 0x2, 0x2, 0xec5, 0xebd, 0x3, 0x2, 0x2, 0x2, 0xec5, 
       0xec0, 0x3, 0x2, 0x2, 0x2, 0xec6, 0x223, 0x3, 0x2, 0x2, 0x2, 0xec7, 
       0xec8, 0x5, 0x3d2, 0x1ea, 0x2, 0xec8, 0xec9, 0x7, 0x2, 0x2, 0x3, 
       0xec9, 0xed0, 0x3, 0x2, 0x2, 0x2, 0xeca, 0xecb, 0x5, 0x40, 0x21, 
       0x2, 0xecb, 0xecc, 0x7, 0x4e, 0x2, 0x2, 0xecc, 0xecd, 0x5, 0x3d2, 
       0x1ea, 0x2, 0xecd, 0xece, 0x7, 0x2, 0x2, 0x3, 0xece, 0xed0, 0x3, 
       0x2, 0x2, 0x2, 0xecf, 0xec7, 0x3, 0x2, 0x2, 0x2, 0xecf, 0xeca, 0x3, 
       0x2, 0x2, 0x2, 0xed0, 0x225, 0x3, 0x2, 0x2, 0x2, 0xed1, 0xed2, 0x5, 
       0x3d2, 0x1ea, 0x2, 0xed2, 0xed3, 0x7, 0x2, 0x2, 0x3, 0xed3, 0x227, 
       0x3, 0x2, 0x2, 0x2, 0xed4, 0xed5, 0x5, 0x3d2, 0x1ea, 0x2, 0xed5, 
       0xed6, 0x7, 0x2, 0x2, 0x3, 0xed6, 0xedd, 0x3, 0x2, 0x2, 0x2, 0xed7, 
       0xed8, 0x5, 0x40, 0x21, 0x2, 0xed8, 0xed9, 0x7, 0x4e, 0x2, 0x2, 0xed9, 
       0xeda, 0x5, 0x3d2, 0x1ea, 0x2, 0xeda, 0xedb, 0x7, 0x2, 0x2, 0x3, 
       0xedb, 0xedd, 0x3, 0x2, 0x2, 0x2, 0xedc, 0xed4, 0x3, 0x2, 0x2, 0x2, 
       0xedc, 0xed7, 0x3, 0x2, 0x2, 0x2, 0xedd, 0x229, 0x3, 0x2, 0x2, 0x2, 
       0xede, 0xedf, 0x5, 0x44, 0x23, 0x2, 0xedf, 0xee0, 0x7, 0x2, 0x2, 
       0x3, 0xee0, 0xee5, 0x3, 0x2, 0x2, 0x2, 0xee1, 0xee2, 0x5, 0x46, 0x24, 
       0x2, 0xee2, 0xee3, 0x7, 0x2, 0x2, 0x3, 0xee3, 0xee5, 0x3, 0x2, 0x2, 
       0x2, 0xee4, 0xede, 0x3, 0x2, 0x2, 0x2, 0xee4, 0xee1, 0x3, 0x2, 0x2, 
       0x2, 0xee5, 0x22b, 0x3, 0x2, 0x2, 0x2, 0xee6, 0xee8, 0x5, 0x48, 0x25, 
       0x2, 0xee7, 0xee6, 0x3, 0x2, 0x2, 0x2, 0xee7, 0xee8, 0x3, 0x2, 0x2, 
       0x2, 0xee8, 0xeec, 0x3, 0x2, 0x2, 0x2, 0xee9, 0xeeb, 0x5, 0x4c, 0x27, 
       0x2, 0xeea, 0xee9, 0x3, 0x2, 0x2, 0x2, 0xeeb, 0xeee, 0x3, 0x2, 0x2, 
       0x2, 0xeec, 0xeea, 0x3, 0x2, 0x2, 0x2, 0xeec, 0xeed, 0x3, 0x2, 0x2, 
       0x2, 0xeed, 0xef2, 0x3, 0x2, 0x2, 0x2, 0xeee, 0xeec, 0x3, 0x2, 0x2, 
       0x2, 0xeef, 0xef1, 0x5, 0x56, 0x2c, 0x2, 0xef0, 0xeef, 0x3, 0x2, 
       0x2, 0x2, 0xef1, 0xef4, 0x3, 0x2, 0x2, 0x2, 0xef2, 0xef0, 0x3, 0x2, 
       0x2, 0x2, 0xef2, 0xef3, 0x3, 0x2, 0x2, 0x2, 0xef3, 0xef5, 0x3, 0x2, 
       0x2, 0x2, 0xef4, 0xef2, 0x3, 0x2, 0x2, 0x2, 0xef5, 0xef6, 0x7, 0x2, 
       0x2, 0x3, 0xef6, 0x22d, 0x3, 0x2, 0x2, 0x2, 0xef7, 0xef9, 0x5, 0x4c, 
       0x27, 0x2, 0xef8, 0xef7, 0x3, 0x2, 0x2, 0x2, 0xef9, 0xefc, 0x3, 0x2, 
       0x2, 0x2, 0xefa, 0xef8, 0x3, 0x2, 0x2, 0x2, 0xefa, 0xefb, 0x3, 0x2, 
       0x2, 0x2, 0xefb, 0xefd, 0x3, 0x2, 0x2, 0x2, 0xefc, 0xefa, 0x3, 0x2, 
       0x2, 0x2, 0xefd, 0xefe, 0x5, 0x58, 0x2d, 0x2, 0xefe, 0xeff, 0x7, 
       0x2, 0x2, 0x3, 0xeff, 0x22f, 0x3, 0x2, 0x2, 0x2, 0xf00, 0xf02, 0x5, 
       0x4a, 0x26, 0x2, 0xf01, 0xf00, 0x3, 0x2, 0x2, 0x2, 0xf02, 0xf05, 
       0x3, 0x2, 0x2, 0x2, 0xf03, 0xf01, 0x3, 0x2, 0x2, 0x2, 0xf03, 0xf04, 
       0x3, 0x2, 0x2, 0x2, 0xf04, 0xf06, 0x3, 0x2, 0x2, 0x2, 0xf05, 0xf03, 
       0x3, 0x2, 0x2, 0x2, 0xf06, 0xf07, 0x7, 0x2c, 0x2, 0x2, 0xf07, 0xf08, 
       0x5, 0x36, 0x1c, 0x2, 0xf08, 0xf09, 0x7, 0x4c, 0x2, 0x2, 0xf09, 0xf0a, 
       0x7, 0x2, 0x2, 0x3, 0xf0a, 0x231, 0x3, 0x2, 0x2, 0x2, 0xf0b, 0xf0c, 
       0x5, 0xf2, 0x7a, 0x2, 0xf0c, 0xf0d, 0x7, 0x2, 0x2, 0x3, 0xf0d, 0x233, 
       0x3, 0x2, 0x2, 0x2, 0xf0e, 0xf0f, 0x5, 0x4e, 0x28, 0x2, 0xf0f, 0xf10, 
       0x7, 0x2, 0x2, 0x3, 0xf10, 0xf1b, 0x3, 0x2, 0x2, 0x2, 0xf11, 0xf12, 
       0x5, 0x50, 0x29, 0x2, 0xf12, 0xf13, 0x7, 0x2, 0x2, 0x3, 0xf13, 0xf1b, 
       0x3, 0x2, 0x2, 0x2, 0xf14, 0xf15, 0x5, 0x52, 0x2a, 0x2, 0xf15, 0xf16, 
       0x7, 0x2, 0x2, 0x3, 0xf16, 0xf1b, 0x3, 0x2, 0x2, 0x2, 0xf17, 0xf18, 
       0x5, 0x54, 0x2b, 0x2, 0xf18, 0xf19, 0x7, 0x2, 0x2, 0x3, 0xf19, 0xf1b, 
       0x3, 0x2, 0x2, 0x2, 0xf1a, 0xf0e, 0x3, 0x2, 0x2, 0x2, 0xf1a, 0xf11, 
       0x3, 0x2, 0x2, 0x2, 0xf1a, 0xf14, 0x3, 0x2, 0x2, 0x2, 0xf1a, 0xf17, 
       0x3, 0x2, 0x2, 0x2, 0xf1b, 0x235, 0x3, 0x2, 0x2, 0x2, 0xf1c, 0xf1d, 
       0x7, 0x25, 0x2, 0x2, 0xf1d, 0xf1e, 0x5, 0x38, 0x1d, 0x2, 0xf1e, 0xf1f, 
       0x7, 0x4c, 0x2, 0x2, 0xf1f, 0xf20, 0x7, 0x2, 0x2, 0x3, 0xf20, 0x237, 
       0x3, 0x2, 0x2, 0x2, 0xf21, 0xf22, 0x7, 0x25, 0x2, 0x2, 0xf22, 0xf23, 
       0x5, 0x3a, 0x1e, 0x2, 0xf23, 0xf24, 0x7, 0x4e, 0x2, 0x2, 0xf24, 0xf25, 
       0x7, 0x64, 0x2, 0x2, 0xf25, 0xf26, 0x7, 0x4c, 0x2, 0x2, 0xf26, 0xf27, 
       0x7, 0x2, 0x2, 0x3, 0xf27, 0x239, 0x3, 0x2, 0x2, 0x2, 0xf28, 0xf29, 
       0x7, 0x25, 0x2, 0x2, 0xf29, 0xf2a, 0x7, 0x32, 0x2, 0x2, 0xf2a, 0xf2b, 
       0x5, 0x38, 0x1d, 0x2, 0xf2b, 0xf2c, 0x7, 0x4e, 0x2, 0x2, 0xf2c, 0xf2d, 
       0x5, 0x3d2, 0x1ea, 0x2, 0xf2d, 0xf2e, 0x7, 0x4c, 0x2, 0x2, 0xf2e, 
       0xf2f, 0x7, 0x2, 0x2, 0x3, 0xf2f, 0x23b, 0x3, 0x2, 0x2, 0x2, 0xf30, 
       0xf31, 0x7, 0x25, 0x2, 0x2, 0xf31, 0xf32, 0x7, 0x32, 0x2, 0x2, 0xf32, 
       0xf33, 0x5, 0x38, 0x1d, 0x2, 0xf33, 0xf34, 0x7, 0x4e, 0x2, 0x2, 0xf34, 
       0xf35, 0x7, 0x64, 0x2, 0x2, 0xf35, 0xf36, 0x7, 0x4c, 0x2, 0x2, 0xf36, 
       0xf37, 0x7, 0x2, 0x2, 0x3, 0xf37, 0x23d, 0x3, 0x2, 0x2, 0x2, 0xf38, 
       0xf39, 0x5, 0x5e, 0x30, 0x2, 0xf39, 0xf3a, 0x7, 0x2, 0x2, 0x3, 0xf3a, 
       0xf41, 0x3, 0x2, 0x2, 0x2, 0xf3b, 0xf3c, 0x5, 0xd2, 0x6a, 0x2, 0xf3c, 
       0xf3d, 0x7, 0x2, 0x2, 0x3, 0xf3d, 0xf41, 0x3, 0x2, 0x2, 0x2, 0xf3e, 
       0xf3f, 0x7, 0x4c, 0x2, 0x2, 0xf3f, 0xf41, 0x7, 0x2, 0x2, 0x3, 0xf40, 
       0xf38, 0x3, 0x2, 0x2, 0x2, 0xf40, 0xf3b, 0x3, 0x2, 0x2, 0x2, 0xf40, 
       0xf3e, 0x3, 0x2, 0x2, 0x2, 0xf41, 0x23f, 0x3, 0x2, 0x2, 0x2, 0xf42, 
       0xf44, 0x5, 0xf2, 0x7a, 0x2, 0xf43, 0xf42, 0x3, 0x2, 0x2, 0x2, 0xf44, 
       0xf47, 0x3, 0x2, 0x2, 0x2, 0xf45, 0xf43, 0x3, 0x2, 0x2, 0x2, 0xf45, 
       0xf46, 0x3, 0x2, 0x2, 0x2, 0xf46, 0xf49, 0x3, 0x2, 0x2, 0x2, 0xf47, 
       0xf45, 0x3, 0x2, 0x2, 0x2, 0xf48, 0xf4a, 0x7, 0x3, 0x2, 0x2, 0xf49, 
       0xf48, 0x3, 0x2, 0x2, 0x2, 0xf49, 0xf4a, 0x3, 0x2, 0x2, 0x2, 0xf4a, 
       0xf4b, 0x3, 0x2, 0x2, 0x2, 0xf4b, 0xf4c, 0x7, 0x4, 0x2, 0x2, 0xf4c, 
       0xf4d, 0x5, 0x34, 0x1b, 0x2, 0xf4d, 0xf51, 0x7, 0x48, 0x2, 0x2, 0xf4e, 
       0xf50, 0x5, 0x5a, 0x2e, 0x2, 0xf4f, 0xf4e, 0x3, 0x2, 0x2, 0x2, 0xf50, 
       0xf53, 0x3, 0x2, 0x2, 0x2, 0xf51, 0xf4f, 0x3, 0x2, 0x2, 0x2, 0xf51, 
       0xf52, 0x3, 0x2, 0x2, 0x2, 0xf52, 0xf54, 0x3, 0x2, 0x2, 0x2, 0xf53, 
       0xf51, 0x3, 0x2, 0x2, 0x2, 0xf54, 0xf55, 0x7, 0x49, 0x2, 0x2, 0xf55, 
       0xf56, 0x7, 0x2, 0x2, 0x3, 0xf56, 0x241, 0x3, 0x2, 0x2, 0x2, 0xf57, 
       0xf5b, 0x7, 0x5, 0x2, 0x2, 0xf58, 0xf5a, 0x5, 0x5c, 0x2f, 0x2, 0xf59, 
       0xf58, 0x3, 0x2, 0x2, 0x2, 0xf5a, 0xf5d, 0x3, 0x2, 0x2, 0x2, 0xf5b, 
       0xf59, 0x3, 0x2, 0x2, 0x2, 0xf5b, 0xf5c, 0x3, 0x2, 0x2, 0x2, 0xf5c, 
       0xf5e, 0x3, 0x2, 0x2, 0x2, 0xf5d, 0xf5b, 0x3, 0x2, 0x2, 0x2, 0xf5e, 
       0xf5f, 0x5, 0x34, 0x1b, 0x2, 0xf5f, 0xf60, 0x7, 0x4c, 0x2, 0x2, 0xf60, 
       0xf61, 0x7, 0x2, 0x2, 0x3, 0xf61, 0xf96, 0x3, 0x2, 0x2, 0x2, 0xf62, 
       0xf63, 0x7, 0x6, 0x2, 0x2, 0xf63, 0xf6d, 0x5, 0x36, 0x1c, 0x2, 0xf64, 
       0xf65, 0x7, 0x7, 0x2, 0x2, 0xf65, 0xf6a, 0x5, 0x34, 0x1b, 0x2, 0xf66, 
       0xf67, 0x7, 0x4d, 0x2, 0x2, 0xf67, 0xf69, 0x5, 0x34, 0x1b, 0x2, 0xf68, 
       0xf66, 0x3, 0x2, 0x2, 0x2, 0xf69, 0xf6c, 0x3, 0x2, 0x2, 0x2, 0xf6a, 
       0xf68, 0x3, 0x2, 0x2, 0x2, 0xf6a, 0xf6b, 0x3, 0x2, 0x2, 0x2, 0xf6b, 
       0xf6e, 0x3, 0x2, 0x2, 0x2, 0xf6c, 0xf6a, 0x3, 0x2, 0x2, 0x2, 0xf6d, 
       0xf64, 0x3, 0x2, 0x2, 0x2, 0xf6d, 0xf6e, 0x3, 0x2, 0x2, 0x2, 0xf6e, 
       0xf6f, 0x3, 0x2, 0x2, 0x2, 0xf6f, 0xf70, 0x7, 0x4c, 0x2, 0x2, 0xf70, 
       0xf71, 0x7, 0x2, 0x2, 0x3, 0xf71, 0xf96, 0x3, 0x2, 0x2, 0x2, 0xf72, 
       0xf73, 0x7, 0x8, 0x2, 0x2, 0xf73, 0xf7d, 0x5, 0x36, 0x1c, 0x2, 0xf74, 
       0xf75, 0x7, 0x7, 0x2, 0x2, 0xf75, 0xf7a, 0x5, 0x34, 0x1b, 0x2, 0xf76, 
       0xf77, 0x7, 0x4d, 0x2, 0x2, 0xf77, 0xf79, 0x5, 0x34, 0x1b, 0x2, 0xf78, 
       0xf76, 0x3, 0x2, 0x2, 0x2, 0xf79, 0xf7c, 0x3, 0x2, 0x2, 0x2, 0xf7a, 
       0xf78, 0x3, 0x2, 0x2, 0x2, 0xf7a, 0xf7b, 0x3, 0x2, 0x2, 0x2, 0xf7b, 
       0xf7e, 0x3, 0x2, 0x2, 0x2, 0xf7c, 0xf7a, 0x3, 0x2, 0x2, 0x2, 0xf7d, 
       0xf74, 0x3, 0x2, 0x2, 0x2, 0xf7d, 0xf7e, 0x3, 0x2, 0x2, 0x2, 0xf7e, 
       0xf7f, 0x3, 0x2, 0x2, 0x2, 0xf7f, 0xf80, 0x7, 0x4c, 0x2, 0x2, 0xf80, 
       0xf81, 0x7, 0x2, 0x2, 0x3, 0xf81, 0xf96, 0x3, 0x2, 0x2, 0x2, 0xf82, 
       0xf83, 0x7, 0x9, 0x2, 0x2, 0xf83, 0xf84, 0x5, 0x38, 0x1d, 0x2, 0xf84, 
       0xf85, 0x7, 0x4c, 0x2, 0x2, 0xf85, 0xf86, 0x7, 0x2, 0x2, 0x3, 0xf86, 
       0xf96, 0x3, 0x2, 0x2, 0x2, 0xf87, 0xf88, 0x7, 0xa, 0x2, 0x2, 0xf88, 
       0xf89, 0x5, 0x38, 0x1d, 0x2, 0xf89, 0xf8a, 0x7, 0xb, 0x2, 0x2, 0xf8a, 
       0xf8f, 0x5, 0x38, 0x1d, 0x2, 0xf8b, 0xf8c, 0x7, 0x4d, 0x2, 0x2, 0xf8c, 
       0xf8e, 0x5, 0x38, 0x1d, 0x2, 0xf8d, 0xf8b, 0x3, 0x2, 0x2, 0x2, 0xf8e, 
       0xf91, 0x3, 0x2, 0x2, 0x2, 0xf8f, 0xf8d, 0x3, 0x2, 0x2, 0x2, 0xf8f, 
       0xf90, 0x3, 0x2, 0x2, 0x2, 0xf90, 0xf92, 0x3, 0x2, 0x2, 0x2, 0xf91, 
       0xf8f, 0x3, 0x2, 0x2, 0x2, 0xf92, 0xf93, 0x7, 0x4c, 0x2, 0x2, 0xf93, 
       0xf94, 0x7, 0x2, 0x2, 0x3, 0xf94, 0xf96, 0x3, 0x2, 0x2, 0x2, 0xf95, 
       0xf57, 0x3, 0x2, 0x2, 0x2, 0xf95, 0xf62, 0x3, 0x2, 0x2, 0x2, 0xf95, 
       0xf72, 0x3, 0x2, 0x2, 0x2, 0xf95, 0xf82, 0x3, 0x2, 0x2, 0x2, 0xf95, 
       0xf87, 0x3, 0x2, 0x2, 0x2, 0xf96, 0x243, 0x3, 0x2, 0x2, 0x2, 0xf97, 
       0xf98, 0x7, 0xc, 0x2, 0x2, 0xf98, 0xf9c, 0x7, 0x2, 0x2, 0x3, 0xf99, 
       0xf9a, 0x7, 0x32, 0x2, 0x2, 0xf9a, 0xf9c, 0x7, 0x2, 0x2, 0x3, 0xf9b, 
       0xf97, 0x3, 0x2, 0x2, 0x2, 0xf9b, 0xf99, 0x3, 0x2, 0x2, 0x2, 0xf9c, 
       0x245, 0x3, 0x2, 0x2, 0x2, 0xf9d, 0xf9e, 0x5, 0x60, 0x31, 0x2, 0xf9e, 
       0xf9f, 0x7, 0x2, 0x2, 0x3, 0xf9f, 0xfa4, 0x3, 0x2, 0x2, 0x2, 0xfa0, 
       0xfa1, 0x5, 0xc6, 0x64, 0x2, 0xfa1, 0xfa2, 0x7, 0x2, 0x2, 0x3, 0xfa2, 
       0xfa4, 0x3, 0x2, 0x2, 0x2, 0xfa3, 0xf9d, 0x3, 0x2, 0x2, 0x2, 0xfa3, 
       0xfa0, 0x3, 0x2, 0x2, 0x2, 0xfa4, 0x247, 0x3, 0x2, 0x2, 0x2, 0xfa5, 
       0xfa7, 0x5, 0x62, 0x32, 0x2, 0xfa6, 0xfa5, 0x3, 0x2, 0x2, 0x2, 0xfa7, 
       0xfaa, 0x3, 0x2, 0x2, 0x2, 0xfa8, 0xfa6, 0x3, 0x2, 0x2, 0x2, 0xfa8, 
       0xfa9, 0x3, 0x2, 0x2, 0x2, 0xfa9, 0xfab, 0x3, 0x2, 0x2, 0x2, 0xfaa, 
       0xfa8, 0x3, 0x2, 0x2, 0x2, 0xfab, 0xfac, 0x7, 0x15, 0x2, 0x2, 0xfac, 
       0xfae, 0x5, 0x3d2, 0x1ea, 0x2, 0xfad, 0xfaf, 0x5, 0x64, 0x33, 0x2, 
       0xfae, 0xfad, 0x3, 0x2, 0x2, 0x2, 0xfae, 0xfaf, 0x3, 0x2, 0x2, 0x2, 
       0xfaf, 0xfb1, 0x3, 0x2, 0x2, 0x2, 0xfb0, 0xfb2, 0x5, 0x68, 0x35, 
       0x2, 0xfb1, 0xfb0, 0x3, 0x2, 0x2, 0x2, 0xfb1, 0xfb2, 0x3, 0x2, 0x2, 
       0x2, 0xfb2, 0xfb4, 0x3, 0x2, 0x2, 0x2, 0xfb3, 0xfb5, 0x5, 0x6a, 0x36, 
       0x2, 0xfb4, 0xfb3, 0x3, 0x2, 0x2, 0x2, 0xfb4, 0xfb5, 0x3, 0x2, 0x2, 
       0x2, 0xfb5, 0xfb6, 0x3, 0x2, 0x2, 0x2, 0xfb6, 0xfb7, 0x5, 0x6e, 0x38, 
       0x2, 0xfb7, 0xfb8, 0x7, 0x2, 0x2, 0x3, 0xfb8, 0x249, 0x3, 0x2, 0x2, 
       0x2, 0xfb9, 0xfba, 0x5, 0xf2, 0x7a, 0x2, 0xfba, 0xfbb, 0x7, 0x2, 
       0x2, 0x3, 0xfbb, 0xfcb, 0x3, 0x2, 0x2, 0x2, 0xfbc, 0xfbd, 0x7, 0x2f, 
       0x2, 0x2, 0xfbd, 0xfcb, 0x7, 0x2, 0x2, 0x3, 0xfbe, 0xfbf, 0x7, 0x2e, 
       0x2, 0x2, 0xfbf, 0xfcb, 0x7, 0x2, 0x2, 0x3, 0xfc0, 0xfc1, 0x7, 0x2d, 
       0x2, 0x2, 0xfc1, 0xfcb, 0x7, 0x2, 0x2, 0x3, 0xfc2, 0xfc3, 0x7, 0xd, 
       0x2, 0x2, 0xfc3, 0xfcb, 0x7, 0x2, 0x2, 0x3, 0xfc4, 0xfc5, 0x7, 0x32, 
       0x2, 0x2, 0xfc5, 0xfcb, 0x7, 0x2, 0x2, 0x3, 0xfc6, 0xfc7, 0x7, 0x1e, 
       0x2, 0x2, 0xfc7, 0xfcb, 0x7, 0x2, 0x2, 0x3, 0xfc8, 0xfc9, 0x7, 0x33, 
       0x2, 0x2, 0xfc9, 0xfcb, 0x7, 0x2, 0x2, 0x3, 0xfca, 0xfb9, 0x3, 0x2, 
       0x2, 0x2, 0xfca, 0xfbc, 0x3, 0x2, 0x2, 0x2, 0xfca, 0xfbe, 0x3, 0x2, 
       0x2, 0x2, 0xfca, 0xfc0, 0x3, 0x2, 0x2, 0x2, 0xfca, 0xfc2, 0x3, 0x2, 
       0x2, 0x2, 0xfca, 0xfc4, 0x3, 0x2, 0x2, 0x2, 0xfca, 0xfc6, 0x3, 0x2, 
       0x2, 0x2, 0xfca, 0xfc8, 0x3, 0x2, 0x2, 0x2, 0xfcb, 0x24b, 0x3, 0x2, 
       0x2, 0x2, 0xfcc, 0xfcd, 0x7, 0x54, 0x2, 0x2, 0xfcd, 0xfce, 0x5, 0x66, 
       0x34, 0x2, 0xfce, 0xfcf, 0x7, 0x53, 0x2, 0x2, 0xfcf, 0xfd0, 0x7, 
       0x2, 0x2, 0x3, 0xfd0, 0x24d, 0x3, 0x2, 0x2, 0x2, 0xfd1, 0xfd6, 0x5, 
       0x22, 0x12, 0x2, 0xfd2, 0xfd3, 0x7, 0x4d, 0x2, 0x2, 0xfd3, 0xfd5, 
       0x5, 0x22, 0x12, 0x2, 0xfd4, 0xfd2, 0x3, 0x2, 0x2, 0x2, 0xfd5, 0xfd8, 
       0x3, 0x2, 0x2, 0x2, 0xfd6, 0xfd4, 0x3, 0x2, 0x2, 0x2, 0xfd6, 0xfd7, 
       0x3, 0x2, 0x2, 0x2, 0xfd7, 0xfd9, 0x3, 0x2, 0x2, 0x2, 0xfd8, 0xfd6, 
       0x3, 0x2, 0x2, 0x2, 0xfd9, 0xfda, 0x7, 0x2, 0x2, 0x3, 0xfda, 0x24f, 
       0x3, 0x2, 0x2, 0x2, 0xfdb, 0xfdc, 0x7, 0x1d, 0x2, 0x2, 0xfdc, 0xfdd, 
       0x5, 0x10, 0x9, 0x2, 0xfdd, 0xfde, 0x7, 0x2, 0x2, 0x3, 0xfde, 0x251, 
       0x3, 0x2, 0x2, 0x2, 0xfdf, 0xfe0, 0x7, 0x24, 0x2, 0x2, 0xfe0, 0xfe1, 
       0x5, 0x6c, 0x37, 0x2, 0xfe1, 0xfe2, 0x7, 0x2, 0x2, 0x3, 0xfe2, 0x253, 
       0x3, 0x2, 0x2, 0x2, 0xfe3, 0xfe8, 0x5, 0x16, 0xc, 0x2, 0xfe4, 0xfe5, 
       0x7, 0x4d, 0x2, 0x2, 0xfe5, 0xfe7, 0x5, 0x16, 0xc, 0x2, 0xfe6, 0xfe4, 
       0x3, 0x2, 0x2, 0x2, 0xfe7, 0xfea, 0x3, 0x2, 0x2, 0x2, 0xfe8, 0xfe6, 
       0x3, 0x2, 0x2, 0x2, 0xfe8, 0xfe9, 0x3, 0x2, 0x2, 0x2, 0xfe9, 0xfeb, 
       0x3, 0x2, 0x2, 0x2, 0xfea, 0xfe8, 0x3, 0x2, 0x2, 0x2, 0xfeb, 0xfec, 
       0x7, 0x2, 0x2, 0x3, 0xfec, 0x255, 0x3, 0x2, 0x2, 0x2, 0xfed, 0xff1, 
       0x7, 0x48, 0x2, 0x2, 0xfee, 0xff0, 0x5, 0x70, 0x39, 0x2, 0xfef, 0xfee, 
       0x3, 0x2, 0x2, 0x2, 0xff0, 0xff3, 0x3, 0x2, 0x2, 0x2, 0xff1, 0xfef, 
       0x3, 0x2, 0x2, 0x2, 0xff1, 0xff2, 0x3, 0x2, 0x2, 0x2, 0xff2, 0xff4, 
       0x3, 0x2, 0x2, 0x2, 0xff3, 0xff1, 0x3, 0x2, 0x2, 0x2, 0xff4, 0xff5, 
       0x7, 0x49, 0x2, 0x2, 0xff5, 0xff6, 0x7, 0x2, 0x2, 0x3, 0xff6, 0x257, 
       0x3, 0x2, 0x2, 0x2, 0xff7, 0xff8, 0x5, 0x72, 0x3a, 0x2, 0xff8, 0xff9, 
       0x7, 0x2, 0x2, 0x3, 0xff9, 0x1004, 0x3, 0x2, 0x2, 0x2, 0xffa, 0xffb, 
       0x5, 0xb6, 0x5c, 0x2, 0xffb, 0xffc, 0x7, 0x2, 0x2, 0x3, 0xffc, 0x1004, 
       0x3, 0x2, 0x2, 0x2, 0xffd, 0xffe, 0x5, 0xb8, 0x5d, 0x2, 0xffe, 0xfff, 
       0x7, 0x2, 0x2, 0x3, 0xfff, 0x1004, 0x3, 0x2, 0x2, 0x2, 0x1000, 0x1001, 
       0x5, 0xba, 0x5e, 0x2, 0x1001, 0x1002, 0x7, 0x2, 0x2, 0x3, 0x1002, 
       0x1004, 0x3, 0x2, 0x2, 0x2, 0x1003, 0xff7, 0x3, 0x2, 0x2, 0x2, 0x1003, 
       0xffa, 0x3, 0x2, 0x2, 0x2, 0x1003, 0xffd, 0x3, 0x2, 0x2, 0x2, 0x1003, 
       0x1000, 0x3, 0x2, 0x2, 0x2, 0x1004, 0x259, 0x3, 0x2, 0x2, 0x2, 0x1005, 
       0x1006, 0x5, 0x74, 0x3b, 0x2, 0x1006, 0x1007, 0x7, 0x2, 0x2, 0x3, 
       0x1007, 0x1014, 0x3, 0x2, 0x2, 0x2, 0x1008, 0x1009, 0x5, 0x98, 0x4d, 
       0x2, 0x1009, 0x100a, 0x7, 0x2, 0x2, 0x3, 0x100a, 0x1014, 0x3, 0x2, 
       0x2, 0x2, 0x100b, 0x100c, 0x5, 0x5e, 0x30, 0x2, 0x100c, 0x100d, 0x7, 
       0x2, 0x2, 0x3, 0x100d, 0x1014, 0x3, 0x2, 0x2, 0x2, 0x100e, 0x100f, 
       0x5, 0xd2, 0x6a, 0x2, 0x100f, 0x1010, 0x7, 0x2, 0x2, 0x3, 0x1010, 
       0x1014, 0x3, 0x2, 0x2, 0x2, 0x1011, 0x1012, 0x7, 0x4c, 0x2, 0x2, 
       0x1012, 0x1014, 0x7, 0x2, 0x2, 0x3, 0x1013, 0x1005, 0x3, 0x2, 0x2, 
       0x2, 0x1013, 0x1008, 0x3, 0x2, 0x2, 0x2, 0x1013, 0x100b, 0x3, 0x2, 
       0x2, 0x2, 0x1013, 0x100e, 0x3, 0x2, 0x2, 0x2, 0x1013, 0x1011, 0x3, 
       0x2, 0x2, 0x2, 0x1014, 0x25b, 0x3, 0x2, 0x2, 0x2, 0x1015, 0x1017, 
       0x5, 0x76, 0x3c, 0x2, 0x1016, 0x1015, 0x3, 0x2, 0x2, 0x2, 0x1017, 
       0x101a, 0x3, 0x2, 0x2, 0x2, 0x1018, 0x1016, 0x3, 0x2, 0x2, 0x2, 0x1018, 
       0x1019, 0x3, 0x2, 0x2, 0x2, 0x1019, 0x101b, 0x3, 0x2, 0x2, 0x2, 0x101a, 
       0x1018, 0x3, 0x2, 0x2, 0x2, 0x101b, 0x101c, 0x5, 0x80, 0x41, 0x2, 
       0x101c, 0x101d, 0x5, 0x78, 0x3d, 0x2, 0x101d, 0x101e, 0x7, 0x4c, 
       0x2, 0x2, 0x101e, 0x101f, 0x7, 0x2, 0x2, 0x3, 0x101f, 0x25d, 0x3, 
       0x2, 0x2, 0x2, 0x1020, 0x1021, 0x5, 0xf2, 0x7a, 0x2, 0x1021, 0x1022, 
       0x7, 0x2, 0x2, 0x3, 0x1022, 0x1032, 0x3, 0x2, 0x2, 0x2, 0x1023, 0x1024, 
       0x7, 0x2f, 0x2, 0x2, 0x1024, 0x1032, 0x7, 0x2, 0x2, 0x3, 0x1025, 
       0x1026, 0x7, 0x2e, 0x2, 0x2, 0x1026, 0x1032, 0x7, 0x2, 0x2, 0x3, 
       0x1027, 0x1028, 0x7, 0x2d, 0x2, 0x2, 0x1028, 0x1032, 0x7, 0x2, 0x2, 
       0x3, 0x1029, 0x102a, 0x7, 0x32, 0x2, 0x2, 0x102a, 0x1032, 0x7, 0x2, 
       0x2, 0x3, 0x102b, 0x102c, 0x7, 0x1e, 0x2, 0x2, 0x102c, 0x1032, 0x7, 
       0x2, 0x2, 0x3, 0x102d, 0x102e, 0x7, 0x3a, 0x2, 0x2, 0x102e, 0x1032, 
       0x7, 0x2, 0x2, 0x3, 0x102f, 0x1030, 0x7, 0x3d, 0x2, 0x2, 0x1030, 
       0x1032, 0x7, 0x2, 0x2, 0x3, 0x1031, 0x1020, 0x3, 0x2, 0x2, 0x2, 0x1031, 
       0x1023, 0x3, 0x2, 0x2, 0x2, 0x1031, 0x1025, 0x3, 0x2, 0x2, 0x2, 0x1031, 
       0x1027, 0x3, 0x2, 0x2, 0x2, 0x1031, 0x1029, 0x3, 0x2, 0x2, 0x2, 0x1031, 
       0x102b, 0x3, 0x2, 0x2, 0x2, 0x1031, 0x102d, 0x3, 0x2, 0x2, 0x2, 0x1031, 
       0x102f, 0x3, 0x2, 0x2, 0x2, 0x1032, 0x25f, 0x3, 0x2, 0x2, 0x2, 0x1033, 
       0x1038, 0x5, 0x7a, 0x3e, 0x2, 0x1034, 0x1035, 0x7, 0x4d, 0x2, 0x2, 
       0x1035, 0x1037, 0x5, 0x7a, 0x3e, 0x2, 0x1036, 0x1034, 0x3, 0x2, 0x2, 
       0x2, 0x1037, 0x103a, 0x3, 0x2, 0x2, 0x2, 0x1038, 0x1036, 0x3, 0x2, 
       0x2, 0x2, 0x1038, 0x1039, 0x3, 0x2, 0x2, 0x2, 0x1039, 0x103b, 0x3, 
       0x2, 0x2, 0x2, 0x103a, 0x1038, 0x3, 0x2, 0x2, 0x2, 0x103b, 0x103c, 
       0x7, 0x2, 0x2, 0x3, 0x103c, 0x261, 0x3, 0x2, 0x2, 0x2, 0x103d, 0x1040, 
       0x5, 0x7c, 0x3f, 0x2, 0x103e, 0x103f, 0x7, 0x52, 0x2, 0x2, 0x103f, 
       0x1041, 0x5, 0x7e, 0x40, 0x2, 0x1040, 0x103e, 0x3, 0x2, 0x2, 0x2, 
       0x1040, 0x1041, 0x3, 0x2, 0x2, 0x2, 0x1041, 0x1042, 0x3, 0x2, 0x2, 
       0x2, 0x1042, 0x1043, 0x7, 0x2, 0x2, 0x3, 0x1043, 0x263, 0x3, 0x2, 
       0x2, 0x2, 0x1044, 0x1046, 0x5, 0x3d2, 0x1ea, 0x2, 0x1045, 0x1047, 
       0x5, 0x20, 0x11, 0x2, 0x1046, 0x1045, 0x3, 0x2, 0x2, 0x2, 0x1046, 
       0x1047, 0x3, 0x2, 0x2, 0x2, 0x1047, 0x1048, 0x3, 0x2, 0x2, 0x2, 0x1048, 
       0x1049, 0x7, 0x2, 0x2, 0x3, 0x1049, 0x265, 0x3, 0x2, 0x2, 0x2, 0x104a, 
       0x104b, 0x5, 0x1ae, 0xd8, 0x2, 0x104b, 0x104c, 0x7, 0x2, 0x2, 0x3, 
       0x104c, 0x1051, 0x3, 0x2, 0x2, 0x2, 0x104d, 0x104e, 0x5, 0x104, 0x83, 
       0x2, 0x104e, 0x104f, 0x7, 0x2, 0x2, 0x3, 0x104f, 0x1051, 0x3, 0x2, 
       0x2, 0x2, 0x1050, 0x104a, 0x3, 0x2, 0x2, 0x2, 0x1050, 0x104d, 0x3, 
       0x2, 0x2, 0x2, 0x1051, 0x267, 0x3, 0x2, 0x2, 0x2, 0x1052, 0x1053, 
       0x5, 0x82, 0x42, 0x2, 0x1053, 0x1054, 0x7, 0x2, 0x2, 0x3, 0x1054, 
       0x1059, 0x3, 0x2, 0x2, 0x2, 0x1055, 0x1056, 0x5, 0x84, 0x43, 0x2, 
       0x1056, 0x1057, 0x7, 0x2, 0x2, 0x3, 0x1057, 0x1059, 0x3, 0x2, 0x2, 
       0x2, 0x1058, 0x1052, 0x3, 0x2, 0x2, 0x2, 0x1058, 0x1055, 0x3, 0x2, 
       0x2, 0x2, 0x1059, 0x269, 0x3, 0x2, 0x2, 0x2, 0x105a, 0x105b, 0x5, 
       0x6, 0x4, 0x2, 0x105b, 0x105c, 0x7, 0x2, 0x2, 0x3, 0x105c, 0x1060, 
       0x3, 0x2, 0x2, 0x2, 0x105d, 0x105e, 0x7, 0xf, 0x2, 0x2, 0x105e, 0x1060, 
       0x7, 0x2, 0x2, 0x3, 0x105f, 0x105a, 0x3, 0x2, 0x2, 0x2, 0x105f, 0x105d, 
       0x3, 0x2, 0x2, 0x2, 0x1060, 0x26b, 0x3, 0x2, 0x2, 0x2, 0x1061, 0x1062, 
       0x5, 0x86, 0x44, 0x2, 0x1062, 0x1063, 0x7, 0x2, 0x2, 0x3, 0x1063, 
       0x106b, 0x3, 0x2, 0x2, 0x2, 0x1064, 0x1065, 0x5, 0x94, 0x4b, 0x2, 
       0x1065, 0x1066, 0x7, 0x2, 0x2, 0x3, 0x1066, 0x106b, 0x3, 0x2, 0x2, 
       0x2, 0x1067, 0x1068, 0x5, 0x96, 0x4c, 0x2, 0x1068, 0x1069, 0x7, 0x2, 
       0x2, 0x3, 0x1069, 0x106b, 0x3, 0x2, 0x2, 0x2, 0x106a, 0x1061, 0x3, 
       0x2, 0x2, 0x2, 0x106a, 0x1064, 0x3, 0x2, 0x2, 0x2, 0x106a, 0x1067, 
       0x3, 0x2, 0x2, 0x2, 0x106b, 0x26d, 0x3, 0x2, 0x2, 0x2, 0x106c, 0x106d, 
       0x5, 0x8c, 0x47, 0x2, 0x106d, 0x106e, 0x7, 0x2, 0x2, 0x3, 0x106e, 
       0x1073, 0x3, 0x2, 0x2, 0x2, 0x106f, 0x1070, 0x5, 0x92, 0x4a, 0x2, 
       0x1070, 0x1071, 0x7, 0x2, 0x2, 0x3, 0x1071, 0x1073, 0x3, 0x2, 0x2, 
       0x2, 0x1072, 0x106c, 0x3, 0x2, 0x2, 0x2, 0x1072, 0x106f, 0x3, 0x2, 
       0x2, 0x2, 0x1073, 0x107c, 0x3, 0x2, 0x2, 0x2, 0x1074, 0x1075, 0x5, 
       0x8a, 0x46, 0x2, 0x1075, 0x1076, 0x7, 0x2, 0x2, 0x3, 0x1076, 0x107b, 
       0x3, 0x2, 0x2, 0x2, 0x1077, 0x1078, 0x5, 0x90, 0x49, 0x2, 0x1078, 
       0x1079, 0x7, 0x2, 0x2, 0x3, 0x1079, 0x107b, 0x3, 0x2, 0x2, 0x2, 0x107a, 
       0x1074, 0x3, 0x2, 0x2, 0x2, 0x107a, 0x1077, 0x3, 0x2, 0x2, 0x2, 0x107b, 
       0x107e, 0x3, 0x2, 0x2, 0x2, 0x107c, 0x107a, 0x3, 0x2, 0x2, 0x2, 0x107c, 
       0x107d, 0x3, 0x2, 0x2, 0x2, 0x107d, 0x26f, 0x3, 0x2, 0x2, 0x2, 0x107e, 
       0x107c, 0x3, 0x2, 0x2, 0x2, 0x107f, 0x1081, 0x5, 0x3d2, 0x1ea, 0x2, 
       0x1080, 0x1082, 0x5, 0x2a, 0x16, 0x2, 0x1081, 0x1080, 0x3, 0x2, 0x2, 
       0x2, 0x1081, 0x1082, 0x3, 0x2, 0x2, 0x2, 0x1082, 0x1083, 0x3, 0x2, 
       0x2, 0x2, 0x1083, 0x1084, 0x7, 0x2, 0x2, 0x3, 0x1084, 0x1094, 0x3, 
       0x2, 0x2, 0x2, 0x1085, 0x1086, 0x5, 0x86, 0x44, 0x2, 0x1086, 0x108a, 
       0x7, 0x4e, 0x2, 0x2, 0x1087, 0x1089, 0x5, 0xf2, 0x7a, 0x2, 0x1088, 
       0x1087, 0x3, 0x2, 0x2, 0x2, 0x1089, 0x108c, 0x3, 0x2, 0x2, 0x2, 0x108a, 
       0x1088, 0x3, 0x2, 0x2, 0x2, 0x108a, 0x108b, 0x3, 0x2, 0x2, 0x2, 0x108b, 
       0x108d, 0x3, 0x2, 0x2, 0x2, 0x108c, 0x108a, 0x3, 0x2, 0x2, 0x2, 0x108d, 
       0x108f, 0x5, 0x3d2, 0x1ea, 0x2, 0x108e, 0x1090, 0x5, 0x2a, 0x16, 
       0x2, 0x108f, 0x108e, 0x3, 0x2, 0x2, 0x2, 0x108f, 0x1090, 0x3, 0x2, 
       0x2, 0x2, 0x1090, 0x1091, 0x3, 0x2, 0x2, 0x2, 0x1091, 0x1092, 0x7, 
       0x2, 0x2, 0x3, 0x1092, 0x1094, 0x3, 0x2, 0x2, 0x2, 0x1093, 0x107f, 
       0x3, 0x2, 0x2, 0x2, 0x1093, 0x1085, 0x3, 0x2, 0x2, 0x2, 0x1094, 0x271, 
       0x3, 0x2, 0x2, 0x2, 0x1095, 0x1099, 0x7, 0x4e, 0x2, 0x2, 0x1096, 
       0x1098, 0x5, 0xf2, 0x7a, 0x2, 0x1097, 0x1096, 0x3, 0x2, 0x2, 0x2, 
       0x1098, 0x109b, 0x3, 0x2, 0x2, 0x2, 0x1099, 0x1097, 0x3, 0x2, 0x2, 
       0x2, 0x1099, 0x109a, 0x3, 0x2, 0x2, 0x2, 0x109a, 0x109c, 0x3, 0x2, 
       0x2, 0x2, 0x109b, 0x1099, 0x3, 0x2, 0x2, 0x2, 0x109c, 0x109e, 0x5, 
       0x3d2, 0x1ea, 0x2, 0x109d, 0x109f, 0x5, 0x2a, 0x16, 0x2, 0x109e, 
       0x109d, 0x3, 0x2, 0x2, 0x2, 0x109e, 0x109f, 0x3, 0x2, 0x2, 0x2, 0x109f, 
       0x10a0, 0x3, 0x2, 0x2, 0x2, 0x10a0, 0x10a1, 0x7, 0x2, 0x2, 0x3, 0x10a1, 
       0x273, 0x3, 0x2, 0x2, 0x2, 0x10a2, 0x10a4, 0x5, 0x3d2, 0x1ea, 0x2, 
       0x10a3, 0x10a5, 0x5, 0x2a, 0x16, 0x2, 0x10a4, 0x10a3, 0x3, 0x2, 0x2, 
       0x2, 0x10a4, 0x10a5, 0x3, 0x2, 0x2, 0x2, 0x10a5, 0x10a6, 0x3, 0x2, 
       0x2, 0x2, 0x10a6, 0x10a7, 0x7, 0x2, 0x2, 0x3, 0x10a7, 0x275, 0x3, 
       0x2, 0x2, 0x2, 0x10a8, 0x10a9, 0x5, 0x88, 0x45, 0x2, 0x10a9, 0x10aa, 
       0x7, 0x2, 0x2, 0x3, 0x10aa, 0x277, 0x3, 0x2, 0x2, 0x2, 0x10ab, 0x10ac, 
       0x5, 0x8a, 0x46, 0x2, 0x10ac, 0x10ad, 0x7, 0x2, 0x2, 0x3, 0x10ad, 
       0x279, 0x3, 0x2, 0x2, 0x2, 0x10ae, 0x10af, 0x5, 0x8c, 0x47, 0x2, 
       0x10af, 0x10b0, 0x7, 0x2, 0x2, 0x3, 0x10b0, 0x27b, 0x3, 0x2, 0x2, 
       0x2, 0x10b1, 0x10b2, 0x5, 0x3d2, 0x1ea, 0x2, 0x10b2, 0x10b3, 0x7, 
       0x2, 0x2, 0x3, 0x10b3, 0x27d, 0x3, 0x2, 0x2, 0x2, 0x10b4, 0x10b5, 
       0x5, 0x82, 0x42, 0x2, 0x10b5, 0x10b6, 0x5, 0x20, 0x11, 0x2, 0x10b6, 
       0x10b7, 0x7, 0x2, 0x2, 0x3, 0x10b7, 0x10c1, 0x3, 0x2, 0x2, 0x2, 0x10b8, 
       0x10b9, 0x5, 0x86, 0x44, 0x2, 0x10b9, 0x10ba, 0x5, 0x20, 0x11, 0x2, 
       0x10ba, 0x10bb, 0x7, 0x2, 0x2, 0x3, 0x10bb, 0x10c1, 0x3, 0x2, 0x2, 
       0x2, 0x10bc, 0x10bd, 0x5, 0x94, 0x4b, 0x2, 0x10bd, 0x10be, 0x5, 0x20, 
       0x11, 0x2, 0x10be, 0x10bf, 0x7, 0x2, 0x2, 0x3, 0x10bf, 0x10c1, 0x3, 
       0x2, 0x2, 0x2, 0x10c0, 0x10b4, 0x3, 0x2, 0x2, 0x2, 0x10c0, 0x10b8, 
       0x3, 0x2, 0x2, 0x2, 0x10c0, 0x10bc, 0x3, 0x2, 0x2, 0x2, 0x10c1, 0x27f, 
       0x3, 0x2, 0x2, 0x2, 0x10c2, 0x10c4, 0x5, 0x9a, 0x4e, 0x2, 0x10c3, 
       0x10c2, 0x3, 0x2, 0x2, 0x2, 0x10c4, 0x10c7, 0x3, 0x2, 0x2, 0x2, 0x10c5, 
       0x10c3, 0x3, 0x2, 0x2, 0x2, 0x10c5, 0x10c6, 0x3, 0x2, 0x2, 0x2, 0x10c6, 
       0x10c8, 0x3, 0x2, 0x2, 0x2, 0x10c7, 0x10c5, 0x3, 0x2, 0x2, 0x2, 0x10c8, 
       0x10c9, 0x5, 0x9c, 0x4f, 0x2, 0x10c9, 0x10ca, 0x5, 0xb4, 0x5b, 0x2, 
       0x10ca, 0x10cb, 0x7, 0x2, 0x2, 0x3, 0x10cb, 0x281, 0x3, 0x2, 0x2, 
       0x2, 0x10cc, 0x10cd, 0x5, 0xf2, 0x7a, 0x2, 0x10cd, 0x10ce, 0x7, 0x2, 
       0x2, 0x3, 0x10ce, 0x10e2, 0x3, 0x2, 0x2, 0x2, 0x10cf, 0x10d0, 0x7, 
       0x2f, 0x2, 0x2, 0x10d0, 0x10e2, 0x7, 0x2, 0x2, 0x3, 0x10d1, 0x10d2, 
       0x7, 0x2e, 0x2, 0x2, 0x10d2, 0x10e2, 0x7, 0x2, 0x2, 0x3, 0x10d3, 
       0x10d4, 0x7, 0x2d, 0x2, 0x2, 0x10d4, 0x10e2, 0x7, 0x2, 0x2, 0x3, 
       0x10d5, 0x10d6, 0x7, 0xd, 0x2, 0x2, 0x10d6, 0x10e2, 0x7, 0x2, 0x2, 
       0x3, 0x10d7, 0x10d8, 0x7, 0x32, 0x2, 0x2, 0x10d8, 0x10e2, 0x7, 0x2, 
       0x2, 0x3, 0x10d9, 0x10da, 0x7, 0x1e, 0x2, 0x2, 0x10da, 0x10e2, 0x7, 
       0x2, 0x2, 0x3, 0x10db, 0x10dc, 0x7, 0x36, 0x2, 0x2, 0x10dc, 0x10e2, 
       0x7, 0x2, 0x2, 0x3, 0x10dd, 0x10de, 0x7, 0x2a, 0x2, 0x2, 0x10de, 
       0x10e2, 0x7, 0x2, 0x2, 0x3, 0x10df, 0x10e0, 0x7, 0x33, 0x2, 0x2, 
       0x10e0, 0x10e2, 0x7, 0x2, 0x2, 0x3, 0x10e1, 0x10cc, 0x3, 0x2, 0x2, 
       0x2, 0x10e1, 0x10cf, 0x3, 0x2, 0x2, 0x2, 0x10e1, 0x10d1, 0x3, 0x2, 
       0x2, 0x2, 0x10e1, 0x10d3, 0x3, 0x2, 0x2, 0x2, 0x10e1, 0x10d5, 0x3, 
       0x2, 0x2, 0x2, 0x10e1, 0x10d7, 0x3, 0x2, 0x2, 0x2, 0x10e1, 0x10d9, 
       0x3, 0x2, 0x2, 0x2, 0x10e1, 0x10db, 0x3, 0x2, 0x2, 0x2, 0x10e1, 0x10dd, 
       0x3, 0x2, 0x2, 0x2, 0x10e1, 0x10df, 0x3, 0x2, 0x2, 0x2, 0x10e2, 0x283, 
       0x3, 0x2, 0x2, 0x2, 0x10e3, 0x10e4, 0x5, 0x9e, 0x50, 0x2, 0x10e4, 
       0x10e6, 0x5, 0xa0, 0x51, 0x2, 0x10e5, 0x10e7, 0x5, 0xae, 0x58, 0x2, 
       0x10e6, 0x10e5, 0x3, 0x2, 0x2, 0x2, 0x10e6, 0x10e7, 0x3, 0x2, 0x2, 
       0x2, 0x10e7, 0x10e8, 0x3, 0x2, 0x2, 0x2, 0x10e8, 0x10e9, 0x7, 0x2, 
       0x2, 0x3, 0x10e9, 0x10f9, 0x3, 0x2, 0x2, 0x2, 0x10ea, 0x10ee, 0x5, 
       0x64, 0x33, 0x2, 0x10eb, 0x10ed, 0x5, 0xf2, 0x7a, 0x2, 0x10ec, 0x10eb, 
       0x3, 0x2, 0x2, 0x2, 0x10ed, 0x10f0, 0x3, 0x2, 0x2, 0x2, 0x10ee, 0x10ec, 
       0x3, 0x2, 0x2, 0x2, 0x10ee, 0x10ef, 0x3, 0x2, 0x2, 0x2, 0x10ef, 0x10f1, 
       0x3, 0x2, 0x2, 0x2, 0x10f0, 0x10ee, 0x3, 0x2, 0x2, 0x2, 0x10f1, 0x10f2, 
       0x5, 0x9e, 0x50, 0x2, 0x10f2, 0x10f4, 0x5, 0xa0, 0x51, 0x2, 0x10f3, 
       0x10f5, 0x5, 0xae, 0x58, 0x2, 0x10f4, 0x10f3, 0x3, 0x2, 0x2, 0x2, 
       0x10f4, 0x10f5, 0x3, 0x2, 0x2, 0x2, 0x10f5, 0x10f6, 0x3, 0x2, 0x2, 
       0x2, 0x10f6, 0x10f7, 0x7, 0x2, 0x2, 0x3, 0x10f7, 0x10f9, 0x3, 0x2, 
       0x2, 0x2, 0x10f8, 0x10e3, 0x3, 0x2, 0x2, 0x2, 0x10f8, 0x10ea, 0x3, 
       0x2, 0x2, 0x2, 0x10f9, 0x285, 0x3, 0x2, 0x2, 0x2, 0x10fa, 0x10fb, 
       0x5, 0x80, 0x41, 0x2, 0x10fb, 0x10fc, 0x7, 0x2, 0x2, 0x3, 0x10fc, 
       0x1100, 0x3, 0x2, 0x2, 0x2, 0x10fd, 0x10fe, 0x7, 0x3c, 0x2, 0x2, 
       0x10fe, 0x1100, 0x7, 0x2, 0x2, 0x3, 0x10ff, 0x10fa, 0x3, 0x2, 0x2, 
       0x2, 0x10ff, 0x10fd, 0x3, 0x2, 0x2, 0x2, 0x1100, 0x287, 0x3, 0x2, 
       0x2, 0x2, 0x1101, 0x1102, 0x5, 0x3d2, 0x1ea, 0x2, 0x1102, 0x1104, 
       0x7, 0x46, 0x2, 0x2, 0x1103, 0x1105, 0x5, 0xa2, 0x52, 0x2, 0x1104, 
       0x1103, 0x3, 0x2, 0x2, 0x2, 0x1104, 0x1105, 0x3, 0x2, 0x2, 0x2, 0x1105, 
       0x1106, 0x3, 0x2, 0x2, 0x2, 0x1106, 0x1108, 0x7, 0x47, 0x2, 0x2, 
       0x1107, 0x1109, 0x5, 0x20, 0x11, 0x2, 0x1108, 0x1107, 0x3, 0x2, 0x2, 
       0x2, 0x1108, 0x1109, 0x3, 0x2, 0x2, 0x2, 0x1109, 0x110a, 0x3, 0x2, 
       0x2, 0x2, 0x110a, 0x110b, 0x7, 0x2, 0x2, 0x3, 0x110b, 0x289, 0x3, 
       0x2, 0x2, 0x2, 0x110c, 0x110d, 0x5, 0xa4, 0x53, 0x2, 0x110d, 0x110e, 
       0x7, 0x4d, 0x2, 0x2, 0x110e, 0x110f, 0x5, 0xaa, 0x56, 0x2, 0x110f, 
       0x1110, 0x7, 0x2, 0x2, 0x3, 0x1110, 0x1118, 0x3, 0x2, 0x2, 0x2, 0x1111, 
       0x1112, 0x5, 0xaa, 0x56, 0x2, 0x1112, 0x1113, 0x7, 0x2, 0x2, 0x3, 
       0x1113, 0x1118, 0x3, 0x2, 0x2, 0x2, 0x1114, 0x1115, 0x5, 0xac, 0x57, 
       0x2, 0x1115, 0x1116, 0x7, 0x2, 0x2, 0x3, 0x1116, 0x1118, 0x3, 0x2, 
       0x2, 0x2, 0x1117, 0x110c, 0x3, 0x2, 0x2, 0x2, 0x1117, 0x1111, 0x3, 
       0x2, 0x2, 0x2, 0x1117, 0x1114, 0x3, 0x2, 0x2, 0x2, 0x1118, 0x28b, 
       0x3, 0x2, 0x2, 0x2, 0x1119, 0x111e, 0x5, 0xa6, 0x54, 0x2, 0x111a, 
       0x111b, 0x7, 0x4d, 0x2, 0x2, 0x111b, 0x111d, 0x5, 0xa6, 0x54, 0x2, 
       0x111c, 0x111a, 0x3, 0x2, 0x2, 0x2, 0x111d, 0x1120, 0x3, 0x2, 0x2, 
       0x2, 0x111e, 0x111c, 0x3, 0x2, 0x2, 0x2, 0x111e, 0x111f, 0x3, 0x2, 
       0x2, 0x2, 0x111f, 0x1121, 0x3, 0x2, 0x2, 0x2, 0x1120, 0x111e, 0x3, 
       0x2, 0x2, 0x2, 0x1121, 0x1122, 0x7, 0x2, 0x2, 0x3, 0x1122, 0x112e, 
       0x3, 0x2, 0x2, 0x2, 0x1123, 0x1128, 0x5, 0xac, 0x57, 0x2, 0x1124, 
       0x1125, 0x7, 0x4d, 0x2, 0x2, 0x1125, 0x1127, 0x5, 0xa6, 0x54, 0x2, 
       0x1126, 0x1124, 0x3, 0x2, 0x2, 0x2, 0x1127, 0x112a, 0x3, 0x2, 0x2, 
       0x2, 0x1128, 0x1126, 0x3, 0x2, 0x2, 0x2, 0x1128, 0x1129, 0x3, 0x2, 
       0x2, 0x2, 0x1129, 0x112b, 0x3, 0x2, 0x2, 0x2, 0x112a, 0x1128, 0x3, 
       0x2, 0x2, 0x2, 0x112b, 0x112c, 0x7, 0x2, 0x2, 0x3, 0x112c, 0x112e, 
       0x3, 0x2, 0x2, 0x2, 0x112d, 0x1119, 0x3, 0x2, 0x2, 0x2, 0x112d, 0x1123, 
       0x3, 0x2, 0x2, 0x2, 0x112e, 0x28d, 0x3, 0x2, 0x2, 0x2, 0x112f, 0x1131, 
       0x5, 0xa8, 0x55, 0x2, 0x1130, 0x112f, 0x3, 0x2, 0x2, 0x2, 0x1131, 
       0x1134, 0x3, 0x2, 0x2, 0x2, 0x1132, 0x1130, 0x3, 0x2, 0x2, 0x2, 0x1132, 
       0x1133, 0x3, 0x2, 0x2, 0x2, 0x1133, 0x1135, 0x3, 0x2, 0x2, 0x2, 0x1134, 
       0x1132, 0x3, 0x2, 0x2, 0x2, 0x1135, 0x1136, 0x5, 0x80, 0x41, 0x2, 
       0x1136, 0x1137, 0x5, 0x7c, 0x3f, 0x2, 0x1137, 0x1138, 0x7, 0x2, 0x2, 
       0x3, 0x1138, 0x28f, 0x3, 0x2, 0x2, 0x2, 0x1139, 0x113a, 0x5, 0xf2, 
       0x7a, 0x2, 0x113a, 0x113b, 0x7, 0x2, 0x2, 0x3, 0x113b, 0x113f, 0x3, 
       0x2, 0x2, 0x2, 0x113c, 0x113d, 0x7, 0x1e, 0x2, 0x2, 0x113d, 0x113f, 
       0x7, 0x2, 0x2, 0x3, 0x113e, 0x1139, 0x3, 0x2, 0x2, 0x2, 0x113e, 0x113c, 
       0x3, 0x2, 0x2, 0x2, 0x113f, 0x291, 0x3, 0x2, 0x2, 0x2, 0x1140, 0x1142, 
       0x5, 0xa8, 0x55, 0x2, 0x1141, 0x1140, 0x3, 0x2, 0x2, 0x2, 0x1142, 
       0x1145, 0x3, 0x2, 0x2, 0x2, 0x1143, 0x1141, 0x3, 0x2, 0x2, 0x2, 0x1143, 
       0x1144, 0x3, 0x2, 0x2, 0x2, 0x1144, 0x1146, 0x3, 0x2, 0x2, 0x2, 0x1145, 
       0x1143, 0x3, 0x2, 0x2, 0x2, 0x1146, 0x114a, 0x5, 0x80, 0x41, 0x2, 
       0x1147, 0x1149, 0x5, 0xf2, 0x7a, 0x2, 0x1148, 0x1147, 0x3, 0x2, 0x2, 
       0x2, 0x1149, 0x114c, 0x3, 0x2, 0x2, 0x2, 0x114a, 0x1148, 0x3, 0x2, 
       0x2, 0x2, 0x114a, 0x114b, 0x3, 0x2, 0x2, 0x2, 0x114b, 0x114d, 0x3, 
       0x2, 0x2, 0x2, 0x114c, 0x114a, 0x3, 0x2, 0x2, 0x2, 0x114d, 0x114e, 
       0x7, 0x4f, 0x2, 0x2, 0x114e, 0x114f, 0x5, 0x7c, 0x3f, 0x2, 0x114f, 
       0x1150, 0x7, 0x2, 0x2, 0x3, 0x1150, 0x1155, 0x3, 0x2, 0x2, 0x2, 0x1151, 
       0x1152, 0x5, 0xa6, 0x54, 0x2, 0x1152, 0x1153, 0x7, 0x2, 0x2, 0x3, 
       0x1153, 0x1155, 0x3, 0x2, 0x2, 0x2, 0x1154, 0x1143, 0x3, 0x2, 0x2, 
       0x2, 0x1154, 0x1151, 0x3, 0x2, 0x2, 0x2, 0x1155, 0x293, 0x3, 0x2, 
       0x2, 0x2, 0x1156, 0x1158, 0x5, 0xf2, 0x7a, 0x2, 0x1157, 0x1156, 0x3, 
       0x2, 0x2, 0x2, 0x1158, 0x115b, 0x3, 0x2, 0x2, 0x2, 0x1159, 0x1157, 
       0x3, 0x2, 0x2, 0x2, 0x1159, 0x115a, 0x3, 0x2, 0x2, 0x2, 0x115a, 0x115c, 
       0x3, 0x2, 0x2, 0x2, 0x115b, 0x1159, 0x3, 0x2, 0x2, 0x2, 0x115c, 0x1160, 
       0x5, 0x80, 0x41, 0x2, 0x115d, 0x115e, 0x5, 0x3d2, 0x1ea, 0x2, 0x115e, 
       0x115f, 0x7, 0x4e, 0x2, 0x2, 0x115f, 0x1161, 0x3, 0x2, 0x2, 0x2, 
       0x1160, 0x115d, 0x3, 0x2, 0x2, 0x2, 0x1160, 0x1161, 0x3, 0x2, 0x2, 
       0x2, 0x1161, 0x1162, 0x3, 0x2, 0x2, 0x2, 0x1162, 0x1163, 0x7, 0x37, 
       0x2, 0x2, 0x1163, 0x1164, 0x7, 0x2, 0x2, 0x3, 0x1164, 0x295, 0x3, 
       0x2, 0x2, 0x2, 0x1165, 0x1166, 0x7, 0x39, 0x2, 0x2, 0x1166, 0x1167, 
       0x5, 0xb0, 0x59, 0x2, 0x1167, 0x1168, 0x7, 0x2, 0x2, 0x3, 0x1168, 
       0x297, 0x3, 0x2, 0x2, 0x2, 0x1169, 0x116e, 0x5, 0xb2, 0x5a, 0x2, 
       0x116a, 0x116b, 0x7, 0x4d, 0x2, 0x2, 0x116b, 0x116d, 0x5, 0xb2, 0x5a, 
       0x2, 0x116c, 0x116a, 0x3, 0x2, 0x2, 0x2, 0x116d, 0x1170, 0x3, 0x2, 
       0x2, 0x2, 0x116e, 0x116c, 0x3, 0x2, 0x2, 0x2, 0x116e, 0x116f, 0x3, 
       0x2, 0x2, 0x2, 0x116f, 0x1171, 0x3, 0x2, 0x2, 0x2, 0x1170, 0x116e, 
       0x3, 0x2, 0x2, 0x2, 0x1171, 0x1172, 0x7, 0x2, 0x2, 0x3, 0x1172, 0x299, 
       0x3, 0x2, 0x2, 0x2, 0x1173, 0x1174, 0x5, 0x10, 0x9, 0x2, 0x1174, 
       0x1175, 0x7, 0x2, 0x2, 0x3, 0x1175, 0x117a, 0x3, 0x2, 0x2, 0x2, 0x1176, 
       0x1177, 0x5, 0x1c, 0xf, 0x2, 0x1177, 0x1178, 0x7, 0x2, 0x2, 0x3, 
       0x1178, 0x117a, 0x3, 0x2, 0x2, 0x2, 0x1179, 0x1173, 0x3, 0x2, 0x2, 
       0x2, 0x1179, 0x1176, 0x3, 0x2, 0x2, 0x2, 0x117a, 0x29b, 0x3, 0x2, 
       0x2, 0x2, 0x117b, 0x117c, 0x5, 0x108, 0x85, 0x2, 0x117c, 0x117d, 
       0x7, 0x2, 0x2, 0x3, 0x117d, 0x1181, 0x3, 0x2, 0x2, 0x2, 0x117e, 0x117f, 
       0x7, 0x4c, 0x2, 0x2, 0x117f, 0x1181, 0x7, 0x2, 0x2, 0x3, 0x1180, 
       0x117b, 0x3, 0x2, 0x2, 0x2, 0x1180, 0x117e, 0x3, 0x2, 0x2, 0x2, 0x1181, 
       0x29d, 0x3, 0x2, 0x2, 0x2, 0x1182, 0x1183, 0x5, 0x108, 0x85, 0x2, 
       0x1183, 0x1184, 0x7, 0x2, 0x2, 0x3, 0x1184, 0x29f, 0x3, 0x2, 0x2, 
       0x2, 0x1185, 0x1186, 0x7, 0x32, 0x2, 0x2, 0x1186, 0x1187, 0x5, 0x108, 
       0x85, 0x2, 0x1187, 0x1188, 0x7, 0x2, 0x2, 0x3, 0x1188, 0x2a1, 0x3, 
       0x2, 0x2, 0x2, 0x1189, 0x118b, 0x5, 0xbc, 0x5f, 0x2, 0x118a, 0x1189, 
       0x3, 0x2, 0x2, 0x2, 0x118b, 0x118e, 0x3, 0x2, 0x2, 0x2, 0x118c, 0x118a, 
       0x3, 0x2, 0x2, 0x2, 0x118c, 0x118d, 0x3, 0x2, 0x2, 0x2, 0x118d, 0x118f, 
       0x3, 0x2, 0x2, 0x2, 0x118e, 0x118c, 0x3, 0x2, 0x2, 0x2, 0x118f, 0x1191, 
       0x5, 0xbe, 0x60, 0x2, 0x1190, 0x1192, 0x5, 0xae, 0x58, 0x2, 0x1191, 
       0x1190, 0x3, 0x2, 0x2, 0x2, 0x1191, 0x1192, 0x3, 0x2, 0x2, 0x2, 0x1192, 
       0x1193, 0x3, 0x2, 0x2, 0x2, 0x1193, 0x1194, 0x5, 0xc2, 0x62, 0x2, 
       0x1194, 0x1195, 0x7, 0x2, 0x2, 0x3, 0x1195, 0x2a3, 0x3, 0x2, 0x2, 
       0x2, 0x1196, 0x1197, 0x5, 0xf2, 0x7a, 0x2, 0x1197, 0x1198, 0x7, 0x2, 
       0x2, 0x3, 0x1198, 0x11a0, 0x3, 0x2, 0x2, 0x2, 0x1199, 0x119a, 0x7, 
       0x2f, 0x2, 0x2, 0x119a, 0x11a0, 0x7, 0x2, 0x2, 0x3, 0x119b, 0x119c, 
       0x7, 0x2e, 0x2, 0x2, 0x119c, 0x11a0, 0x7, 0x2, 0x2, 0x3, 0x119d, 
       0x119e, 0x7, 0x2d, 0x2, 0x2, 0x119e, 0x11a0, 0x7, 0x2, 0x2, 0x3, 
       0x119f, 0x1196, 0x3, 0x2, 0x2, 0x2, 0x119f, 0x1199, 0x3, 0x2, 0x2, 
       0x2, 0x119f, 0x119b, 0x3, 0x2, 0x2, 0x2, 0x119f, 0x119d, 0x3, 0x2, 
       0x2, 0x2, 0x11a0, 0x2a5, 0x3, 0x2, 0x2, 0x2, 0x11a1, 0x11a3, 0x5, 
       0x64, 0x33, 0x2, 0x11a2, 0x11a1, 0x3, 0x2, 0x2, 0x2, 0x11a2, 0x11a3, 
       0x3, 0x2, 0x2, 0x2, 0x11a3, 0x11a4, 0x3, 0x2, 0x2, 0x2, 0x11a4, 0x11a5, 
       0x5, 0xc0, 0x61, 0x2, 0x11a5, 0x11a7, 0x7, 0x46, 0x2, 0x2, 0x11a6, 
       0x11a8, 0x5, 0xa2, 0x52, 0x2, 0x11a7, 0x11a6, 0x3, 0x2, 0x2, 0x2, 
       0x11a7, 0x11a8, 0x3, 0x2, 0x2, 0x2, 0x11a8, 0x11a9, 0x3, 0x2, 0x2, 
       0x2, 0x11a9, 0x11aa, 0x7, 0x47, 0x2, 0x2, 0x11aa, 0x11ab, 0x7, 0x2, 
       0x2, 0x3, 0x11ab, 0x2a7, 0x3, 0x2, 0x2, 0x2, 0x11ac, 0x11ad, 0x5, 
       0x3d2, 0x1ea, 0x2, 0x11ad, 0x11ae, 0x7, 0x2, 0x2, 0x3, 0x11ae, 0x2a9, 
       0x3, 0x2, 0x2, 0x2, 0x11af, 0x11b1, 0x7, 0x48, 0x2, 0x2, 0x11b0, 
       0x11b2, 0x5, 0xc4, 0x63, 0x2, 0x11b1, 0x11b0, 0x3, 0x2, 0x2, 0x2, 
       0x11b1, 0x11b2, 0x3, 0x2, 0x2, 0x2, 0x11b2, 0x11b4, 0x3, 0x2, 0x2, 
       0x2, 0x11b3, 0x11b5, 0x5, 0x10a, 0x86, 0x2, 0x11b4, 0x11b3, 0x3, 
       0x2, 0x2, 0x2, 0x11b4, 0x11b5, 0x3, 0x2, 0x2, 0x2, 0x11b5, 0x11b6, 
       0x3, 0x2, 0x2, 0x2, 0x11b6, 0x11b7, 0x7, 0x49, 0x2, 0x2, 0x11b7, 
       0x11b8, 0x7, 0x2, 0x2, 0x3, 0x11b8, 0x2ab, 0x3, 0x2, 0x2, 0x2, 0x11b9, 
       0x11bb, 0x5, 0x2a, 0x16, 0x2, 0x11ba, 0x11b9, 0x3, 0x2, 0x2, 0x2, 
       0x11ba, 0x11bb, 0x3, 0x2, 0x2, 0x2, 0x11bb, 0x11bc, 0x3, 0x2, 0x2, 
       0x2, 0x11bc, 0x11bd, 0x7, 0x37, 0x2, 0x2, 0x11bd, 0x11bf, 0x7, 0x46, 
       0x2, 0x2, 0x11be, 0x11c0, 0x5, 0x19e, 0xd0, 0x2, 0x11bf, 0x11be, 
       0x3, 0x2, 0x2, 0x2, 0x11bf, 0x11c0, 0x3, 0x2, 0x2, 0x2, 0x11c0, 0x11c1, 
       0x3, 0x2, 0x2, 0x2, 0x11c1, 0x11c2, 0x7, 0x47, 0x2, 0x2, 0x11c2, 
       0x11c3, 0x7, 0x4c, 0x2, 0x2, 0x11c3, 0x11ec, 0x7, 0x2, 0x2, 0x3, 
       0x11c4, 0x11c6, 0x5, 0x2a, 0x16, 0x2, 0x11c5, 0x11c4, 0x3, 0x2, 0x2, 
       0x2, 0x11c5, 0x11c6, 0x3, 0x2, 0x2, 0x2, 0x11c6, 0x11c7, 0x3, 0x2, 
       0x2, 0x2, 0x11c7, 0x11c8, 0x7, 0x34, 0x2, 0x2, 0x11c8, 0x11ca, 0x7, 
       0x46, 0x2, 0x2, 0x11c9, 0x11cb, 0x5, 0x19e, 0xd0, 0x2, 0x11ca, 0x11c9, 
       0x3, 0x2, 0x2, 0x2, 0x11ca, 0x11cb, 0x3, 0x2, 0x2, 0x2, 0x11cb, 0x11cc, 
       0x3, 0x2, 0x2, 0x2, 0x11cc, 0x11cd, 0x7, 0x47, 0x2, 0x2, 0x11cd, 
       0x11ce, 0x7, 0x4c, 0x2, 0x2, 0x11ce, 0x11ec, 0x7, 0x2, 0x2, 0x3, 
       0x11cf, 0x11d0, 0x5, 0x3c, 0x1f, 0x2, 0x11d0, 0x11d2, 0x7, 0x4e, 
       0x2, 0x2, 0x11d1, 0x11d3, 0x5, 0x2a, 0x16, 0x2, 0x11d2, 0x11d1, 0x3, 
       0x2, 0x2, 0x2, 0x11d2, 0x11d3, 0x3, 0x2, 0x2, 0x2, 0x11d3, 0x11d4, 
       0x3, 0x2, 0x2, 0x2, 0x11d4, 0x11d5, 0x7, 0x34, 0x2, 0x2, 0x11d5, 
       0x11d7, 0x7, 0x46, 0x2, 0x2, 0x11d6, 0x11d8, 0x5, 0x19e, 0xd0, 0x2, 
       0x11d7, 0x11d6, 0x3, 0x2, 0x2, 0x2, 0x11d7, 0x11d8, 0x3, 0x2, 0x2, 
       0x2, 0x11d8, 0x11d9, 0x3, 0x2, 0x2, 0x2, 0x11d9, 0x11da, 0x7, 0x47, 
       0x2, 0x2, 0x11da, 0x11db, 0x7, 0x4c, 0x2, 0x2, 0x11db, 0x11dc, 0x7, 
       0x2, 0x2, 0x3, 0x11dc, 0x11ec, 0x3, 0x2, 0x2, 0x2, 0x11dd, 0x11de, 
       0x5, 0x16e, 0xb8, 0x2, 0x11de, 0x11e0, 0x7, 0x4e, 0x2, 0x2, 0x11df, 
       0x11e1, 0x5, 0x2a, 0x16, 0x2, 0x11e0, 0x11df, 0x3, 0x2, 0x2, 0x2, 
       0x11e0, 0x11e1, 0x3, 0x2, 0x2, 0x2, 0x11e1, 0x11e2, 0x3, 0x2, 0x2, 
       0x2, 0x11e2, 0x11e3, 0x7, 0x34, 0x2, 0x2, 0x11e3, 0x11e5, 0x7, 0x46, 
       0x2, 0x2, 0x11e4, 0x11e6, 0x5, 0x19e, 0xd0, 0x2, 0x11e5, 0x11e4, 
       0x3, 0x2, 0x2, 0x2, 0x11e5, 0x11e6, 0x3, 0x2, 0x2, 0x2, 0x11e6, 0x11e7, 
       0x3, 0x2, 0x2, 0x2, 0x11e7, 0x11e8, 0x7, 0x47, 0x2, 0x2, 0x11e8, 
       0x11e9, 0x7, 0x4c, 0x2, 0x2, 0x11e9, 0x11ea, 0x7, 0x2, 0x2, 0x3, 
       0x11ea, 0x11ec, 0x3, 0x2, 0x2, 0x2, 0x11eb, 0x11ba, 0x3, 0x2, 0x2, 
       0x2, 0x11eb, 0x11c5, 0x3, 0x2, 0x2, 0x2, 0x11eb, 0x11cf, 0x3, 0x2, 
       0x2, 0x2, 0x11eb, 0x11dd, 0x3, 0x2, 0x2, 0x2, 0x11ec, 0x2ad, 0x3, 
       0x2, 0x2, 0x2, 0x11ed, 0x11ef, 0x5, 0x62, 0x32, 0x2, 0x11ee, 0x11ed, 
       0x3, 0x2, 0x2, 0x2, 0x11ef, 0x11f2, 0x3, 0x2, 0x2, 0x2, 0x11f0, 0x11ee, 
       0x3, 0x2, 0x2, 0x2, 0x11f0, 0x11f1, 0x3, 0x2, 0x2, 0x2, 0x11f1, 0x11f3, 
       0x3, 0x2, 0x2, 0x2, 0x11f2, 0x11f0, 0x3, 0x2, 0x2, 0x2, 0x11f3, 0x11f4, 
       0x7, 0x1c, 0x2, 0x2, 0x11f4, 0x11f6, 0x5, 0x3d2, 0x1ea, 0x2, 0x11f5, 
       0x11f7, 0x5, 0x6a, 0x36, 0x2, 0x11f6, 0x11f5, 0x3, 0x2, 0x2, 0x2, 
       0x11f6, 0x11f7, 0x3, 0x2, 0x2, 0x2, 0x11f7, 0x11f8, 0x3, 0x2, 0x2, 
       0x2, 0x11f8, 0x11f9, 0x5, 0xc8, 0x65, 0x2, 0x11f9, 0x11fa, 0x7, 0x2, 
       0x2, 0x3, 0x11fa, 0x2af, 0x3, 0x2, 0x2, 0x2, 0x11fb, 0x11fd, 0x7, 
       0x48, 0x2, 0x2, 0x11fc, 0x11fe, 0x5, 0xca, 0x66, 0x2, 0x11fd, 0x11fc, 
       0x3, 0x2, 0x2, 0x2, 0x11fd, 0x11fe, 0x3, 0x2, 0x2, 0x2, 0x11fe, 0x1200, 
       0x3, 0x2, 0x2, 0x2, 0x11ff, 0x1201, 0x7, 0x4d, 0x2, 0x2, 0x1200, 
       0x11ff, 0x3, 0x2, 0x2, 0x2, 0x1200, 0x1201, 0x3, 0x2, 0x2, 0x2, 0x1201, 
       0x1203, 0x3, 0x2, 0x2, 0x2, 0x1202, 0x1204, 0x5, 0xd0, 0x69, 
  };
  static uint16_t serializedATNSegment2[] = {
    0x2, 0x1203, 0x1202, 0x3, 0x2, 0x2, 0x2, 0x1203, 0x1204, 0x3, 0x2, 0x2, 
       0x2, 0x1204, 0x1205, 0x3, 0x2, 0x2, 0x2, 0x1205, 0x1206, 0x7, 0x49, 
       0x2, 0x2, 0x1206, 0x1207, 0x7, 0x2, 0x2, 0x3, 0x1207, 0x2b1, 0x3, 
       0x2, 0x2, 0x2, 0x1208, 0x120d, 0x5, 0xcc, 0x67, 0x2, 0x1209, 0x120a, 
       0x7, 0x4d, 0x2, 0x2, 0x120a, 0x120c, 0x5, 0xcc, 0x67, 0x2, 0x120b, 
       0x1209, 0x3, 0x2, 0x2, 0x2, 0x120c, 0x120f, 0x3, 0x2, 0x2, 0x2, 0x120d, 
       0x120b, 0x3, 0x2, 0x2, 0x2, 0x120d, 0x120e, 0x3, 0x2, 0x2, 0x2, 0x120e, 
       0x1210, 0x3, 0x2, 0x2, 0x2, 0x120f, 0x120d, 0x3, 0x2, 0x2, 0x2, 0x1210, 
       0x1211, 0x7, 0x2, 0x2, 0x3, 0x1211, 0x2b3, 0x3, 0x2, 0x2, 0x2, 0x1212, 
       0x1214, 0x5, 0xce, 0x68, 0x2, 0x1213, 0x1212, 0x3, 0x2, 0x2, 0x2, 
       0x1214, 0x1217, 0x3, 0x2, 0x2, 0x2, 0x1215, 0x1213, 0x3, 0x2, 0x2, 
       0x2, 0x1215, 0x1216, 0x3, 0x2, 0x2, 0x2, 0x1216, 0x1218, 0x3, 0x2, 
       0x2, 0x2, 0x1217, 0x1215, 0x3, 0x2, 0x2, 0x2, 0x1218, 0x121e, 0x5, 
       0x3d2, 0x1ea, 0x2, 0x1219, 0x121b, 0x7, 0x46, 0x2, 0x2, 0x121a, 0x121c, 
       0x5, 0x19e, 0xd0, 0x2, 0x121b, 0x121a, 0x3, 0x2, 0x2, 0x2, 0x121b, 
       0x121c, 0x3, 0x2, 0x2, 0x2, 0x121c, 0x121d, 0x3, 0x2, 0x2, 0x2, 0x121d, 
       0x121f, 0x7, 0x47, 0x2, 0x2, 0x121e, 0x1219, 0x3, 0x2, 0x2, 0x2, 
       0x121e, 0x121f, 0x3, 0x2, 0x2, 0x2, 0x121f, 0x1221, 0x3, 0x2, 0x2, 
       0x2, 0x1220, 0x1222, 0x5, 0x6e, 0x38, 0x2, 0x1221, 0x1220, 0x3, 0x2, 
       0x2, 0x2, 0x1221, 0x1222, 0x3, 0x2, 0x2, 0x2, 0x1222, 0x1223, 0x3, 
       0x2, 0x2, 0x2, 0x1223, 0x1224, 0x7, 0x2, 0x2, 0x3, 0x1224, 0x2b5, 
       0x3, 0x2, 0x2, 0x2, 0x1225, 0x1226, 0x5, 0xf2, 0x7a, 0x2, 0x1226, 
       0x1227, 0x7, 0x2, 0x2, 0x3, 0x1227, 0x2b7, 0x3, 0x2, 0x2, 0x2, 0x1228, 
       0x122c, 0x7, 0x4c, 0x2, 0x2, 0x1229, 0x122b, 0x5, 0x70, 0x39, 0x2, 
       0x122a, 0x1229, 0x3, 0x2, 0x2, 0x2, 0x122b, 0x122e, 0x3, 0x2, 0x2, 
       0x2, 0x122c, 0x122a, 0x3, 0x2, 0x2, 0x2, 0x122c, 0x122d, 0x3, 0x2, 
       0x2, 0x2, 0x122d, 0x122f, 0x3, 0x2, 0x2, 0x2, 0x122e, 0x122c, 0x3, 
       0x2, 0x2, 0x2, 0x122f, 0x1230, 0x7, 0x2, 0x2, 0x3, 0x1230, 0x2b9, 
       0x3, 0x2, 0x2, 0x2, 0x1231, 0x1232, 0x5, 0xd4, 0x6b, 0x2, 0x1232, 
       0x1233, 0x7, 0x2, 0x2, 0x3, 0x1233, 0x1238, 0x3, 0x2, 0x2, 0x2, 0x1234, 
       0x1235, 0x5, 0xe6, 0x74, 0x2, 0x1235, 0x1236, 0x7, 0x2, 0x2, 0x3, 
       0x1236, 0x1238, 0x3, 0x2, 0x2, 0x2, 0x1237, 0x1231, 0x3, 0x2, 0x2, 
       0x2, 0x1237, 0x1234, 0x3, 0x2, 0x2, 0x2, 0x1238, 0x2bb, 0x3, 0x2, 
       0x2, 0x2, 0x1239, 0x123b, 0x5, 0xd6, 0x6c, 0x2, 0x123a, 0x1239, 0x3, 
       0x2, 0x2, 0x2, 0x123b, 0x123e, 0x3, 0x2, 0x2, 0x2, 0x123c, 0x123a, 
       0x3, 0x2, 0x2, 0x2, 0x123c, 0x123d, 0x3, 0x2, 0x2, 0x2, 0x123d, 0x123f, 
       0x3, 0x2, 0x2, 0x2, 0x123e, 0x123c, 0x3, 0x2, 0x2, 0x2, 0x123f, 0x1240, 
       0x7, 0x28, 0x2, 0x2, 0x1240, 0x1242, 0x5, 0x3d2, 0x1ea, 0x2, 0x1241, 
       0x1243, 0x5, 0x64, 0x33, 0x2, 0x1242, 0x1241, 0x3, 0x2, 0x2, 0x2, 
       0x1242, 0x1243, 0x3, 0x2, 0x2, 0x2, 0x1243, 0x1245, 0x3, 0x2, 0x2, 
       0x2, 0x1244, 0x1246, 0x5, 0xd8, 0x6d, 0x2, 0x1245, 0x1244, 0x3, 0x2, 
       0x2, 0x2, 0x1245, 0x1246, 0x3, 0x2, 0x2, 0x2, 0x1246, 0x1247, 0x3, 
       0x2, 0x2, 0x2, 0x1247, 0x1248, 0x5, 0xda, 0x6e, 0x2, 0x1248, 0x1249, 
       0x7, 0x2, 0x2, 0x3, 0x1249, 0x2bd, 0x3, 0x2, 0x2, 0x2, 0x124a, 0x124b, 
       0x5, 0xf2, 0x7a, 0x2, 0x124b, 0x124c, 0x7, 0x2, 0x2, 0x3, 0x124c, 
       0x125a, 0x3, 0x2, 0x2, 0x2, 0x124d, 0x124e, 0x7, 0x2f, 0x2, 0x2, 
       0x124e, 0x125a, 0x7, 0x2, 0x2, 0x3, 0x124f, 0x1250, 0x7, 0x2e, 0x2, 
       0x2, 0x1250, 0x125a, 0x7, 0x2, 0x2, 0x3, 0x1251, 0x1252, 0x7, 0x2d, 
       0x2, 0x2, 0x1252, 0x125a, 0x7, 0x2, 0x2, 0x3, 0x1253, 0x1254, 0x7, 
       0xd, 0x2, 0x2, 0x1254, 0x125a, 0x7, 0x2, 0x2, 0x3, 0x1255, 0x1256, 
       0x7, 0x32, 0x2, 0x2, 0x1256, 0x125a, 0x7, 0x2, 0x2, 0x3, 0x1257, 
       0x1258, 0x7, 0x33, 0x2, 0x2, 0x1258, 0x125a, 0x7, 0x2, 0x2, 0x3, 
       0x1259, 0x124a, 0x3, 0x2, 0x2, 0x2, 0x1259, 0x124d, 0x3, 0x2, 0x2, 
       0x2, 0x1259, 0x124f, 0x3, 0x2, 0x2, 0x2, 0x1259, 0x1251, 0x3, 0x2, 
       0x2, 0x2, 0x1259, 0x1253, 0x3, 0x2, 0x2, 0x2, 0x1259, 0x1255, 0x3, 
       0x2, 0x2, 0x2, 0x1259, 0x1257, 0x3, 0x2, 0x2, 0x2, 0x125a, 0x2bf, 
       0x3, 0x2, 0x2, 0x2, 0x125b, 0x125c, 0x7, 0x1d, 0x2, 0x2, 0x125c, 
       0x125d, 0x5, 0x6c, 0x37, 0x2, 0x125d, 0x125e, 0x7, 0x2, 0x2, 0x3, 
       0x125e, 0x2c1, 0x3, 0x2, 0x2, 0x2, 0x125f, 0x1263, 0x7, 0x48, 0x2, 
       0x2, 0x1260, 0x1262, 0x5, 0xdc, 0x6f, 0x2, 0x1261, 0x1260, 0x3, 0x2, 
       0x2, 0x2, 0x1262, 0x1265, 0x3, 0x2, 0x2, 0x2, 0x1263, 0x1261, 0x3, 
       0x2, 0x2, 0x2, 0x1263, 0x1264, 0x3, 0x2, 0x2, 0x2, 0x1264, 0x1266, 
       0x3, 0x2, 0x2, 0x2, 0x1265, 0x1263, 0x3, 0x2, 0x2, 0x2, 0x1266, 0x1267, 
       0x7, 0x49, 0x2, 0x2, 0x1267, 0x1268, 0x7, 0x2, 0x2, 0x3, 0x1268, 
       0x2c3, 0x3, 0x2, 0x2, 0x2, 0x1269, 0x126a, 0x5, 0xde, 0x70, 0x2, 
       0x126a, 0x126b, 0x7, 0x2, 0x2, 0x3, 0x126b, 0x1278, 0x3, 0x2, 0x2, 
       0x2, 0x126c, 0x126d, 0x5, 0xe2, 0x72, 0x2, 0x126d, 0x126e, 0x7, 0x2, 
       0x2, 0x3, 0x126e, 0x1278, 0x3, 0x2, 0x2, 0x2, 0x126f, 0x1270, 0x5, 
       0x5e, 0x30, 0x2, 0x1270, 0x1271, 0x7, 0x2, 0x2, 0x3, 0x1271, 0x1278, 
       0x3, 0x2, 0x2, 0x2, 0x1272, 0x1273, 0x5, 0xd2, 0x6a, 0x2, 0x1273, 
       0x1274, 0x7, 0x2, 0x2, 0x3, 0x1274, 0x1278, 0x3, 0x2, 0x2, 0x2, 0x1275, 
       0x1276, 0x7, 0x4c, 0x2, 0x2, 0x1276, 0x1278, 0x7, 0x2, 0x2, 0x3, 
       0x1277, 0x1269, 0x3, 0x2, 0x2, 0x2, 0x1277, 0x126c, 0x3, 0x2, 0x2, 
       0x2, 0x1277, 0x126f, 0x3, 0x2, 0x2, 0x2, 0x1277, 0x1272, 0x3, 0x2, 
       0x2, 0x2, 0x1277, 0x1275, 0x3, 0x2, 0x2, 0x2, 0x1278, 0x2c5, 0x3, 
       0x2, 0x2, 0x2, 0x1279, 0x127b, 0x5, 0xe0, 0x71, 0x2, 0x127a, 0x1279, 
       0x3, 0x2, 0x2, 0x2, 0x127b, 0x127e, 0x3, 0x2, 0x2, 0x2, 0x127c, 0x127a, 
       0x3, 0x2, 0x2, 0x2, 0x127c, 0x127d, 0x3, 0x2, 0x2, 0x2, 0x127d, 0x127f, 
       0x3, 0x2, 0x2, 0x2, 0x127e, 0x127c, 0x3, 0x2, 0x2, 0x2, 0x127f, 0x1280, 
       0x5, 0x80, 0x41, 0x2, 0x1280, 0x1281, 0x5, 0x78, 0x3d, 0x2, 0x1281, 
       0x1282, 0x7, 0x4c, 0x2, 0x2, 0x1282, 0x1283, 0x7, 0x2, 0x2, 0x3, 
       0x1283, 0x2c7, 0x3, 0x2, 0x2, 0x2, 0x1284, 0x1285, 0x5, 0xf2, 0x7a, 
       0x2, 0x1285, 0x1286, 0x7, 0x2, 0x2, 0x3, 0x1286, 0x128e, 0x3, 0x2, 
       0x2, 0x2, 0x1287, 0x1288, 0x7, 0x2f, 0x2, 0x2, 0x1288, 0x128e, 0x7, 
       0x2, 0x2, 0x3, 0x1289, 0x128a, 0x7, 0x32, 0x2, 0x2, 0x128a, 0x128e, 
       0x7, 0x2, 0x2, 0x3, 0x128b, 0x128c, 0x7, 0x1e, 0x2, 0x2, 0x128c, 
       0x128e, 0x7, 0x2, 0x2, 0x3, 0x128d, 0x1284, 0x3, 0x2, 0x2, 0x2, 0x128d, 
       0x1287, 0x3, 0x2, 0x2, 0x2, 0x128d, 0x1289, 0x3, 0x2, 0x2, 0x2, 0x128d, 
       0x128b, 0x3, 0x2, 0x2, 0x2, 0x128e, 0x2c9, 0x3, 0x2, 0x2, 0x2, 0x128f, 
       0x1291, 0x5, 0xe4, 0x73, 0x2, 0x1290, 0x128f, 0x3, 0x2, 0x2, 0x2, 
       0x1291, 0x1294, 0x3, 0x2, 0x2, 0x2, 0x1292, 0x1290, 0x3, 0x2, 0x2, 
       0x2, 0x1292, 0x1293, 0x3, 0x2, 0x2, 0x2, 0x1293, 0x1295, 0x3, 0x2, 
       0x2, 0x2, 0x1294, 0x1292, 0x3, 0x2, 0x2, 0x2, 0x1295, 0x1296, 0x5, 
       0x9c, 0x4f, 0x2, 0x1296, 0x1297, 0x5, 0xb4, 0x5b, 0x2, 0x1297, 0x1298, 
       0x7, 0x2, 0x2, 0x3, 0x1298, 0x2cb, 0x3, 0x2, 0x2, 0x2, 0x1299, 0x129a, 
       0x5, 0xf2, 0x7a, 0x2, 0x129a, 0x129b, 0x7, 0x2, 0x2, 0x3, 0x129b, 
       0x12a9, 0x3, 0x2, 0x2, 0x2, 0x129c, 0x129d, 0x7, 0x2f, 0x2, 0x2, 
       0x129d, 0x12a9, 0x7, 0x2, 0x2, 0x3, 0x129e, 0x129f, 0x7, 0x2d, 0x2, 
       0x2, 0x129f, 0x12a9, 0x7, 0x2, 0x2, 0x3, 0x12a0, 0x12a1, 0x7, 0xd, 
       0x2, 0x2, 0x12a1, 0x12a9, 0x7, 0x2, 0x2, 0x3, 0x12a2, 0x12a3, 0x7, 
       0x18, 0x2, 0x2, 0x12a3, 0x12a9, 0x7, 0x2, 0x2, 0x3, 0x12a4, 0x12a5, 
       0x7, 0x32, 0x2, 0x2, 0x12a5, 0x12a9, 0x7, 0x2, 0x2, 0x3, 0x12a6, 
       0x12a7, 0x7, 0x33, 0x2, 0x2, 0x12a7, 0x12a9, 0x7, 0x2, 0x2, 0x3, 
       0x12a8, 0x1299, 0x3, 0x2, 0x2, 0x2, 0x12a8, 0x129c, 0x3, 0x2, 0x2, 
       0x2, 0x12a8, 0x129e, 0x3, 0x2, 0x2, 0x2, 0x12a8, 0x12a0, 0x3, 0x2, 
       0x2, 0x2, 0x12a8, 0x12a2, 0x3, 0x2, 0x2, 0x2, 0x12a8, 0x12a4, 0x3, 
       0x2, 0x2, 0x2, 0x12a8, 0x12a6, 0x3, 0x2, 0x2, 0x2, 0x12a9, 0x2cd, 
       0x3, 0x2, 0x2, 0x2, 0x12aa, 0x12ac, 0x5, 0xd6, 0x6c, 0x2, 0x12ab, 
       0x12aa, 0x3, 0x2, 0x2, 0x2, 0x12ac, 0x12af, 0x3, 0x2, 0x2, 0x2, 0x12ad, 
       0x12ab, 0x3, 0x2, 0x2, 0x2, 0x12ad, 0x12ae, 0x3, 0x2, 0x2, 0x2, 0x12ae, 
       0x12b0, 0x3, 0x2, 0x2, 0x2, 0x12af, 0x12ad, 0x3, 0x2, 0x2, 0x2, 0x12b0, 
       0x12b1, 0x7, 0x50, 0x2, 0x2, 0x12b1, 0x12b2, 0x7, 0x28, 0x2, 0x2, 
       0x12b2, 0x12b3, 0x5, 0x3d2, 0x1ea, 0x2, 0x12b3, 0x12b4, 0x5, 0xe8, 
       0x75, 0x2, 0x12b4, 0x12b5, 0x7, 0x2, 0x2, 0x3, 0x12b5, 0x2cf, 0x3, 
       0x2, 0x2, 0x2, 0x12b6, 0x12ba, 0x7, 0x48, 0x2, 0x2, 0x12b7, 0x12b9, 
       0x5, 0xea, 0x76, 0x2, 0x12b8, 0x12b7, 0x3, 0x2, 0x2, 0x2, 0x12b9, 
       0x12bc, 0x3, 0x2, 0x2, 0x2, 0x12ba, 0x12b8, 0x3, 0x2, 0x2, 0x2, 0x12ba, 
       0x12bb, 0x3, 0x2, 0x2, 0x2, 0x12bb, 0x12bd, 0x3, 0x2, 0x2, 0x2, 0x12bc, 
       0x12ba, 0x3, 0x2, 0x2, 0x2, 0x12bd, 0x12be, 0x7, 0x49, 0x2, 0x2, 
       0x12be, 0x12bf, 0x7, 0x2, 0x2, 0x3, 0x12bf, 0x2d1, 0x3, 0x2, 0x2, 
       0x2, 0x12c0, 0x12c1, 0x5, 0xec, 0x77, 0x2, 0x12c1, 0x12c2, 0x7, 0x2, 
       0x2, 0x3, 0x12c2, 0x12cf, 0x3, 0x2, 0x2, 0x2, 0x12c3, 0x12c4, 0x5, 
       0xde, 0x70, 0x2, 0x12c4, 0x12c5, 0x7, 0x2, 0x2, 0x3, 0x12c5, 0x12cf, 
       0x3, 0x2, 0x2, 0x2, 0x12c6, 0x12c7, 0x5, 0x5e, 0x30, 0x2, 0x12c7, 
       0x12c8, 0x7, 0x2, 0x2, 0x3, 0x12c8, 0x12cf, 0x3, 0x2, 0x2, 0x2, 0x12c9, 
       0x12ca, 0x5, 0xd2, 0x6a, 0x2, 0x12ca, 0x12cb, 0x7, 0x2, 0x2, 0x3, 
       0x12cb, 0x12cf, 0x3, 0x2, 0x2, 0x2, 0x12cc, 0x12cd, 0x7, 0x4c, 0x2, 
       0x2, 0x12cd, 0x12cf, 0x7, 0x2, 0x2, 0x3, 0x12ce, 0x12c0, 0x3, 0x2, 
       0x2, 0x2, 0x12ce, 0x12c3, 0x3, 0x2, 0x2, 0x2, 0x12ce, 0x12c6, 0x3, 
       0x2, 0x2, 0x2, 0x12ce, 0x12c9, 0x3, 0x2, 0x2, 0x2, 0x12ce, 0x12cc, 
       0x3, 0x2, 0x2, 0x2, 0x12cf, 0x2d3, 0x3, 0x2, 0x2, 0x2, 0x12d0, 0x12d2, 
       0x5, 0xee, 0x78, 0x2, 0x12d1, 0x12d0, 0x3, 0x2, 0x2, 0x2, 0x12d2, 
       0x12d5, 0x3, 0x2, 0x2, 0x2, 0x12d3, 0x12d1, 0x3, 0x2, 0x2, 0x2, 0x12d3, 
       0x12d4, 0x3, 0x2, 0x2, 0x2, 0x12d4, 0x12d6, 0x3, 0x2, 0x2, 0x2, 0x12d5, 
       0x12d3, 0x3, 0x2, 0x2, 0x2, 0x12d6, 0x12d7, 0x5, 0x80, 0x41, 0x2, 
       0x12d7, 0x12d8, 0x5, 0x3d2, 0x1ea, 0x2, 0x12d8, 0x12d9, 0x7, 0x46, 
       0x2, 0x2, 0x12d9, 0x12db, 0x7, 0x47, 0x2, 0x2, 0x12da, 0x12dc, 0x5, 
       0x20, 0x11, 0x2, 0x12db, 0x12da, 0x3, 0x2, 0x2, 0x2, 0x12db, 0x12dc, 
       0x3, 0x2, 0x2, 0x2, 0x12dc, 0x12de, 0x3, 0x2, 0x2, 0x2, 0x12dd, 0x12df, 
       0x5, 0xf0, 0x79, 0x2, 0x12de, 0x12dd, 0x3, 0x2, 0x2, 0x2, 0x12de, 
       0x12df, 0x3, 0x2, 0x2, 0x2, 0x12df, 0x12e0, 0x3, 0x2, 0x2, 0x2, 0x12e0, 
       0x12e1, 0x7, 0x4c, 0x2, 0x2, 0x12e1, 0x12e2, 0x7, 0x2, 0x2, 0x3, 
       0x12e2, 0x2d5, 0x3, 0x2, 0x2, 0x2, 0x12e3, 0x12e4, 0x5, 0xf2, 0x7a, 
       0x2, 0x12e4, 0x12e5, 0x7, 0x2, 0x2, 0x3, 0x12e5, 0x12eb, 0x3, 0x2, 
       0x2, 0x2, 0x12e6, 0x12e7, 0x7, 0x2f, 0x2, 0x2, 0x12e7, 0x12eb, 0x7, 
       0x2, 0x2, 0x3, 0x12e8, 0x12e9, 0x7, 0xd, 0x2, 0x2, 0x12e9, 0x12eb, 
       0x7, 0x2, 0x2, 0x3, 0x12ea, 0x12e3, 0x3, 0x2, 0x2, 0x2, 0x12ea, 0x12e6, 
       0x3, 0x2, 0x2, 0x2, 0x12ea, 0x12e8, 0x3, 0x2, 0x2, 0x2, 0x12eb, 0x2d7, 
       0x3, 0x2, 0x2, 0x2, 0x12ec, 0x12ed, 0x7, 0x18, 0x2, 0x2, 0x12ed, 
       0x12ee, 0x5, 0xfa, 0x7e, 0x2, 0x12ee, 0x12ef, 0x7, 0x2, 0x2, 0x3, 
       0x12ef, 0x2d9, 0x3, 0x2, 0x2, 0x2, 0x12f0, 0x12f1, 0x5, 0xf4, 0x7b, 
       0x2, 0x12f1, 0x12f2, 0x7, 0x2, 0x2, 0x3, 0x12f2, 0x12fa, 0x3, 0x2, 
       0x2, 0x2, 0x12f3, 0x12f4, 0x5, 0x100, 0x81, 0x2, 0x12f4, 0x12f5, 
       0x7, 0x2, 0x2, 0x3, 0x12f5, 0x12fa, 0x3, 0x2, 0x2, 0x2, 0x12f6, 0x12f7, 
       0x5, 0x102, 0x82, 0x2, 0x12f7, 0x12f8, 0x7, 0x2, 0x2, 0x3, 0x12f8, 
       0x12fa, 0x3, 0x2, 0x2, 0x2, 0x12f9, 0x12f0, 0x3, 0x2, 0x2, 0x2, 0x12f9, 
       0x12f3, 0x3, 0x2, 0x2, 0x2, 0x12f9, 0x12f6, 0x3, 0x2, 0x2, 0x2, 0x12fa, 
       0x2db, 0x3, 0x2, 0x2, 0x2, 0x12fb, 0x12fc, 0x7, 0x50, 0x2, 0x2, 0x12fc, 
       0x12fd, 0x5, 0x38, 0x1d, 0x2, 0x12fd, 0x12ff, 0x7, 0x46, 0x2, 0x2, 
       0x12fe, 0x1300, 0x5, 0xf6, 0x7c, 0x2, 0x12ff, 0x12fe, 0x3, 0x2, 0x2, 
       0x2, 0x12ff, 0x1300, 0x3, 0x2, 0x2, 0x2, 0x1300, 0x1301, 0x3, 0x2, 
       0x2, 0x2, 0x1301, 0x1302, 0x7, 0x47, 0x2, 0x2, 0x1302, 0x1303, 0x7, 
       0x2, 0x2, 0x3, 0x1303, 0x2dd, 0x3, 0x2, 0x2, 0x2, 0x1304, 0x1309, 
       0x5, 0xf8, 0x7d, 0x2, 0x1305, 0x1306, 0x7, 0x4d, 0x2, 0x2, 0x1306, 
       0x1308, 0x5, 0xf8, 0x7d, 0x2, 0x1307, 0x1305, 0x3, 0x2, 0x2, 0x2, 
       0x1308, 0x130b, 0x3, 0x2, 0x2, 0x2, 0x1309, 0x1307, 0x3, 0x2, 0x2, 
       0x2, 0x1309, 0x130a, 0x3, 0x2, 0x2, 0x2, 0x130a, 0x130c, 0x3, 0x2, 
       0x2, 0x2, 0x130b, 0x1309, 0x3, 0x2, 0x2, 0x2, 0x130c, 0x130d, 0x7, 
       0x2, 0x2, 0x3, 0x130d, 0x2df, 0x3, 0x2, 0x2, 0x2, 0x130e, 0x130f, 
       0x5, 0x3d2, 0x1ea, 0x2, 0x130f, 0x1310, 0x7, 0x52, 0x2, 0x2, 0x1310, 
       0x1311, 0x5, 0xfa, 0x7e, 0x2, 0x1311, 0x1312, 0x7, 0x2, 0x2, 0x3, 
       0x1312, 0x2e1, 0x3, 0x2, 0x2, 0x2, 0x1313, 0x1314, 0x5, 0x1c0, 0xe1, 
       0x2, 0x1314, 0x1315, 0x7, 0x2, 0x2, 0x3, 0x1315, 0x131d, 0x3, 0x2, 
       0x2, 0x2, 0x1316, 0x1317, 0x5, 0xfc, 0x7f, 0x2, 0x1317, 0x1318, 0x7, 
       0x2, 0x2, 0x3, 0x1318, 0x131d, 0x3, 0x2, 0x2, 0x2, 0x1319, 0x131a, 
       0x5, 0xf2, 0x7a, 0x2, 0x131a, 0x131b, 0x7, 0x2, 0x2, 0x3, 0x131b, 
       0x131d, 0x3, 0x2, 0x2, 0x2, 0x131c, 0x1313, 0x3, 0x2, 0x2, 0x2, 0x131c, 
       0x1316, 0x3, 0x2, 0x2, 0x2, 0x131c, 0x1319, 0x3, 0x2, 0x2, 0x2, 0x131d, 
       0x2e3, 0x3, 0x2, 0x2, 0x2, 0x131e, 0x1320, 0x7, 0x48, 0x2, 0x2, 0x131f, 
       0x1321, 0x5, 0xfe, 0x80, 0x2, 0x1320, 0x131f, 0x3, 0x2, 0x2, 0x2, 
       0x1320, 0x1321, 0x3, 0x2, 0x2, 0x2, 0x1321, 0x1323, 0x3, 0x2, 0x2, 
       0x2, 0x1322, 0x1324, 0x7, 0x4d, 0x2, 0x2, 0x1323, 0x1322, 0x3, 0x2, 
       0x2, 0x2, 0x1323, 0x1324, 0x3, 0x2, 0x2, 0x2, 0x1324, 0x1325, 0x3, 
       0x2, 0x2, 0x2, 0x1325, 0x1326, 0x7, 0x49, 0x2, 0x2, 0x1326, 0x1327, 
       0x7, 0x2, 0x2, 0x3, 0x1327, 0x2e5, 0x3, 0x2, 0x2, 0x2, 0x1328, 0x132d, 
       0x5, 0xfa, 0x7e, 0x2, 0x1329, 0x132a, 0x7, 0x4d, 0x2, 0x2, 0x132a, 
       0x132c, 0x5, 0xfa, 0x7e, 0x2, 0x132b, 0x1329, 0x3, 0x2, 0x2, 0x2, 
       0x132c, 0x132f, 0x3, 0x2, 0x2, 0x2, 0x132d, 0x132b, 0x3, 0x2, 0x2, 
       0x2, 0x132d, 0x132e, 0x3, 0x2, 0x2, 0x2, 0x132e, 0x1330, 0x3, 0x2, 
       0x2, 0x2, 0x132f, 0x132d, 0x3, 0x2, 0x2, 0x2, 0x1330, 0x1331, 0x7, 
       0x2, 0x2, 0x3, 0x1331, 0x2e7, 0x3, 0x2, 0x2, 0x2, 0x1332, 0x1333, 
       0x7, 0x50, 0x2, 0x2, 0x1333, 0x1334, 0x5, 0x38, 0x1d, 0x2, 0x1334, 
       0x1335, 0x7, 0x2, 0x2, 0x3, 0x1335, 0x2e9, 0x3, 0x2, 0x2, 0x2, 0x1336, 
       0x1337, 0x7, 0x50, 0x2, 0x2, 0x1337, 0x1338, 0x5, 0x38, 0x1d, 0x2, 
       0x1338, 0x1339, 0x7, 0x46, 0x2, 0x2, 0x1339, 0x133a, 0x5, 0xfa, 0x7e, 
       0x2, 0x133a, 0x133b, 0x7, 0x47, 0x2, 0x2, 0x133b, 0x133c, 0x7, 0x2, 
       0x2, 0x3, 0x133c, 0x2eb, 0x3, 0x2, 0x2, 0x2, 0x133d, 0x133f, 0x7, 
       0x48, 0x2, 0x2, 0x133e, 0x1340, 0x5, 0x106, 0x84, 0x2, 0x133f, 0x133e, 
       0x3, 0x2, 0x2, 0x2, 0x133f, 0x1340, 0x3, 0x2, 0x2, 0x2, 0x1340, 0x1342, 
       0x3, 0x2, 0x2, 0x2, 0x1341, 0x1343, 0x7, 0x4d, 0x2, 0x2, 0x1342, 
       0x1341, 0x3, 0x2, 0x2, 0x2, 0x1342, 0x1343, 0x3, 0x2, 0x2, 0x2, 0x1343, 
       0x1344, 0x3, 0x2, 0x2, 0x2, 0x1344, 0x1345, 0x7, 0x49, 0x2, 0x2, 
       0x1345, 0x1346, 0x7, 0x2, 0x2, 0x3, 0x1346, 0x2ed, 0x3, 0x2, 0x2, 
       0x2, 0x1347, 0x134c, 0x5, 0x7e, 0x40, 0x2, 0x1348, 0x1349, 0x7, 0x4d, 
       0x2, 0x2, 0x1349, 0x134b, 0x5, 0x7e, 0x40, 0x2, 0x134a, 0x1348, 0x3, 
       0x2, 0x2, 0x2, 0x134b, 0x134e, 0x3, 0x2, 0x2, 0x2, 0x134c, 0x134a, 
       0x3, 0x2, 0x2, 0x2, 0x134c, 0x134d, 0x3, 0x2, 0x2, 0x2, 0x134d, 0x134f, 
       0x3, 0x2, 0x2, 0x2, 0x134e, 0x134c, 0x3, 0x2, 0x2, 0x2, 0x134f, 0x1350, 
       0x7, 0x2, 0x2, 0x3, 0x1350, 0x2ef, 0x3, 0x2, 0x2, 0x2, 0x1351, 0x1353, 
       0x7, 0x48, 0x2, 0x2, 0x1352, 0x1354, 0x5, 0x10a, 0x86, 0x2, 0x1353, 
       0x1352, 0x3, 0x2, 0x2, 0x2, 0x1353, 0x1354, 0x3, 0x2, 0x2, 0x2, 0x1354, 
       0x1355, 0x3, 0x2, 0x2, 0x2, 0x1355, 0x1356, 0x7, 0x49, 0x2, 0x2, 
       0x1356, 0x1357, 0x7, 0x2, 0x2, 0x3, 0x1357, 0x2f1, 0x3, 0x2, 0x2, 
       0x2, 0x1358, 0x135a, 0x5, 0x10c, 0x87, 0x2, 0x1359, 0x1358, 0x3, 
       0x2, 0x2, 0x2, 0x135a, 0x135b, 0x3, 0x2, 0x2, 0x2, 0x135b, 0x1359, 
       0x3, 0x2, 0x2, 0x2, 0x135b, 0x135c, 0x3, 0x2, 0x2, 0x2, 0x135c, 0x135d, 
       0x3, 0x2, 0x2, 0x2, 0x135d, 0x135e, 0x7, 0x2, 0x2, 0x3, 0x135e, 0x2f3, 
       0x3, 0x2, 0x2, 0x2, 0x135f, 0x1360, 0x5, 0x10e, 0x88, 0x2, 0x1360, 
       0x1361, 0x7, 0x2, 0x2, 0x3, 0x1361, 0x1369, 0x3, 0x2, 0x2, 0x2, 0x1362, 
       0x1363, 0x5, 0x5e, 0x30, 0x2, 0x1363, 0x1364, 0x7, 0x2, 0x2, 0x3, 
       0x1364, 0x1369, 0x3, 0x2, 0x2, 0x2, 0x1365, 0x1366, 0x5, 0x112, 0x8a, 
       0x2, 0x1366, 0x1367, 0x7, 0x2, 0x2, 0x3, 0x1367, 0x1369, 0x3, 0x2, 
       0x2, 0x2, 0x1368, 0x135f, 0x3, 0x2, 0x2, 0x2, 0x1368, 0x1362, 0x3, 
       0x2, 0x2, 0x2, 0x1368, 0x1365, 0x3, 0x2, 0x2, 0x2, 0x1369, 0x2f5, 
       0x3, 0x2, 0x2, 0x2, 0x136a, 0x136b, 0x5, 0x110, 0x89, 0x2, 0x136b, 
       0x136c, 0x7, 0x4c, 0x2, 0x2, 0x136c, 0x136d, 0x7, 0x2, 0x2, 0x3, 
       0x136d, 0x2f7, 0x3, 0x2, 0x2, 0x2, 0x136e, 0x1370, 0x5, 0xa8, 0x55, 
       0x2, 0x136f, 0x136e, 0x3, 0x2, 0x2, 0x2, 0x1370, 0x1373, 0x3, 0x2, 
       0x2, 0x2, 0x1371, 0x136f, 0x3, 0x2, 0x2, 0x2, 0x1371, 0x1372, 0x3, 
       0x2, 0x2, 0x2, 0x1372, 0x1374, 0x3, 0x2, 0x2, 0x2, 0x1373, 0x1371, 
       0x3, 0x2, 0x2, 0x2, 0x1374, 0x1375, 0x5, 0x80, 0x41, 0x2, 0x1375, 
       0x1376, 0x5, 0x78, 0x3d, 0x2, 0x1376, 0x1377, 0x7, 0x2, 0x2, 0x3, 
       0x1377, 0x2f9, 0x3, 0x2, 0x2, 0x2, 0x1378, 0x1379, 0x5, 0x116, 0x8c, 
       0x2, 0x1379, 0x137a, 0x7, 0x2, 0x2, 0x3, 0x137a, 0x138b, 0x3, 0x2, 
       0x2, 0x2, 0x137b, 0x137c, 0x5, 0x11a, 0x8e, 0x2, 0x137c, 0x137d, 
       0x7, 0x2, 0x2, 0x3, 0x137d, 0x138b, 0x3, 0x2, 0x2, 0x2, 0x137e, 0x137f, 
       0x5, 0x122, 0x92, 0x2, 0x137f, 0x1380, 0x7, 0x2, 0x2, 0x3, 0x1380, 
       0x138b, 0x3, 0x2, 0x2, 0x2, 0x1381, 0x1382, 0x5, 0x124, 0x93, 0x2, 
       0x1382, 0x1383, 0x7, 0x2, 0x2, 0x3, 0x1383, 0x138b, 0x3, 0x2, 0x2, 
       0x2, 0x1384, 0x1385, 0x5, 0x136, 0x9c, 0x2, 0x1385, 0x1386, 0x7, 
       0x2, 0x2, 0x3, 0x1386, 0x138b, 0x3, 0x2, 0x2, 0x2, 0x1387, 0x1388, 
       0x5, 0x13c, 0x9f, 0x2, 0x1388, 0x1389, 0x7, 0x2, 0x2, 0x3, 0x1389, 
       0x138b, 0x3, 0x2, 0x2, 0x2, 0x138a, 0x1378, 0x3, 0x2, 0x2, 0x2, 0x138a, 
       0x137b, 0x3, 0x2, 0x2, 0x2, 0x138a, 0x137e, 0x3, 0x2, 0x2, 0x2, 0x138a, 
       0x1381, 0x3, 0x2, 0x2, 0x2, 0x138a, 0x1384, 0x3, 0x2, 0x2, 0x2, 0x138a, 
       0x1387, 0x3, 0x2, 0x2, 0x2, 0x138b, 0x2fb, 0x3, 0x2, 0x2, 0x2, 0x138c, 
       0x138d, 0x5, 0x116, 0x8c, 0x2, 0x138d, 0x138e, 0x7, 0x2, 0x2, 0x3, 
       0x138e, 0x139c, 0x3, 0x2, 0x2, 0x2, 0x138f, 0x1390, 0x5, 0x11c, 0x8f, 
       0x2, 0x1390, 0x1391, 0x7, 0x2, 0x2, 0x3, 0x1391, 0x139c, 0x3, 0x2, 
       0x2, 0x2, 0x1392, 0x1393, 0x5, 0x126, 0x94, 0x2, 0x1393, 0x1394, 
       0x7, 0x2, 0x2, 0x3, 0x1394, 0x139c, 0x3, 0x2, 0x2, 0x2, 0x1395, 0x1396, 
       0x5, 0x138, 0x9d, 0x2, 0x1396, 0x1397, 0x7, 0x2, 0x2, 0x3, 0x1397, 
       0x139c, 0x3, 0x2, 0x2, 0x2, 0x1398, 0x1399, 0x5, 0x13e, 0xa0, 0x2, 
       0x1399, 0x139a, 0x7, 0x2, 0x2, 0x3, 0x139a, 0x139c, 0x3, 0x2, 0x2, 
       0x2, 0x139b, 0x138c, 0x3, 0x2, 0x2, 0x2, 0x139b, 0x138f, 0x3, 0x2, 
       0x2, 0x2, 0x139b, 0x1392, 0x3, 0x2, 0x2, 0x2, 0x139b, 0x1395, 0x3, 
       0x2, 0x2, 0x2, 0x139b, 0x1398, 0x3, 0x2, 0x2, 0x2, 0x139c, 0x2fd, 
       0x3, 0x2, 0x2, 0x2, 0x139d, 0x139e, 0x5, 0x108, 0x85, 0x2, 0x139e, 
       0x139f, 0x7, 0x2, 0x2, 0x3, 0x139f, 0x13c2, 0x3, 0x2, 0x2, 0x2, 0x13a0, 
       0x13a1, 0x5, 0x118, 0x8d, 0x2, 0x13a1, 0x13a2, 0x7, 0x2, 0x2, 0x3, 
       0x13a2, 0x13c2, 0x3, 0x2, 0x2, 0x2, 0x13a3, 0x13a4, 0x5, 0x11e, 0x90, 
       0x2, 0x13a4, 0x13a5, 0x7, 0x2, 0x2, 0x3, 0x13a5, 0x13c2, 0x3, 0x2, 
       0x2, 0x2, 0x13a6, 0x13a7, 0x5, 0x128, 0x95, 0x2, 0x13a7, 0x13a8, 
       0x7, 0x2, 0x2, 0x3, 0x13a8, 0x13c2, 0x3, 0x2, 0x2, 0x2, 0x13a9, 0x13aa, 
       0x5, 0x12a, 0x96, 0x2, 0x13aa, 0x13ab, 0x7, 0x2, 0x2, 0x3, 0x13ab, 
       0x13c2, 0x3, 0x2, 0x2, 0x2, 0x13ac, 0x13ad, 0x5, 0x13a, 0x9e, 0x2, 
       0x13ad, 0x13ae, 0x7, 0x2, 0x2, 0x3, 0x13ae, 0x13c2, 0x3, 0x2, 0x2, 
       0x2, 0x13af, 0x13b0, 0x5, 0x14e, 0xa8, 0x2, 0x13b0, 0x13b1, 0x7, 
       0x2, 0x2, 0x3, 0x13b1, 0x13c2, 0x3, 0x2, 0x2, 0x2, 0x13b2, 0x13b3, 
       0x5, 0x150, 0xa9, 0x2, 0x13b3, 0x13b4, 0x7, 0x2, 0x2, 0x3, 0x13b4, 
       0x13c2, 0x3, 0x2, 0x2, 0x2, 0x13b5, 0x13b6, 0x5, 0x152, 0xaa, 0x2, 
       0x13b6, 0x13b7, 0x7, 0x2, 0x2, 0x3, 0x13b7, 0x13c2, 0x3, 0x2, 0x2, 
       0x2, 0x13b8, 0x13b9, 0x5, 0x156, 0xac, 0x2, 0x13b9, 0x13ba, 0x7, 
       0x2, 0x2, 0x3, 0x13ba, 0x13c2, 0x3, 0x2, 0x2, 0x2, 0x13bb, 0x13bc, 
       0x5, 0x154, 0xab, 0x2, 0x13bc, 0x13bd, 0x7, 0x2, 0x2, 0x3, 0x13bd, 
       0x13c2, 0x3, 0x2, 0x2, 0x2, 0x13be, 0x13bf, 0x5, 0x158, 0xad, 0x2, 
       0x13bf, 0x13c0, 0x7, 0x2, 0x2, 0x3, 0x13c0, 0x13c2, 0x3, 0x2, 0x2, 
       0x2, 0x13c1, 0x139d, 0x3, 0x2, 0x2, 0x2, 0x13c1, 0x13a0, 0x3, 0x2, 
       0x2, 0x2, 0x13c1, 0x13a3, 0x3, 0x2, 0x2, 0x2, 0x13c1, 0x13a6, 0x3, 
       0x2, 0x2, 0x2, 0x13c1, 0x13a9, 0x3, 0x2, 0x2, 0x2, 0x13c1, 0x13ac, 
       0x3, 0x2, 0x2, 0x2, 0x13c1, 0x13af, 0x3, 0x2, 0x2, 0x2, 0x13c1, 0x13b2, 
       0x3, 0x2, 0x2, 0x2, 0x13c1, 0x13b5, 0x3, 0x2, 0x2, 0x2, 0x13c1, 0x13b8, 
       0x3, 0x2, 0x2, 0x2, 0x13c1, 0x13bb, 0x3, 0x2, 0x2, 0x2, 0x13c1, 0x13be, 
       0x3, 0x2, 0x2, 0x2, 0x13c2, 0x2ff, 0x3, 0x2, 0x2, 0x2, 0x13c3, 0x13c4, 
       0x7, 0x4c, 0x2, 0x2, 0x13c4, 0x13c5, 0x7, 0x2, 0x2, 0x3, 0x13c5, 
       0x301, 0x3, 0x2, 0x2, 0x2, 0x13c6, 0x13c7, 0x5, 0x3d2, 0x1ea, 0x2, 
       0x13c7, 0x13c8, 0x7, 0x58, 0x2, 0x2, 0x13c8, 0x13c9, 0x5, 0x112, 
       0x8a, 0x2, 0x13c9, 0x13ca, 0x7, 0x2, 0x2, 0x3, 0x13ca, 0x303, 0x3, 
       0x2, 0x2, 0x2, 0x13cb, 0x13cc, 0x5, 0x3d2, 0x1ea, 0x2, 0x13cc, 0x13cd, 
       0x7, 0x58, 0x2, 0x2, 0x13cd, 0x13ce, 0x5, 0x114, 0x8b, 0x2, 0x13ce, 
       0x13cf, 0x7, 0x2, 0x2, 0x3, 0x13cf, 0x305, 0x3, 0x2, 0x2, 0x2, 0x13d0, 
       0x13d1, 0x5, 0x120, 0x91, 0x2, 0x13d1, 0x13d2, 0x7, 0x4c, 0x2, 0x2, 
       0x13d2, 0x13d3, 0x7, 0x2, 0x2, 0x3, 0x13d3, 0x307, 0x3, 0x2, 0x2, 
       0x2, 0x13d4, 0x13d5, 0x5, 0x1ba, 0xde, 0x2, 0x13d5, 0x13d6, 0x7, 
       0x2, 0x2, 0x3, 0x13d6, 0x13ea, 0x3, 0x2, 0x2, 0x2, 0x13d7, 0x13d8, 
       0x5, 0x1d8, 0xed, 0x2, 0x13d8, 0x13d9, 0x7, 0x2, 0x2, 0x3, 0x13d9, 
       0x13ea, 0x3, 0x2, 0x2, 0x2, 0x13da, 0x13db, 0x5, 0x1da, 0xee, 0x2, 
       0x13db, 0x13dc, 0x7, 0x2, 0x2, 0x3, 0x13dc, 0x13ea, 0x3, 0x2, 0x2, 
       0x2, 0x13dd, 0x13de, 0x5, 0x1e0, 0xf1, 0x2, 0x13de, 0x13df, 0x7, 
       0x2, 0x2, 0x3, 0x13df, 0x13ea, 0x3, 0x2, 0x2, 0x2, 0x13e0, 0x13e1, 
       0x5, 0x1e4, 0xf3, 0x2, 0x13e1, 0x13e2, 0x7, 0x2, 0x2, 0x3, 0x13e2, 
       0x13ea, 0x3, 0x2, 0x2, 0x2, 0x13e3, 0x13e4, 0x5, 0x198, 0xcd, 0x2, 
       0x13e4, 0x13e5, 0x7, 0x2, 0x2, 0x3, 0x13e5, 0x13ea, 0x3, 0x2, 0x2, 
       0x2, 0x13e6, 0x13e7, 0x5, 0x184, 0xc3, 0x2, 0x13e7, 0x13e8, 0x7, 
       0x2, 0x2, 0x3, 0x13e8, 0x13ea, 0x3, 0x2, 0x2, 0x2, 0x13e9, 0x13d4, 
       0x3, 0x2, 0x2, 0x2, 0x13e9, 0x13d7, 0x3, 0x2, 0x2, 0x2, 0x13e9, 0x13da, 
       0x3, 0x2, 0x2, 0x2, 0x13e9, 0x13dd, 0x3, 0x2, 0x2, 0x2, 0x13e9, 0x13e0, 
       0x3, 0x2, 0x2, 0x2, 0x13e9, 0x13e3, 0x3, 0x2, 0x2, 0x2, 0x13e9, 0x13e6, 
       0x3, 0x2, 0x2, 0x2, 0x13ea, 0x309, 0x3, 0x2, 0x2, 0x2, 0x13eb, 0x13ec, 
       0x7, 0x22, 0x2, 0x2, 0x13ec, 0x13ed, 0x7, 0x46, 0x2, 0x2, 0x13ed, 
       0x13ee, 0x5, 0x1ae, 0xd8, 0x2, 0x13ee, 0x13ef, 0x7, 0x47, 0x2, 0x2, 
       0x13ef, 0x13f0, 0x5, 0x112, 0x8a, 0x2, 0x13f0, 0x13f1, 0x7, 0x2, 
       0x2, 0x3, 0x13f1, 0x30b, 0x3, 0x2, 0x2, 0x2, 0x13f2, 0x13f3, 0x7, 
       0x22, 0x2, 0x2, 0x13f3, 0x13f4, 0x7, 0x46, 0x2, 0x2, 0x13f4, 0x13f5, 
       0x5, 0x1ae, 0xd8, 0x2, 0x13f5, 0x13f6, 0x7, 0x47, 0x2, 0x2, 0x13f6, 
       0x13f7, 0x5, 0x114, 0x8b, 0x2, 0x13f7, 0x13f8, 0x7, 0x1b, 0x2, 0x2, 
       0x13f8, 0x13f9, 0x5, 0x112, 0x8a, 0x2, 0x13f9, 0x13fa, 0x7, 0x2, 
       0x2, 0x3, 0x13fa, 0x30d, 0x3, 0x2, 0x2, 0x2, 0x13fb, 0x13fc, 0x7, 
       0x22, 0x2, 0x2, 0x13fc, 0x13fd, 0x7, 0x46, 0x2, 0x2, 0x13fd, 0x13fe, 
       0x5, 0x1ae, 0xd8, 0x2, 0x13fe, 0x13ff, 0x7, 0x47, 0x2, 0x2, 0x13ff, 
       0x1400, 0x5, 0x114, 0x8b, 0x2, 0x1400, 0x1401, 0x7, 0x1b, 0x2, 0x2, 
       0x1401, 0x1402, 0x5, 0x114, 0x8b, 0x2, 0x1402, 0x1403, 0x7, 0x2, 
       0x2, 0x3, 0x1403, 0x30f, 0x3, 0x2, 0x2, 0x2, 0x1404, 0x1405, 0x7, 
       0xe, 0x2, 0x2, 0x1405, 0x1406, 0x5, 0x1ae, 0xd8, 0x2, 0x1406, 0x1407, 
       0x7, 0x4c, 0x2, 0x2, 0x1407, 0x1408, 0x7, 0x2, 0x2, 0x3, 0x1408, 
       0x1411, 0x3, 0x2, 0x2, 0x2, 0x1409, 0x140a, 0x7, 0xe, 0x2, 0x2, 0x140a, 
       0x140b, 0x5, 0x1ae, 0xd8, 0x2, 0x140b, 0x140c, 0x7, 0x58, 0x2, 0x2, 
       0x140c, 0x140d, 0x5, 0x1ae, 0xd8, 0x2, 0x140d, 0x140e, 0x7, 0x4c, 
       0x2, 0x2, 0x140e, 0x140f, 0x7, 0x2, 0x2, 0x3, 0x140f, 0x1411, 0x3, 
       0x2, 0x2, 0x2, 0x1410, 0x1404, 0x3, 0x2, 0x2, 0x2, 0x1410, 0x1409, 
       0x3, 0x2, 0x2, 0x2, 0x1411, 0x311, 0x3, 0x2, 0x2, 0x2, 0x1412, 0x1413, 
       0x7, 0x35, 0x2, 0x2, 0x1413, 0x1414, 0x7, 0x46, 0x2, 0x2, 0x1414, 
       0x1415, 0x5, 0x1ae, 0xd8, 0x2, 0x1415, 0x1416, 0x7, 0x47, 0x2, 0x2, 
       0x1416, 0x1417, 0x5, 0x12c, 0x97, 0x2, 0x1417, 0x1418, 0x7, 0x2, 
       0x2, 0x3, 0x1418, 0x313, 0x3, 0x2, 0x2, 0x2, 0x1419, 0x141d, 0x7, 
       0x48, 0x2, 0x2, 0x141a, 0x141c, 0x5, 0x12e, 0x98, 0x2, 0x141b, 0x141a, 
       0x3, 0x2, 0x2, 0x2, 0x141c, 0x141f, 0x3, 0x2, 0x2, 0x2, 0x141d, 0x141b, 
       0x3, 0x2, 0x2, 0x2, 0x141d, 0x141e, 0x3, 0x2, 0x2, 0x2, 0x141e, 0x1423, 
       0x3, 0x2, 0x2, 0x2, 0x141f, 0x141d, 0x3, 0x2, 0x2, 0x2, 0x1420, 0x1422, 
       0x5, 0x132, 0x9a, 0x2, 0x1421, 0x1420, 0x3, 0x2, 0x2, 0x2, 0x1422, 
       0x1425, 0x3, 0x2, 0x2, 0x2, 0x1423, 0x1421, 0x3, 0x2, 0x2, 0x2, 0x1423, 
       0x1424, 0x3, 0x2, 0x2, 0x2, 0x1424, 0x1426, 0x3, 0x2, 0x2, 0x2, 0x1425, 
       0x1423, 0x3, 0x2, 0x2, 0x2, 0x1426, 0x1427, 0x7, 0x49, 0x2, 0x2, 
       0x1427, 0x1428, 0x7, 0x2, 0x2, 0x3, 0x1428, 0x315, 0x3, 0x2, 0x2, 
       0x2, 0x1429, 0x142a, 0x5, 0x130, 0x99, 0x2, 0x142a, 0x142b, 0x5, 
       0x10a, 0x86, 0x2, 0x142b, 0x142c, 0x7, 0x2, 0x2, 0x3, 0x142c, 0x317, 
       0x3, 0x2, 0x2, 0x2, 0x142d, 0x142f, 0x5, 0x132, 0x9a, 0x2, 0x142e, 
       0x142d, 0x3, 0x2, 0x2, 0x2, 0x142f, 0x1430, 0x3, 0x2, 0x2, 0x2, 0x1430, 
       0x142e, 0x3, 0x2, 0x2, 0x2, 0x1430, 0x1431, 0x3, 0x2, 0x2, 0x2, 0x1431, 
       0x1432, 0x3, 0x2, 0x2, 0x2, 0x1432, 0x1433, 0x7, 0x2, 0x2, 0x3, 0x1433, 
       0x319, 0x3, 0x2, 0x2, 0x2, 0x1434, 0x1435, 0x7, 0x12, 0x2, 0x2, 0x1435, 
       0x1436, 0x5, 0x1ac, 0xd7, 0x2, 0x1436, 0x1437, 0x7, 0x58, 0x2, 0x2, 
       0x1437, 0x1438, 0x7, 0x2, 0x2, 0x3, 0x1438, 0x1442, 0x3, 0x2, 0x2, 
       0x2, 0x1439, 0x143a, 0x7, 0x12, 0x2, 0x2, 0x143a, 0x143b, 0x5, 0x134, 
       0x9b, 0x2, 0x143b, 0x143c, 0x7, 0x58, 0x2, 0x2, 0x143c, 0x143d, 0x7, 
       0x2, 0x2, 0x3, 0x143d, 0x1442, 0x3, 0x2, 0x2, 0x2, 0x143e, 0x143f, 
       0x7, 0x18, 0x2, 0x2, 0x143f, 0x1440, 0x7, 0x58, 0x2, 0x2, 0x1440, 
       0x1442, 0x7, 0x2, 0x2, 0x3, 0x1441, 0x1434, 0x3, 0x2, 0x2, 0x2, 0x1441, 
       0x1439, 0x3, 0x2, 0x2, 0x2, 0x1441, 0x143e, 0x3, 0x2, 0x2, 0x2, 0x1442, 
       0x31b, 0x3, 0x2, 0x2, 0x2, 0x1443, 0x1444, 0x5, 0x3d2, 0x1ea, 0x2, 
       0x1444, 0x1445, 0x7, 0x2, 0x2, 0x3, 0x1445, 0x31d, 0x3, 0x2, 0x2, 
       0x2, 0x1446, 0x1447, 0x7, 0x3e, 0x2, 0x2, 0x1447, 0x1448, 0x7, 0x46, 
       0x2, 0x2, 0x1448, 0x1449, 0x5, 0x1ae, 0xd8, 0x2, 0x1449, 0x144a, 
       0x7, 0x47, 0x2, 0x2, 0x144a, 0x144b, 0x5, 0x112, 0x8a, 0x2, 0x144b, 
       0x144c, 0x7, 0x2, 0x2, 0x3, 0x144c, 0x31f, 0x3, 0x2, 0x2, 0x2, 0x144d, 
       0x144e, 0x7, 0x3e, 0x2, 0x2, 0x144e, 0x144f, 0x7, 0x46, 0x2, 0x2, 
       0x144f, 0x1450, 0x5, 0x1ae, 0xd8, 0x2, 0x1450, 0x1451, 0x7, 0x47, 
       0x2, 0x2, 0x1451, 0x1452, 0x5, 0x114, 0x8b, 0x2, 0x1452, 0x1453, 
       0x7, 0x2, 0x2, 0x3, 0x1453, 0x321, 0x3, 0x2, 0x2, 0x2, 0x1454, 0x1455, 
       0x7, 0x19, 0x2, 0x2, 0x1455, 0x1456, 0x5, 0x112, 0x8a, 0x2, 0x1456, 
       0x1457, 0x7, 0x3e, 0x2, 0x2, 0x1457, 0x1458, 0x7, 0x46, 0x2, 0x2, 
       0x1458, 0x1459, 0x5, 0x1ae, 0xd8, 0x2, 0x1459, 0x145a, 0x7, 0x47, 
       0x2, 0x2, 0x145a, 0x145b, 0x7, 0x4c, 0x2, 0x2, 0x145b, 0x145c, 0x7, 
       0x2, 0x2, 0x3, 0x145c, 0x323, 0x3, 0x2, 0x2, 0x2, 0x145d, 0x145e, 
       0x5, 0x140, 0xa1, 0x2, 0x145e, 0x145f, 0x7, 0x2, 0x2, 0x3, 0x145f, 
       0x1464, 0x3, 0x2, 0x2, 0x2, 0x1460, 0x1461, 0x5, 0x14a, 0xa6, 0x2, 
       0x1461, 0x1462, 0x7, 0x2, 0x2, 0x3, 0x1462, 0x1464, 0x3, 0x2, 0x2, 
       0x2, 0x1463, 0x145d, 0x3, 0x2, 0x2, 0x2, 0x1463, 0x1460, 0x3, 0x2, 
       0x2, 0x2, 0x1464, 0x325, 0x3, 0x2, 0x2, 0x2, 0x1465, 0x1466, 0x5, 
       0x142, 0xa2, 0x2, 0x1466, 0x1467, 0x7, 0x2, 0x2, 0x3, 0x1467, 0x146c, 
       0x3, 0x2, 0x2, 0x2, 0x1468, 0x1469, 0x5, 0x14c, 0xa7, 0x2, 0x1469, 
       0x146a, 0x7, 0x2, 0x2, 0x3, 0x146a, 0x146c, 0x3, 0x2, 0x2, 0x2, 0x146b, 
       0x1465, 0x3, 0x2, 0x2, 0x2, 0x146b, 0x1468, 0x3, 0x2, 0x2, 0x2, 0x146c, 
       0x327, 0x3, 0x2, 0x2, 0x2, 0x146d, 0x146e, 0x7, 0x21, 0x2, 0x2, 0x146e, 
       0x1470, 0x7, 0x46, 0x2, 0x2, 0x146f, 0x1471, 0x5, 0x144, 0xa3, 0x2, 
       0x1470, 0x146f, 0x3, 0x2, 0x2, 0x2, 0x1470, 0x1471, 0x3, 0x2, 0x2, 
       0x2, 0x1471, 0x1472, 0x3, 0x2, 0x2, 0x2, 0x1472, 0x1474, 0x7, 0x4c, 
       0x2, 0x2, 0x1473, 0x1475, 0x5, 0x1ae, 0xd8, 0x2, 0x1474, 0x1473, 
       0x3, 0x2, 0x2, 0x2, 0x1474, 0x1475, 0x3, 0x2, 0x2, 0x2, 0x1475, 0x1476, 
       0x3, 0x2, 0x2, 0x2, 0x1476, 0x1478, 0x7, 0x4c, 0x2, 0x2, 0x1477, 
       0x1479, 0x5, 0x146, 0xa4, 0x2, 0x1478, 0x1477, 0x3, 0x2, 0x2, 0x2, 
       0x1478, 0x1479, 0x3, 0x2, 0x2, 0x2, 0x1479, 0x147a, 0x3, 0x2, 0x2, 
       0x2, 0x147a, 0x147b, 0x7, 0x47, 0x2, 0x2, 0x147b, 0x147c, 0x5, 0x112, 
       0x8a, 0x2, 0x147c, 0x147d, 0x7, 0x2, 0x2, 0x3, 0x147d, 0x329, 0x3, 
       0x2, 0x2, 0x2, 0x147e, 0x147f, 0x7, 0x21, 0x2, 0x2, 0x147f, 0x1481, 
       0x7, 0x46, 0x2, 0x2, 0x1480, 0x1482, 0x5, 0x144, 0xa3, 0x2, 0x1481, 
       0x1480, 0x3, 0x2, 0x2, 0x2, 0x1481, 0x1482, 0x3, 0x2, 0x2, 0x2, 0x1482, 
       0x1483, 0x3, 0x2, 0x2, 0x2, 0x1483, 0x1485, 0x7, 0x4c, 0x2, 0x2, 
       0x1484, 0x1486, 0x5, 0x1ae, 0xd8, 0x2, 0x1485, 0x1484, 0x3, 0x2, 
       0x2, 0x2, 0x1485, 0x1486, 0x3, 0x2, 0x2, 0x2, 0x1486, 0x1487, 0x3, 
       0x2, 0x2, 0x2, 0x1487, 0x1489, 0x7, 0x4c, 0x2, 0x2, 0x1488, 0x148a, 
       0x5, 0x146, 0xa4, 0x2, 0x1489, 0x1488, 0x3, 0x2, 0x2, 0x2, 0x1489, 
       0x148a, 0x3, 0x2, 0x2, 0x2, 0x148a, 0x148b, 0x3, 0x2, 0x2, 0x2, 0x148b, 
       0x148c, 0x7, 0x47, 0x2, 0x2, 0x148c, 0x148d, 0x5, 0x114, 0x8b, 0x2, 
       0x148d, 0x148e, 0x7, 0x2, 0x2, 0x3, 0x148e, 0x32b, 0x3, 0x2, 0x2, 
       0x2, 0x148f, 0x1490, 0x5, 0x148, 0xa5, 0x2, 0x1490, 0x1491, 0x7, 
       0x2, 0x2, 0x3, 0x1491, 0x1496, 0x3, 0x2, 0x2, 0x2, 0x1492, 0x1493, 
       0x5, 0x110, 0x89, 0x2, 0x1493, 0x1494, 0x7, 0x2, 0x2, 0x3, 0x1494, 
       0x1496, 0x3, 0x2, 0x2, 0x2, 0x1495, 0x148f, 0x3, 0x2, 0x2, 0x2, 0x1495, 
       0x1492, 0x3, 0x2, 0x2, 0x2, 0x1496, 0x32d, 0x3, 0x2, 0x2, 0x2, 0x1497, 
       0x1498, 0x5, 0x148, 0xa5, 0x2, 0x1498, 0x1499, 0x7, 0x2, 0x2, 0x3, 
       0x1499, 0x32f, 0x3, 0x2, 0x2, 0x2, 0x149a, 0x149f, 0x5, 0x120, 0x91, 
       0x2, 0x149b, 0x149c, 0x7, 0x4d, 0x2, 0x2, 0x149c, 0x149e, 0x5, 0x120, 
       0x91, 0x2, 0x149d, 0x149b, 0x3, 0x2, 0x2, 0x2, 0x149e, 0x14a1, 0x3, 
       0x2, 0x2, 0x2, 0x149f, 0x149d, 0x3, 0x2, 0x2, 0x2, 0x149f, 0x14a0, 
       0x3, 0x2, 0x2, 0x2, 0x14a0, 0x14a2, 0x3, 0x2, 0x2, 0x2, 0x14a1, 0x149f, 
       0x3, 0x2, 0x2, 0x2, 0x14a2, 0x14a3, 0x7, 0x2, 0x2, 0x3, 0x14a3, 0x331, 
       0x3, 0x2, 0x2, 0x2, 0x14a4, 0x14a5, 0x7, 0x21, 0x2, 0x2, 0x14a5, 
       0x14a9, 0x7, 0x46, 0x2, 0x2, 0x14a6, 0x14a8, 0x5, 0xa8, 0x55, 0x2, 
       0x14a7, 0x14a6, 0x3, 0x2, 0x2, 0x2, 0x14a8, 0x14ab, 0x3, 0x2, 0x2, 
       0x2, 0x14a9, 0x14a7, 0x3, 0x2, 0x2, 0x2, 0x14a9, 0x14aa, 0x3, 0x2, 
       0x2, 0x2, 0x14aa, 0x14ac, 0x3, 0x2, 0x2, 0x2, 0x14ab, 0x14a9, 0x3, 
       0x2, 0x2, 0x2, 0x14ac, 0x14ad, 0x5, 0x80, 0x41, 0x2, 0x14ad, 0x14ae, 
       0x5, 0x7c, 0x3f, 0x2, 0x14ae, 0x14af, 0x7, 0x58, 0x2, 0x2, 0x14af, 
       0x14b0, 0x5, 0x1ae, 0xd8, 0x2, 0x14b0, 0x14b1, 0x7, 0x47, 0x2, 0x2, 
       0x14b1, 0x14b2, 0x5, 0x112, 0x8a, 0x2, 0x14b2, 0x14b3, 0x7, 0x2, 
       0x2, 0x3, 0x14b3, 0x333, 0x3, 0x2, 0x2, 0x2, 0x14b4, 0x14b5, 0x7, 
       0x21, 0x2, 0x2, 0x14b5, 0x14b9, 0x7, 0x46, 0x2, 0x2, 0x14b6, 0x14b8, 
       0x5, 0xa8, 0x55, 0x2, 0x14b7, 0x14b6, 0x3, 0x2, 0x2, 0x2, 0x14b8, 
       0x14bb, 0x3, 0x2, 0x2, 0x2, 0x14b9, 0x14b7, 0x3, 0x2, 0x2, 0x2, 0x14b9, 
       0x14ba, 0x3, 0x2, 0x2, 0x2, 0x14ba, 0x14bc, 0x3, 0x2, 0x2, 0x2, 0x14bb, 
       0x14b9, 0x3, 0x2, 0x2, 0x2, 0x14bc, 0x14bd, 0x5, 0x80, 0x41, 0x2, 
       0x14bd, 0x14be, 0x5, 0x7c, 0x3f, 0x2, 0x14be, 0x14bf, 0x7, 0x58, 
       0x2, 0x2, 0x14bf, 0x14c0, 0x5, 0x1ae, 0xd8, 0x2, 0x14c0, 0x14c1, 
       0x7, 0x47, 0x2, 0x2, 0x14c1, 0x14c2, 0x5, 0x114, 0x8b, 0x2, 0x14c2, 
       0x335, 0x3, 0x2, 0x2, 0x2, 0x14c3, 0x14c5, 0x7, 0x10, 0x2, 0x2, 0x14c4, 
       0x14c6, 0x5, 0x3d2, 0x1ea, 0x2, 0x14c5, 0x14c4, 0x3, 0x2, 0x2, 0x2, 
       0x14c5, 0x14c6, 0x3, 0x2, 0x2, 0x2, 0x14c6, 0x14c7, 0x3, 0x2, 0x2, 
       0x2, 0x14c7, 0x14c8, 0x7, 0x4c, 0x2, 0x2, 0x14c8, 0x14c9, 0x7, 0x2, 
       0x2, 0x3, 0x14c9, 0x337, 0x3, 0x2, 0x2, 0x2, 0x14ca, 0x14cc, 0x7, 
       0x17, 0x2, 0x2, 0x14cb, 0x14cd, 0x5, 0x3d2, 0x1ea, 0x2, 0x14cc, 0x14cb, 
       0x3, 0x2, 0x2, 0x2, 0x14cc, 0x14cd, 0x3, 0x2, 0x2, 0x2, 0x14cd, 0x14ce, 
       0x3, 0x2, 0x2, 0x2, 0x14ce, 0x14cf, 0x7, 0x4c, 0x2, 0x2, 0x14cf, 
       0x14d0, 0x7, 0x2, 0x2, 0x3, 0x14d0, 0x339, 0x3, 0x2, 0x2, 0x2, 0x14d1, 
       0x14d3, 0x7, 0x30, 0x2, 0x2, 0x14d2, 0x14d4, 0x5, 0x1ae, 0xd8, 0x2, 
       0x14d3, 0x14d2, 0x3, 0x2, 0x2, 0x2, 0x14d3, 0x14d4, 0x3, 0x2, 0x2, 
       0x2, 0x14d4, 0x14d5, 0x3, 0x2, 0x2, 0x2, 0x14d5, 0x14d6, 0x7, 0x4c, 
       0x2, 0x2, 0x14d6, 0x14d7, 0x7, 0x2, 0x2, 0x3, 0x14d7, 0x33b, 0x3, 
       0x2, 0x2, 0x2, 0x14d8, 0x14d9, 0x7, 0x38, 0x2, 0x2, 0x14d9, 0x14da, 
       0x5, 0x1ae, 0xd8, 0x2, 0x14da, 0x14db, 0x7, 0x4c, 0x2, 0x2, 0x14db, 
       0x14dc, 0x7, 0x2, 0x2, 0x3, 0x14dc, 0x33d, 0x3, 0x2, 0x2, 0x2, 0x14dd, 
       0x14de, 0x7, 0x36, 0x2, 0x2, 0x14de, 0x14df, 0x7, 0x46, 0x2, 0x2, 
       0x14df, 0x14e0, 0x5, 0x1ae, 0xd8, 0x2, 0x14e0, 0x14e1, 0x7, 0x47, 
       0x2, 0x2, 0x14e1, 0x14e2, 0x5, 0x108, 0x85, 0x2, 0x14e2, 0x14e3, 
       0x7, 0x2, 0x2, 0x3, 0x14e3, 0x33f, 0x3, 0x2, 0x2, 0x2, 0x14e4, 0x14e5, 
       0x7, 0x3b, 0x2, 0x2, 0x14e5, 0x14e6, 0x5, 0x108, 0x85, 0x2, 0x14e6, 
       0x14e7, 0x5, 0x15a, 0xae, 0x2, 0x14e7, 0x14e8, 0x7, 0x2, 0x2, 0x3, 
       0x14e8, 0x14f5, 0x3, 0x2, 0x2, 0x2, 0x14e9, 0x14ea, 0x7, 0x3b, 0x2, 
       0x2, 0x14ea, 0x14ec, 0x5, 0x108, 0x85, 0x2, 0x14eb, 0x14ed, 0x5, 
       0x15a, 0xae, 0x2, 0x14ec, 0x14eb, 0x3, 0x2, 0x2, 0x2, 0x14ec, 0x14ed, 
       0x3, 0x2, 0x2, 0x2, 0x14ed, 0x14ee, 0x3, 0x2, 0x2, 0x2, 0x14ee, 0x14ef, 
       0x5, 0x162, 0xb2, 0x2, 0x14ef, 0x14f0, 0x7, 0x2, 0x2, 0x3, 0x14f0, 
       0x14f5, 0x3, 0x2, 0x2, 0x2, 0x14f1, 0x14f2, 0x5, 0x164, 0xb3, 0x2, 
       0x14f2, 0x14f3, 0x7, 0x2, 0x2, 0x3, 0x14f3, 0x14f5, 0x3, 0x2, 0x2, 
       0x2, 0x14f4, 0x14e4, 0x3, 0x2, 0x2, 0x2, 0x14f4, 0x14e9, 0x3, 0x2, 
       0x2, 0x2, 0x14f4, 0x14f1, 0x3, 0x2, 0x2, 0x2, 0x14f5, 0x341, 0x3, 
       0x2, 0x2, 0x2, 0x14f6, 0x14f8, 0x5, 0x15c, 0xaf, 0x2, 0x14f7, 0x14f6, 
       0x3, 0x2, 0x2, 0x2, 0x14f8, 0x14f9, 0x3, 0x2, 0x2, 0x2, 0x14f9, 0x14f7, 
       0x3, 0x2, 0x2, 0x2, 0x14f9, 0x14fa, 0x3, 0x2, 0x2, 0x2, 0x14fa, 0x14fb, 
       0x3, 0x2, 0x2, 0x2, 0x14fb, 0x14fc, 0x7, 0x2, 0x2, 0x3, 0x14fc, 0x343, 
       0x3, 0x2, 0x2, 0x2, 0x14fd, 0x14fe, 0x7, 0x13, 0x2, 0x2, 0x14fe, 
       0x14ff, 0x7, 0x46, 0x2, 0x2, 0x14ff, 0x1500, 0x5, 0x15e, 0xb0, 0x2, 
       0x1500, 0x1501, 0x7, 0x47, 0x2, 0x2, 0x1501, 0x1502, 0x5, 0x108, 
       0x85, 0x2, 0x1502, 0x1503, 0x7, 0x2, 0x2, 0x3, 0x1503, 0x345, 0x3, 
       0x2, 0x2, 0x2, 0x1504, 0x1506, 0x5, 0xa8, 0x55, 0x2, 0x1505, 0x1504, 
       0x3, 0x2, 0x2, 0x2, 0x1506, 0x1509, 0x3, 0x2, 0x2, 0x2, 0x1507, 0x1505, 
       0x3, 0x2, 0x2, 0x2, 0x1507, 0x1508, 0x3, 0x2, 0x2, 0x2, 0x1508, 0x150a, 
       0x3, 0x2, 0x2, 0x2, 0x1509, 0x1507, 0x3, 0x2, 0x2, 0x2, 0x150a, 0x150b, 
       0x5, 0x160, 0xb1, 0x2, 0x150b, 0x150c, 0x5, 0x7c, 0x3f, 0x2, 0x150c, 
       0x150d, 0x7, 0x2, 0x2, 0x3, 0x150d, 0x347, 0x3, 0x2, 0x2, 0x2, 0x150e, 
       0x1513, 0x5, 0x88, 0x45, 0x2, 0x150f, 0x1510, 0x7, 0x67, 0x2, 0x2, 
       0x1510, 0x1512, 0x5, 0x10, 0x9, 0x2, 0x1511, 0x150f, 0x3, 0x2, 0x2, 
       0x2, 0x1512, 0x1515, 0x3, 0x2, 0x2, 0x2, 0x1513, 0x1511, 0x3, 0x2, 
       0x2, 0x2, 0x1513, 0x1514, 0x3, 0x2, 0x2, 0x2, 0x1514, 0x1516, 0x3, 
       0x2, 0x2, 0x2, 0x1515, 0x1513, 0x3, 0x2, 0x2, 0x2, 0x1516, 0x1517, 
       0x7, 0x2, 0x2, 0x3, 0x1517, 0x349, 0x3, 0x2, 0x2, 0x2, 0x1518, 0x1519, 
       0x7, 0x1f, 0x2, 0x2, 0x1519, 0x151a, 0x5, 0x108, 0x85, 0x2, 0x151a, 
       0x151b, 0x7, 0x2, 0x2, 0x3, 0x151b, 0x34b, 0x3, 0x2, 0x2, 0x2, 0x151c, 
       0x151d, 0x7, 0x3b, 0x2, 0x2, 0x151d, 0x151e, 0x5, 0x166, 0xb4, 0x2, 
       0x151e, 0x1520, 0x5, 0x108, 0x85, 0x2, 0x151f, 0x1521, 0x5, 0x15a, 
       0xae, 0x2, 0x1520, 0x151f, 0x3, 0x2, 0x2, 0x2, 0x1520, 0x1521, 0x3, 
       0x2, 0x2, 0x2, 0x1521, 0x1523, 0x3, 0x2, 0x2, 0x2, 0x1522, 0x1524, 
       0x5, 0x162, 0xb2, 0x2, 0x1523, 0x1522, 0x3, 0x2, 0x2, 0x2, 0x1523, 
       0x1524, 0x3, 0x2, 0x2, 0x2, 0x1524, 0x1525, 0x3, 0x2, 0x2, 0x2, 0x1525, 
       0x1526, 0x7, 0x2, 0x2, 0x3, 0x1526, 0x34d, 0x3, 0x2, 0x2, 0x2, 0x1527, 
       0x1528, 0x7, 0x46, 0x2, 0x2, 0x1528, 0x152a, 0x5, 0x168, 0xb5, 0x2, 
       0x1529, 0x152b, 0x7, 0x4c, 0x2, 0x2, 0x152a, 0x1529, 0x3, 0x2, 0x2, 
       0x2, 0x152a, 0x152b, 0x3, 0x2, 0x2, 0x2, 0x152b, 0x152c, 0x3, 0x2, 
       0x2, 0x2, 0x152c, 0x152d, 0x7, 0x47, 0x2, 0x2, 0x152d, 0x152e, 0x7, 
       0x2, 0x2, 0x3, 0x152e, 0x34f, 0x3, 0x2, 0x2, 0x2, 0x152f, 0x1534, 
       0x5, 0x16a, 0xb6, 0x2, 0x1530, 0x1531, 0x7, 0x4c, 0x2, 0x2, 0x1531, 
       0x1533, 0x5, 0x16a, 0xb6, 0x2, 0x1532, 0x1530, 0x3, 0x2, 0x2, 0x2, 
       0x1533, 0x1536, 0x3, 0x2, 0x2, 0x2, 0x1534, 0x1532, 0x3, 0x2, 0x2, 
       0x2, 0x1534, 0x1535, 0x3, 0x2, 0x2, 0x2, 0x1535, 0x1537, 0x3, 0x2, 
       0x2, 0x2, 0x1536, 0x1534, 0x3, 0x2, 0x2, 0x2, 0x1537, 0x1538, 0x7, 
       0x2, 0x2, 0x3, 0x1538, 0x351, 0x3, 0x2, 0x2, 0x2, 0x1539, 0x153b, 
       0x5, 0xa8, 0x55, 0x2, 0x153a, 0x1539, 0x3, 0x2, 0x2, 0x2, 0x153b, 
       0x153e, 0x3, 0x2, 0x2, 0x2, 0x153c, 0x153a, 0x3, 0x2, 0x2, 0x2, 0x153c, 
       0x153d, 0x3, 0x2, 0x2, 0x2, 0x153d, 0x153f, 0x3, 0x2, 0x2, 0x2, 0x153e, 
       0x153c, 0x3, 0x2, 0x2, 0x2, 0x153f, 0x1540, 0x5, 0x80, 0x41, 0x2, 
       0x1540, 0x1541, 0x5, 0x7c, 0x3f, 0x2, 0x1541, 0x1542, 0x7, 0x52, 
       0x2, 0x2, 0x1542, 0x1543, 0x5, 0x1ae, 0xd8, 0x2, 0x1543, 0x1544, 
       0x7, 0x2, 0x2, 0x3, 0x1544, 0x1549, 0x3, 0x2, 0x2, 0x2, 0x1545, 0x1546, 
       0x5, 0x16c, 0xb7, 0x2, 0x1546, 0x1547, 0x7, 0x2, 0x2, 0x3, 0x1547, 
       0x1549, 0x3, 0x2, 0x2, 0x2, 0x1548, 0x153c, 0x3, 0x2, 0x2, 0x2, 0x1548, 
       0x1545, 0x3, 0x2, 0x2, 0x2, 0x1549, 0x353, 0x3, 0x2, 0x2, 0x2, 0x154a, 
       0x154b, 0x5, 0x3c, 0x1f, 0x2, 0x154b, 0x154c, 0x7, 0x2, 0x2, 0x3, 
       0x154c, 0x1551, 0x3, 0x2, 0x2, 0x2, 0x154d, 0x154e, 0x5, 0x18c, 0xc7, 
       0x2, 0x154e, 0x154f, 0x7, 0x2, 0x2, 0x3, 0x154f, 0x1551, 0x3, 0x2, 
       0x2, 0x2, 0x1550, 0x154a, 0x3, 0x2, 0x2, 0x2, 0x1550, 0x154d, 0x3, 
       0x2, 0x2, 0x2, 0x1551, 0x355, 0x3, 0x2, 0x2, 0x2, 0x1552, 0x1553, 
       0x5, 0x17c, 0xbf, 0x2, 0x1553, 0x1554, 0x7, 0x2, 0x2, 0x3, 0x1554, 
       0x1559, 0x3, 0x2, 0x2, 0x2, 0x1555, 0x1556, 0x5, 0x1a6, 0xd4, 0x2, 
       0x1556, 0x1557, 0x7, 0x2, 0x2, 0x3, 0x1557, 0x1559, 0x3, 0x2, 0x2, 
       0x2, 0x1558, 0x1552, 0x3, 0x2, 0x2, 0x2, 0x1558, 0x1555, 0x3, 0x2, 
       0x2, 0x2, 0x1559, 0x155f, 0x3, 0x2, 0x2, 0x2, 0x155a, 0x155b, 0x5, 
       0x176, 0xbc, 0x2, 0x155b, 0x155c, 0x7, 0x2, 0x2, 0x3, 0x155c, 0x155e, 
       0x3, 0x2, 0x2, 0x2, 0x155d, 0x155a, 0x3, 0x2, 0x2, 0x2, 0x155e, 0x1561, 
       0x3, 0x2, 0x2, 0x2, 0x155f, 0x155d, 0x3, 0x2, 0x2, 0x2, 0x155f, 0x1560, 
       0x3, 0x2, 0x2, 0x2, 0x1560, 0x357, 0x3, 0x2, 0x2, 0x2, 0x1561, 0x155f, 
       0x3, 0x2, 0x2, 0x2, 0x1562, 0x1563, 0x5, 0x2, 0x2, 0x2, 0x1563, 0x1564, 
       0x7, 0x2, 0x2, 0x3, 0x1564, 0x1584, 0x3, 0x2, 0x2, 0x2, 0x1565, 0x1566, 
       0x5, 0x182, 0xc2, 0x2, 0x1566, 0x1567, 0x7, 0x2, 0x2, 0x3, 0x1567, 
       0x1584, 0x3, 0x2, 0x2, 0x2, 0x1568, 0x1569, 0x7, 0x37, 0x2, 0x2, 
       0x1569, 0x1584, 0x7, 0x2, 0x2, 0x3, 0x156a, 0x156b, 0x5, 0x38, 0x1d, 
       0x2, 0x156b, 0x156c, 0x7, 0x4e, 0x2, 0x2, 0x156c, 0x156d, 0x7, 0x37, 
       0x2, 0x2, 0x156d, 0x156e, 0x7, 0x2, 0x2, 0x3, 0x156e, 0x1584, 0x3, 
       0x2, 0x2, 0x2, 0x156f, 0x1570, 0x7, 0x46, 0x2, 0x2, 0x1570, 0x1571, 
       0x5, 0x1ae, 0xd8, 0x2, 0x1571, 0x1572, 0x7, 0x47, 0x2, 0x2, 0x1572, 
       0x1573, 0x7, 0x2, 0x2, 0x3, 0x1573, 0x1584, 0x3, 0x2, 0x2, 0x2, 0x1574, 
       0x1575, 0x5, 0x184, 0xc3, 0x2, 0x1575, 0x1576, 0x7, 0x2, 0x2, 0x3, 
       0x1576, 0x1584, 0x3, 0x2, 0x2, 0x2, 0x1577, 0x1578, 0x5, 0x18c, 0xc7, 
       0x2, 0x1578, 0x1579, 0x7, 0x2, 0x2, 0x3, 0x1579, 0x1584, 0x3, 0x2, 
       0x2, 0x2, 0x157a, 0x157b, 0x5, 0x192, 0xca, 0x2, 0x157b, 0x157c, 
       0x7, 0x2, 0x2, 0x3, 0x157c, 0x1584, 0x3, 0x2, 0x2, 0x2, 0x157d, 0x157e, 
       0x5, 0x198, 0xcd, 0x2, 0x157e, 0x157f, 0x7, 0x2, 0x2, 0x3, 0x157f, 
       0x1584, 0x3, 0x2, 0x2, 0x2, 0x1580, 0x1581, 0x5, 0x1a0, 0xd1, 0x2, 
       0x1581, 0x1582, 0x7, 0x2, 0x2, 0x3, 0x1582, 0x1584, 0x3, 0x2, 0x2, 
       0x2, 0x1583, 0x1562, 0x3, 0x2, 0x2, 0x2, 0x1583, 0x1565, 0x3, 0x2, 
       0x2, 0x2, 0x1583, 0x1568, 0x3, 0x2, 0x2, 0x2, 0x1583, 0x156a, 0x3, 
       0x2, 0x2, 0x2, 0x1583, 0x156f, 0x3, 0x2, 0x2, 0x2, 0x1583, 0x1574, 
       0x3, 0x2, 0x2, 0x2, 0x1583, 0x1577, 0x3, 0x2, 0x2, 0x2, 0x1583, 0x157a, 
       0x3, 0x2, 0x2, 0x2, 0x1583, 0x157d, 0x3, 0x2, 0x2, 0x2, 0x1583, 0x1580, 
       0x3, 0x2, 0x2, 0x2, 0x1584, 0x359, 0x3, 0x2, 0x2, 0x2, 0x1585, 0x1586, 
       0x3, 0x2, 0x2, 0x2, 0x1586, 0x35b, 0x3, 0x2, 0x2, 0x2, 0x1587, 0x1588, 
       0x5, 0x2, 0x2, 0x2, 0x1588, 0x1589, 0x7, 0x2, 0x2, 0x3, 0x1589, 0x15b2, 
       0x3, 0x2, 0x2, 0x2, 0x158a, 0x158f, 0x5, 0x38, 0x1d, 0x2, 0x158b, 
       0x158c, 0x7, 0x4a, 0x2, 0x2, 0x158c, 0x158e, 0x7, 0x4b, 0x2, 0x2, 
       0x158d, 0x158b, 0x3, 0x2, 0x2, 0x2, 0x158e, 0x1591, 0x3, 0x2, 0x2, 
       0x2, 0x158f, 0x158d, 0x3, 0x2, 0x2, 0x2, 0x158f, 0x1590, 0x3, 0x2, 
       0x2, 0x2, 0x1590, 0x1592, 0x3, 0x2, 0x2, 0x2, 0x1591, 0x158f, 0x3, 
       0x2, 0x2, 0x2, 0x1592, 0x1593, 0x7, 0x4e, 0x2, 0x2, 0x1593, 0x1594, 
       0x7, 0x15, 0x2, 0x2, 0x1594, 0x1595, 0x7, 0x2, 0x2, 0x3, 0x1595, 
       0x15b2, 0x3, 0x2, 0x2, 0x2, 0x1596, 0x1597, 0x7, 0x3c, 0x2, 0x2, 
       0x1597, 0x1598, 0x7, 0x4e, 0x2, 0x2, 0x1598, 0x1599, 0x7, 0x15, 0x2, 
       0x2, 0x1599, 0x15b2, 0x7, 0x2, 0x2, 0x3, 0x159a, 0x15b2, 0x7, 0x37, 
       0x2, 0x2, 0x159b, 0x159c, 0x5, 0x38, 0x1d, 0x2, 0x159c, 0x159d, 0x7, 
       0x4e, 0x2, 0x2, 0x159d, 0x159e, 0x7, 0x37, 0x2, 0x2, 0x159e, 0x159f, 
       0x7, 0x2, 0x2, 0x3, 0x159f, 0x15b2, 0x3, 0x2, 0x2, 0x2, 0x15a0, 0x15a1, 
       0x7, 0x46, 0x2, 0x2, 0x15a1, 0x15a2, 0x5, 0x1ae, 0xd8, 0x2, 0x15a2, 
       0x15a3, 0x7, 0x47, 0x2, 0x2, 0x15a3, 0x15a4, 0x7, 0x2, 0x2, 0x3, 
       0x15a4, 0x15b2, 0x3, 0x2, 0x2, 0x2, 0x15a5, 0x15a6, 0x5, 0x184, 0xc3, 
       0x2, 0x15a6, 0x15a7, 0x7, 0x2, 0x2, 0x3, 0x15a7, 0x15b2, 0x3, 0x2, 
       0x2, 0x2, 0x15a8, 0x15a9, 0x5, 0x18c, 0xc7, 0x2, 0x15a9, 0x15aa, 
       0x7, 0x2, 0x2, 0x3, 0x15aa, 0x15b2, 0x3, 0x2, 0x2, 0x2, 0x15ab, 0x15ac, 
       0x5, 0x198, 0xcd, 0x2, 0x15ac, 0x15ad, 0x7, 0x2, 0x2, 0x3, 0x15ad, 
       0x15b2, 0x3, 0x2, 0x2, 0x2, 0x15ae, 0x15af, 0x5, 0x1a0, 0xd1, 0x2, 
       0x15af, 0x15b0, 0x7, 0x2, 0x2, 0x3, 0x15b0, 0x15b2, 0x3, 0x2, 0x2, 
       0x2, 0x15b1, 0x1587, 0x3, 0x2, 0x2, 0x2, 0x15b1, 0x158a, 0x3, 0x2, 
       0x2, 0x2, 0x15b1, 0x1596, 0x3, 0x2, 0x2, 0x2, 0x15b1, 0x159a, 0x3, 
       0x2, 0x2, 0x2, 0x15b1, 0x159b, 0x3, 0x2, 0x2, 0x2, 0x15b1, 0x15a0, 
       0x3, 0x2, 0x2, 0x2, 0x15b1, 0x15a5, 0x3, 0x2, 0x2, 0x2, 0x15b1, 0x15a8, 
       0x3, 0x2, 0x2, 0x2, 0x15b1, 0x15ab, 0x3, 0x2, 0x2, 0x2, 0x15b1, 0x15ae, 
       0x3, 0x2, 0x2, 0x2, 0x15b2, 0x35d, 0x3, 0x2, 0x2, 0x2, 0x15b3, 0x15b4, 
       0x5, 0x186, 0xc4, 0x2, 0x15b4, 0x15b5, 0x7, 0x2, 0x2, 0x3, 0x15b5, 
       0x15c3, 0x3, 0x2, 0x2, 0x2, 0x15b6, 0x15b7, 0x5, 0x18e, 0xc8, 0x2, 
       0x15b7, 0x15b8, 0x7, 0x2, 0x2, 0x3, 0x15b8, 0x15c3, 0x3, 0x2, 0x2, 
       0x2, 0x15b9, 0x15ba, 0x5, 0x194, 0xcb, 0x2, 0x15ba, 0x15bb, 0x7, 
       0x2, 0x2, 0x3, 0x15bb, 0x15c3, 0x3, 0x2, 0x2, 0x2, 0x15bc, 0x15bd, 
       0x5, 0x19a, 0xce, 0x2, 0x15bd, 0x15be, 0x7, 0x2, 0x2, 0x3, 0x15be, 
       0x15c3, 0x3, 0x2, 0x2, 0x2, 0x15bf, 0x15c0, 0x5, 0x1a2, 0xd2, 0x2, 
       0x15c0, 0x15c1, 0x7, 0x2, 0x2, 0x3, 0x15c1, 0x15c3, 0x3, 0x2, 0x2, 
       0x2, 0x15c2, 0x15b3, 0x3, 0x2, 0x2, 0x2, 0x15c2, 0x15b6, 0x3, 0x2, 
       0x2, 0x2, 0x15c2, 0x15b9, 0x3, 0x2, 0x2, 0x2, 0x15c2, 0x15bc, 0x3, 
       0x2, 0x2, 0x2, 0x15c2, 0x15bf, 0x3, 0x2, 0x2, 0x2, 0x15c3, 0x35f, 
       0x3, 0x2, 0x2, 0x2, 0x15c4, 0x15c5, 0x3, 0x2, 0x2, 0x2, 0x15c5, 0x361, 
       0x3, 0x2, 0x2, 0x2, 0x15c6, 0x15c7, 0x5, 0x186, 0xc4, 0x2, 0x15c7, 
       0x15c8, 0x7, 0x2, 0x2, 0x3, 0x15c8, 0x15d3, 0x3, 0x2, 0x2, 0x2, 0x15c9, 
       0x15ca, 0x5, 0x18e, 0xc8, 0x2, 0x15ca, 0x15cb, 0x7, 0x2, 0x2, 0x3, 
       0x15cb, 0x15d3, 0x3, 0x2, 0x2, 0x2, 0x15cc, 0x15cd, 0x5, 0x19a, 0xce, 
       0x2, 0x15cd, 0x15ce, 0x7, 0x2, 0x2, 0x3, 0x15ce, 0x15d3, 0x3, 0x2, 
       0x2, 0x2, 0x15cf, 0x15d0, 0x5, 0x1a2, 0xd2, 0x2, 0x15d0, 0x15d1, 
       0x7, 0x2, 0x2, 0x3, 0x15d1, 0x15d3, 0x3, 0x2, 0x2, 0x2, 0x15d2, 0x15c6, 
       0x3, 0x2, 0x2, 0x2, 0x15d2, 0x15c9, 0x3, 0x2, 0x2, 0x2, 0x15d2, 0x15cc, 
       0x3, 0x2, 0x2, 0x2, 0x15d2, 0x15cf, 0x3, 0x2, 0x2, 0x2, 0x15d3, 0x363, 
       0x3, 0x2, 0x2, 0x2, 0x15d4, 0x15d5, 0x5, 0x2, 0x2, 0x2, 0x15d5, 0x15d6, 
       0x7, 0x2, 0x2, 0x3, 0x15d6, 0x160f, 0x3, 0x2, 0x2, 0x2, 0x15d7, 0x15dc, 
       0x5, 0x38, 0x1d, 0x2, 0x15d8, 0x15d9, 0x7, 0x4a, 0x2, 0x2, 0x15d9, 
       0x15db, 0x7, 0x4b, 0x2, 0x2, 0x15da, 0x15d8, 0x3, 0x2, 0x2, 0x2, 
       0x15db, 0x15de, 0x3, 0x2, 0x2, 0x2, 0x15dc, 0x15da, 0x3, 0x2, 0x2, 
       0x2, 0x15dc, 0x15dd, 0x3, 0x2, 0x2, 0x2, 0x15dd, 0x15df, 0x3, 0x2, 
       0x2, 0x2, 0x15de, 0x15dc, 0x3, 0x2, 0x2, 0x2, 0x15df, 0x15e0, 0x7, 
       0x4e, 0x2, 0x2, 0x15e0, 0x15e1, 0x7, 0x15, 0x2, 0x2, 0x15e1, 0x15e2, 
       0x7, 0x2, 0x2, 0x3, 0x15e2, 0x160f, 0x3, 0x2, 0x2, 0x2, 0x15e3, 0x15e8, 
       0x5, 0x82, 0x42, 0x2, 0x15e4, 0x15e5, 0x7, 0x4a, 0x2, 0x2, 0x15e5, 
       0x15e7, 0x7, 0x4b, 0x2, 0x2, 0x15e6, 0x15e4, 0x3, 0x2, 0x2, 0x2, 
       0x15e7, 0x15ea, 0x3, 0x2, 0x2, 0x2, 0x15e8, 0x15e6, 0x3, 0x2, 0x2, 
       0x2, 0x15e8, 0x15e9, 0x3, 0x2, 0x2, 0x2, 0x15e9, 0x15eb, 0x3, 0x2, 
       0x2, 0x2, 0x15ea, 0x15e8, 0x3, 0x2, 0x2, 0x2, 0x15eb, 0x15ec, 0x7, 
       0x4e, 0x2, 0x2, 0x15ec, 0x15ed, 0x7, 0x15, 0x2, 0x2, 0x15ed, 0x15ee, 
       0x7, 0x2, 0x2, 0x3, 0x15ee, 0x160f, 0x3, 0x2, 0x2, 0x2, 0x15ef, 0x15f0, 
       0x7, 0x3c, 0x2, 0x2, 0x15f0, 0x15f1, 0x7, 0x4e, 0x2, 0x2, 0x15f1, 
       0x15f2, 0x7, 0x15, 0x2, 0x2, 0x15f2, 0x160f, 0x7, 0x2, 0x2, 0x3, 
       0x15f3, 0x15f4, 0x7, 0x37, 0x2, 0x2, 0x15f4, 0x160f, 0x7, 0x2, 0x2, 
       0x3, 0x15f5, 0x15f6, 0x5, 0x38, 0x1d, 0x2, 0x15f6, 0x15f7, 0x7, 0x4e, 
       0x2, 0x2, 0x15f7, 0x15f8, 0x7, 0x37, 0x2, 0x2, 0x15f8, 0x15f9, 0x7, 
       0x2, 0x2, 0x3, 0x15f9, 0x160f, 0x3, 0x2, 0x2, 0x2, 0x15fa, 0x15fb, 
       0x7, 0x46, 0x2, 0x2, 0x15fb, 0x15fc, 0x5, 0x1ae, 0xd8, 0x2, 0x15fc, 
       0x15fd, 0x7, 0x47, 0x2, 0x2, 0x15fd, 0x15fe, 0x7, 0x2, 0x2, 0x3, 
       0x15fe, 0x160f, 0x3, 0x2, 0x2, 0x2, 0x15ff, 0x1600, 0x5, 0x188, 0xc5, 
       0x2, 0x1600, 0x1601, 0x7, 0x2, 0x2, 0x3, 0x1601, 0x160f, 0x3, 0x2, 
       0x2, 0x2, 0x1602, 0x1603, 0x5, 0x190, 0xc9, 0x2, 0x1603, 0x1604, 
       0x7, 0x2, 0x2, 0x3, 0x1604, 0x160f, 0x3, 0x2, 0x2, 0x2, 0x1605, 0x1606, 
       0x5, 0x196, 0xcc, 0x2, 0x1606, 0x1607, 0x7, 0x2, 0x2, 0x3, 0x1607, 
       0x160f, 0x3, 0x2, 0x2, 0x2, 0x1608, 0x1609, 0x5, 0x19c, 0xcf, 0x2, 
       0x1609, 0x160a, 0x7, 0x2, 0x2, 0x3, 0x160a, 0x160f, 0x3, 0x2, 0x2, 
       0x2, 0x160b, 0x160c, 0x5, 0x1a4, 0xd3, 0x2, 0x160c, 0x160d, 0x7, 
       0x2, 0x2, 0x3, 0x160d, 0x160f, 0x3, 0x2, 0x2, 0x2, 0x160e, 0x15d4, 
       0x3, 0x2, 0x2, 0x2, 0x160e, 0x15d7, 0x3, 0x2, 0x2, 0x2, 0x160e, 0x15e3, 
       0x3, 0x2, 0x2, 0x2, 0x160e, 0x15ef, 0x3, 0x2, 0x2, 0x2, 0x160e, 0x15f3, 
       0x3, 0x2, 0x2, 0x2, 0x160e, 0x15f5, 0x3, 0x2, 0x2, 0x2, 0x160e, 0x15fa, 
       0x3, 0x2, 0x2, 0x2, 0x160e, 0x15ff, 0x3, 0x2, 0x2, 0x2, 0x160e, 0x1602, 
       0x3, 0x2, 0x2, 0x2, 0x160e, 0x1605, 0x3, 0x2, 0x2, 0x2, 0x160e, 0x1608, 
       0x3, 0x2, 0x2, 0x2, 0x160e, 0x160b, 0x3, 0x2, 0x2, 0x2, 0x160f, 0x365, 
       0x3, 0x2, 0x2, 0x2, 0x1610, 0x1611, 0x3, 0x2, 0x2, 0x2, 0x1611, 0x367, 
       0x3, 0x2, 0x2, 0x2, 0x1612, 0x1613, 0x5, 0x2, 0x2, 0x2, 0x1613, 0x1614, 
       0x7, 0x2, 0x2, 0x3, 0x1614, 0x164a, 0x3, 0x2, 0x2, 0x2, 0x1615, 0x161a, 
       0x5, 0x38, 0x1d, 0x2, 0x1616, 0x1617, 0x7, 0x4a, 0x2, 0x2, 0x1617, 
       0x1619, 0x7, 0x4b, 0x2, 0x2, 0x1618, 0x1616, 0x3, 0x2, 0x2, 0x2, 
       0x1619, 0x161c, 0x3, 0x2, 0x2, 0x2, 0x161a, 0x1618, 0x3, 0x2, 0x2, 
       0x2, 0x161a, 0x161b, 0x3, 0x2, 0x2, 0x2, 0x161b, 0x161d, 0x3, 0x2, 
       0x2, 0x2, 0x161c, 0x161a, 0x3, 0x2, 0x2, 0x2, 0x161d, 0x161e, 0x7, 
       0x4e, 0x2, 0x2, 0x161e, 0x161f, 0x7, 0x15, 0x2, 0x2, 0x161f, 0x1620, 
       0x7, 0x2, 0x2, 0x3, 0x1620, 0x164a, 0x3, 0x2, 0x2, 0x2, 0x1621, 0x1626, 
       0x5, 0x82, 0x42, 0x2, 0x1622, 0x1623, 0x7, 0x4a, 0x2, 0x2, 0x1623, 
       0x1625, 0x7, 0x4b, 0x2, 0x2, 0x1624, 0x1622, 0x3, 0x2, 0x2, 0x2, 
       0x1625, 0x1628, 0x3, 0x2, 0x2, 0x2, 0x1626, 0x1624, 0x3, 0x2, 0x2, 
       0x2, 0x1626, 0x1627, 0x3, 0x2, 0x2, 0x2, 0x1627, 0x1629, 0x3, 0x2, 
       0x2, 0x2, 0x1628, 0x1626, 0x3, 0x2, 0x2, 0x2, 0x1629, 0x162a, 0x7, 
       0x4e, 0x2, 0x2, 0x162a, 0x162b, 0x7, 0x15, 0x2, 0x2, 0x162b, 0x162c, 
       0x7, 0x2, 0x2, 0x3, 0x162c, 0x164a, 0x3, 0x2, 0x2, 0x2, 0x162d, 0x162e, 
       0x7, 0x3c, 0x2, 0x2, 0x162e, 0x162f, 0x7, 0x4e, 0x2, 0x2, 0x162f, 
       0x1630, 0x7, 0x15, 0x2, 0x2, 0x1630, 0x164a, 0x7, 0x2, 0x2, 0x3, 
       0x1631, 0x1632, 0x7, 0x37, 0x2, 0x2, 0x1632, 0x164a, 0x7, 0x2, 0x2, 
       0x3, 0x1633, 0x1634, 0x5, 0x38, 0x1d, 0x2, 0x1634, 0x1635, 0x7, 0x4e, 
       0x2, 0x2, 0x1635, 0x1636, 0x7, 0x37, 0x2, 0x2, 0x1636, 0x1637, 0x7, 
       0x2, 0x2, 0x3, 0x1637, 0x164a, 0x3, 0x2, 0x2, 0x2, 0x1638, 0x1639, 
       0x7, 0x46, 0x2, 0x2, 0x1639, 0x163a, 0x5, 0x1ae, 0xd8, 0x2, 0x163a, 
       0x163b, 0x7, 0x47, 0x2, 0x2, 0x163b, 0x163c, 0x7, 0x2, 0x2, 0x3, 
       0x163c, 0x164a, 0x3, 0x2, 0x2, 0x2, 0x163d, 0x163e, 0x5, 0x188, 0xc5, 
       0x2, 0x163e, 0x163f, 0x7, 0x2, 0x2, 0x3, 0x163f, 0x164a, 0x3, 0x2, 
       0x2, 0x2, 0x1640, 0x1641, 0x5, 0x190, 0xc9, 0x2, 0x1641, 0x1642, 
       0x7, 0x2, 0x2, 0x3, 0x1642, 0x164a, 0x3, 0x2, 0x2, 0x2, 0x1643, 0x1644, 
       0x5, 0x19c, 0xcf, 0x2, 0x1644, 0x1645, 0x7, 0x2, 0x2, 0x3, 0x1645, 
       0x164a, 0x3, 0x2, 0x2, 0x2, 0x1646, 0x1647, 0x5, 0x1a4, 0xd3, 0x2, 
       0x1647, 0x1648, 0x7, 0x2, 0x2, 0x3, 0x1648, 0x164a, 0x3, 0x2, 0x2, 
       0x2, 0x1649, 0x1612, 0x3, 0x2, 0x2, 0x2, 0x1649, 0x1615, 0x3, 0x2, 
       0x2, 0x2, 0x1649, 0x1621, 0x3, 0x2, 0x2, 0x2, 0x1649, 0x162d, 0x3, 
       0x2, 0x2, 0x2, 0x1649, 0x1631, 0x3, 0x2, 0x2, 0x2, 0x1649, 0x1633, 
       0x3, 0x2, 0x2, 0x2, 0x1649, 0x1638, 0x3, 0x2, 0x2, 0x2, 0x1649, 0x163d, 
       0x3, 0x2, 0x2, 0x2, 0x1649, 0x1640, 0x3, 0x2, 0x2, 0x2, 0x1649, 0x1643, 
       0x3, 0x2, 0x2, 0x2, 0x1649, 0x1646, 0x3, 0x2, 0x2, 0x2, 0x164a, 0x369, 
       0x3, 0x2, 0x2, 0x2, 0x164b, 0x164f, 0x5, 0x38, 0x1d, 0x2, 0x164c, 
       0x164f, 0x5, 0x6, 0x4, 0x2, 0x164d, 0x164f, 0x7, 0xf, 0x2, 0x2, 0x164e, 
       0x164b, 0x3, 0x2, 0x2, 0x2, 0x164e, 0x164c, 0x3, 0x2, 0x2, 0x2, 0x164e, 
       0x164d, 0x3, 0x2, 0x2, 0x2, 0x164f, 0x1654, 0x3, 0x2, 0x2, 0x2, 0x1650, 
       0x1651, 0x7, 0x4a, 0x2, 0x2, 0x1651, 0x1653, 0x7, 0x4b, 0x2, 0x2, 
       0x1652, 0x1650, 0x3, 0x2, 0x2, 0x2, 0x1653, 0x1656, 0x3, 0x2, 0x2, 
       0x2, 0x1654, 0x1652, 0x3, 0x2, 0x2, 0x2, 0x1654, 0x1655, 0x3, 0x2, 
       0x2, 0x2, 0x1655, 0x1657, 0x3, 0x2, 0x2, 0x2, 0x1656, 0x1654, 0x3, 
       0x2, 0x2, 0x2, 0x1657, 0x1658, 0x7, 0x4e, 0x2, 0x2, 0x1658, 0x1659, 
       0x7, 0x15, 0x2, 0x2, 0x1659, 0x165f, 0x7, 0x2, 0x2, 0x3, 0x165a, 
       0x165b, 0x7, 0x3c, 0x2, 0x2, 0x165b, 0x165c, 0x7, 0x4e, 0x2, 0x2, 
       0x165c, 0x165d, 0x7, 0x15, 0x2, 0x2, 0x165d, 0x165f, 0x7, 0x2, 0x2, 
       0x3, 0x165e, 0x164e, 0x3, 0x2, 0x2, 0x2, 0x165e, 0x165a, 0x3, 0x2, 
       0x2, 0x2, 0x165f, 0x36b, 0x3, 0x2, 0x2, 0x2, 0x1660, 0x1662, 0x7, 
       0x2b, 0x2, 0x2, 0x1661, 0x1663, 0x5, 0x2a, 0x16, 0x2, 0x1662, 0x1661, 
       0x3, 0x2, 0x2, 0x2, 0x1662, 0x1663, 0x3, 0x2, 0x2, 0x2, 0x1663, 0x1667, 
       0x3, 0x2, 0x2, 0x2, 0x1664, 0x1666, 0x5, 0xf2, 0x7a, 0x2, 0x1665, 
       0x1664, 0x3, 0x2, 0x2, 0x2, 0x1666, 0x1669, 0x3, 0x2, 0x2, 0x2, 0x1667, 
       0x1665, 0x3, 0x2, 0x2, 0x2, 0x1667, 0x1668, 0x3, 0x2, 0x2, 0x2, 0x1668, 
       0x166a, 0x3, 0x2, 0x2, 0x2, 0x1669, 0x1667, 0x3, 0x2, 0x2, 0x2, 0x166a, 
       0x1675, 0x5, 0x3d2, 0x1ea, 0x2, 0x166b, 0x166f, 0x7, 0x4e, 0x2, 0x2, 
       0x166c, 0x166e, 0x5, 0xf2, 0x7a, 0x2, 0x166d, 0x166c, 0x3, 0x2, 0x2, 
       0x2, 0x166e, 0x1671, 0x3, 0x2, 0x2, 0x2, 0x166f, 0x166d, 0x3, 0x2, 
       0x2, 0x2, 0x166f, 0x1670, 0x3, 0x2, 0x2, 0x2, 0x1670, 0x1672, 0x3, 
       0x2, 0x2, 0x2, 0x1671, 0x166f, 0x3, 0x2, 0x2, 0x2, 0x1672, 0x1674, 
       0x5, 0x3d2, 0x1ea, 0x2, 0x1673, 0x166b, 0x3, 0x2, 0x2, 0x2, 0x1674, 
       0x1677, 0x3, 0x2, 0x2, 0x2, 0x1675, 0x1673, 0x3, 0x2, 0x2, 0x2, 0x1675, 
       0x1676, 0x3, 0x2, 0x2, 0x2, 0x1676, 0x1679, 0x3, 0x2, 0x2, 0x2, 0x1677, 
       0x1675, 0x3, 0x2, 0x2, 0x2, 0x1678, 0x167a, 0x5, 0x18a, 0xc6, 0x2, 
       0x1679, 0x1678, 0x3, 0x2, 0x2, 0x2, 0x1679, 0x167a, 0x3, 0x2, 0x2, 
       0x2, 0x167a, 0x167b, 0x3, 0x2, 0x2, 0x2, 0x167b, 0x167d, 0x7, 0x46, 
       0x2, 0x2, 0x167c, 0x167e, 0x5, 0x19e, 0xd0, 0x2, 0x167d, 0x167c, 
       0x3, 0x2, 0x2, 0x2, 0x167d, 0x167e, 0x3, 0x2, 0x2, 0x2, 0x167e, 0x167f, 
       0x3, 0x2, 0x2, 0x2, 0x167f, 0x1681, 0x7, 0x47, 0x2, 0x2, 0x1680, 
       0x1682, 0x5, 0x6e, 0x38, 0x2, 0x1681, 0x1680, 0x3, 0x2, 0x2, 0x2, 
       0x1681, 0x1682, 0x3, 0x2, 0x2, 0x2, 0x1682, 0x1683, 0x3, 0x2, 0x2, 
       0x2, 0x1683, 0x1684, 0x7, 0x2, 0x2, 0x3, 0x1684, 0x16ba, 0x3, 0x2, 
       0x2, 0x2, 0x1685, 0x1686, 0x5, 0x3c, 0x1f, 0x2, 0x1686, 0x1687, 0x7, 
       0x4e, 0x2, 0x2, 0x1687, 0x1689, 0x7, 0x2b, 0x2, 0x2, 0x1688, 0x168a, 
       0x5, 0x2a, 0x16, 0x2, 0x1689, 0x1688, 0x3, 0x2, 0x2, 0x2, 0x1689, 
       0x168a, 0x3, 0x2, 0x2, 0x2, 0x168a, 0x168e, 0x3, 0x2, 0x2, 0x2, 0x168b, 
       0x168d, 0x5, 0xf2, 0x7a, 0x2, 0x168c, 0x168b, 0x3, 0x2, 0x2, 0x2, 
       0x168d, 0x1690, 0x3, 0x2, 0x2, 0x2, 0x168e, 0x168c, 0x3, 0x2, 0x2, 
       0x2, 0x168e, 0x168f, 0x3, 0x2, 0x2, 0x2, 0x168f, 0x1691, 0x3, 0x2, 
       0x2, 0x2, 0x1690, 0x168e, 0x3, 0x2, 0x2, 0x2, 0x1691, 0x1693, 0x5, 
       0x3d2, 0x1ea, 0x2, 0x1692, 0x1694, 0x5, 0x18a, 0xc6, 0x2, 0x1693, 
       0x1692, 0x3, 0x2, 0x2, 0x2, 0x1693, 0x1694, 0x3, 0x2, 0x2, 0x2, 0x1694, 
       0x1695, 0x3, 0x2, 0x2, 0x2, 0x1695, 0x1697, 0x7, 0x46, 0x2, 0x2, 
       0x1696, 0x1698, 0x5, 0x19e, 0xd0, 0x2, 0x1697, 0x1696, 0x3, 0x2, 
       0x2, 0x2, 0x1697, 0x1698, 0x3, 0x2, 0x2, 0x2, 0x1698, 0x1699, 0x3, 
       0x2, 0x2, 0x2, 0x1699, 0x169b, 0x7, 0x47, 0x2, 0x2, 0x169a, 0x169c, 
       0x5, 0x6e, 0x38, 0x2, 0x169b, 0x169a, 0x3, 0x2, 0x2, 0x2, 0x169b, 
       0x169c, 0x3, 0x2, 0x2, 0x2, 0x169c, 0x169d, 0x3, 0x2, 0x2, 0x2, 0x169d, 
       0x169e, 0x7, 0x2, 0x2, 0x3, 0x169e, 0x16ba, 0x3, 0x2, 0x2, 0x2, 0x169f, 
       0x16a0, 0x5, 0x16e, 0xb8, 0x2, 0x16a0, 0x16a1, 0x7, 0x4e, 0x2, 0x2, 
       0x16a1, 0x16a3, 0x7, 0x2b, 0x2, 0x2, 0x16a2, 0x16a4, 0x5, 0x2a, 0x16, 
       0x2, 0x16a3, 0x16a2, 0x3, 0x2, 0x2, 0x2, 0x16a3, 0x16a4, 0x3, 0x2, 
       0x2, 0x2, 0x16a4, 0x16a8, 0x3, 0x2, 0x2, 0x2, 0x16a5, 0x16a7, 0x5, 
       0xf2, 0x7a, 0x2, 0x16a6, 0x16a5, 0x3, 0x2, 0x2, 0x2, 0x16a7, 0x16aa, 
       0x3, 0x2, 0x2, 0x2, 0x16a8, 0x16a6, 0x3, 0x2, 0x2, 0x2, 0x16a8, 0x16a9, 
       0x3, 0x2, 0x2, 0x2, 0x16a9, 0x16ab, 0x3, 0x2, 0x2, 0x2, 0x16aa, 0x16a8, 
       0x3, 0x2, 0x2, 0x2, 0x16ab, 0x16ad, 0x5, 0x3d2, 0x1ea, 0x2, 0x16ac, 
       0x16ae, 0x5, 0x18a, 0xc6, 0x2, 0x16ad, 0x16ac, 0x3, 0x2, 0x2, 0x2, 
       0x16ad, 0x16ae, 0x3, 0x2, 0x2, 0x2, 0x16ae, 0x16af, 0x3, 0x2, 0x2, 
       0x2, 0x16af, 0x16b1, 0x7, 0x46, 0x2, 0x2, 0x16b0, 0x16b2, 0x5, 0x19e, 
       0xd0, 0x2, 0x16b1, 0x16b0, 0x3, 0x2, 0x2, 0x2, 0x16b1, 0x16b2, 0x3, 
       0x2, 0x2, 0x2, 0x16b2, 0x16b3, 0x3, 0x2, 0x2, 0x2, 0x16b3, 0x16b5, 
       0x7, 0x47, 0x2, 0x2, 0x16b4, 0x16b6, 0x5, 0x6e, 0x38, 0x2, 0x16b5, 
       0x16b4, 0x3, 0x2, 0x2, 0x2, 0x16b5, 0x16b6, 0x3, 0x2, 0x2, 0x2, 0x16b6, 
       0x16b7, 0x3, 0x2, 0x2, 0x2, 0x16b7, 0x16b8, 0x7, 0x2, 0x2, 0x3, 0x16b8, 
       0x16ba, 0x3, 0x2, 0x2, 0x2, 0x16b9, 0x1660, 0x3, 0x2, 0x2, 0x2, 0x16b9, 
       0x1685, 0x3, 0x2, 0x2, 0x2, 0x16b9, 0x169f, 0x3, 0x2, 0x2, 0x2, 0x16ba, 
       0x36d, 0x3, 0x2, 0x2, 0x2, 0x16bb, 0x16bc, 0x7, 0x4e, 0x2, 0x2, 0x16bc, 
       0x16be, 0x7, 0x2b, 0x2, 0x2, 0x16bd, 0x16bf, 0x5, 0x2a, 0x16, 0x2, 
       0x16be, 0x16bd, 0x3, 0x2, 0x2, 0x2, 0x16be, 0x16bf, 0x3, 0x2, 0x2, 
       0x2, 0x16bf, 0x16c3, 0x3, 0x2, 0x2, 0x2, 0x16c0, 0x16c2, 0x5, 0xf2, 
       0x7a, 0x2, 0x16c1, 0x16c0, 0x3, 0x2, 0x2, 0x2, 0x16c2, 0x16c5, 0x3, 
       0x2, 0x2, 0x2, 0x16c3, 0x16c1, 0x3, 0x2, 0x2, 0x2, 0x16c3, 0x16c4, 
       0x3, 0x2, 0x2, 0x2, 0x16c4, 0x16c6, 0x3, 0x2, 0x2, 0x2, 0x16c5, 0x16c3, 
       0x3, 0x2, 0x2, 0x2, 0x16c6, 0x16c8, 0x5, 0x3d2, 0x1ea, 0x2, 0x16c7, 
       0x16c9, 0x5, 0x18a, 0xc6, 0x2, 0x16c8, 0x16c7, 0x3, 0x2, 0x2, 0x2, 
       0x16c8, 0x16c9, 0x3, 0x2, 0x2, 0x2, 0x16c9, 0x16ca, 0x3, 0x2, 0x2, 
       0x2, 0x16ca, 0x16cc, 0x7, 0x46, 0x2, 0x2, 0x16cb, 0x16cd, 0x5, 0x19e, 
       0xd0, 0x2, 0x16cc, 0x16cb, 0x3, 0x2, 0x2, 0x2, 0x16cc, 0x16cd, 0x3, 
       0x2, 0x2, 0x2, 0x16cd, 0x16ce, 0x3, 0x2, 0x2, 0x2, 0x16ce, 0x16d0, 
       0x7, 0x47, 0x2, 0x2, 0x16cf, 0x16d1, 0x5, 0x6e, 0x38, 0x2, 0x16d0, 
       0x16cf, 0x3, 0x2, 0x2, 0x2, 0x16d0, 0x16d1, 0x3, 0x2, 0x2, 0x2, 0x16d1, 
       0x16d2, 0x3, 0x2, 0x2, 0x2, 0x16d2, 0x16d3, 0x7, 0x2, 0x2, 0x3, 0x16d3, 
       0x36f, 0x3, 0x2, 0x2, 0x2, 0x16d4, 0x16d6, 0x7, 0x2b, 0x2, 0x2, 0x16d5, 
       0x16d7, 0x5, 0x2a, 0x16, 0x2, 0x16d6, 0x16d5, 0x3, 0x2, 0x2, 0x2, 
       0x16d6, 0x16d7, 0x3, 0x2, 0x2, 0x2, 0x16d7, 0x16db, 0x3, 0x2, 0x2, 
       0x2, 0x16d8, 0x16da, 0x5, 0xf2, 0x7a, 0x2, 0x16d9, 0x16d8, 0x3, 0x2, 
       0x2, 0x2, 0x16da, 0x16dd, 0x3, 0x2, 0x2, 0x2, 0x16db, 0x16d9, 0x3, 
       0x2, 0x2, 0x2, 0x16db, 0x16dc, 0x3, 0x2, 0x2, 0x2, 0x16dc, 0x16de, 
       0x3, 0x2, 0x2, 0x2, 0x16dd, 0x16db, 0x3, 0x2, 0x2, 0x2, 0x16de, 0x16e9, 
       0x5, 0x3d2, 0x1ea, 0x2, 0x16df, 0x16e3, 0x7, 0x4e, 0x2, 0x2, 0x16e0, 
       0x16e2, 0x5, 0xf2, 0x7a, 0x2, 0x16e1, 0x16e0, 0x3, 0x2, 0x2, 0x2, 
       0x16e2, 0x16e5, 0x3, 0x2, 0x2, 0x2, 0x16e3, 0x16e1, 0x3, 0x2, 0x2, 
       0x2, 0x16e3, 0x16e4, 0x3, 0x2, 0x2, 0x2, 0x16e4, 0x16e6, 0x3, 0x2, 
       0x2, 0x2, 0x16e5, 0x16e3, 0x3, 0x2, 0x2, 0x2, 0x16e6, 0x16e8, 0x5, 
       0x3d2, 0x1ea, 0x2, 0x16e7, 0x16df, 0x3, 0x2, 0x2, 0x2, 0x16e8, 0x16eb, 
       0x3, 0x2, 0x2, 0x2, 0x16e9, 0x16e7, 0x3, 0x2, 0x2, 0x2, 0x16e9, 0x16ea, 
       0x3, 0x2, 0x2, 0x2, 0x16ea, 0x16ed, 0x3, 0x2, 0x2, 0x2, 0x16eb, 0x16e9, 
       0x3, 0x2, 0x2, 0x2, 0x16ec, 0x16ee, 0x5, 0x18a, 0xc6, 0x2, 0x16ed, 
       0x16ec, 0x3, 0x2, 0x2, 0x2, 0x16ed, 0x16ee, 0x3, 0x2, 0x2, 0x2, 0x16ee, 
       0x16ef, 0x3, 0x2, 0x2, 0x2, 0x16ef, 0x16f1, 0x7, 0x46, 0x2, 0x2, 
       0x16f0, 0x16f2, 0x5, 0x19e, 0xd0, 0x2, 0x16f1, 0x16f0, 0x3, 0x2, 
       0x2, 0x2, 0x16f1, 0x16f2, 0x3, 0x2, 0x2, 0x2, 0x16f2, 0x16f3, 0x3, 
       0x2, 0x2, 0x2, 0x16f3, 0x16f5, 0x7, 0x47, 0x2, 0x2, 0x16f4, 0x16f6, 
       0x5, 0x6e, 0x38, 0x2, 0x16f5, 0x16f4, 0x3, 0x2, 0x2, 0x2, 0x16f5, 
       0x16f6, 0x3, 0x2, 0x2, 0x2, 0x16f6, 0x16f7, 0x3, 0x2, 0x2, 0x2, 0x16f7, 
       0x16f8, 0x7, 0x2, 0x2, 0x3, 0x16f8, 0x1714, 0x3, 0x2, 0x2, 0x2, 0x16f9, 
       0x16fa, 0x5, 0x3c, 0x1f, 0x2, 0x16fa, 0x16fb, 0x7, 0x4e, 0x2, 0x2, 
       0x16fb, 0x16fd, 0x7, 0x2b, 0x2, 0x2, 0x16fc, 0x16fe, 0x5, 0x2a, 0x16, 
       0x2, 0x16fd, 0x16fc, 0x3, 0x2, 0x2, 0x2, 0x16fd, 0x16fe, 0x3, 0x2, 
       0x2, 0x2, 0x16fe, 0x1702, 0x3, 0x2, 0x2, 0x2, 0x16ff, 0x1701, 0x5, 
       0xf2, 0x7a, 0x2, 0x1700, 0x16ff, 0x3, 0x2, 0x2, 0x2, 0x1701, 0x1704, 
       0x3, 0x2, 0x2, 0x2, 0x1702, 0x1700, 0x3, 0x2, 0x2, 0x2, 0x1702, 0x1703, 
       0x3, 0x2, 0x2, 0x2, 0x1703, 0x1705, 0x3, 0x2, 0x2, 0x2, 0x1704, 0x1702, 
       0x3, 0x2, 0x2, 0x2, 0x1705, 0x1707, 0x5, 0x3d2, 0x1ea, 0x2, 0x1706, 
       0x1708, 0x5, 0x18a, 0xc6, 0x2, 0x1707, 0x1706, 0x3, 0x2, 0x2, 0x2, 
       0x1707, 0x1708, 0x3, 0x2, 0x2, 0x2, 0x1708, 0x1709, 0x3, 0x2, 0x2, 
       0x2, 0x1709, 0x170b, 0x7, 0x46, 0x2, 0x2, 0x170a, 0x170c, 0x5, 0x19e, 
       0xd0, 0x2, 0x170b, 0x170a, 0x3, 0x2, 0x2, 0x2, 0x170b, 0x170c, 0x3, 
       0x2, 0x2, 0x2, 0x170c, 0x170d, 0x3, 0x2, 0x2, 0x2, 0x170d, 0x170f, 
       0x7, 0x47, 0x2, 0x2, 0x170e, 0x1710, 0x5, 0x6e, 0x38, 0x2, 0x170f, 
       0x170e, 0x3, 0x2, 0x2, 0x2, 0x170f, 0x1710, 0x3, 0x2, 0x2, 0x2, 0x1710, 
       0x1711, 0x3, 0x2, 0x2, 0x2, 0x1711, 0x1712, 0x7, 0x2, 0x2, 0x3, 0x1712, 
       0x1714, 0x3, 0x2, 0x2, 0x2, 0x1713, 0x16d4, 0x3, 0x2, 0x2, 0x2, 0x1713, 
       0x16f9, 0x3, 0x2, 0x2, 0x2, 0x1714, 0x371, 0x3, 0x2, 0x2, 0x2, 0x1715, 
       0x1716, 0x5, 0x2a, 0x16, 0x2, 0x1716, 0x1717, 0x7, 0x2, 0x2, 0x3, 
       0x1717, 0x171c, 0x3, 0x2, 0x2, 0x2, 0x1718, 0x1719, 0x7, 0x54, 0x2, 
       0x2, 0x1719, 0x171a, 0x7, 0x53, 0x2, 0x2, 0x171a, 0x171c, 0x7, 0x2, 
       0x2, 0x3, 0x171b, 0x1715, 0x3, 0x2, 0x2, 0x2, 0x171b, 0x1718, 0x3, 
       0x2, 0x2, 0x2, 0x171c, 0x373, 0x3, 0x2, 0x2, 0x2, 0x171d, 0x171e, 
       0x5, 0x16e, 0xb8, 0x2, 0x171e, 0x171f, 0x7, 0x4e, 0x2, 0x2, 0x171f, 
       0x1720, 0x5, 0x3d2, 0x1ea, 0x2, 0x1720, 0x1721, 0x7, 0x2, 0x2, 0x3, 
       0x1721, 0x172f, 0x3, 0x2, 0x2, 0x2, 0x1722, 0x1723, 0x7, 0x34, 0x2, 
       0x2, 0x1723, 0x1724, 0x7, 0x4e, 0x2, 0x2, 0x1724, 0x1725, 0x5, 0x3d2, 
       0x1ea, 0x2, 0x1725, 0x1726, 0x7, 0x2, 0x2, 0x3, 0x1726, 0x172f, 0x3, 
       0x2, 0x2, 0x2, 0x1727, 0x1728, 0x5, 0x38, 0x1d, 0x2, 0x1728, 0x1729, 
       0x7, 0x4e, 0x2, 0x2, 0x1729, 0x172a, 0x7, 0x34, 0x2, 0x2, 0x172a, 
       0x172b, 0x7, 0x4e, 0x2, 0x2, 0x172b, 0x172c, 0x5, 0x3d2, 0x1ea, 0x2, 
       0x172c, 0x172d, 0x7, 0x2, 0x2, 0x3, 0x172d, 0x172f, 0x3, 0x2, 0x2, 
       0x2, 0x172e, 0x171d, 0x3, 0x2, 0x2, 0x2, 0x172e, 0x1722, 0x3, 0x2, 
       0x2, 0x2, 0x172e, 0x1727, 0x3, 0x2, 0x2, 0x2, 0x172f, 0x375, 0x3, 
       0x2, 0x2, 0x2, 0x1730, 0x1731, 0x7, 0x4e, 0x2, 0x2, 0x1731, 0x1732, 
       0x5, 0x3d2, 0x1ea, 0x2, 0x1732, 0x1733, 0x7, 0x2, 0x2, 0x3, 0x1733, 
       0x377, 0x3, 0x2, 0x2, 0x2, 0x1734, 0x1735, 0x7, 0x34, 0x2, 0x2, 0x1735, 
       0x1736, 0x7, 0x4e, 0x2, 0x2, 0x1736, 0x1737, 0x5, 0x3d2, 0x1ea, 0x2, 
       0x1737, 0x1738, 0x7, 0x2, 0x2, 0x3, 0x1738, 0x1741, 0x3, 0x2, 0x2, 
       0x2, 0x1739, 0x173a, 0x5, 0x38, 0x1d, 0x2, 0x173a, 0x173b, 0x7, 0x4e, 
       0x2, 0x2, 0x173b, 0x173c, 0x7, 0x34, 0x2, 0x2, 0x173c, 0x173d, 0x7, 
       0x4e, 0x2, 0x2, 0x173d, 0x173e, 0x5, 0x3d2, 0x1ea, 0x2, 0x173e, 0x173f, 
       0x7, 0x2, 0x2, 0x3, 0x173f, 0x1741, 0x3, 0x2, 0x2, 0x2, 0x1740, 0x1734, 
       0x3, 0x2, 0x2, 0x2, 0x1740, 0x1739, 0x3, 0x2, 0x2, 0x2, 0x1741, 0x379, 
       0x3, 0x2, 0x2, 0x2, 0x1742, 0x1743, 0x5, 0x3c, 0x1f, 0x2, 0x1743, 
       0x1744, 0x7, 0x4a, 0x2, 0x2, 0x1744, 0x1745, 0x5, 0x1ae, 0xd8, 0x2, 
       0x1745, 0x1746, 0x7, 0x4b, 0x2, 0x2, 0x1746, 0x1747, 0x7, 0x2, 0x2, 
       0x3, 0x1747, 0x174f, 0x3, 0x2, 0x2, 0x2, 0x1748, 0x1749, 0x5, 0x174, 
       0xbb, 0x2, 0x1749, 0x174a, 0x7, 0x4a, 0x2, 0x2, 0x174a, 0x174b, 0x5, 
       0x1ae, 0xd8, 0x2, 0x174b, 0x174c, 0x7, 0x4b, 0x2, 0x2, 0x174c, 0x174d, 
       0x7, 0x2, 0x2, 0x3, 0x174d, 0x174f, 0x3, 0x2, 0x2, 0x2, 0x174e, 0x1742, 
       0x3, 0x2, 0x2, 0x2, 0x174e, 0x1748, 0x3, 0x2, 0x2, 0x2, 0x174f, 0x1758, 
       0x3, 0x2, 0x2, 0x2, 0x1750, 0x1751, 0x5, 0x172, 0xba, 0x2, 0x1751, 
       0x1752, 0x7, 0x4a, 0x2, 0x2, 0x1752, 0x1753, 0x5, 0x1ae, 0xd8, 0x2, 
       0x1753, 0x1754, 0x7, 0x4b, 0x2, 0x2, 0x1754, 0x1755, 0x7, 0x2, 0x2, 
       0x3, 0x1755, 0x1757, 0x3, 0x2, 0x2, 0x2, 0x1756, 0x1750, 0x3, 0x2, 
       0x2, 0x2, 0x1757, 0x175a, 0x3, 0x2, 0x2, 0x2, 0x1758, 0x1756, 0x3, 
       0x2, 0x2, 0x2, 0x1758, 0x1759, 0x3, 0x2, 0x2, 0x2, 0x1759, 0x37b, 
       0x3, 0x2, 0x2, 0x2, 0x175a, 0x1758, 0x3, 0x2, 0x2, 0x2, 0x175b, 0x175c, 
       0x5, 0x17a, 0xbe, 0x2, 0x175c, 0x175d, 0x7, 0x4a, 0x2, 0x2, 0x175d, 
       0x175e, 0x5, 0x1ae, 0xd8, 0x2, 0x175e, 0x175f, 0x7, 0x4b, 0x2, 0x2, 
       0x175f, 0x1760, 0x7, 0x2, 0x2, 0x3, 0x1760, 0x1769, 0x3, 0x2, 0x2, 
       0x2, 0x1761, 0x1762, 0x5, 0x178, 0xbd, 0x2, 0x1762, 0x1763, 0x7, 
       0x4a, 0x2, 0x2, 0x1763, 0x1764, 0x5, 0x1ae, 0xd8, 0x2, 0x1764, 0x1765, 
       0x7, 0x4b, 0x2, 0x2, 0x1765, 0x1766, 0x7, 0x2, 0x2, 0x3, 0x1766, 
       0x1768, 0x3, 0x2, 0x2, 0x2, 0x1767, 0x1761, 0x3, 0x2, 0x2, 0x2, 0x1768, 
       0x176b, 0x3, 0x2, 0x2, 0x2, 0x1769, 0x1767, 0x3, 0x2, 0x2, 0x2, 0x1769, 
       0x176a, 0x3, 0x2, 0x2, 0x2, 0x176a, 0x37d, 0x3, 0x2, 0x2, 0x2, 0x176b, 
       0x1769, 0x3, 0x2, 0x2, 0x2, 0x176c, 0x176d, 0x5, 0x3c, 0x1f, 0x2, 
       0x176d, 0x176e, 0x7, 0x4a, 0x2, 0x2, 0x176e, 0x176f, 0x5, 0x1ae, 
       0xd8, 0x2, 0x176f, 0x1770, 0x7, 0x4b, 0x2, 0x2, 0x1770, 0x1771, 0x7, 
       0x2, 0x2, 0x3, 0x1771, 0x1779, 0x3, 0x2, 0x2, 0x2, 0x1772, 0x1773, 
       0x5, 0x180, 0xc1, 0x2, 0x1773, 0x1774, 0x7, 0x4a, 0x2, 0x2, 0x1774, 
       0x1775, 0x5, 0x1ae, 0xd8, 0x2, 0x1775, 0x1776, 0x7, 0x4b, 0x2, 0x2, 
       0x1776, 0x1777, 0x7, 0x2, 0x2, 0x3, 0x1777, 0x1779, 0x3, 0x2, 0x2, 
       0x2, 0x1778, 0x176c, 0x3, 0x2, 0x2, 0x2, 0x1778, 0x1772, 0x3, 0x2, 
       0x2, 0x2, 0x1779, 0x1782, 0x3, 0x2, 0x2, 0x2, 0x177a, 0x177b, 0x5, 
       0x17e, 0xc0, 0x2, 0x177b, 0x177c, 0x7, 0x4a, 0x2, 0x2, 0x177c, 0x177d, 
       0x5, 0x1ae, 0xd8, 0x2, 0x177d, 0x177e, 0x7, 0x4b, 0x2, 0x2, 0x177e, 
       0x177f, 0x7, 0x2, 0x2, 0x3, 0x177f, 0x1781, 0x3, 0x2, 0x2, 0x2, 0x1780, 
       0x177a, 0x3, 0x2, 0x2, 0x2, 0x1781, 0x1784, 0x3, 0x2, 0x2, 0x2, 0x1782, 
       0x1780, 0x3, 0x2, 0x2, 0x2, 0x1782, 0x1783, 0x3, 0x2, 0x2, 0x2, 0x1783, 
       0x37f, 0x3, 0x2, 0x2, 0x2, 0x1784, 0x1782, 0x3, 0x2, 0x2, 0x2, 0x1785, 
       0x1786, 0x5, 0x3e, 0x20, 0x2, 0x1786, 0x1788, 0x7, 0x46, 0x2, 0x2, 
       0x1787, 0x1789, 0x5, 0x19e, 0xd0, 0x2, 0x1788, 0x1787, 0x3, 0x2, 
       0x2, 0x2, 0x1788, 0x1789, 0x3, 0x2, 0x2, 0x2, 0x1789, 0x178a, 0x3, 
       0x2, 0x2, 0x2, 0x178a, 0x178b, 0x7, 0x47, 0x2, 0x2, 0x178b, 0x178c, 
       0x7, 0x2, 0x2, 0x3, 0x178c, 0x17d1, 0x3, 0x2, 0x2, 0x2, 0x178d, 0x178e, 
       0x5, 0x38, 0x1d, 0x2, 0x178e, 0x1790, 0x7, 0x4e, 0x2, 0x2, 0x178f, 
       0x1791, 0x5, 0x2a, 0x16, 0x2, 0x1790, 0x178f, 0x3, 0x2, 0x2, 0x2, 
       0x1790, 0x1791, 0x3, 0x2, 0x2, 0x2, 0x1791, 0x1792, 0x3, 0x2, 0x2, 
       0x2, 0x1792, 0x1793, 0x5, 0x3d2, 0x1ea, 0x2, 0x1793, 0x1795, 0x7, 
       0x46, 0x2, 0x2, 0x1794, 0x1796, 0x5, 0x19e, 0xd0, 0x2, 0x1795, 0x1794, 
       0x3, 0x2, 0x2, 0x2, 0x1795, 0x1796, 0x3, 0x2, 0x2, 0x2, 0x1796, 0x1797, 
       0x3, 0x2, 0x2, 0x2, 0x1797, 0x1798, 0x7, 0x47, 0x2, 0x2, 0x1798, 
       0x1799, 0x7, 0x2, 0x2, 0x3, 0x1799, 0x17d1, 0x3, 0x2, 0x2, 0x2, 0x179a, 
       0x179b, 0x5, 0x3c, 0x1f, 0x2, 0x179b, 0x179d, 0x7, 0x4e, 0x2, 0x2, 
       0x179c, 0x179e, 0x5, 0x2a, 0x16, 0x2, 0x179d, 0x179c, 0x3, 0x2, 0x2, 
       0x2, 0x179d, 0x179e, 0x3, 0x2, 0x2, 0x2, 0x179e, 0x179f, 0x3, 0x2, 
       0x2, 0x2, 0x179f, 0x17a0, 0x5, 0x3d2, 0x1ea, 0x2, 0x17a0, 0x17a2, 
       0x7, 0x46, 0x2, 0x2, 0x17a1, 0x17a3, 0x5, 0x19e, 0xd0, 0x2, 0x17a2, 
       0x17a1, 0x3, 0x2, 0x2, 0x2, 0x17a2, 0x17a3, 0x3, 0x2, 0x2, 0x2, 0x17a3, 
       0x17a4, 0x3, 0x2, 0x2, 0x2, 0x17a4, 0x17a5, 0x7, 0x47, 0x2, 0x2, 
       0x17a5, 0x17a6, 0x7, 0x2, 0x2, 0x3, 0x17a6, 0x17d1, 0x3, 0x2, 0x2, 
       0x2, 0x17a7, 0x17a8, 0x5, 0x16e, 0xb8, 0x2, 0x17a8, 0x17aa, 0x7, 
       0x4e, 0x2, 0x2, 0x17a9, 0x17ab, 0x5, 0x2a, 0x16, 0x2, 0x17aa, 0x17a9, 
       0x3, 0x2, 0x2, 0x2, 0x17aa, 0x17ab, 0x3, 0x2, 0x2, 0x2, 0x17ab, 0x17ac, 
       0x3, 0x2, 0x2, 0x2, 0x17ac, 0x17ad, 0x5, 0x3d2, 0x1ea, 0x2, 0x17ad, 
       0x17af, 0x7, 0x46, 0x2, 0x2, 0x17ae, 0x17b0, 0x5, 0x19e, 0xd0, 0x2, 
       0x17af, 0x17ae, 0x3, 0x2, 0x2, 0x2, 0x17af, 0x17b0, 0x3, 0x2, 0x2, 
       0x2, 0x17b0, 0x17b1, 0x3, 0x2, 0x2, 0x2, 0x17b1, 0x17b2, 0x7, 0x47, 
       0x2, 0x2, 0x17b2, 0x17b3, 0x7, 0x2, 0x2, 0x3, 0x17b3, 0x17d1, 0x3, 
       0x2, 0x2, 0x2, 0x17b4, 0x17b5, 0x7, 0x34, 0x2, 0x2, 0x17b5, 0x17b7, 
       0x7, 0x4e, 0x2, 0x2, 0x17b6, 0x17b8, 0x5, 0x2a, 0x16, 0x2, 0x17b7, 
       0x17b6, 0x3, 0x2, 0x2, 0x2, 0x17b7, 0x17b8, 0x3, 0x2, 0x2, 0x2, 0x17b8, 
       0x17b9, 0x3, 0x2, 0x2, 0x2, 0x17b9, 0x17ba, 0x5, 0x3d2, 0x1ea, 0x2, 
       0x17ba, 0x17bc, 0x7, 0x46, 0x2, 0x2, 0x17bb, 0x17bd, 0x5, 0x19e, 
       0xd0, 0x2, 0x17bc, 0x17bb, 0x3, 0x2, 0x2, 0x2, 0x17bc, 0x17bd, 0x3, 
       0x2, 0x2, 0x2, 0x17bd, 0x17be, 0x3, 0x2, 0x2, 0x2, 0x17be, 0x17bf, 
       0x7, 0x47, 0x2, 0x2, 0x17bf, 0x17c0, 0x7, 0x2, 0x2, 0x3, 0x17c0, 
       0x17d1, 0x3, 0x2, 0x2, 0x2, 0x17c1, 0x17c2, 0x5, 0x38, 0x1d, 0x2, 
       0x17c2, 0x17c3, 0x7, 0x4e, 0x2, 0x2, 0x17c3, 0x17c4, 0x7, 0x34, 0x2, 
       0x2, 0x17c4, 0x17c6, 0x7, 0x4e, 0x2, 0x2, 0x17c5, 0x17c7, 0x5, 0x2a, 
       0x16, 0x2, 0x17c6, 0x17c5, 0x3, 0x2, 0x2, 0x2, 0x17c6, 0x17c7, 0x3, 
       0x2, 0x2, 0x2, 0x17c7, 0x17c8, 0x3, 0x2, 0x2, 0x2, 0x17c8, 0x17c9, 
       0x5, 0x3d2, 0x1ea, 0x2, 0x17c9, 0x17cb, 0x7, 0x46, 0x2, 0x2, 0x17ca, 
       0x17cc, 0x5, 0x19e, 0xd0, 0x2, 0x17cb, 0x17ca, 0x3, 0x2, 0x2, 0x2, 
       0x17cb, 0x17cc, 0x3, 0x2, 0x2, 0x2, 0x17cc, 0x17cd, 0x3, 0x2, 0x2, 
       0x2, 0x17cd, 0x17ce, 0x7, 0x47, 0x2, 0x2, 0x17ce, 0x17cf, 0x7, 0x2, 
       0x2, 0x3, 0x17cf, 0x17d1, 0x3, 0x2, 0x2, 0x2, 0x17d0, 0x1785, 0x3, 
       0x2, 0x2, 0x2, 0x17d0, 0x178d, 0x3, 0x2, 0x2, 0x2, 0x17d0, 0x179a, 
       0x3, 0x2, 0x2, 0x2, 0x17d0, 0x17a7, 0x3, 0x2, 0x2, 0x2, 0x17d0, 0x17b4, 
       0x3, 0x2, 0x2, 0x2, 0x17d0, 0x17c1, 0x3, 0x2, 0x2, 0x2, 0x17d1, 0x381, 
       0x3, 0x2, 0x2, 0x2, 0x17d2, 0x17d4, 0x7, 0x4e, 0x2, 0x2, 0x17d3, 
       0x17d5, 0x5, 0x2a, 0x16, 0x2, 0x17d4, 0x17d3, 0x3, 0x2, 0x2, 0x2, 
       0x17d4, 0x17d5, 0x3, 0x2, 0x2, 0x2, 0x17d5, 0x17d6, 0x3, 0x2, 0x2, 
       0x2, 0x17d6, 0x17d7, 0x5, 0x3d2, 0x1ea, 0x2, 0x17d7, 0x17d9, 0x7, 
       0x46, 0x2, 0x2, 0x17d8, 0x17da, 0x5, 0x19e, 0xd0, 0x2, 0x17d9, 0x17d8, 
       0x3, 0x2, 0x2, 0x2, 0x17d9, 0x17da, 0x3, 0x2, 0x2, 0x2, 0x17da, 0x17db, 
       0x3, 0x2, 0x2, 0x2, 0x17db, 0x17dc, 0x7, 0x47, 0x2, 0x2, 0x17dc, 
       0x17dd, 0x7, 0x2, 0x2, 0x3, 0x17dd, 0x383, 0x3, 0x2, 0x2, 0x2, 0x17de, 
       0x17df, 0x5, 0x3e, 0x20, 0x2, 0x17df, 0x17e1, 0x7, 0x46, 0x2, 0x2, 
       0x17e0, 0x17e2, 0x5, 0x19e, 0xd0, 0x2, 0x17e1, 0x17e0, 0x3, 0x2, 
       0x2, 0x2, 0x17e1, 0x17e2, 0x3, 0x2, 0x2, 0x2, 0x17e2, 0x17e3, 0x3, 
       0x2, 0x2, 0x2, 0x17e3, 0x17e4, 0x7, 0x47, 0x2, 0x2, 0x17e4, 0x17e5, 
       0x7, 0x2, 0x2, 0x3, 0x17e5, 0x181d, 0x3, 0x2, 0x2, 0x2, 0x17e6, 0x17e7, 
       0x5, 0x38, 0x1d, 0x2, 0x17e7, 0x17e9, 0x7, 0x4e, 0x2, 0x2, 0x17e8, 
       0x17ea, 0x5, 0x2a, 0x16, 0x2, 0x17e9, 0x17e8, 0x3, 0x2, 0x2, 0x2, 
       0x17e9, 0x17ea, 0x3, 0x2, 0x2, 0x2, 0x17ea, 0x17eb, 0x3, 0x2, 0x2, 
       0x2, 0x17eb, 0x17ec, 0x5, 0x3d2, 0x1ea, 0x2, 0x17ec, 0x17ee, 0x7, 
       0x46, 0x2, 0x2, 0x17ed, 0x17ef, 0x5, 0x19e, 0xd0, 0x2, 0x17ee, 0x17ed, 
       0x3, 0x2, 0x2, 0x2, 0x17ee, 0x17ef, 0x3, 0x2, 0x2, 0x2, 0x17ef, 0x17f0, 
       0x3, 0x2, 0x2, 0x2, 0x17f0, 0x17f1, 0x7, 0x47, 0x2, 0x2, 0x17f1, 
       0x17f2, 0x7, 0x2, 0x2, 0x3, 0x17f2, 0x181d, 0x3, 0x2, 0x2, 0x2, 0x17f3, 
       0x17f4, 0x5, 0x3c, 0x1f, 0x2, 0x17f4, 0x17f6, 0x7, 0x4e, 0x2, 0x2, 
       0x17f5, 0x17f7, 0x5, 0x2a, 0x16, 0x2, 0x17f6, 0x17f5, 0x3, 0x2, 0x2, 
       0x2, 0x17f6, 0x17f7, 0x3, 0x2, 0x2, 0x2, 0x17f7, 0x17f8, 0x3, 0x2, 
       0x2, 0x2, 0x17f8, 0x17f9, 0x5, 0x3d2, 0x1ea, 0x2, 0x17f9, 0x17fb, 
       0x7, 0x46, 0x2, 0x2, 0x17fa, 0x17fc, 0x5, 0x19e, 0xd0, 0x2, 0x17fb, 
       0x17fa, 0x3, 0x2, 0x2, 0x2, 0x17fb, 0x17fc, 0x3, 0x2, 0x2, 0x2, 0x17fc, 
       0x17fd, 0x3, 0x2, 0x2, 0x2, 0x17fd, 0x17fe, 0x7, 0x47, 0x2, 0x2, 
       0x17fe, 0x17ff, 0x7, 0x2, 0x2, 0x3, 0x17ff, 0x181d, 0x3, 0x2, 0x2, 
       0x2, 0x1800, 0x1801, 0x7, 0x34, 0x2, 0x2, 0x1801, 0x1803, 0x7, 0x4e, 
       0x2, 0x2, 0x1802, 0x1804, 0x5, 0x2a, 0x16, 0x2, 0x1803, 0x1802, 0x3, 
       0x2, 0x2, 0x2, 0x1803, 0x1804, 0x3, 0x2, 0x2, 0x2, 0x1804, 0x1805, 
       0x3, 0x2, 0x2, 0x2, 0x1805, 0x1806, 0x5, 0x3d2, 0x1ea, 0x2, 0x1806, 
       0x1808, 0x7, 0x46, 0x2, 0x2, 0x1807, 0x1809, 0x5, 0x19e, 0xd0, 0x2, 
       0x1808, 0x1807, 0x3, 0x2, 0x2, 0x2, 0x1808, 0x1809, 0x3, 0x2, 0x2, 
       0x2, 0x1809, 0x180a, 0x3, 0x2, 0x2, 0x2, 0x180a, 0x180b, 0x7, 0x47, 
       0x2, 0x2, 0x180b, 0x180c, 0x7, 0x2, 0x2, 0x3, 0x180c, 0x181d, 0x3, 
       0x2, 0x2, 0x2, 0x180d, 0x180e, 0x5, 0x38, 0x1d, 0x2, 0x180e, 0x180f, 
       0x7, 0x4e, 0x2, 0x2, 0x180f, 0x1810, 0x7, 0x34, 0x2, 0x2, 0x1810, 
       0x1812, 0x7, 0x4e, 0x2, 0x2, 0x1811, 0x1813, 0x5, 0x2a, 0x16, 0x2, 
       0x1812, 0x1811, 0x3, 0x2, 0x2, 0x2, 0x1812, 0x1813, 0x3, 0x2, 0x2, 
       0x2, 0x1813, 0x1814, 0x3, 0x2, 0x2, 0x2, 0x1814, 0x1815, 0x5, 0x3d2, 
       0x1ea, 0x2, 0x1815, 0x1817, 0x7, 0x46, 0x2, 0x2, 0x1816, 0x1818, 
       0x5, 0x19e, 0xd0, 0x2, 0x1817, 0x1816, 0x3, 0x2, 0x2, 0x2, 0x1817, 
       0x1818, 0x3, 0x2, 0x2, 0x2, 0x1818, 0x1819, 0x3, 0x2, 0x2, 0x2, 0x1819, 
       0x181a, 0x7, 0x47, 0x2, 0x2, 0x181a, 0x181b, 0x7, 0x2, 0x2, 0x3, 
       0x181b, 0x181d, 0x3, 0x2, 0x2, 0x2, 0x181c, 0x17de, 0x3, 0x2, 0x2, 
       0x2, 0x181c, 0x17e6, 0x3, 0x2, 0x2, 0x2, 0x181c, 0x17f3, 0x3, 0x2, 
       0x2, 0x2, 0x181c, 0x1800, 0x3, 0x2, 0x2, 0x2, 0x181c, 0x180d, 0x3, 
       0x2, 0x2, 0x2, 0x181d, 0x385, 0x3, 0x2, 0x2, 0x2, 0x181e, 0x1823, 
       0x5, 0x1ae, 0xd8, 0x2, 0x181f, 0x1820, 0x7, 0x4d, 0x2, 0x2, 0x1820, 
       0x1822, 0x5, 0x1ae, 0xd8, 0x2, 0x1821, 0x181f, 0x3, 0x2, 0x2, 0x2, 
       0x1822, 0x1825, 0x3, 0x2, 0x2, 0x2, 0x1823, 0x1821, 0x3, 0x2, 0x2, 
       0x2, 0x1823, 0x1824, 0x3, 0x2, 0x2, 0x2, 0x1824, 0x1826, 0x3, 0x2, 
       0x2, 0x2, 0x1825, 0x1823, 0x3, 0x2, 0x2, 0x2, 0x1826, 0x1827, 0x7, 
       0x2, 0x2, 0x3, 0x1827, 0x387, 0x3, 0x2, 0x2, 0x2, 0x1828, 0x1829, 
       0x5, 0x3c, 0x1f, 0x2, 0x1829, 0x182b, 0x7, 0x51, 0x2, 0x2, 0x182a, 
       0x182c, 0x5, 0x2a, 0x16, 0x2, 0x182b, 0x182a, 0x3, 0x2, 0x2, 0x2, 
       0x182b, 0x182c, 0x3, 0x2, 0x2, 0x2, 0x182c, 0x182d, 0x3, 0x2, 0x2, 
       0x2, 0x182d, 0x182e, 0x5, 0x3d2, 0x1ea, 0x2, 0x182e, 0x182f, 0x7, 
       0x2, 0x2, 0x3, 0x182f, 0x1860, 0x3, 0x2, 0x2, 0x2, 0x1830, 0x1831, 
       0x5, 0xc, 0x7, 0x2, 0x1831, 0x1833, 0x7, 0x51, 0x2, 0x2, 0x1832, 
       0x1834, 0x5, 0x2a, 0x16, 0x2, 0x1833, 0x1832, 0x3, 0x2, 0x2, 0x2, 
       0x1833, 0x1834, 0x3, 0x2, 0x2, 0x2, 0x1834, 0x1835, 0x3, 0x2, 0x2, 
       0x2, 0x1835, 0x1836, 0x5, 0x3d2, 0x1ea, 0x2, 0x1836, 0x1837, 0x7, 
       0x2, 0x2, 0x3, 0x1837, 0x1860, 0x3, 0x2, 0x2, 0x2, 0x1838, 0x1839, 
       0x5, 0x16e, 0xb8, 0x2, 0x1839, 0x183b, 0x7, 0x51, 0x2, 0x2, 0x183a, 
       0x183c, 0x5, 0x2a, 0x16, 0x2, 0x183b, 0x183a, 0x3, 0x2, 0x2, 0x2, 
       0x183b, 0x183c, 0x3, 0x2, 0x2, 0x2, 0x183c, 0x183d, 0x3, 0x2, 0x2, 
       0x2, 0x183d, 0x183e, 0x5, 0x3d2, 0x1ea, 0x2, 0x183e, 0x183f, 0x7, 
       0x2, 0x2, 0x3, 0x183f, 0x1860, 0x3, 0x2, 0x2, 0x2, 0x1840, 0x1841, 
       0x7, 0x34, 0x2, 0x2, 0x1841, 0x1843, 0x7, 0x51, 0x2, 0x2, 0x1842, 
       0x1844, 0x5, 0x2a, 0x16, 0x2, 0x1843, 0x1842, 0x3, 0x2, 0x2, 0x2, 
       0x1843, 0x1844, 0x3, 0x2, 0x2, 0x2, 0x1844, 0x1845, 0x3, 0x2, 0x2, 
       0x2, 0x1845, 0x1846, 0x5, 0x3d2, 0x1ea, 0x2, 0x1846, 0x1847, 0x7, 
       0x2, 0x2, 0x3, 0x1847, 0x1860, 0x3, 0x2, 0x2, 0x2, 0x1848, 0x1849, 
       0x5, 0x38, 0x1d, 0x2, 0x1849, 0x184a, 0x7, 0x4e, 0x2, 0x2, 0x184a, 
       0x184b, 0x7, 0x34, 0x2, 0x2, 0x184b, 0x184d, 0x7, 0x51, 0x2, 0x2, 
       0x184c, 0x184e, 0x5, 0x2a, 0x16, 0x2, 0x184d, 0x184c, 0x3, 0x2, 0x2, 
       0x2, 0x184d, 0x184e, 0x3, 0x2, 0x2, 0x2, 0x184e, 0x184f, 0x3, 0x2, 
       0x2, 0x2, 0x184f, 0x1850, 0x5, 0x3d2, 0x1ea, 0x2, 0x1850, 0x1851, 
       0x7, 0x2, 0x2, 0x3, 0x1851, 0x1860, 0x3, 0x2, 0x2, 0x2, 0x1852, 0x1853, 
       0x5, 0x10, 0x9, 0x2, 0x1853, 0x1855, 0x7, 0x51, 0x2, 0x2, 0x1854, 
       0x1856, 0x5, 0x2a, 0x16, 0x2, 0x1855, 0x1854, 0x3, 0x2, 0x2, 0x2, 
       0x1855, 0x1856, 0x3, 0x2, 0x2, 0x2, 0x1856, 0x1857, 0x3, 0x2, 0x2, 
       0x2, 0x1857, 0x1858, 0x7, 0x2b, 0x2, 0x2, 0x1858, 0x1859, 0x7, 0x2, 
       0x2, 0x3, 0x1859, 0x1860, 0x3, 0x2, 0x2, 0x2, 0x185a, 0x185b, 0x5, 
       0x1e, 0x10, 0x2, 0x185b, 0x185c, 0x7, 0x51, 0x2, 0x2, 0x185c, 0x185d, 
       0x7, 0x2b, 0x2, 0x2, 0x185d, 0x185e, 0x7, 0x2, 0x2, 0x3, 0x185e, 
       0x1860, 0x3, 0x2, 0x2, 0x2, 0x185f, 0x1828, 0x3, 0x2, 0x2, 0x2, 0x185f, 
       0x1830, 0x3, 0x2, 0x2, 0x2, 0x185f, 0x1838, 0x3, 0x2, 0x2, 0x2, 0x185f, 
       0x1840, 0x3, 0x2, 0x2, 0x2, 0x185f, 0x1848, 0x3, 0x2, 0x2, 0x2, 0x185f, 
       0x1852, 0x3, 0x2, 0x2, 0x2, 0x185f, 0x185a, 0x3, 0x2, 0x2, 0x2, 0x1860, 
       0x389, 0x3, 0x2, 0x2, 0x2, 0x1861, 0x1863, 0x7, 0x51, 0x2, 0x2, 0x1862, 
       0x1864, 0x5, 0x2a, 0x16, 0x2, 0x1863, 0x1862, 0x3, 0x2, 0x2, 0x2, 
       0x1863, 0x1864, 0x3, 0x2, 0x2, 0x2, 0x1864, 0x1865, 0x3, 0x2, 0x2, 
       0x2, 0x1865, 0x1866, 0x5, 0x3d2, 0x1ea, 0x2, 0x1866, 0x1867, 0x7, 
       0x2, 0x2, 0x3, 0x1867, 0x38b, 0x3, 0x2, 0x2, 0x2, 0x1868, 0x1869, 
       0x5, 0x3c, 0x1f, 0x2, 0x1869, 0x186b, 0x7, 0x51, 0x2, 0x2, 0x186a, 
       0x186c, 0x5, 0x2a, 0x16, 0x2, 0x186b, 0x186a, 0x3, 0x2, 0x2, 0x2, 
       0x186b, 0x186c, 0x3, 0x2, 0x2, 0x2, 0x186c, 0x186d, 0x3, 0x2, 0x2, 
       0x2, 0x186d, 0x186e, 0x5, 0x3d2, 0x1ea, 0x2, 0x186e, 0x186f, 0x7, 
       0x2, 0x2, 0x3, 0x186f, 0x1898, 0x3, 0x2, 0x2, 0x2, 0x1870, 0x1871, 
       0x5, 0xc, 0x7, 0x2, 0x1871, 0x1873, 0x7, 0x51, 0x2, 0x2, 0x1872, 
       0x1874, 0x5, 0x2a, 0x16, 0x2, 0x1873, 0x1872, 0x3, 0x2, 0x2, 0x2, 
       0x1873, 0x1874, 0x3, 0x2, 0x2, 0x2, 0x1874, 0x1875, 0x3, 0x2, 0x2, 
       0x2, 0x1875, 0x1876, 0x5, 0x3d2, 0x1ea, 0x2, 0x1876, 0x1877, 0x7, 
       0x2, 0x2, 0x3, 0x1877, 0x1898, 0x3, 0x2, 0x2, 0x2, 0x1878, 0x1879, 
       0x7, 0x34, 0x2, 0x2, 0x1879, 0x187b, 0x7, 0x51, 0x2, 0x2, 0x187a, 
       0x187c, 0x5, 0x2a, 0x16, 0x2, 0x187b, 0x187a, 0x3, 0x2, 0x2, 0x2, 
       0x187b, 0x187c, 0x3, 0x2, 0x2, 0x2, 0x187c, 0x187d, 0x3, 0x2, 0x2, 
       0x2, 0x187d, 0x187e, 0x5, 0x3d2, 0x1ea, 0x2, 0x187e, 0x187f, 0x7, 
       0x2, 0x2, 0x3, 0x187f, 0x1898, 0x3, 0x2, 0x2, 0x2, 0x1880, 0x1881, 
       0x5, 0x38, 0x1d, 0x2, 0x1881, 0x1882, 0x7, 0x4e, 0x2, 0x2, 0x1882, 
       0x1883, 0x7, 0x34, 0x2, 0x2, 0x1883, 0x1885, 0x7, 0x51, 0x2, 0x2, 
       0x1884, 0x1886, 0x5, 0x2a, 0x16, 0x2, 0x1885, 0x1884, 0x3, 0x2, 0x2, 
       0x2, 0x1885, 0x1886, 0x3, 0x2, 0x2, 0x2, 0x1886, 0x1887, 0x3, 0x2, 
       0x2, 0x2, 0x1887, 0x1888, 0x5, 0x3d2, 0x1ea, 0x2, 0x1888, 0x1889, 
       0x7, 0x2, 0x2, 0x3, 0x1889, 0x1898, 0x3, 0x2, 0x2, 0x2, 0x188a, 0x188b, 
       0x5, 0x10, 0x9, 0x2, 0x188b, 0x188d, 0x7, 0x51, 0x2, 0x2, 0x188c, 
       0x188e, 0x5, 0x2a, 0x16, 0x2, 0x188d, 0x188c, 0x3, 0x2, 0x2, 0x2, 
       0x188d, 0x188e, 0x3, 0x2, 0x2, 0x2, 0x188e, 0x188f, 0x3, 0x2, 0x2, 
       0x2, 0x188f, 0x1890, 0x7, 0x2b, 0x2, 0x2, 0x1890, 0x1891, 0x7, 0x2, 
       0x2, 0x3, 0x1891, 0x1898, 0x3, 0x2, 0x2, 0x2, 0x1892, 0x1893, 0x5, 
       0x1e, 0x10, 0x2, 0x1893, 0x1894, 0x7, 0x51, 0x2, 0x2, 0x1894, 0x1895, 
       0x7, 0x2b, 0x2, 0x2, 0x1895, 0x1896, 0x7, 0x2, 0x2, 0x3, 0x1896, 
       0x1898, 0x3, 0x2, 0x2, 0x2, 0x1897, 0x1868, 0x3, 0x2, 0x2, 0x2, 0x1897, 
       0x1870, 0x3, 0x2, 0x2, 0x2, 0x1897, 0x1878, 0x3, 0x2, 0x2, 0x2, 0x1897, 
       0x1880, 0x3, 0x2, 0x2, 0x2, 0x1897, 0x188a, 0x3, 0x2, 0x2, 0x2, 0x1897, 
       0x1892, 0x3, 0x2, 0x2, 0x2, 0x1898, 0x38d, 0x3, 0x2, 0x2, 0x2, 0x1899, 
       0x189a, 0x7, 0x2b, 0x2, 0x2, 0x189a, 0x189b, 0x5, 0x4, 0x3, 0x2, 
       0x189b, 0x189d, 0x5, 0x1a8, 0xd5, 0x2, 0x189c, 0x189e, 0x5, 0x20, 
       0x11, 0x2, 0x189d, 0x189c, 0x3, 0x2, 0x2, 0x2, 0x189d, 0x189e, 0x3, 
       0x2, 0x2, 0x2, 0x189e, 0x189f, 0x3, 0x2, 0x2, 0x2, 0x189f, 0x18a0, 
       0x7, 0x2, 0x2, 0x3, 0x18a0, 0x18b6, 0x3, 0x2, 0x2, 0x2, 0x18a1, 0x18a2, 
       0x7, 0x2b, 0x2, 0x2, 0x18a2, 0x18a3, 0x5, 0xe, 0x8, 0x2, 0x18a3, 
       0x18a5, 0x5, 0x1a8, 0xd5, 0x2, 0x18a4, 0x18a6, 0x5, 0x20, 0x11, 0x2, 
       0x18a5, 0x18a4, 0x3, 0x2, 0x2, 0x2, 0x18a5, 0x18a6, 0x3, 0x2, 0x2, 
       0x2, 0x18a6, 0x18a7, 0x3, 0x2, 0x2, 0x2, 0x18a7, 0x18a8, 0x7, 0x2, 
       0x2, 0x3, 0x18a8, 0x18b6, 0x3, 0x2, 0x2, 0x2, 0x18a9, 0x18aa, 0x7, 
       0x2b, 0x2, 0x2, 0x18aa, 0x18ab, 0x5, 0x4, 0x3, 0x2, 0x18ab, 0x18ac, 
       0x5, 0x20, 0x11, 0x2, 0x18ac, 0x18ad, 0x5, 0x104, 0x83, 0x2, 0x18ad, 
       0x18ae, 0x7, 0x2, 0x2, 0x3, 0x18ae, 0x18b6, 0x3, 0x2, 0x2, 0x2, 0x18af, 
       0x18b0, 0x7, 0x2b, 0x2, 0x2, 0x18b0, 0x18b1, 0x5, 0xe, 0x8, 0x2, 
       0x18b1, 0x18b2, 0x5, 0x20, 0x11, 0x2, 0x18b2, 0x18b3, 0x5, 0x104, 
       0x83, 0x2, 0x18b3, 0x18b4, 0x7, 0x2, 0x2, 0x3, 0x18b4, 0x18b6, 0x3, 
       0x2, 0x2, 0x2, 0x18b5, 0x1899, 0x3, 0x2, 0x2, 0x2, 0x18b5, 0x18a1, 
       0x3, 0x2, 0x2, 0x2, 0x18b5, 0x18a9, 0x3, 0x2, 0x2, 0x2, 0x18b5, 0x18af, 
       0x3, 0x2, 0x2, 0x2, 0x18b6, 0x38f, 0x3, 0x2, 0x2, 0x2, 0x18b7, 0x18b9, 
       0x5, 0x1aa, 0xd6, 0x2, 0x18b8, 0x18b7, 0x3, 0x2, 0x2, 0x2, 0x18b9, 
       0x18ba, 0x3, 0x2, 0x2, 0x2, 0x18ba, 0x18b8, 0x3, 0x2, 0x2, 0x2, 0x18ba, 
       0x18bb, 0x3, 0x2, 0x2, 0x2, 0x18bb, 0x18bc, 0x3, 0x2, 0x2, 0x2, 0x18bc, 
       0x18bd, 0x7, 0x2, 0x2, 0x3, 0x18bd, 0x391, 0x3, 0x2, 0x2, 0x2, 0x18be, 
       0x18c0, 0x5, 0xf2, 0x7a, 0x2, 0x18bf, 0x18be, 0x3, 0x2, 0x2, 0x2, 
       0x18c0, 0x18c3, 0x3, 0x2, 0x2, 0x2, 0x18c1, 0x18bf, 0x3, 0x2, 0x2, 
       0x2, 0x18c1, 0x18c2, 0x3, 0x2, 0x2, 0x2, 0x18c2, 0x18c4, 0x3, 0x2, 
       0x2, 0x2, 0x18c3, 0x18c1, 0x3, 0x2, 0x2, 0x2, 0x18c4, 0x18c5, 0x7, 
       0x4a, 0x2, 0x2, 0x18c5, 0x18c6, 0x5, 0x1ae, 0xd8, 0x2, 0x18c6, 0x18c7, 
       0x7, 0x4b, 0x2, 0x2, 0x18c7, 0x18c8, 0x7, 0x2, 0x2, 0x3, 0x18c8, 
       0x393, 0x3, 0x2, 0x2, 0x2, 0x18c9, 0x18ca, 0x5, 0x1ae, 0xd8, 0x2, 
       0x18ca, 0x18cb, 0x7, 0x2, 0x2, 0x3, 0x18cb, 0x395, 0x3, 0x2, 0x2, 
       0x2, 0x18cc, 0x18cd, 0x5, 0x1b0, 0xd9, 0x2, 0x18cd, 0x18ce, 0x7, 
       0x2, 0x2, 0x3, 0x18ce, 0x18d3, 0x3, 0x2, 0x2, 0x2, 0x18cf, 0x18d0, 
       0x5, 0x1b8, 0xdd, 0x2, 0x18d0, 0x18d1, 0x7, 0x2, 0x2, 0x3, 0x18d1, 
       0x18d3, 0x3, 0x2, 0x2, 0x2, 0x18d2, 0x18cc, 0x3, 0x2, 0x2, 0x2, 0x18d2, 
       0x18cf, 0x3, 0x2, 0x2, 0x2, 0x18d3, 0x397, 0x3, 0x2, 0x2, 0x2, 0x18d4, 
       0x18d5, 0x5, 0x1b2, 0xda, 0x2, 0x18d5, 0x18d6, 0x7, 0x59, 0x2, 0x2, 
       0x18d6, 0x18d7, 0x5, 0x1b6, 0xdc, 0x2, 0x18d7, 0x18d8, 0x7, 0x2, 
       0x2, 0x3, 0x18d8, 0x399, 0x3, 0x2, 0x2, 0x2, 0x18d9, 0x18da, 0x5, 
       0x3d2, 0x1ea, 0x2, 0x18da, 0x18db, 0x7, 0x2, 0x2, 0x3, 0x18db, 0x18e8, 
       0x3, 0x2, 0x2, 0x2, 0x18dc, 0x18de, 0x7, 0x46, 0x2, 0x2, 0x18dd, 
       0x18df, 0x5, 0xa2, 0x52, 0x2, 0x18de, 0x18dd, 0x3, 0x2, 0x2, 0x2, 
       0x18de, 0x18df, 0x3, 0x2, 0x2, 0x2, 0x18df, 0x18e0, 0x3, 0x2, 0x2, 
       0x2, 0x18e0, 0x18e1, 0x7, 0x47, 0x2, 0x2, 0x18e1, 0x18e8, 0x7, 0x2, 
       0x2, 0x3, 0x18e2, 0x18e3, 0x7, 0x46, 0x2, 0x2, 0x18e3, 0x18e4, 0x5, 
       0x1b4, 0xdb, 0x2, 0x18e4, 0x18e5, 0x7, 0x47, 0x2, 0x2, 0x18e5, 0x18e6, 
       0x7, 0x2, 0x2, 0x3, 0x18e6, 0x18e8, 0x3, 0x2, 0x2, 0x2, 0x18e7, 0x18d9, 
       0x3, 0x2, 0x2, 0x2, 0x18e7, 0x18dc, 0x3, 0x2, 0x2, 0x2, 0x18e7, 0x18e2, 
       0x3, 0x2, 0x2, 0x2, 0x18e8, 0x39b, 0x3, 0x2, 0x2, 0x2, 0x18e9, 0x18ee, 
       0x5, 0x3d2, 0x1ea, 0x2, 0x18ea, 0x18eb, 0x7, 0x4d, 0x2, 0x2, 0x18eb, 
       0x18ed, 0x5, 0x3d2, 0x1ea, 0x2, 0x18ec, 0x18ea, 0x3, 0x2, 0x2, 0x2, 
       0x18ed, 0x18f0, 0x3, 0x2, 0x2, 0x2, 0x18ee, 0x18ec, 0x3, 0x2, 0x2, 
       0x2, 0x18ee, 0x18ef, 0x3, 0x2, 0x2, 0x2, 0x18ef, 0x18f1, 0x3, 0x2, 
       0x2, 0x2, 0x18f0, 0x18ee, 0x3, 0x2, 0x2, 0x2, 0x18f1, 0x18f2, 0x7, 
       0x2, 0x2, 0x3, 0x18f2, 0x39d, 0x3, 0x2, 0x2, 0x2, 0x18f3, 0x18f4, 
       0x5, 0x1ae, 0xd8, 0x2, 0x18f4, 0x18f5, 0x7, 0x2, 0x2, 0x3, 0x18f5, 
       0x18fa, 0x3, 0x2, 0x2, 0x2, 0x18f6, 0x18f7, 0x5, 0x108, 0x85, 0x2, 
       0x18f7, 0x18f8, 0x7, 0x2, 0x2, 0x3, 0x18f8, 0x18fa, 0x3, 0x2, 0x2, 
       0x2, 0x18f9, 0x18f3, 0x3, 0x2, 0x2, 0x2, 0x18f9, 0x18f6, 0x3, 0x2, 
       0x2, 0x2, 0x18fa, 0x39f, 0x3, 0x2, 0x2, 0x2, 0x18fb, 0x18fc, 0x5, 
       0x1c0, 0xe1, 0x2, 0x18fc, 0x18fd, 0x7, 0x2, 0x2, 0x3, 0x18fd, 0x1902, 
       0x3, 0x2, 0x2, 0x2, 0x18fe, 0x18ff, 0x5, 0x1ba, 0xde, 0x2, 0x18ff, 
       0x1900, 0x7, 0x2, 0x2, 0x3, 0x1900, 0x1902, 0x3, 0x2, 0x2, 0x2, 0x1901, 
       0x18fb, 0x3, 0x2, 0x2, 0x2, 0x1901, 0x18fe, 0x3, 0x2, 0x2, 0x2, 0x1902, 
       0x3a1, 0x3, 0x2, 0x2, 0x2, 0x1903, 0x1904, 0x5, 0x1bc, 0xdf, 0x2, 
       0x1904, 0x1905, 0x5, 0x1be, 0xe0, 0x2, 0x1905, 0x1906, 0x5, 0x1ae, 
       0xd8, 0x2, 0x1906, 0x1907, 0x7, 0x2, 0x2, 0x3, 0x1907, 0x3a3, 0x3, 
       0x2, 0x2, 0x2, 0x1908, 0x1909, 0x5, 0x3c, 0x1f, 0x2, 0x1909, 0x190a, 
       0x7, 0x2, 0x2, 0x3, 0x190a, 0x1912, 0x3, 0x2, 0x2, 0x2, 0x190b, 0x190c, 
       0x5, 0x18c, 0xc7, 0x2, 0x190c, 0x190d, 0x7, 0x2, 0x2, 0x3, 0x190d, 
       0x1912, 0x3, 0x2, 0x2, 0x2, 0x190e, 0x190f, 0x5, 0x192, 0xca, 0x2, 
       0x190f, 0x1910, 0x7, 0x2, 0x2, 0x3, 0x1910, 0x1912, 0x3, 0x2, 0x2, 
       0x2, 0x1911, 0x1908, 0x3, 0x2, 0x2, 0x2, 0x1911, 0x190b, 0x3, 0x2, 
       0x2, 0x2, 0x1911, 0x190e, 0x3, 0x2, 0x2, 0x2, 0x1912, 0x3a5, 0x3, 
       0x2, 0x2, 0x2, 0x1913, 0x1914, 0x7, 0x52, 0x2, 0x2, 0x1914, 0x192c, 
       0x7, 0x2, 0x2, 0x3, 0x1915, 0x1916, 0x7, 0x6c, 0x2, 0x2, 0x1916, 
       0x192c, 0x7, 0x2, 0x2, 0x3, 0x1917, 0x1918, 0x7, 0x6d, 0x2, 0x2, 
       0x1918, 0x192c, 0x7, 0x2, 0x2, 0x3, 0x1919, 0x191a, 0x7, 0x71, 0x2, 
       0x2, 0x191a, 0x192c, 0x7, 0x2, 0x2, 0x3, 0x191b, 0x191c, 0x7, 0x6a, 
       0x2, 0x2, 0x191c, 0x192c, 0x7, 0x2, 0x2, 0x3, 0x191d, 0x191e, 0x7, 
       0x6b, 0x2, 0x2, 0x191e, 0x192c, 0x7, 0x2, 0x2, 0x3, 0x191f, 0x1920, 
       0x7, 0x72, 0x2, 0x2, 0x1920, 0x192c, 0x7, 0x2, 0x2, 0x3, 0x1921, 
       0x1922, 0x7, 0x73, 0x2, 0x2, 0x1922, 0x192c, 0x7, 0x2, 0x2, 0x3, 
       0x1923, 0x1924, 0x7, 0x74, 0x2, 0x2, 0x1924, 0x192c, 0x7, 0x2, 0x2, 
       0x3, 0x1925, 0x1926, 0x7, 0x6e, 0x2, 0x2, 0x1926, 0x192c, 0x7, 0x2, 
       0x2, 0x3, 0x1927, 0x1928, 0x7, 0x70, 0x2, 0x2, 0x1928, 0x192c, 0x7, 
       0x2, 0x2, 0x3, 0x1929, 0x192a, 0x7, 0x6f, 0x2, 0x2, 0x192a, 0x192c, 
       0x7, 0x2, 0x2, 0x3, 0x192b, 0x1913, 0x3, 0x2, 0x2, 0x2, 0x192b, 0x1915, 
       0x3, 0x2, 0x2, 0x2, 0x192b, 0x1917, 0x3, 0x2, 0x2, 0x2, 0x192b, 0x1919, 
       0x3, 0x2, 0x2, 0x2, 0x192b, 0x191b, 0x3, 0x2, 0x2, 0x2, 0x192b, 0x191d, 
       0x3, 0x2, 0x2, 0x2, 0x192b, 0x191f, 0x3, 0x2, 0x2, 0x2, 0x192b, 0x1921, 
       0x3, 0x2, 0x2, 0x2, 0x192b, 0x1923, 0x3, 0x2, 0x2, 0x2, 0x192b, 0x1925, 
       0x3, 0x2, 0x2, 0x2, 0x192b, 0x1927, 0x3, 0x2, 0x2, 0x2, 0x192b, 0x1929, 
       0x3, 0x2, 0x2, 0x2, 0x192c, 0x3a7, 0x3, 0x2, 0x2, 0x2, 0x192d, 0x192e, 
       0x5, 0x1c2, 0xe2, 0x2, 0x192e, 0x192f, 0x7, 0x2, 0x2, 0x3, 0x192f, 
       0x193b, 0x3, 0x2, 0x2, 0x2, 0x1930, 0x1931, 0x5, 0x1c2, 0xe2, 0x2, 
       0x1931, 0x1932, 0x7, 0x57, 0x2, 0x2, 0x1932, 0x1933, 0x5, 0x1ae, 
       0xd8, 0x2, 0x1933, 0x1936, 0x7, 0x58, 0x2, 0x2, 0x1934, 0x1937, 0x5, 
       0x1c0, 0xe1, 0x2, 0x1935, 0x1937, 0x5, 0x1b0, 0xd9, 0x2, 0x1936, 
       0x1934, 0x3, 0x2, 0x2, 0x2, 0x1936, 0x1935, 0x3, 0x2, 0x2, 0x2, 0x1937, 
       0x1938, 0x3, 0x2, 0x2, 0x2, 0x1938, 0x1939, 0x7, 0x2, 0x2, 0x3, 0x1939, 
       0x193b, 0x3, 0x2, 0x2, 0x2, 0x193a, 0x192d, 0x3, 0x2, 0x2, 0x2, 0x193a, 
       0x1930, 0x3, 0x2, 0x2, 0x2, 0x193b, 0x3a9, 0x3, 0x2, 0x2, 0x2, 0x193c, 
       0x193d, 0x5, 0x1c4, 0xe3, 0x2, 0x193d, 0x193e, 0x7, 0x2, 0x2, 0x3, 
       0x193e, 0x1945, 0x3, 0x2, 0x2, 0x2, 0x193f, 0x1940, 0x5, 0x1c2, 0xe2, 
       0x2, 0x1940, 0x1941, 0x7, 0x5f, 0x2, 0x2, 0x1941, 0x1942, 0x5, 0x1c4, 
       0xe3, 0x2, 0x1942, 0x1943, 0x7, 0x2, 0x2, 0x3, 0x1943, 0x1945, 0x3, 
       0x2, 0x2, 0x2, 0x1944, 0x193c, 0x3, 0x2, 0x2, 0x2, 0x1944, 0x193f, 
       0x3, 0x2, 0x2, 0x2, 0x1945, 0x3ab, 0x3, 0x2, 0x2, 0x2, 0x1946, 0x1947, 
       0x5, 0x1c6, 0xe4, 0x2, 0x1947, 0x1948, 0x7, 0x2, 0x2, 0x3, 0x1948, 
       0x194f, 0x3, 0x2, 0x2, 0x2, 0x1949, 0x194a, 0x5, 0x1c4, 0xe3, 0x2, 
       0x194a, 0x194b, 0x7, 0x5e, 0x2, 0x2, 0x194b, 0x194c, 0x5, 0x1c6, 
       0xe4, 0x2, 0x194c, 0x194d, 0x7, 0x2, 0x2, 0x3, 0x194d, 0x194f, 0x3, 
       0x2, 0x2, 0x2, 0x194e, 0x1946, 0x3, 0x2, 0x2, 0x2, 0x194e, 0x1949, 
       0x3, 0x2, 0x2, 0x2, 0x194f, 0x3ad, 0x3, 0x2, 0x2, 0x2, 0x1950, 0x1951, 
       0x5, 0x1c8, 0xe5, 0x2, 0x1951, 0x1952, 0x7, 0x2, 0x2, 0x3, 0x1952, 
       0x1959, 0x3, 0x2, 0x2, 0x2, 0x1953, 0x1954, 0x5, 0x1c6, 0xe4, 0x2, 
       0x1954, 0x1955, 0x7, 0x67, 0x2, 0x2, 0x1955, 0x1956, 0x5, 0x1c8, 
       0xe5, 0x2, 0x1956, 0x1957, 0x7, 0x2, 0x2, 0x3, 0x1957, 0x1959, 0x3, 
       0x2, 0x2, 0x2, 0x1958, 0x1950, 0x3, 0x2, 0x2, 0x2, 0x1958, 0x1953, 
       0x3, 0x2, 0x2, 0x2, 0x1959, 0x3af, 0x3, 0x2, 0x2, 0x2, 0x195a, 0x195b, 
       0x5, 0x1ca, 0xe6, 0x2, 0x195b, 0x195c, 0x7, 0x2, 0x2, 0x3, 0x195c, 
       0x1963, 0x3, 0x2, 0x2, 0x2, 0x195d, 0x195e, 0x5, 0x1c8, 0xe5, 0x2, 
       0x195e, 0x195f, 0x7, 0x68, 0x2, 0x2, 0x195f, 0x1960, 0x5, 0x1ca, 
       0xe6, 0x2, 0x1960, 0x1961, 0x7, 0x2, 0x2, 0x3, 0x1961, 0x1963, 0x3, 
       0x2, 0x2, 0x2, 0x1962, 0x195a, 0x3, 0x2, 0x2, 0x2, 0x1962, 0x195d, 
       0x3, 0x2, 0x2, 0x2, 0x1963, 0x3b1, 0x3, 0x2, 0x2, 0x2, 0x1964, 0x1965, 
       0x5, 0x1cc, 0xe7, 0x2, 0x1965, 0x1966, 0x7, 0x2, 0x2, 0x3, 0x1966, 
       0x196d, 0x3, 0x2, 0x2, 0x2, 0x1967, 0x1968, 0x5, 0x1ca, 0xe6, 0x2, 
       0x1968, 0x1969, 0x7, 0x66, 0x2, 0x2, 0x1969, 0x196a, 0x5, 0x1cc, 
       0xe7, 0x2, 0x196a, 0x196b, 0x7, 0x2, 0x2, 0x3, 0x196b, 0x196d, 0x3, 
       0x2, 0x2, 0x2, 0x196c, 0x1964, 0x3, 0x2, 0x2, 0x2, 0x196c, 0x1967, 
       0x3, 0x2, 0x2, 0x2, 0x196d, 0x3b3, 0x3, 0x2, 0x2, 0x2, 0x196e, 0x196f, 
       0x5, 0x1ce, 0xe8, 0x2, 0x196f, 0x1970, 0x7, 0x2, 0x2, 0x3, 0x1970, 
       0x197c, 0x3, 0x2, 0x2, 0x2, 0x1971, 0x1972, 0x5, 0x1cc, 0xe7, 0x2, 
       0x1972, 0x1973, 0x7, 0x5a, 0x2, 0x2, 0x1973, 0x1974, 0x5, 0x1ce, 
       0xe8, 0x2, 0x1974, 0x1975, 0x7, 0x2, 0x2, 0x3, 0x1975, 0x197c, 0x3, 
       0x2, 0x2, 0x2, 0x1976, 0x1977, 0x5, 0x1cc, 0xe7, 0x2, 0x1977, 0x1978, 
       0x7, 0x5d, 0x2, 0x2, 0x1978, 0x1979, 0x5, 0x1ce, 0xe8, 0x2, 0x1979, 
       0x197a, 0x7, 0x2, 0x2, 0x3, 0x197a, 0x197c, 0x3, 0x2, 0x2, 0x2, 0x197b, 
       0x196e, 0x3, 0x2, 0x2, 0x2, 0x197b, 0x1971, 0x3, 0x2, 0x2, 0x2, 0x197b, 
       0x1976, 0x3, 0x2, 0x2, 0x2, 0x197c, 0x3b5, 0x3, 0x2, 0x2, 0x2, 0x197d, 
       0x197e, 0x5, 0x1d0, 0xe9, 0x2, 0x197e, 0x197f, 0x7, 0x2, 0x2, 0x3, 
       0x197f, 0x199a, 0x3, 0x2, 0x2, 0x2, 0x1980, 0x1981, 0x5, 0x1ce, 0xe8, 
       0x2, 0x1981, 0x1982, 0x7, 0x54, 0x2, 0x2, 0x1982, 0x1983, 0x5, 0x1d0, 
       0xe9, 0x2, 0x1983, 0x1984, 0x7, 0x2, 0x2, 0x3, 0x1984, 0x199a, 0x3, 
       0x2, 0x2, 0x2, 0x1985, 0x1986, 0x5, 0x1ce, 0xe8, 0x2, 0x1986, 0x1987, 
       0x7, 0x53, 0x2, 0x2, 0x1987, 0x1988, 0x5, 0x1d0, 0xe9, 0x2, 0x1988, 
       0x1989, 0x7, 0x2, 0x2, 0x3, 0x1989, 0x199a, 0x3, 0x2, 0x2, 0x2, 0x198a, 
       0x198b, 0x5, 0x1ce, 0xe8, 0x2, 0x198b, 0x198c, 0x7, 0x5b, 0x2, 0x2, 
       0x198c, 0x198d, 0x5, 0x1d0, 0xe9, 0x2, 0x198d, 0x198e, 0x7, 0x2, 
       0x2, 0x3, 0x198e, 0x199a, 0x3, 0x2, 0x2, 0x2, 0x198f, 0x1990, 0x5, 
       0x1ce, 0xe8, 0x2, 0x1990, 0x1991, 0x7, 0x5c, 0x2, 0x2, 0x1991, 0x1992, 
       0x5, 0x1d0, 0xe9, 0x2, 0x1992, 0x1993, 0x7, 0x2, 0x2, 0x3, 0x1993, 
       0x199a, 0x3, 0x2, 0x2, 0x2, 0x1994, 0x1995, 0x5, 0x1ce, 0xe8, 0x2, 
       0x1995, 0x1996, 0x7, 0x26, 0x2, 0x2, 0x1996, 0x1997, 0x5, 0xc, 0x7, 
       0x2, 0x1997, 0x1998, 0x7, 0x2, 0x2, 0x3, 0x1998, 0x199a, 0x3, 0x2, 
       0x2, 0x2, 0x1999, 0x197d, 0x3, 0x2, 0x2, 0x2, 0x1999, 0x1980, 0x3, 
       0x2, 0x2, 0x2, 0x1999, 0x1985, 0x3, 0x2, 0x2, 0x2, 0x1999, 0x198a, 
       0x3, 0x2, 0x2, 0x2, 0x1999, 0x198f, 0x3, 0x2, 0x2, 0x2, 0x1999, 0x1994, 
       0x3, 0x2, 0x2, 0x2, 0x199a, 0x3b7, 0x3, 0x2, 0x2, 0x2, 0x199b, 0x199c, 
       0x5, 0x1d2, 0xea, 0x2, 0x199c, 0x199d, 0x7, 0x2, 0x2, 0x3, 0x199d, 
       0x19b2, 0x3, 0x2, 0x2, 0x2, 0x199e, 0x199f, 0x5, 0x1d0, 0xe9, 0x2, 
       0x199f, 0x19a0, 0x7, 0x54, 0x2, 0x2, 0x19a0, 0x19a1, 0x7, 0x54, 0x2, 
       0x2, 0x19a1, 0x19a2, 0x5, 0x1d2, 0xea, 0x2, 0x19a2, 0x19a3, 0x7, 
       0x2, 0x2, 0x3, 0x19a3, 0x19b2, 0x3, 0x2, 0x2, 0x2, 0x19a4, 0x19a5, 
       0x5, 0x1d0, 0xe9, 0x2, 0x19a5, 0x19a6, 0x7, 0x53, 0x2, 0x2, 0x19a6, 
       0x19a7, 0x7, 0x53, 0x2, 0x2, 0x19a7, 0x19a8, 0x5, 0x1d2, 0xea, 0x2, 
       0x19a8, 0x19a9, 0x7, 0x2, 0x2, 0x3, 0x19a9, 0x19b2, 0x3, 0x2, 0x2, 
       0x2, 0x19aa, 0x19ab, 0x5, 0x1d0, 0xe9, 0x2, 0x19ab, 0x19ac, 0x7, 
       0x53, 0x2, 0x2, 0x19ac, 0x19ad, 0x7, 0x53, 0x2, 0x2, 0x19ad, 0x19ae, 
       0x7, 0x53, 0x2, 0x2, 0x19ae, 0x19af, 0x5, 0x1d2, 0xea, 0x2, 0x19af, 
       0x19b0, 0x7, 0x2, 0x2, 0x3, 0x19b0, 0x19b2, 0x3, 0x2, 0x2, 0x2, 0x19b1, 
       0x199b, 0x3, 0x2, 0x2, 0x2, 0x19b1, 0x199e, 0x3, 0x2, 0x2, 0x2, 0x19b1, 
       0x19a4, 0x3, 0x2, 0x2, 0x2, 0x19b1, 0x19aa, 0x3, 0x2, 0x2, 0x2, 0x19b2, 
       0x3b9, 0x3, 0x2, 0x2, 0x2, 0x19b3, 0x19b4, 0x5, 0x1d4, 0xeb, 0x2, 
       0x19b4, 0x19b5, 0x7, 0x2, 0x2, 0x3, 0x19b5, 0x19c1, 0x3, 0x2, 0x2, 
       0x2, 0x19b6, 0x19b7, 0x5, 0x1d2, 0xea, 0x2, 0x19b7, 0x19b8, 0x7, 
       0x62, 0x2, 0x2, 0x19b8, 0x19b9, 0x5, 0x1d4, 0xeb, 0x2, 0x19b9, 0x19ba, 
       0x7, 0x2, 0x2, 0x3, 0x19ba, 0x19c1, 0x3, 0x2, 0x2, 0x2, 0x19bb, 0x19bc, 
       0x5, 0x1d2, 0xea, 0x2, 0x19bc, 0x19bd, 0x7, 0x63, 0x2, 0x2, 0x19bd, 
       0x19be, 0x5, 0x1d4, 0xeb, 0x2, 0x19be, 0x19bf, 0x7, 0x2, 0x2, 0x3, 
       0x19bf, 0x19c1, 0x3, 0x2, 0x2, 0x2, 0x19c0, 0x19b3, 0x3, 0x2, 0x2, 
       0x2, 0x19c0, 0x19b6, 0x3, 0x2, 0x2, 0x2, 0x19c0, 0x19bb, 0x3, 0x2, 
       0x2, 0x2, 0x19c1, 0x3bb, 0x3, 0x2, 0x2, 0x2, 0x19c2, 0x19c3, 0x5, 
       0x1d6, 0xec, 0x2, 0x19c3, 0x19c4, 0x7, 0x2, 0x2, 0x3, 0x19c4, 0x19d5, 
       0x3, 0x2, 0x2, 0x2, 0x19c5, 0x19c6, 0x5, 0x1d4, 0xeb, 0x2, 0x19c6, 
       0x19c7, 0x7, 0x64, 0x2, 0x2, 0x19c7, 0x19c8, 0x5, 0x1d6, 0xec, 0x2, 
       0x19c8, 0x19c9, 0x7, 0x2, 0x2, 0x3, 0x19c9, 0x19d5, 0x3, 0x2, 0x2, 
       0x2, 0x19ca, 0x19cb, 0x5, 0x1d4, 0xeb, 0x2, 0x19cb, 0x19cc, 0x7, 
       0x65, 0x2, 0x2, 0x19cc, 0x19cd, 0x5, 0x1d6, 0xec, 0x2, 0x19cd, 0x19ce, 
       0x7, 0x2, 0x2, 0x3, 0x19ce, 0x19d5, 0x3, 0x2, 0x2, 0x2, 0x19cf, 0x19d0, 
       0x5, 0x1d4, 0xeb, 0x2, 0x19d0, 0x19d1, 0x7, 0x69, 0x2, 0x2, 0x19d1, 
       0x19d2, 0x5, 0x1d6, 0xec, 0x2, 0x19d2, 0x19d3, 0x7, 0x2, 0x2, 0x3, 
       0x19d3, 0x19d5, 0x3, 0x2, 0x2, 0x2, 0x19d4, 0x19c2, 0x3, 0x2, 0x2, 
       0x2, 0x19d4, 0x19c5, 0x3, 0x2, 0x2, 0x2, 0x19d4, 0x19ca, 0x3, 0x2, 
       0x2, 0x2, 0x19d4, 0x19cf, 0x3, 0x2, 0x2, 0x2, 0x19d5, 0x3bd, 0x3, 
       0x2, 0x2, 0x2, 0x19d6, 0x19d7, 0x5, 0x1d8, 0xed, 0x2, 0x19d7, 0x19d8, 
       0x7, 0x2, 0x2, 0x3, 0x19d8, 0x19e8, 0x3, 0x2, 0x2, 0x2, 0x19d9, 0x19da, 
       0x5, 0x1da, 0xee, 0x2, 0x19da, 0x19db, 0x7, 0x2, 0x2, 0x3, 0x19db, 
       0x19e8, 0x3, 0x2, 0x2, 0x2, 0x19dc, 0x19dd, 0x7, 0x62, 0x2, 0x2, 
       0x19dd, 0x19de, 0x5, 0x1d6, 0xec, 0x2, 0x19de, 0x19df, 0x7, 0x2, 
       0x2, 0x3, 0x19df, 0x19e8, 0x3, 0x2, 0x2, 0x2, 0x19e0, 0x19e1, 0x7, 
       0x63, 0x2, 0x2, 0x19e1, 0x19e2, 0x5, 0x1d6, 0xec, 0x2, 0x19e2, 0x19e3, 
       0x7, 0x2, 0x2, 0x3, 0x19e3, 0x19e8, 0x3, 0x2, 0x2, 0x2, 0x19e4, 0x19e5, 
       0x5, 0x1dc, 0xef, 0x2, 0x19e5, 0x19e6, 0x7, 0x2, 0x2, 0x3, 0x19e6, 
       0x19e8, 0x3, 0x2, 0x2, 0x2, 0x19e7, 0x19d6, 0x3, 0x2, 0x2, 0x2, 0x19e7, 
       0x19d9, 0x3, 0x2, 0x2, 0x2, 0x19e7, 0x19dc, 0x3, 0x2, 0x2, 0x2, 0x19e7, 
       0x19e0, 0x3, 0x2, 0x2, 0x2, 0x19e7, 0x19e4, 0x3, 0x2, 0x2, 0x2, 0x19e8, 
       0x3bf, 0x3, 0x2, 0x2, 0x2, 0x19e9, 0x19ea, 0x7, 0x60, 0x2, 0x2, 0x19ea, 
       0x19eb, 0x5, 0x1d6, 0xec, 0x2, 0x19eb, 0x19ec, 0x7, 0x2, 0x2, 0x3, 
       0x19ec, 0x3c1, 0x3, 0x2, 0x2, 0x2, 0x19ed, 0x19ee, 0x7, 0x61, 0x2, 
       0x2, 0x19ee, 0x19ef, 0x5, 0x1d6, 0xec, 0x2, 0x19ef, 0x19f0, 0x7, 
       0x2, 0x2, 0x3, 0x19f0, 0x3c3, 0x3, 0x2, 0x2, 0x2, 0x19f1, 0x19f2, 
       0x5, 0x1de, 0xf0, 0x2, 0x19f2, 0x19f3, 0x7, 0x2, 0x2, 0x3, 0x19f3, 
       0x1a00, 0x3, 0x2, 0x2, 0x2, 0x19f4, 0x19f5, 0x7, 0x56, 0x2, 0x2, 
       0x19f5, 0x19f6, 0x5, 0x1d6, 0xec, 0x2, 0x19f6, 0x19f7, 0x7, 0x2, 
       0x2, 0x3, 0x19f7, 0x1a00, 0x3, 0x2, 0x2, 0x2, 0x19f8, 0x19f9, 0x7, 
       0x55, 0x2, 0x2, 0x19f9, 0x19fa, 0x5, 0x1d6, 0xec, 0x2, 0x19fa, 0x19fb, 
       0x7, 0x2, 0x2, 0x3, 0x19fb, 0x1a00, 0x3, 0x2, 0x2, 0x2, 0x19fc, 0x19fd, 
       0x5, 0x1e8, 0xf5, 0x2, 0x19fd, 0x19fe, 0x7, 0x2, 0x2, 0x3, 0x19fe, 
       0x1a00, 0x3, 0x2, 0x2, 0x2, 0x19ff, 0x19f1, 0x3, 0x2, 0x2, 0x2, 0x19ff, 
       0x19f4, 0x3, 0x2, 0x2, 0x2, 0x19ff, 0x19f8, 0x3, 0x2, 0x2, 0x2, 0x19ff, 
       0x19fc, 0x3, 0x2, 0x2, 0x2, 0x1a00, 0x3c5, 0x3, 0x2, 0x2, 0x2, 0x1a01, 
       0x1a02, 0x5, 0x16e, 0xb8, 0x2, 0x1a02, 0x1a03, 0x7, 0x2, 0x2, 0x3, 
       0x1a03, 0x1a08, 0x3, 0x2, 0x2, 0x2, 0x1a04, 0x1a05, 0x5, 0x3c, 0x1f, 
       0x2, 0x1a05, 0x1a06, 0x7, 0x2, 0x2, 0x3, 0x1a06, 0x1a08, 0x3, 0x2, 
       0x2, 0x2, 0x1a07, 0x1a01, 0x3, 0x2, 0x2, 0x2, 0x1a07, 0x1a04, 0x3, 
       0x2, 0x2, 0x2, 0x1a08, 0x1a11, 0x3, 0x2, 0x2, 0x2, 0x1a09, 0x1a0a, 
       0x5, 0x1e2, 0xf2, 0x2, 0x1a0a, 0x1a0b, 0x7, 0x2, 0x2, 0x3, 0x1a0b, 
       0x1a10, 0x3, 0x2, 0x2, 0x2, 0x1a0c, 0x1a0d, 0x5, 0x1e6, 0xf4, 0x2, 
       0x1a0d, 0x1a0e, 0x7, 0x2, 0x2, 0x3, 0x1a0e, 0x1a10, 0x3, 0x2, 0x2, 
       0x2, 0x1a0f, 0x1a09, 0x3, 0x2, 0x2, 0x2, 0x1a0f, 0x1a0c, 0x3, 0x2, 
       0x2, 0x2, 0x1a10, 0x1a13, 0x3, 0x2, 0x2, 0x2, 0x1a11, 0x1a0f, 0x3, 
       0x2, 0x2, 0x2, 0x1a11, 0x1a12, 0x3, 0x2, 0x2, 0x2, 0x1a12, 0x3c7, 
       0x3, 0x2, 0x2, 0x2, 0x1a13, 0x1a11, 0x3, 0x2, 0x2, 0x2, 0x1a14, 0x1a15, 
       0x5, 0x1de, 0xf0, 0x2, 0x1a15, 0x1a16, 0x7, 0x60, 0x2, 0x2, 0x1a16, 
       0x1a17, 0x7, 0x2, 0x2, 0x3, 0x1a17, 0x3c9, 0x3, 0x2, 0x2, 0x2, 0x1a18, 
       0x1a19, 0x7, 0x60, 0x2, 0x2, 0x1a19, 0x1a1a, 0x7, 0x2, 0x2, 0x3, 
       0x1a1a, 0x3cb, 0x3, 0x2, 0x2, 0x2, 0x1a1b, 0x1a1c, 0x5, 0x1de, 0xf0, 
       0x2, 0x1a1c, 0x1a1d, 0x7, 0x61, 0x2, 0x2, 0x1a1d, 0x1a1e, 0x7, 0x2, 
       0x2, 0x3, 0x1a1e, 0x3cd, 0x3, 0x2, 0x2, 0x2, 0x1a1f, 0x1a20, 0x7, 
       0x61, 0x2, 0x2, 0x1a20, 0x1a21, 0x7, 0x2, 0x2, 0x3, 0x1a21, 0x3cf, 
       0x3, 0x2, 0x2, 0x2, 0x1a22, 0x1a23, 0x7, 0x46, 0x2, 0x2, 0x1a23, 
       0x1a24, 0x5, 0x4, 0x3, 0x2, 0x1a24, 0x1a25, 0x7, 0x47, 0x2, 0x2, 
       0x1a25, 0x1a26, 0x5, 0x1d6, 0xec, 0x2, 0x1a26, 0x1a27, 0x7, 0x2, 
       0x2, 0x3, 0x1a27, 0x1a41, 0x3, 0x2, 0x2, 0x2, 0x1a28, 0x1a29, 0x7, 
       0x46, 0x2, 0x2, 0x1a29, 0x1a2d, 0x5, 0xc, 0x7, 0x2, 0x1a2a, 0x1a2c, 
       0x5, 0x28, 0x15, 0x2, 0x1a2b, 0x1a2a, 0x3, 0x2, 0x2, 0x2, 0x1a2c, 
       0x1a2f, 0x3, 0x2, 0x2, 0x2, 0x1a2d, 0x1a2b, 0x3, 0x2, 0x2, 0x2, 0x1a2d, 
       0x1a2e, 0x3, 0x2, 0x2, 0x2, 0x1a2e, 0x1a30, 0x3, 0x2, 0x2, 0x2, 0x1a2f, 
       0x1a2d, 0x3, 0x2, 0x2, 0x2, 0x1a30, 0x1a31, 0x7, 0x47, 0x2, 0x2, 
       0x1a31, 0x1a32, 0x5, 0x1dc, 0xef, 0x2, 0x1a32, 0x1a33, 0x7, 0x2, 
       0x2, 0x3, 0x1a33, 0x1a41, 0x3, 0x2, 0x2, 0x2, 0x1a34, 0x1a35, 0x7, 
       0x46, 0x2, 0x2, 0x1a35, 0x1a39, 0x5, 0xc, 0x7, 0x2, 0x1a36, 0x1a38, 
       0x5, 0x28, 0x15, 0x2, 0x1a37, 0x1a36, 0x3, 0x2, 0x2, 0x2, 0x1a38, 
       0x1a3b, 0x3, 0x2, 0x2, 0x2, 0x1a39, 0x1a37, 0x3, 0x2, 0x2, 0x2, 0x1a39, 
       0x1a3a, 0x3, 0x2, 0x2, 0x2, 0x1a3a, 0x1a3c, 0x3, 0x2, 0x2, 0x2, 0x1a3b, 
       0x1a39, 0x3, 0x2, 0x2, 0x2, 0x1a3c, 0x1a3d, 0x7, 0x47, 0x2, 0x2, 
       0x1a3d, 0x1a3e, 0x5, 0x1b0, 0xd9, 0x2, 0x1a3e, 0x1a3f, 0x7, 0x2, 
       0x2, 0x3, 0x1a3f, 0x1a41, 0x3, 0x2, 0x2, 0x2, 0x1a40, 0x1a22, 0x3, 
       0x2, 0x2, 0x2, 0x1a40, 0x1a28, 0x3, 0x2, 0x2, 0x2, 0x1a40, 0x1a34, 
       0x3, 0x2, 0x2, 0x2, 0x1a41, 0x3d1, 0x3, 0x2, 0x2, 0x2, 0x1a42, 0x1a43, 
       0x9, 0x7, 0x2, 0x2, 0x1a43, 0x3d3, 0x3, 0x2, 0x2, 0x2, 0x2aa, 0x3d9, 
       0x3e0, 0x3e4, 0x3e8, 0x3f1, 0x3f5, 0x3f9, 0x3fb, 0x401, 0x406, 0x40d, 
       0x412, 0x414, 0x41a, 0x41f, 0x424, 0x429, 0x434, 0x442, 0x447, 0x44f, 
       0x456, 0x45c, 0x461, 0x46c, 0x46f, 0x47d, 0x482, 0x487, 0x48c, 0x492, 
       0x49c, 0x4a7, 0x4af, 0x4b9, 0x4c1, 0x4cd, 0x4d2, 0x4d5, 0x4da, 0x4e0, 
       0x4e8, 0x4f0, 0x4fd, 0x51a, 0x51f, 0x523, 0x52b, 0x534, 0x542, 0x545, 
       0x551, 0x554, 0x564, 0x569, 0x56f, 0x574, 0x57a, 0x57d, 0x580, 0x58c, 
       0x597, 0x5a5, 0x5ac, 0x5b5, 0x5bc, 0x5c1, 0x5d0, 0x5d7, 0x5dd, 0x5e1, 
       0x5e5, 0x5e9, 0x5ed, 0x5f2, 0x5f6, 0x5fa, 0x5fc, 0x601, 0x608, 0x60d, 
       0x60f, 0x615, 0x61a, 0x61e, 0x631, 0x636, 0x646, 0x64b, 0x651, 0x657, 
       0x659, 0x65d, 0x662, 0x666, 0x66e, 0x675, 0x67d, 0x680, 0x685, 0x68d, 
       0x692, 0x699, 0x6a0, 0x6a5, 0x6ac, 0x6b8, 0x6bd, 0x6c1, 0x6cb, 0x6d0, 
       0x6d8, 0x6db, 0x6e0, 0x6e8, 0x6eb, 0x6f0, 0x6f5, 0x6fa, 0x6ff, 0x706, 
       0x70b, 0x713, 0x718, 0x71d, 0x722, 0x728, 0x72e, 0x731, 0x734, 0x73d, 
       0x743, 0x749, 0x74c, 0x74f, 0x757, 0x75c, 0x761, 0x767, 0x76a, 0x775, 
       0x77e, 0x788, 0x78d, 0x798, 0x79d, 0x7aa, 0x7af, 0x7bb, 0x7c5, 0x7ca, 
       0x7d2, 0x7d5, 0x7dc, 0x7e4, 0x7ea, 0x7f3, 0x7fd, 0x801, 0x804, 0x80d, 
       0x81b, 0x81e, 0x827, 0x82c, 0x833, 0x838, 0x840, 0x84c, 0x853, 0x861, 
       0x877, 0x899, 0x8a5, 0x8ab, 0x8b6, 0x8c2, 0x8dc, 0x8e0, 0x8e5, 0x8e9, 
       0x8ed, 0x8f5, 0x8f9, 0x8fd, 0x904, 0x90d, 0x915, 0x924, 0x930, 0x936, 
       0x93c, 0x951, 0x956, 0x95b, 0x966, 0x971, 0x97b, 0x97e, 0x983, 0x98c, 
       0x992, 0x99b, 0x99f, 0x9a3, 0x9a8, 0x9bb, 0x9c5, 0x9db, 0x9e2, 0x9ea, 
       0x9f2, 0x9fd, 0xa14, 0xa1e, 0xa29, 0xa3f, 0xa44, 0xa4a, 0xa52, 0xa56, 
       0xa5b, 0xa63, 0xa69, 0xa6d, 0xa71, 0xa75, 0xa7b, 0xa80, 0xa85, 0xa89, 
       0xa8d, 0xa93, 0xa98, 0xa9d, 0xaa1, 0xaa5, 0xaa7, 0xaac, 0xab1, 0xab6, 
       0xaba, 0xabe, 0xac2, 0xac7, 0xacf, 0xad5, 0xad9, 0xadd, 0xae1, 0xae7, 
       0xaec, 0xaf1, 0xaf5, 0xaf9, 0xafb, 0xb00, 0xb0f, 0xb1d, 0xb29, 0xb32, 
       0xb41, 0xb4e, 0xb57, 0xb5d, 0xb64, 0xb69, 0xb70, 0xb75, 0xb7c, 0xb81, 
       0xb88, 0xb8d, 0xb96, 0xb9b, 0xb9f, 0xba3, 0xba8, 0xbaf, 0xbb6, 0xbbb, 
       0xbc2, 0xbc7, 0xbce, 0xbd3, 0xbdc, 0xbe1, 0xbe5, 0xbec, 0xbf2, 0xbf9, 
       0xc00, 0xc07, 0xc0f, 0xc16, 0xc1e, 0xc22, 0xc29, 0xc30, 0xc37, 0xc3f, 
       0xc46, 0xc4e, 0xc54, 0xc5a, 0xc66, 0xc6b, 0xc70, 0xc7b, 0xc84, 0xc8b, 
       0xc92, 0xc97, 0xc9b, 0xca4, 0xcaf, 0xcb1, 0xcbb, 0xcc6, 0xcd1, 0xcdc, 
       0xce7, 0xcf3, 0xcf5, 0xd0a, 0xd0c, 0xd1f, 0xd21, 0xd2d, 0xd2f, 0xd3e, 
       0xd40, 0xd4a, 0xd58, 0xd5c, 0xd60, 0xd62, 0xd79, 0xd84, 0xd8a, 0xd98, 
       0xd9d, 0xda6, 0xdab, 0xdb3, 0xdbf, 0xdc5, 0xdd0, 0xdd8, 0xde0, 0xde2, 
       0xde8, 0xded, 0xdf6, 0xdfb, 0xdff, 0xe05, 0xe0a, 0xe11, 0xe16, 0xe26, 
       0xe38, 0xe3d, 0xe45, 0xe4c, 0xe54, 0xe59, 0xe67, 0xe6c, 0xe7c, 0xe87, 
       0xe8c, 0xe91, 0xe9d, 0xea7, 0xeb1, 0xebb, 0xec5, 0xecf, 0xedc, 0xee4, 
       0xee7, 0xeec, 0xef2, 0xefa, 0xf03, 0xf1a, 0xf40, 0xf45, 0xf49, 0xf51, 
       0xf5b, 0xf6a, 0xf6d, 0xf7a, 0xf7d, 0xf8f, 0xf95, 0xf9b, 0xfa3, 0xfa8, 
       0xfae, 0xfb1, 0xfb4, 0xfca, 0xfd6, 0xfe8, 0xff1, 0x1003, 0x1013, 
       0x1018, 0x1031, 0x1038, 0x1040, 0x1046, 0x1050, 0x1058, 0x105f, 0x106a, 
       0x1072, 0x107a, 0x107c, 0x1081, 0x108a, 0x108f, 0x1093, 0x1099, 0x109e, 
       0x10a4, 0x10c0, 0x10c5, 0x10e1, 0x10e6, 0x10ee, 0x10f4, 0x10f8, 0x10ff, 
       0x1104, 0x1108, 0x1117, 0x111e, 0x1128, 0x112d, 0x1132, 0x113e, 0x1143, 
       0x114a, 0x1154, 0x1159, 0x1160, 0x116e, 0x1179, 0x1180, 0x118c, 0x1191, 
       0x119f, 0x11a2, 0x11a7, 0x11b1, 0x11b4, 0x11ba, 0x11bf, 0x11c5, 0x11ca, 
       0x11d2, 0x11d7, 0x11e0, 0x11e5, 0x11eb, 0x11f0, 0x11f6, 0x11fd, 0x1200, 
       0x1203, 0x120d, 0x1215, 0x121b, 0x121e, 0x1221, 0x122c, 0x1237, 0x123c, 
       0x1242, 0x1245, 0x1259, 0x1263, 0x1277, 0x127c, 0x128d, 0x1292, 0x12a8, 
       0x12ad, 0x12ba, 0x12ce, 0x12d3, 0x12db, 0x12de, 0x12ea, 0x12f9, 0x12ff, 
       0x1309, 0x131c, 0x1320, 0x1323, 0x132d, 0x133f, 0x1342, 0x134c, 0x1353, 
       0x135b, 0x1368, 0x1371, 0x138a, 0x139b, 0x13c1, 0x13e9, 0x1410, 0x141d, 
       0x1423, 0x1430, 0x1441, 0x1463, 0x146b, 0x1470, 0x1474, 0x1478, 0x1481, 
       0x1485, 0x1489, 0x1495, 0x149f, 0x14a9, 0x14b9, 0x14c5, 0x14cc, 0x14d3, 
       0x14ec, 0x14f4, 0x14f9, 0x1507, 0x1513, 0x1520, 0x1523, 0x152a, 0x1534, 
       0x153c, 0x1548, 0x1550, 0x1558, 0x155f, 0x1583, 0x158f, 0x15b1, 0x15c2, 
       0x15d2, 0x15dc, 0x15e8, 0x160e, 0x161a, 0x1626, 0x1649, 0x164e, 0x1654, 
       0x165e, 0x1662, 0x1667, 0x166f, 0x1675, 0x1679, 0x167d, 0x1681, 0x1689, 
       0x168e, 0x1693, 0x1697, 0x169b, 0x16a3, 0x16a8, 0x16ad, 0x16b1, 0x16b5, 
       0x16b9, 0x16be, 0x16c3, 0x16c8, 0x16cc, 0x16d0, 0x16d6, 0x16db, 0x16e3, 
       0x16e9, 0x16ed, 0x16f1, 0x16f5, 0x16fd, 0x1702, 0x1707, 0x170b, 0x170f, 
       0x1713, 0x171b, 0x172e, 0x1740, 0x174e, 0x1758, 0x1769, 0x1778, 0x1782, 
       0x1788, 0x1790, 0x1795, 0x179d, 0x17a2, 0x17aa, 0x17af, 0x17b7, 0x17bc, 
       0x17c6, 0x17cb, 0x17d0, 0x17d4, 0x17d9, 0x17e1, 0x17e9, 0x17ee, 0x17f6, 
       0x17fb, 0x1803, 0x1808, 0x1812, 0x1817, 0x181c, 0x1823, 0x182b, 0x1833, 
       0x183b, 0x1843, 0x184d, 0x1855, 0x185f, 0x1863, 0x186b, 0x1873, 0x187b, 
       0x1885, 0x188d, 0x1897, 0x189d, 0x18a5, 0x18b5, 0x18ba, 0x18c1, 0x18d2, 
       0x18de, 0x18e7, 0x18ee, 0x18f9, 0x1901, 0x1911, 0x192b, 0x1936, 0x193a, 
       0x1944, 0x194e, 0x1958, 0x1962, 0x196c, 0x197b, 0x1999, 0x19b1, 0x19c0, 
       0x19d4, 0x19e7, 0x19ff, 0x1a07, 0x1a0f, 0x1a11, 0x1a2d, 0x1a39, 0x1a40, 
  };

  _serializedATN.insert(_serializedATN.end(), serializedATNSegment0,
    serializedATNSegment0 + sizeof(serializedATNSegment0) / sizeof(serializedATNSegment0[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment1,
    serializedATNSegment1 + sizeof(serializedATNSegment1) / sizeof(serializedATNSegment1[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment2,
    serializedATNSegment2 + sizeof(serializedATNSegment2) / sizeof(serializedATNSegment2[0]));


  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

JavaParser::Initializer JavaParser::_init;
